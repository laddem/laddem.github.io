[{"authors":null,"categories":null,"content":"O Laborat√≥rio de An√°lise de Dados em Demografia √© parte do N√∫cleo de Estudos de Popula√ß√£o Elza Berqu√≥ e dedica-se a promo√ß√£o do conhecimento na √°rea de demografia, ci√™ncias sociais quantitativas e ci√™ncia de dados, oferecendo cursos, eventos e infraestrutura para alunos, pesquisadores e o p√∫blico em geral.\n","date":1554595200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1554595200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://laddem.github.io/author/laddem/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/laddem/","section":"authors","summary":"O Laborat√≥rio de An√°lise de Dados em Demografia √© parte do N√∫cleo de Estudos de Popula√ß√£o Elza Berqu√≥ e dedica-se a promo√ß√£o do conhecimento na √°rea de demografia, ci√™ncias sociais quantitativas e ci√™ncia de dados, oferecendo cursos, eventos e infraestrutura para alunos, pesquisadores e o p√∫blico em geral.","tags":null,"title":"LADDEM","type":"authors"},{"authors":null,"categories":null,"content":"\r\r Table of Contents\r O que voc√™ vai aprender O curso Programa√ß√£o Instrutores Links √∫teis  \r\rO que voc√™ vai aprender  Conceitos chave no uso do software R, como objetos, tipos, vetores, data.frames, matrizes, fun√ß√µes e f√≥rmulas Importa√ß√£o, manipula√ß√£o, e visualiza√ß√£o b√°sica Computar estat√≠sticas descritivas e produzir visualiza√ß√µes simples B√°sico de programa√ß√£o, testes l√≥gicos, controle de fluxo e itera√ß√£o  O curso 5 dias, com aulas √† noite, no formato workshop misturando teoria e pr√°tica, com muitos exerc√≠cios para voc√™ colocar a m√£o na massa.\nPrograma√ß√£o \rB√°sico\rOs conceitos-chave que v√£o fundamentar sua aprendizagem e seu uso da l√≠ngua\n\r\rManipulando dados\rPrimeiros passos: trabalhando com bancos de dados em R\n\r\rEstat√≠stica e Visualiza√ß√£o\rFun√ß√µes para estat√≠sticas descritivas e gr√°ficos em R\n\r\rSolu√ß√µes\rSolu√ß√µes para os exerc√≠cios feitos em sala e os exerc√≠cios de revis√£o do final das aulas.\n\r\rInstrutores Nat√°lia Martins Arruda\nVin√≠cius de Souza Maia\nLinks √∫teis Ci√™ncia de dados em R\nHands-on Programming with R\n","date":1623628800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1623628800,"objectID":"987bd01cd5ff1b5a4fefdb24f93f1a93","permalink":"https://laddem.github.io/courses/rbase/","publishdate":"2021-06-14T00:00:00Z","relpermalink":"/courses/rbase/","section":"courses","summary":"D√™ os seus primeiros passos para a an√°lise de dados em R","tags":null,"title":"üìä Aprenda o b√°sico da linguagem R","type":"book"},{"authors":null,"categories":null,"content":"\r\r Table of Contents\r O que voc√™ vai aprender O curso Programa√ß√£o Instrutores Links √∫teis  \r\rO que voc√™ vai aprender  A filosofia de design por tr√°s de um dos pacotes mais populares no R Importa√ß√£o, Manipula√ß√£o e Visualiza√ß√£o de dados na pr√°tica tidyr, dplyr, ggplot2 e v√°rios outros pacotes para simplificar sua rotina de an√°lise de dados  O curso Uma semana, com aulas √† noite, no formato workshop, com muitos exerc√≠cios para praticar e pegar o jeito.\nPrograma√ß√£o \rreadr, tibble e tidyr\rUm modelo de ci√™ncia de dados Uma forma esquem√°tica, mas √∫til de encarar o processo de an√°lise de dados e de produ√ß√£o de conhecimento a partir de informa√ß√µes secund√°rias √© esta figura:\n\r\rstringr, forcats e dplyr\rOpera√ß√µes em vari√°veis e bancos de dados Hoje vamos apresentar dois pacotes com finalidades mais espec√≠ficas para trabalhar com vari√°veis de tipo caractere e fator e um pacote super importante para as opera√ß√µes com bancos de dados.\n\r\rggplot2\rO pacote ggplot2 e a \u0026ldquo;gram√°tica dos gr√°ficos\u0026rdquo; Ainda me lembro da primeira vez que li o terceiro cap√≠tulo de R for Data Science em que o conceito de visualiza√ß√£o de dados √© apresentado junto com a ideia de data.\n\r\rpurrr\rO autor dos pacotes do tidyverse core √© completamente fascinado por gatos, por isso, tantas refer√™ncias ao bicho nos nomes dos pacotes. \u0026ldquo;Purr\u0026rdquo; (em ingl√™s) √© o som que os gatos fazem quando sentem prazer.\n\r\rSolu√ß√µes\rSolu√ß√µes dos exerc√≠cios\n\r\rInstrutores Vin√≠cius de Souza Maia\nNat√°lia Martins Arruda\nLinks √∫teis Ci√™ncia de dados em R\nR for Data Science\n","date":1621728000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1621728000,"objectID":"02eadce3bea228c4a3968729e322add5","permalink":"https://laddem.github.io/courses/tidyverse/","publishdate":"2021-05-23T00:00:00Z","relpermalink":"/courses/tidyverse/","section":"courses","summary":"Aprenda a utilizar o tidyverse nas suas an√°lises de dados.","tags":null,"title":"üìä Aprenda a utilizar o tidyverse","type":"book"},{"authors":null,"categories":null,"content":"Fundamentos A interface do R e do RStudio O RStudio oferece uma maneira de falar com seu computador. O R te fornece um idioma para falar. Para come√ßar, abra o RStudio da mesma forma que voc√™ abriria qualquer outro aplicativo em seu computador.\nVoc√™ digita o c√≥digo R na linha superior do painel do console RStudio e, em seguida, clica em Enter para execut√°-lo. O c√≥digo que voc√™ digita √© chamado de comando, porque ele comandar√° seu computador para fazer algo por voc√™. A linha em que voc√™ digita √© chamada de linha de comando.\nA interface do RStudio √© simples. Para criar um script novo √© necess√°rio ir em File \u0026gt; New File \u0026gt; R \u0026gt; script no menu no canto esquerdo. √â recomendado fortemente que voc√™ escreva e edite todo o seu c√≥digo R em um script antes de execut√°-lo no console. Por qu√™? Esse h√°bito cria um registro reproduz√≠vel de seu trabalho. Ao terminar o dia, voc√™ pode salvar seu script e us√°-lo para executar novamente toda a sua an√°lise no dia seguinte, al√©m disso os scripts s√£o muito √∫teis para editar e revisar seu c√≥digo e s√£o uma √≥tima c√≥pia de seu trabalho para compartilhar com outras pessoas. Para salvar √© s√≥ clicar no disquete no painel do script e depois ir em File \u0026gt; Save.\nQuando voc√™ digita um comando no script e pressiona Ctrl + Enter ou Run, o computador executa o comando e mostra os resultados no console logo abaixo. Por exemplo, se voc√™ digitar 1 + 1 e pressionar Ctrl + Enter, o RStudio exibir√°:\n1 + 1\r ## [1] 2\r Objetos Agora que voc√™ j√° sabe como o R funciona, vamos ver alguns operadores e objetos que podem ser criados. Se voc√™ quer que o R crie um vetor, use o operador :, esse operador vai retornar um conjunto unidimensional de n√∫meros:\n1:6\r ## [1] 1 2 3 4 5 6\r Mas quando voc√™ roda assim dessa forma, o R gera o vetor que voc√™ poder√° ver o resultado no console, por√©m esse vetor n√£o vai ficar salvo em lugar nenhum, √© basicamente uma pegada de seis n√∫meros que existiram naquela execu√ß√£o pontual. Se voc√™ quiser usar novamente essa sequ√™ncia de n√∫mero, voc√™ precisa pedir para o R guardar ele em algum lugar. Voc√™ pode fazer isso criando um objeto.\nO R permite salvar dados armazenando-os dentro de um objeto R. O que √© um objeto? Apenas um nome que voc√™ pode usar para acessar os dados armazenados. Por exemplo, voc√™ pode salvar dados em um objeto como a ou b ou qualquer nome que fa√ßa sentido para o que voc√™ est√° fazendo. Sempre que o R encontrar o objeto, ele ir√° substitu√≠-lo pelos dados salvos nele, da seguinte forma:\na \u0026lt;- 1\ra\r ## [1] 1\r a + 2\r ## [1] 3\r Ou seja, para voc√™ criar um objeto no R, voc√™ escolhe um nome e depois usa o s√≠mbolo \u0026lt;- para salvar o dado naquele objeto no qual voc√™ deu um nome. No caso do exemplo acima, o R criou um objeto, deu a ele seu nome e armazenou nele tudo o que vier ap√≥s a seta. Portanto, a \u0026lt;- 1 armazena 1 em um objeto denominado a.\nVoc√™ tamb√©m pode usar seu objeto em novos comandos R. J√° que armazenou anteriormente o valor de 1, agora voc√™ est√° adicionando 1 ao a armazenando no objeto a + 1\nEnt√£o, como voc√™ faria para armazenar esse vetor de seis n√∫meros 1:6, que a gente criou anteriormente, em um objeto?\nvetor \u0026lt;- 1:6\rvetor\r ## [1] 1 2 3 4 5 6\r Quando voc√™ cria um objeto no R, esse objeto vai aparecer armazenado na se√ß√£o Environment no lado direito, do lado da se√ß√£o script (essa que voc√™ digita os comandos para us√°-los depois).\nVoc√™ pode nomear um objeto no R de praticamente qualquer nome, s√≥ tem algumas regras: n√£o pode come√ßar com n√∫mero, e tamb√©m n√£o pode ter alguns s√≠mbolos, como por exemplo: ^, !, $, @, +, -, /, % or *.\nAl√©m disso, o R √© case-sensitive, portanto se eu colocar um nome de objeto como Name e outro como name eles v√£o se referir a objetos diferentes, ou seja, ele considera se a letra √© ma√≠uscula ou min√∫scula.\nE se voc√™ criar um objeto, salvar uma informa√ß√£o neste objeto e logo em seguida salvar outra, ele subscreve o que estava anteriormente, ent√£o tome cuidado para n√£o perder informa√ß√µes. O exemplo abaixo mostra exatamente isso:\nmeu_numero \u0026lt;- 1\rmeu_numero\r ## [1] 1\r meu_numero \u0026lt;- 999\rmeu_numero\r ## [1] 999\r Com a fun√ß√£o ls() voc√™ consegue listar no console todos os objetos criados.\nO que √© poss√≠vel fazer com esses objetos no R que voc√™ criou? Muita coisa! Por exemplo: √© poss√≠vel usar o objeto vetor e fazer uma opera√ß√£o de divis√£o\nvetor/2\r ## [1] 0.5 1.0 1.5 2.0 2.5 3.0\r vetor - 1\r ## [1] 0 1 2 3 4 5\r O R dividiu por 2 todos os n√∫meros dentro daquele vetor. Se voc√™ subtrair 1 desse objeto, o R vai subtrair 1 de cada elemento dentro deste objeto.\nQuando voc√™ usa dois ou mais vetores em uma opera√ß√£o, o R alinhar√° os vetores e executar√° uma sequ√™ncia de opera√ß√µes individuais. Por exemplo, quando voc√™ executa vetor * vetor, o R alinha os dois vetores de dados e, em seguida, multiplica o primeiro elemento do vetor 1 pelo primeiro elemento do vetor 2, ent√£o multiplica o segundo elemento do vetor 1 pelo segundo elemento do vetor 2, e assim por diante, at√© que cada elemento tenha sido multiplicado. O resultado ser√° um novo vetor com o mesmo comprimento dos dois primeiros:\nvetor * vetor\r ## [1] 1 4 9 16 25 36\r Se voc√™ der ao R uma opera√ß√£o com dois vetores de comprimentos diferentes, o R repetir√° o vetor mais curto at√© que seja do mesmo tamanho do vetor maior e, em seguida, far√° as contas. Esta n√£o √© uma mudan√ßa permanente - o vetor mais curto ter√° seu tamanho original depois que o R fizer as contas. Se o comprimento do vetor curto n√£o se dividir igualmente no comprimento do vetor longo, o R retornar√° uma mensagem de aviso. Esse comportamento √© conhecido como reciclagem de vetor e ajuda o R a fazer opera√ß√µes em elementos:\nvetor * 1:4\r ## Warning in vetor * 1:4: comprimento do objeto maior n√£o √© m√∫ltiplo do\r## comprimento do objeto menor\r ## [1] 1 4 9 16 5 12\r vetor * 1:2\r ## [1] 1 4 3 8 5 12\r Por√©m, √© preciso cuidado pois se voc√™ n√£o estava querendo reciclar, √© poss√≠vel cometer erros. No exemplo abaixo, eu crio um segundo vetor com os valores para multiplica√ß√£o, mas ele tem tamanho menor que o primeiro. Por isso, √© bom ficar atento aos Warning message:s:\nvetor2 \u0026lt;- c(1, 2, 3, 4, 5)\rvetor * vetor2\r ## Warning in vetor * vetor2: comprimento do objeto maior n√£o √© m√∫ltiplo do\r## comprimento do objeto menor\r ## [1] 1 4 9 16 25 6\r Fun√ß√µes O R vem com muitas fun√ß√µes instaladas. Praticamente tudo que voc√™ v√™ que n√£o s√£o objetos que voc√™ criou s√£o fun√ß√µes e seus componentes. Por isso, dizemos que, no seu n√∫cleo, o R √© uma linguagem \u0026ldquo;funcional\u0026rdquo;. Vejamos alguns exemplos de fun√ß√µes:\nround(3.1415)\r ## [1] 3\r factorial(3)\r ## [1] 6\r Exerc√≠cio S√≥ de olhar para as fun√ß√µes e seus resultados, voc√™ consegu√≠ria dizer:\n O que cada fun√ß√£o faz? Quais entradas (inputs) ela pede? Qual sa√≠da ela produz (output)? Que op√ß√µes alternativas (argumentos) elas poderiam conter?  Argumentos As informa√ß√µes que s√£o colocadas dentro dos () depois do nome de uma fun√ß√£o s√£o chamados de argumentos. Em geral, uma fun√ß√£o tem alguns argumentos obrigat√≥rios (o valor a ser arrendodado, o n√∫mero para calcular o fatorial) e argumentos opcionais (arredondar para cima ou para baixo? descartar valores nulos?).\nmean(1:6)\r ## [1] 3.5\r mean(vetor)\r ## [1] 3.5\r vetor_com_nulo \u0026lt;- c(1, 2, 3, 4, 5, 6, NA)\rmean(vetor_com_nulo)\r ## [1] NA\r mean(vetor_com_nulo, na.rm = TRUE)\r ## [1] 3.5\r Argumentos obrigat√≥rios e opcionais tornam as nossas fun√ß√µes mais flex√≠veis. Essa flexibilidade √© crucial para muitas opera√ß√µes, pois podemos passar fun√ß√µes como argumentos de outras fun√ß√µes. Por exemplo:\nround(mean(vetor))\r ## [1] 4\r Quando voc√™ re√∫ne as fun√ß√µes dessa forma, o R vai avaliar a fun√ß√£o de dentro para fora, como uma boneca matrioshka:\nresultado \u0026lt;- vetor\rresultado\r ## [1] 1 2 3 4 5 6\r resultado \u0026lt;- mean(resultado)\rresultado\r ## [1] 3.5\r resultado \u0026lt;- round(resultado)\rresultado\r ## [1] 4\r Outro exemplo de argumentos opcionais √© a fun√ß√£o sample, que produz amostras aleat√≥rias:\nsample(x = vetor, size = 1)\r ## [1] 4\r sample(x = vetor, size = 1)\r ## [1] 1\r sample(x = vetor, size = 1)\r ## [1] 1\r Com os argumentos opcionais, podemos mudar detalhes do processo de amostragem\nsample(x = vetor, size = 1, prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))\r ## [1] 4\r E ao mudar as probabilidades de como cada amostra vai ser selecionada, eu criei um dado viciado!\nVoc√™ pode verificar os argumentos de uma fun√ß√£o com:\nargs(sample)\r ## function (x, size, replace = FALSE, prob = NULL) ## NULL\r Exerc√≠cio Repita a opera√ß√£o de sample acima com o dado \u0026ldquo;viciado\u0026rdquo; e com o dado \u0026ldquo;limpo\u0026rdquo; e verifique se voc√™ consegue perceber empiricamente que meu dado est√° \u0026ldquo;viciado\u0026rdquo;.\nQue outros argumentos existem na fun√ß√£o sample? Qual o papel do argumento replace?\nSua primeira fun√ß√£o Ok, mas suponha que voc√™ esteja cansado de repetir as coisas no seu programa. Existe uma opera√ß√£o que voc√™ realiza de novo e novo, e ela √© relativamente simples, mas √© um t√©dio ficar copiando e colando a mesma coisa. Por exemplo, se voc√™ tem o vetor que criamos com seis n√∫meros, e precisa sortear dois valores e somar seu resultado, como se estivesse jogando dois dados de 6 faces e somando os resultados?\nx \u0026lt;- sample(vetor, size = 1)\ry \u0026lt;- sample(vetor, size = 1)\rx + y\r ## [1] 10\r Seu c√≥digo funciona bem, mas voc√™ quer simplificar isso para uma fun√ß√£o que fa√ßa tudo de uma vez, podemos chamar ela de role, como se fosse \u0026ldquo;role dois dados\u0026rdquo;.\nrole()\r ## [1] 3\r role()\r ## [1] 3\r role()\r ## [1] 11\r A fun√ß√£o role n√£o existe no R base, mas voc√™ mesmo pode constru√≠-la:\nrole \u0026lt;- function() {\rx \u0026lt;- sample(vetor, size = 1)\ry \u0026lt;- sample(vetor, size = 1)\rx + y\r}\rrole()\r ## [1] 7\r Pause para contemplar os diferentes elementos do construtor de fun√ß√µes do R:\n role √© o nome da fun√ß√£o, e ele deve ser atribu√≠do \u0026lt;- para que voc√™ possa chamar sua fun√ß√£o function √© uma fun√ß√£o que constr√≥i fun√ß√µes, e os argumentos dela que v√£o nos parenteses s√£o aqueles que o usu√°rio dever√° digitar. Nesse caso, nenhum argumento √© necess√°rio. Os {} indicam o in√≠cio e o fim do corpo da fun√ß√£o, onde a magia acontece. Ao rodar o construtor da fun√ß√£o, nada acontece. A fun√ß√£o s√≥ entra em funcionamento na hora que o usu√°rio a utiliza posteriormente role().  Exerc√≠cio Escreva uma fun√ß√£o que role 2 dados de 10 faces e some seus resultados.\nProgramas (scripts) Na maioria das situa√ß√µes, esses conceitos soltos que introduzimos n√£o s√£o muito √∫teis isoladamente. Afinal de contas, objetos, fun√ß√µes e n√∫meros individuais n√£o servem para muita coisa. Esses conceitos ganham corpo quando os utilizamos juntos para produzir nossos programas. O que s√£o programas? A met√°fora mais comumemente utilizada √© a culin√°ria. Um programa √© uma sequ√™ncia de instru√ß√µes, uma receita para produzir alguma coisa. A diferen√ßa √© que ao inv√©s de produtos culin√°rios, os ingredientes s√£o informa√ß√µes na mem√≥ria de um computador, e ao inv√©s de um prato, estamos tentando produzir resultados que podem ser analisados: estat√≠sticas descritivas, representa√ß√µes gr√°ficas, modelos matem√°ticos, tabelas, etc.\nFalaremos mais sobre programas e estrat√©gias de constru√ß√£o de programas (se der tempo), em outra aula. Por aqui, seria interessante que voc√™s levassem adiante a no√ß√£o de que o programa √© o conjunto da obra. √â comum desenvolvermos ou encontrarmos programas para:\n importar e corrigir quaisquer problemas nos meus dados produzir estat√≠sticas descritivas a partir de meus dados produzir diversos gr√°ficos que descrevem meus dados produzir tabula√ß√µes e export√°-las para outros softwares  Como v√°rios aspectos do R, a flexibilidade aqui √© imensa, e voc√™s s√£o livres para definir o escopo dos seus programas. Voc√™ vai preferir colocar tudo num programa s√≥, ou talvez divid√≠-lo em diversos programas e tarefas menores? Cada abordagem carrega consigo vantagens e desvantagens que voc√™s ter√£o que decidir se valem ou n√£o a pena.\nPacotes Voc√™ n√£o √© a √∫nica pessoa que escreve suas pr√≥prias fun√ß√µes com R. Muitos professores, programadores e estat√≠sticos usam R para projetar ferramentas que podem ajudar as pessoas a analisar dados. Eles ent√£o tornam essas ferramentas gratuitas para qualquer pessoa usar. Para usar essas ferramentas, basta baix√°-las. Eles re√∫nem cole√ß√µes pr√©-montadas de fun√ß√µes e objetos chamados pacotes. Veremos o b√°sico aqui.\nVamos usar a fun√ß√£o qplot para fazer alguns gr√°ficos r√°pidos. qplot vem no pacote ggplot2, o pacote popular para fazer gr√°ficos. Antes de usar o qplot, ou qualquer outra coisa no pacote ggplot2, voc√™ precisa fazer o download e instal√°-lo.\nOs pacotes do R em geral est√£o hospedados em http://cran.r-project.org, o mesmo site de onde voc√™ baixou sua vers√£o do R. No entanto, voc√™ n√£o precisa visitar o site para baixar um pacote R; voc√™ pode baixar pacotes direto da linha de comando do R.\ninstall.packages('ggplot2')\r √â isso. O R far√° com que seu computador visite o site, baixe ggplot2 e instale o pacote em seu disco r√≠gido exatamente onde o R deseja encontr√°-lo. Agora voc√™ tem o pacote ggplot2. Se voc√™ gostaria de instalar outro pacote, substitua ggplot2 pelo nome do seu pacote no c√≥digo.\nAjuda No R Existem mais de 1.000 fun√ß√µes no n√∫cleo do R e novas fun√ß√µes s√£o criadas o tempo todo. Isso pode ser muito material para memorizar e aprender! Felizmente, cada fun√ß√£o R vem com sua pr√≥pria p√°gina de ajuda, que voc√™ pode acessar digitando o nome da fun√ß√£o ap√≥s um ponto de interroga√ß√£o. Por exemplo, cada um desses comandos abrir√° uma p√°gina de ajuda. Procure as p√°ginas que aparecem na guia Ajuda do painel inferior direito do RStudio:\n?sqrt\r?log10\r?sample\r As p√°ginas de ajuda contem informa√ß√µes √∫teis sobre o que cada fun√ß√£o faz. Essas p√°ginas de ajuda tamb√©m servem como documenta√ß√£o de c√≥digo, portanto, pode ser algo um pouco chato. Muitas vezes parecem ter sido escritas para pessoas que j√° entendem a fun√ß√£o e n√£o precisam de ajuda. N√£o deixe que isso te fa√ßa desistir de entender uma fun√ß√£o que voc√™ queira usar - voc√™ pode ganhar muito com uma p√°gina de ajuda examinando-a em busca de informa√ß√µes que fa√ßam sentido e ignorando o resto. Essa t√©cnica inevitavelmente o levar√° √† parte mais √∫til de cada p√°gina de ajuda: a parte inferior. Aqui, quase todas as p√°ginas de ajuda incluem algum c√≥digo de exemplo que coloca a fun√ß√£o em a√ß√£o. Executar esse c√≥digo √© uma √≥tima maneira de aprender com o exemplo dado.\nSe voc√™ gostaria de consultar a p√°gina de ajuda de uma fun√ß√£o, mas esqueceu o nome da fun√ß√£o, voc√™ pode pesquisar por palavra-chave. Para fazer isso, digite dois pontos de interroga√ß√£o seguidos por uma palavra-chave na linha de comando de R, o R exibir√° uma lista de links para p√°ginas de ajuda relacionadas √† palavra-chave. Voc√™ pode pensar nisso como a p√°gina de ajuda para a p√°gina de ajuda:\n??log\r Muitos pacotes tamb√©m incluem vinhetas, que s√£o pequenas aulinhas que resumem as principais fun√ß√µes de um pacote atrav√©s de explica√ß√µes de uso detalhados. Voc√™ pode ver as vinhetas dispon√≠veis num pacote instalado assim:\nvignette(package = \u0026quot;ggplot2\u0026quot;)\r E a vinheta em si √© acessada assim:\nvignette(\u0026quot;ggplot2-specs\u0026quot;, package = \u0026quot;ggplot2\u0026quot;)\r Que deve abrir a vinheta na sua se√ß√£o \u0026ldquo;Help\u0026rdquo; do RStudio. A maioria dessas vinhetas tamb√©m est√° dispon√≠vel online numa consulta r√°pida ao Google.\nOnline Em geral, ap√≥s uma consulta a p√°gina de ajuda, pode ser que voc√™ n√£o esteja satisfeito. Voc√™ pode complementar sua p√°gina de ajuda com diversos recursos online. Vamos deixar alguns links abaixo que utilizamos cotidianamente.\n Google: em geral, uma pesquisa com \u0026ldquo;r \u0026lt;fun√ß√£o\u0026gt;\u0026rdquo; ou \u0026ldquo;r \u0026lt;pacote\u0026gt;\u0026rdquo; te leva para onde voc√™ quer ir. Stack Overflow: similar, mas no stackoverflow se usam [tags], ent√£o seria algo como [r][pacote] sua pergunta RStudio Community: mais pra perguntas relacionadas ao RStudio Lista R-Br: lista ativa e em portugu√™s, em geral, o pessoal √© prestativo. RStudio Tips - Twitter: dicas no twitter para ir melhorando no cotidiano.  Exerc√≠cio Consulte a ajuda das fun√ß√µes sum, mean, min, max, range. Porque todas elas tem o argumento na.rm? O que argumento o trim em mean faz? Qual a melhor maneira de rapidamente entender o que uma fun√ß√£o faz atrav√©s da p√°gina de ajuda?\nObjetos em R Vetores J√° trabalhamos com alguns vetores l√° em cima, √© inevit√°vel. Pensou em salvar um objeto na mem√≥ria do computador no R, pensou em vetor. Pra ser preciso, estamos usando vetores at√¥micos. Os vetores at√¥micos s√£o em geral o objeto mais frequentemente usado em R. Para construir um, voc√™ utiliza a fun√ß√£o c:\nvetor \u0026lt;- c(1, 2, 3, 4, 5, 6)\rvetor\r ## [1] 1 2 3 4 5 6\r E voc√™ pode verificar se ele √© um vetor mesmo:\nis.vector(vetor)\r ## [1] TRUE\r is.vector testa se o objeto √© um vetor, e retorna TRUE se sim, e FALSE se n√£o.\nExerc√≠cio Teste se vetor2, criado anteriormente √© um vetor. Crie um vetor com os nomes de cinco pessoas da sala.\nTamanho Ao contr√°rio de outras linguagens, o R n√£o diferencia entre escalares e vetores. Se voc√™ salvar s√≥ 1 valor, ele salva num vetor at√¥mico de tamanho 1.\nv \u0026lt;- 1\ris.vector(v)\r ## [1] TRUE\r length(v)\r ## [1] 1\r length(vetor)\r ## [1] 6\r Vetores at√¥micos guardam suas informa√ß√µes em uma √∫nica dimens√£o (como se fosse uma caixinha de p√≠lulas semanal), cada compartimento guarda um valor. E todos os valores tem que ser do mesmo tipo! N√∫meros com n√∫meros, caracteres com caracteres. N√£o pode misturar.\ninteiro \u0026lt;- 1L\rdouble \u0026lt;- 1\rtexto \u0026lt;- \u0026quot;um\u0026quot;\r Ou com mais de um valor:\ninteiros \u0026lt;- c(1L, 2L)\rdoubles \u0026lt;- c(1, 2)\rtextos \u0026lt;- c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;)\r Esses tipos de vetores s√£o importantes pois eles interagem com as fun√ß√µes de maneira l√≥gica:\nsum(inteiros)\r ## [1] 3\r sum(doubles)\r ## [1] 3\r sum(textos)\r ## Error in sum(textos): 'type' inv√°lido (character) do argumento\r Veja a mensagem de erro ao tentar somar os textos.\nExerc√≠cio Considerando os dois vetores abaixo, calcule as suas m√©dias. Porque n√£o √© poss√≠vel calcular a m√©dia do segundo vetor.\nidade1 \u0026lt;- c(20, 25, 30, 35, 40, 45, 50)\ridade2 \u0026lt;- c(\u0026quot;20\u0026quot;, \u0026quot;25\u0026quot;, \u0026quot;30\u0026quot;, \u0026quot;35\u0026quot;, \u0026quot;40\u0026quot;, \u0026quot;45\u0026quot;, \u0026quot;50\u0026quot;)\r Tipos Vetores at√¥micos podem ser de 6 tipos, dois s√£o mais utilizados.\nN√∫meros reais vetor\r ## [1] 1 2 3 4 5 6\r typeof(vetor)\r ## [1] \u0026quot;double\u0026quot;\r A fun√ß√£o typeof me diz qual o tipo de um vetor at√¥mico.\nN√∫meros inteiros inteiros\r ## [1] 1 2\r typeof(inteiros)\r ## [1] \u0026quot;integer\u0026quot;\r O padr√£o do R √© aceitar n√∫meros reais, se voc√™ n√£o especificar. Para for√ßar n√∫meros inteiros, √© precisar utilizar:\ninteiros \u0026lt;- c(1, 2)\rtypeof(inteiros)\r ## [1] \u0026quot;double\u0026quot;\r inteiros \u0026lt;- c(1L, 2L)\rtypeof(inteiros)\r ## [1] \u0026quot;integer\u0026quot;\r Essas diferen√ßas em geral s√£o inconsequentes, mas existem alguns casos, como resultados de divis√£o e ra√≠z quadrada, em que podemos encontrar resultados curiosos.\nsqrt(2)^2 - 2\r ## [1] 4.440892e-16\r Em teoria, a opera√ß√£o acima deveria ser 0, mas como o computador tem uma quantidade limitada de mem√≥ria para armazenar as casas decimais, ele acaba gerando uma \u0026ldquo;sobrinha\u0026rdquo; infinitesimal da ra√≠z quadrada de dois.\nCaracteres texto \u0026lt;- c(\u0026quot;Bem\u0026quot;, \u0026quot;Vindos\u0026quot;)\rtexto\r ## [1] \u0026quot;Bem\u0026quot; \u0026quot;Vindos\u0026quot;\r typeof(texto)\r ## [1] \u0026quot;character\u0026quot;\r Exerc√≠cio Qual a diferen√ßa entre: 1, \u0026ldquo;1\u0026rdquo;, \u0026ldquo;one\u0026rdquo; no R? Quais s√£o n√∫meros e quais s√£o caracteres?\nL√≥gicos 3 \u0026lt; 4\r ## [1] TRUE\r 3 \u0026gt; 4\r ## [1] FALSE\r logico \u0026lt;- c(TRUE, FALSE)\rlogico\r ## [1] TRUE FALSE\r typeof(logico)\r ## [1] \u0026quot;logical\u0026quot;\r Vetores l√≥gicos s√£o a base de v√°rias opera√ß√µes √∫teis no R e vamos voltar a eles em diversos momentos.\nComplexos e crus:\ncomp \u0026lt;- c(1 + 1i, 1 + 2i, 1 + 3i)\rcomp\r ## [1] 1+1i 1+2i 1+3i\r typeof(comp)\r ## [1] \u0026quot;complex\u0026quot;\r raw(3)\r ## [1] 00 00 00\r typeof(raw(3))\r ## [1] \u0026quot;raw\u0026quot;\r Vetores complexos servem para armazenar n√∫mero complexos, enquanto vetores crus servem para armazenar os valores em bits de uma informa√ß√£o. Ambos s√£o menos utilizados na an√°lise de dados e eu os introduzo apenas para voc√™s saberem que eles existem.\nAtributos Atributos s√£o informa√ß√µes adicionais que podemos colocar em um objeto para cumprir uma s√©rie de tarefas auxiliares. Pense, por exemplo, em dar nomes para os meses do ano, ou classificar um objeto de acordo com seu tipo. Atributos s√£o metadados ou dados sobre os dados, e eles nos interessam porque o R pode aproveitar os atributos de um objeto para realizar tarefas espec√≠ficas.\nVoc√™ pode ver os atributos de um objeto assim:\nattributes(vetor)\r ## NULL\r O nosso vetor n√£o tem nenhum atributo ainda, por isso NULL.\nO atributo mais comum que os objetos podem ter em R s√£o nomes. Podemos ver o atributo nomes assim:\nnames(vetor)\r ## NULL\r Novamente, NULL indica que o vetor n√£o tem nomes.\nA maioria das fun√ß√µes que trabalham com atributos vai ter esses \u0026ldquo;dois empregos\u0026rdquo;. De um lado, voc√™ pode utiliz√°-las para obter (get) os atributos, de outro, voc√™ pode utiliz√°-las para modificar (set) os atributos, veja:\nnames(vetor) \u0026lt;- c(\u0026quot;one\u0026quot;, \u0026quot;two\u0026quot;, \u0026quot;three\u0026quot;, \u0026quot;four\u0026quot;, \u0026quot;five\u0026quot;, \u0026quot;six\u0026quot;)\r Agora, veja como ficaram os resultados das duas fun√ß√µes anteriores.\nattributes(vetor)\r ## $names\r## [1] \u0026quot;one\u0026quot; \u0026quot;two\u0026quot; \u0026quot;three\u0026quot; \u0026quot;four\u0026quot; \u0026quot;five\u0026quot; \u0026quot;six\u0026quot;\r names(vetor)\r ## [1] \u0026quot;one\u0026quot; \u0026quot;two\u0026quot; \u0026quot;three\u0026quot; \u0026quot;four\u0026quot; \u0026quot;five\u0026quot; \u0026quot;six\u0026quot;\r O R tamb√©m vai mostrar o atributo nomes quando voc√™ chamar o vetor.\nvetor\r ## one two three four five six ## 1 2 3 4 5 6\r Da mesma forma que voc√™ modificou os atributos antes, voc√™ pode modific√°-los ou remov√™-los:\nnames(vetor) \u0026lt;- c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;, \u0026quot;tr√™s\u0026quot;, \u0026quot;quatro\u0026quot;, \u0026quot;cinco\u0026quot;, \u0026quot;seis\u0026quot;)\rnames(vetor)\r ## [1] \u0026quot;um\u0026quot; \u0026quot;dois\u0026quot; \u0026quot;tr√™s\u0026quot; \u0026quot;quatro\u0026quot; \u0026quot;cinco\u0026quot; \u0026quot;seis\u0026quot;\r names(vetor) \u0026lt;- NULL\rnames(vetor)\r ## NULL\r O outro atributo importante para muitas tarefas s√£o as dimens√µes de um objeto. Lembre que os nossos vetores at√¥micos s√£o limitados pela exig√™ncia de s√≥ ter uma dimens√£o, mas e se quisermos organizar nossos dados em v√°rias dimens√µes? Um jeito poss√≠vel √© alterar as dimens√µes:\ndim(vetor)\r ## NULL\r # 2 linhas e 3 colunas\rdim(vetor) \u0026lt;- c(2, 3)\rvetor\r ## [,1] [,2] [,3]\r## [1,] 1 3 5\r## [2,] 2 4 6\r # 3 linhas e 2 colunas\rdim(vetor) \u0026lt;- c(3, 2)\rvetor\r ## [,1] [,2]\r## [1,] 1 4\r## [2,] 2 5\r## [3,] 3 6\r E n√£o precisa se limitar a objetos bidimensionais. Voc√™ pode passar n dimens√µes para o objeto e o R distribuir√° os valores do seu vetor no n√∫mero de dimens√µes necess√°rios. O √∫nico detalhe importante √© voc√™ reparar que o R tem uma certa prefer√™ncia de ir preenchendo os valores da coluna antes dos valores da linha e se voc√™ quiser fazer isso de forma diferente, √© melhor utilizar as fun√ß√µes matrix ou array, que veremos adiante.\nExerc√≠cio Usando seus conhecimentos sobre atributos, construa uma pequena matriz com o nome de 5 pessoas da turma e seu sexo.\nMatrizes Matrizes s√£o muito parecidas com o que acabamos de construir: elas guardam informa√ß√µes em um array de duas dimens√µes. A grande diferen√ßa √© que as matrizes s√£o programadas para executar as opera√ß√µes matem√°ticas com matrizes de acordo com os princ√≠pios e conven√ß√µes da √°lgebra linear. Portanto, o R vem com fun√ß√µes para transpor, inverter, solucionar, etc. matrizes. Voc√™ pode construir matrizes no R com:\nm \u0026lt;- matrix(vetor, nrow = 2)\rm\r ## [,1] [,2] [,3]\r## [1,] 1 3 5\r## [2,] 2 4 6\r Ou, se voc√™ quiser mudar a ordem de preenchimento:\nm2 \u0026lt;- matrix(vetor, nrow = 2, byrow = TRUE)\rm2\r ## [,1] [,2] [,3]\r## [1,] 1 2 3\r## [2,] 4 5 6\r Para mais informa√ß√µes, consulte ?matrix.\nExerc√≠cio Reconstrua a sua matriz original usando a fun√ß√£o matrix ao inv√©s de alterar os atributos. E os nomes das colunas?\nArrays O array √© uma extens√£o da ideia de matriz para quantas dimens√µes voc√™ quiser, ou n-dimens√µes. 3, 4, 5, 10 dimens√µes, isso √© com voc√™. Na pr√°tica os arrays n√£o s√£o muito frequentes na an√°lise de dados, mas eles existem se voc√™ precisar deles um dia:\na \u0026lt;- array(c(11:14, 21:24, 31:34), dim = c(2, 2, 3))\ra\r ## , , 1\r## ## [,1] [,2]\r## [1,] 11 13\r## [2,] 12 14\r## ## , , 2\r## ## [,1] [,2]\r## [1,] 21 23\r## [2,] 22 24\r## ## , , 3\r## ## [,1] [,2]\r## [1,] 31 33\r## [2,] 32 34\r O display de um array multidimensional √© meio confuso, porque o R vai te mostrar as \u0026ldquo;fatias\u0026rdquo; do array. Quanto mais dimens√µes, mais fatias. Boa sorte se voc√™ precisar deles um dia!\nClasse A classe de um objeto √© um atributo importante para seu funcionamento no R, porque diferentes classes est√£o associadas a diferentes m√©todos! Pense, por exemplo, que voc√™ deseja organizar uma sequ√™ncia de valores em um vetor. Se esses valores s√£o n√∫meros, a ordem crescente ou decrescente √© bastante intuitiva. Se s√£o textos, podemos usar a ordem alfab√©tica. Mas e se forem meses do ano? Grupos et√°rios? Categorias educacionais?\nProblemas dessa natureza s√£o resolvidos no R atrav√©s da atribui√ß√£o de classes aos objetos. Transposi√ß√£o e solu√ß√£o de matrizes utilizar√£o o atributo classe para saber se aquele objeto √© uma matriz, para citar apenas um exemplo. Podemos descobrir a classe de um objeto assim:\nclass(vetor)\r ## [1] \u0026quot;matrix\u0026quot; \u0026quot;array\u0026quot;\r Mas esse √© o nosso vetor modificado. Vejamos o que acontece se retiramos o atributo dim:\ndim(vetor) \u0026lt;- NULL\rclass(vetor)\r ## [1] \u0026quot;numeric\u0026quot;\r Veja que n√£o mudamos o tipo do vetor, ele continua sendo \u0026ldquo;double\u0026rdquo;,\ntypeof(vetor)\r ## [1] \u0026quot;double\u0026quot;\r Mas sua classe mudou. Podemos mudar a classe de um objeto de maneira arbitr√°ria, mas em geral a gente evita fazer isso, porque esse atributo est√° muito relacionado com as propriedades desse objeto. Veja dois exemplos do que ocorre ao alterar manualmente a classe de um objeto:\nagora \u0026lt;- Sys.time()\ragora\r ## [1] \u0026quot;2021-06-14 12:51:59 -03\u0026quot;\r typeof(agora)\r ## [1] \u0026quot;double\u0026quot;\r class(agora)\r ## [1] \u0026quot;POSIXct\u0026quot; \u0026quot;POSIXt\u0026quot;\r Nesse primeiro exemplo, usando Sys.time para obter o hor√°rio local. O tipo dessa informa√ß√£o √© \u0026ldquo;double\u0026rdquo;, pois o R armazena vari√°veis tempo como o n√∫mero de segundos passados entre uma data de in√≠cio arbitr√°ria e o momento que o seu tempo representa. Mas a classe desse objeto √© POSIXct e POSIXt, que s√£o as classes do R para lidar com objetos que registram data e tempo.\nVeja o que acontece se eu temporariamente remover a classe desse objeto:\nunclass(agora)\r ## [1] 1623685919\r R transformou meu objeto data/tempo em um n√∫mero. O que ocorre √© que quando meu objeto tem as classes adequadas, isso alerta o R para que ele trate esse objeto de forma diferente. As fun√ß√µes do R utilizar√£o m√©todos de print para facilitar a visualiza√ß√£o de objetos data/tempo, mas, por debaixo do cap√¥, preservar√£o suas caracter√≠sticas computacionais num√©ricas. Voc√™ pode, por exemplo, somar 24h ao seu objeto:\nagora + (24 * 60 * 60)\r ## [1] \u0026quot;2021-06-15 12:51:59 -03\u0026quot;\r Voc√™ tamb√©m pode, se assim desejar, transformar um valor num√©rico arbitr√°rio numa data (s√≥ demonstra√ß√£o, n√£o vale a pena fazer isso) atribuindo uma classe para ele:\nobjeto \u0026lt;- 1000000000\rclass(objeto) \u0026lt;- c(\u0026quot;POSIXct\u0026quot;, \u0026quot;POSIXt\u0026quot;)\robjeto\r ## [1] \u0026quot;2001-09-08 22:46:40 -03\u0026quot;\r Exerc√≠cio Experimente brincar com o valor de objeto e ver\n Qual √© a data de refer√™ncia do R para calcular tempos? O que acontece se o valor for negativo?  O segundo exemplo relevante s√£o os fatores. Fatores s√£o a classe utilizada pelo R para trabalhar com vari√°veis categ√≥ricas, ou informa√ß√£o qualitativa. Um fator s√≥ pode ter alguns valores pr√©-definidos pelo usu√°rio. Pense, por exemplo, nas categorias de sexo ou ra√ßa que o IBGE utiliza em suas pesquisas amostrais. H√° um pequeno n√∫mero pr√©-definido de categorias. Para construir um fator, voc√™ pode fazer o seguinte:\ngenero \u0026lt;- factor(c(\u0026quot;homem\u0026quot;, \u0026quot;mulher\u0026quot;, \u0026quot;mulher\u0026quot;, \u0026quot;homem\u0026quot;))\rtypeof(genero)\r ## [1] \u0026quot;integer\u0026quot;\r attributes(genero)\r ## $levels\r## [1] \u0026quot;homem\u0026quot; \u0026quot;mulher\u0026quot;\r## ## $class\r## [1] \u0026quot;factor\u0026quot;\r Fatores seguem aquela linha que descrevemos para datas. R guarda os valores do seu fator utilizando n√∫meros simples:\nunclass(genero)\r ## [1] 1 2 2 1\r## attr(,\u0026quot;levels\u0026quot;)\r## [1] \u0026quot;homem\u0026quot; \u0026quot;mulher\u0026quot;\r Mas na hora que voc√™ utiliza esse fator, o software apresenta para voc√™ os r√≥tulos das categorias.\ngenero\r ## [1] homem mulher mulher homem ## Levels: homem mulher\r Atrav√©s do atributo levels, o R est√° associando cada valor num√©rico com um r√≥tulo, e no momento em que voc√™ procurar construir uma tabela ou trabalhar com esses fatores de qualquer maneira, o software utilizar√° o atributo classe para dar-lhe o tratamento adequado. Por exemplo, se eu tentar transformar os vetores a seguir em caractere, o R saber√° distinguir:\nas.character(c(1, 2, 2, 1))\r ## [1] \u0026quot;1\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;1\u0026quot;\r as.character(genero)\r ## [1] \u0026quot;homem\u0026quot; \u0026quot;mulher\u0026quot; \u0026quot;mulher\u0026quot; \u0026quot;homem\u0026quot;\r O uso da fun√ß√£o as.character √© um gancho perfeito para o pr√≥ximo assunto. Mas antes:\nExerc√≠cio Construa um fator a partir do vetor a seguir que registre os meses do ano. Dica: utilize o argumento levels da fun√ß√£o factor.\nf \u0026lt;- c(1, 3, 9, 4, 11, 2, 6, 6, 3, 2, 9, 11, 12, 12, 1, 8)\r Coer√ß√£o Coer√ß√£o √© o comportamento da linguagem R ao encontrar situa√ß√µes em que diferentes tipos de dados est√£o misturados em um mesmo vetor at√¥mico. Lembrem que cada vetor at√¥mico s√≥ pode armazenar 1 tipo de informa√ß√£o, portanto, ao tentar inserir uma informa√ß√£o de outro tipo, R devolver√°:\n um erro, indicando que a opera√ß√£o √© imposs√≠vel, OU a opera√ß√£o ser√° realizada, por√©m, o tipo da informa√ß√£o ser√° modificado  No segundo caso, o R aplica uma coer√ß√£o na tentativa de preservar ao m√°ximo as informa√ß√µes. Veja exemplos:\nv \u0026lt;- c(1, 0, 1, TRUE, FALSE)\rv\r ## [1] 1 0 1 1 0\r v \u0026lt;- c(1, 2, 3, \u0026quot;4\u0026quot;)\rv\r ## [1] \u0026quot;1\u0026quot; \u0026quot;2\u0026quot; \u0026quot;3\u0026quot; \u0026quot;4\u0026quot;\r v \u0026lt;- c(TRUE, FALSE, \u0026quot;TRUE\u0026quot;)\rv\r ## [1] \u0026quot;TRUE\u0026quot; \u0026quot;FALSE\u0026quot; \u0026quot;TRUE\u0026quot;\r R vai tentar transformar o tipo de dados mais espec√≠fico num tipo de dado mais geral, assim, evitando que a informa√ß√£o seja perdida.\nEm outros casos, o processo de coer√ß√£o pode ser iniciado pelo pr√≥prio usu√°rio, porque este deseja transformar um tipo de dado em outro:\nv \u0026lt;- c(1, 0, 1, TRUE, FALSE)\ras.logical(v)\r ## [1] TRUE FALSE TRUE TRUE FALSE\r v \u0026lt;- c(1, 2, 3, \u0026quot;4\u0026quot;)\ras.numeric(v)\r ## [1] 1 2 3 4\r v \u0026lt;- c(TRUE, FALSE, \u0026quot;TRUE\u0026quot;)\ras.logical(v)\r ## [1] TRUE FALSE TRUE\r Existem fun√ß√µes as.____ para todos os tipos de dados e classes mais comuns do R, e √© praxe que autores de novos pacotes que trazem classes tamb√©m incluam seus pr√≥prios m√©todos de coer√ß√£o para suas novas classes.\nExerc√≠cio Porque o R prefere coagir vetores l√≥gicos mistos para n√∫meros e vetores num√©ricos e l√≥gicos para caractere?\nListas At√© esse momento, trabalhamos com varia√ß√µes no vetor at√¥mico. O vetor at√¥mico tem uma limita√ß√£o repetidamente discutida: ele s√≥ armazena um tipo de dado. Bancos de dados reais certamente armazenar√£o informa√ß√µes de v√°rios tipos distintos, ent√£o precisamos de uma estrutura de dado que tenha a capacidade de guardar estas informa√ß√µes d√≠spares. √â a√≠ que entram as listas.\nListas s√£o como vetores at√¥micos, mas elas n√£o guardam valores! Listas guardam OBJETOS R. Qualquer um. Vetores at√¥micos? Sim. Fun√ß√µes? Sim. Outras listas? Pode tamb√©m. Para criar listas:\nlist1 \u0026lt;- list(100:130, \u0026quot;R\u0026quot;, list(TRUE, FALSE))\rlist1\r ## [[1]]\r## [1] 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118\r## [20] 119 120 121 122 123 124 125 126 127 128 129 130\r## ## [[2]]\r## [1] \u0026quot;R\u0026quot;\r## ## [[3]]\r## [[3]][[1]]\r## [1] TRUE\r## ## [[3]][[2]]\r## [1] FALSE\r Note como cada elemento da lista √© um objeto R diferente. A lista n√£o julga, ela apenas armazena seus objetos. Um detalhe interessante e que ser√° importante mais tarde: note como a sa√≠da do R diferencia [1] de [[1]] no √≠ndice dos elementos da lista. Isso √© necess√°rio porque a lista pode guardar muitas coisas dentro de si, e o usu√°rio precisa ter a capacidade de recuperar essas informa√ß√µes que est√£o l√° nas profundezas da lista. Falaremos um pouco mais sobre isso na aula de amanh√£, quando discutirmos indexa√ß√£o.\nExerc√≠cio Crie uma lista de compras em que cada elemento da lista seja um vetor at√¥mico de itens que voc√™ vai comprar de cada se√ß√£o do supermercado. Para simplificar, utilize as se√ß√µes: \u0026ldquo;limpeza\u0026rdquo;, \u0026ldquo;mercearia\u0026rdquo; e \u0026ldquo;hortifruti\u0026rdquo;.\nData Frames Data frames s√£o o formato de dados mais popular em an√°lise de dados, e por um bom motivo: eles combinam a flexibilidade necess√°ria para armazenar diversos tipos de informa√ß√µes diferentes com a consist√™ncia das matrizes e dos vetores. Por tr√°s da cortina, eles s√£o listas com restri√ß√µes: todos os elementos da lista devem ter o mesmo comprimento, isso garante a retangularidade da nossa informa√ß√£o.\nEssa retangularidade √© importante do ponto de vista anal√≠tico: o data frame deve conter uma observa√ß√£o para cada unidade de an√°lise e uma coluna para cada informa√ß√£o ou vari√°vel que foi coletada sobre essa unidade de an√°lise. Se, de alguma forma esta informa√ß√£o n√£o est√° dispon√≠vel, isso dever√° ficar expl√≠cito por uma c√©lula com valor desconhecido.\nNo R, embora isso n√£o seja t√£o comum, voc√™ pode construir data frames manualmente:\ndf \u0026lt;- data.frame(x = c(1, 2, 3, 4, 5),\ry = c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;, \u0026quot;d\u0026quot;, \u0026quot;e\u0026quot;),\rz = c(TRUE, FALSE, TRUE, TRUE, FALSE))\rdf\r ## x y z\r## 1 1 a TRUE\r## 2 2 b FALSE\r## 3 3 c TRUE\r## 4 4 d TRUE\r## 5 5 e FALSE\r Logo de cara, vemos que o data.frame do R tem aquela cara de tabela com a qual estamos acostumados. Podemos ver como o data.frame √© constru√≠do observado alguns de seus atributos:\ntypeof(df)\r ## [1] \u0026quot;list\u0026quot;\r class(df)\r ## [1] \u0026quot;data.frame\u0026quot;\r attributes(df)\r ## $names\r## [1] \u0026quot;x\u0026quot; \u0026quot;y\u0026quot; \u0026quot;z\u0026quot;\r## ## $class\r## [1] \u0026quot;data.frame\u0026quot;\r## ## $row.names\r## [1] 1 2 3 4 5\r Secretamente, o data.frame √© uma lista, com nomes, um atributo menos importante, chamado row.names, e algumas caracter√≠sticas como aquelas que mencionamos acima. O data.frame e o vetor s√£o as principais ferramentas no cotidiano do analista e, portanto, s√£o as que mais vamos utilizar daqui pra frente. Outra fun√ß√£o √∫til √© a estrutura de uma lista ou data frame:\nstr(df)\r ## 'data.frame':\t5 obs. of 3 variables:\r## $ x: num 1 2 3 4 5\r## $ y: chr \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; \u0026quot;c\u0026quot; \u0026quot;d\u0026quot; ...\r## $ z: logi TRUE FALSE TRUE TRUE FALSE\r Ela oferece uma vis√£o geral do data.frame, e √© especialmente √∫til quando seu data.frame √© grande e cont√©m muitas vari√°veis.\nEm geral, a digita√ß√£o de data sets no R n√£o √© recomendada. A interface do programa n√£o te ajuda a produzir dados no formato necess√°rio. √â prov√°vel que voc√™ cometa muitos erros no caminho e n√£o h√° uma ferramenta muito completa dentro do software que facilite esse processo. Isso ocorre porque o R n√£o √© um software de produ√ß√£o ou tabula√ß√£o de dados, como o Microsoft Excel, o OpenOffice Calc ou o IBM SPSS, mas sim um software de an√°lise de dados. O mais comum √© voc√™ importar um banco de dados pronto e previamente tabulado utilizando uma das fun√ß√µes do R, como no exemplo abaixo, em que importamos uma pequena amostra da PNAD Cont√≠nua do primeiro trimestre diretamente um link na internet.\nurl \u0026lt;- \u0026quot;https://raw.githubusercontent.com/laddem/site/master/amostra_pnad.csv\u0026quot;\rdf \u0026lt;- read.csv(url)\rhead(df)\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## 2 2021 1 Distrito Federal Urbana Mulher 19 Parda 4\r## 3 2021 1 Pernambuco Urbana Mulher 36 Preta 2\r## 4 2021 1 Santa Catarina Urbana Homem 50 Parda 2\r## 5 2021 1 S√£o Paulo Urbana Mulher 43 Parda 3\r## 6 2021 1 Goi√°s Urbana Homem 35 Parda 3\r## VD3005 VD4016\r## 1 16 anos ou mais de estudo NA\r## 2 11 anos de estudo NA\r## 3 12 anos de estudo 1045\r## 4 5 anos de estudo 1500\r## 5 9 anos de estudo 1600\r## 6 14 anos de estudo 3000\r Veremos mais sobre importa√ß√£o na aula de amanh√£!\nExerc√≠cio Crie um data frame contendo informa√ß√µes de cinco colegas de turma: registre o nome, a idade presumida, o sexo, a profiss√£o e a renda presumida. N√£o precisa perguntar, basta chutar um valor que voc√™ ache.\nF√≥rmulas F√≥rmulas s√£o a maneira que os desenvolvedores do R encontraram para representar equa√ß√µes matem√°ticas. Por√©m, como tudo no software livre, elas foram apropriadas por desenvolvedores para muitas tarefas criativas e voc√™s ir√£o encontr√°-las por a√≠ cumprindo diversos pap√©is. Vejamos alguns exemplos.\nF√≥rmulas s√£o usadas para especificar as equa√ß√µes de modelos matem√°ticos no R:\nmodelo_linear \u0026lt;- lm(VD4016 ~ VD3005, data = df)\rsummary(modelo_linear)\r ## ## Call:\r## lm(formula = VD4016 ~ VD3005, data = df)\r## ## Residuals:\r## Min 1Q Median 3Q Max ## -3786.1 -744.7 -345.1 382.7 15013.9 ## ## Coefficients:\r## Estimate Std. Error t value\r## (Intercept) 682.5 946.1 0.721\r## VD300510 anos de estudo 467.5 1221.4 0.383\r## VD300511 anos de estudo 434.8 1064.8 0.408\r## VD300512 anos de estudo 905.3 960.2 0.943\r## VD300513 anos de estudo 1584.8 1104.8 1.434\r## VD300514 anos de estudo 1497.5 1119.4 1.338\r## VD300515 anos de estudo 1525.8 1092.5 1.397\r## VD300516 anos ou mais de estudo 3303.6 970.1 3.406\r## VD30052 anos de estudo 217.5 1445.2 0.150\r## VD30053 anos de estudo 261.5 1269.3 0.206\r## VD30054 anos de estudo 727.8 1119.4 0.650\r## VD30055 anos de estudo 649.5 1019.0 0.637\r## VD30056 anos de estudo 610.5 1064.8 0.573\r## VD30057 anos de estudo -163.7 1158.7 -0.141\r## VD30058 anos de estudo 990.8 1064.8 0.931\r## VD30059 anos de estudo 762.6 1007.2 0.757\r## VD3005Sem instru√ß√£o e menos de 1 ano de estudo 131.8 1186.0 0.111\r## Pr(\u0026gt;|t|) ## (Intercept) 0.471128 ## VD300510 anos de estudo 0.702120 ## VD300511 anos de estudo 0.683236 ## VD300512 anos de estudo 0.346404 ## VD300513 anos de estudo 0.152291 ## VD300514 anos de estudo 0.181807 ## VD300515 anos de estudo 0.163341 ## VD300516 anos ou mais de estudo 0.000733 ***\r## VD30052 anos de estudo 0.880452 ## VD30053 anos de estudo 0.836892 ## VD30054 anos de estudo 0.515999 ## VD30055 anos de estudo 0.524230 ## VD30056 anos de estudo 0.566756 ## VD30057 anos de estudo 0.887695 ## VD30058 anos de estudo 0.352699 ## VD30059 anos de estudo 0.449441 ## VD3005Sem instru√ß√£o e menos de 1 ano de estudo 0.911583 ## ---\r## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\r## ## Residual standard error: 1892 on 370 degrees of freedom\r## (613 observations deleted due to missingness)\r## Multiple R-squared: 0.2427,\tAdjusted R-squared: 0.2099 ## F-statistic: 7.409 on 16 and 370 DF, p-value: 4.467e-15\r Tamb√©m s√£o usadas para algumas fun√ß√µes que produzem tabula√ß√µes cruzadas:\nxtabs(~ VD3005 + V2007, data = df)\r ## V2007\r## VD3005 Homem Mulher\r## 1 ano de estudo 12 17\r## 10 anos de estudo 8 16\r## 11 anos de estudo 10 14\r## 12 anos de estudo 105 111\r## 13 anos de estudo 12 7\r## 14 anos de estudo 6 13\r## 15 anos de estudo 9 8\r## 16 anos ou mais de estudo 51 61\r## 2 anos de estudo 14 13\r## 3 anos de estudo 16 15\r## 4 anos de estudo 19 27\r## 5 anos de estudo 44 46\r## 6 anos de estudo 25 23\r## 7 anos de estudo 13 20\r## 8 anos de estudo 25 19\r## 9 anos de estudo 44 27\r## Sem instru√ß√£o e menos de 1 ano de estudo 47 45\r Algumas fun√ß√µes que produzem gr√°ficos tamb√©m utilizam f√≥rmulas:\nboxplot(VD4016 ~ V2010, data = df)\r Falaremos mais de f√≥rmulas no futuro, a medida que elas forem aparecendo. Nos exemplos acima, √© poss√≠vel ver que a f√≥rmula n√£o tem apenas um significado. Dependendo do contexto da fun√ß√£o, ela pode fazer coisas muito diferentes, usando seus lados esquerdo e direito para tarefas distintas. O que √© importante voc√™s levarem com voc√™s √© o formato das f√≥rmulas, e uma intui√ß√£o de que quando uma f√≥rmula aparece, algo est√° sendo feito com uma l√≥gica do tipo: \u0026ldquo;Para cada x, corresponde um y\u0026rdquo;, ou algo similar.\nExer√≠cio Consulte o ?xtabs, qual o significado da f√≥rmula e para que servem os lados esquerdo e direito?\nRevis√£o Cobrimos bastante coisa na aula de hoje, e n√£o √© nosso interesse que voc√™s saiam dessa aula decorando tudo. Vamos destacar alguns pontos mais importantes, que s√£o a chave para voc√™s trabalharem no R.\nObjetos s√£o formas de armazenar coisas na mem√≥ria do computador, eles podem ser de uma variedade de tipos e classes, e ter v√°rios formatos mais ou menos adequados as nossas necessidades. Os objetos mais comuns no nosso arsenal s√£o as fun√ß√µes, os vetores e os data frames.\nAs fun√ß√µes s√£o os verbos de uma linguagem de programa√ß√£o, elas fazem coisas aos nossos objetos. Voc√™ provavelmente vai passar a maior parte do tempo usando fun√ß√µes pr√©-programadas, mas tamb√©m pode escrever suas pr√≥prias.\nOs vetores s√£o a forma mais simples de organizar dados, em geral, trabalharemos com vetores at√¥micos, que guardam sequ√™ncias de informa√ß√µes do mesmo tipo e uma √∫nica dimens√£o. Vetores de 2 dimens√µes, ou matrizes, podem ser ocasionalmente importantes para voc√™s em algum momento.\nOs data frames s√£o o feij√£o com arroz da an√°lise de dados, eles s√£o flex√≠veis para acomodar tipos de dados distintos e respeitam as conven√ß√µes que s√£o importantes para n√≥s: consist√™ncia de opera√ß√µes, uma observa√ß√£o por linha, uma vari√°vel por coluna.\nOs objetos podem ter diversos atributos. Muito deles s√£o apenas est√©ticos para facilitar a comunica√ß√£o com o usu√°rio, outros s√£o mais substanciais, e alteram a forma como o R processa os dados guardados ali. Citamos exemplos de fatores e data/tempo como exemplos. Um dos atributos mais importantes de um objeto √© sua classe, que discutimos um pouco.\nPor fim, falamos de dois comportamentos importantes do software: coer√ß√£o e reciclagem. Eles podem facilitar ou complicar a nossa vida se n√£o tomamos cuidado com esse comportamento. A coer√ß√£o transforma o tipo dos vetores para um tipo mais gen√©rico com o intuito de preservar informa√ß√µes. A reciclagem aumenta o tamanho de objetos menores para bater com o tamanho de objetos maiores numa mesma opera√ß√£o.\nExerc√≠cios   Como voc√™ poderia identificar o tipo de um objeto? Como voc√™ poderia identificar a classe dele? Qual a diferen√ßa entre essas duas coisas? Porque isso √© relevante?\n  Digamos que voc√™ quer armazenar algumas informa√ß√µes na mem√≥ria do computador. Que tipo de objeto voc√™ utilizaria para armanzenar:\n   Os nomes dos colegas da sua turma Seus n√∫meros de telefone Uma vari√°vel que indica se esta pessoa nasceu antes de 1989 A idade de um grupo de pessoas Informa√ß√µes de cadastro de uma pessoa: nome completo, afilia√ß√µes, telefones para contato, endere√ßos, etc. Uma cole√ß√£o de fun√ß√µes que voc√™ utiliza frequentemente   Porque no resumo eu disse que as fun√ß√µes s√£o verbos? Que tipo de a√ß√µes as fun√ß√µes que vimos na aula fazem nos nossos objetos? Se as fun√ß√µes s√£o verbos, que classe de palavras a gente poderia dizer que s√£o os nossos objetos? E n√≥s, que usamos o software, o que somos?\n  Digamos que eu quero armazenar as informa√ß√µes de cadastro dos membros da turma. Que estrutura de dados eu deveria utilizar? Como voc√™ implementaria esta estrutura no R? Desenvolva um pequeno exemplo.\n  Quais s√£o os atributos de um data frame? Como voc√™ poderia descobr√≠-los e alter√°-los? Em que situa√ß√µes isso seria proveitoso?\n  Suponha que voc√™ t√™m o vetor at√¥mico abaixo:\n  v \u0026lt;- c(1, 1, TRUE, FALSE)\r O que acontecer√° com as informa√ß√µes desse vetor ao ser armazenado no R? Como voc√™ poderia alterar esse resultado? Porque o R se comporta dessa maneira?\nConsidere a opera√ß√£o matem√°tica abaixo:  v1 \u0026lt;- c(1, 2, 3)\rv2 \u0026lt;- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\rv1 * v2\r O que voc√™ espera encontrar na sa√≠da do R ao rodar essa se√ß√£o? Rode o c√≥digo e responda: voc√™ se surpreendeu? O que aconteceu e porqu√™? Qual o significado da mensagem de aviso?\nConsidere o banco de dados abaixo:  sala \u0026lt;- data.frame(\rid = c(1, 2, 3),\ridade = c(20, 25, 30, 35, 40, 45),\rnome = c(\u0026quot;Fulano\u0026quot;, \u0026quot;Cicrano\u0026quot;, \u0026quot;Beltrano\u0026quot;, \u0026quot;Herculano\u0026quot;, \u0026quot;Mariano\u0026quot;, \u0026quot;Carrano\u0026quot;),\rsexo = \u0026quot;Masculino\u0026quot;,\rorigem = c(\u0026quot;Campinas\u0026quot;, \u0026quot;Barueri\u0026quot;, \u0026quot;Monte Verde\u0026quot;, \u0026quot;Rio de Janeiro\u0026quot;, \u0026quot;Natal\u0026quot;, \u0026quot;Belo Horizonte\u0026quot;)\r)\r Verifique as vari√°veis id e sexo. Os valores dessas vari√°veis fazem sentido? Elas n√£o impedem a constru√ß√£o do data frame, por qu√™? Que caracter√≠stica do R est√° operando nessas vari√°veis?\n","date":1623628800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623628800,"objectID":"97cca2b38f9d47320ccaf84cbbcc3468","permalink":"https://laddem.github.io/courses/rbase/dia1/","publishdate":"2021-06-14T00:00:00Z","relpermalink":"/courses/rbase/dia1/","section":"courses","summary":"Os conceitos-chave que v√£o fundamentar sua aprendizagem e seu uso da l√≠ngua","tags":null,"title":"A base da linguagem R","type":"book"},{"authors":null,"categories":null,"content":"Manipula√ß√£o de objetos Leitura/Importa√ß√£o Voc√™ pode importar um data.frame para o R de duas formas. A primeira delas, √© carregando atrav√©s do Environment no canto direito superior do RStudio. Clique em Import Dataset e selecione \u0026lsquo;From Text File\u0026rsquo;\nO RStudio solicitar√° que voc√™ selecione o arquivo que deseja importar e, em seguida, abrir√° um assistente para ajud√°-lo a importar os dados. Use o assistente para informar ao RStudio qual nome dar ao conjunto de dados. Voc√™ tamb√©m pode usar o assistente para informar ao RStudio qual caractere o conjunto de dados usa como separador, qual caractere ele usa para representar decimais (geralmente um ponto nos Estados Unidos e uma v√≠rgula na Europa/Brasil) e se o conjunto de dados vem ou n√£o com uma linha de nomes de coluna (conhecida como cabe√ßalho). Para ajud√°-lo, o assistente mostra a apar√™ncia do arquivo bruto, bem como a apar√™ncia dos dados carregados com base nas configura√ß√µes de entrada.\nVoc√™ tamb√©m pode desmarcar a caixa ‚ÄúStrings como fatores‚Äù no assistente. Eu recomendo fazer isso. Se voc√™ fizer isso, o R carregar√° todas as suas cadeias de caracteres como cadeias de caracteres. Caso contr√°rio, R os converter√° em fatores.\nA outra forma de importar um arquivo no R, √© usando direto no script a fun√ß√£o \u0026lsquo;read.csv\u0026rsquo;. Vamos trabalhar com os dados da pnad, no arquivo amostra_pnad.csv. Ele √© um arquivo de valores separados por v√≠rgula ou CSV para abreviar. CSVs s√£o arquivos de texto simples, o que significa que voc√™ pode abri-los em um editor de texto (assim como em muitos outros programas). Se voc√™ abrir amostra_pnad.csv, ver√° que ele cont√©m uma tabela de dados semelhante √† seguinte. Cada linha da tabela √© salva em sua pr√≥pria linha e uma v√≠rgula √© usada para separar as c√©lulas dentro de cada linha. Cada arquivo CSV compartilha este formato b√°sico:\n\u0026ldquo;Ano\u0026rdquo;,\u0026ldquo;Trimestre\u0026rdquo;,\u0026ldquo;UF\u0026rdquo;,\u0026ldquo;V1022\u0026rdquo;,\u0026ldquo;V2007\u0026rdquo;,\u0026ldquo;V2009\u0026rdquo;,\u0026ldquo;V2010\u0026rdquo;,\u0026ldquo;VD2003\u0026rdquo;,\u0026ldquo;VD3005\u0026rdquo;,\u0026ldquo;VD4016\u0026rdquo; \u0026ldquo;2021\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;Cear√°\u0026rdquo;,\u0026ldquo;Urbana\u0026rdquo;,\u0026ldquo;Homem\u0026rdquo;,80,\u0026ldquo;Branca\u0026rdquo;,2,\u0026ldquo;16 anos ou mais de estudo\u0026rdquo;,NA \u0026ldquo;2021\u0026rdquo;,\u0026ldquo;1\u0026rdquo;,\u0026ldquo;Distrito Federal\u0026rdquo;,\u0026ldquo;Urbana\u0026rdquo;,\u0026ldquo;Mulher\u0026rdquo;,19,\u0026ldquo;Parda\u0026rdquo;,4,\u0026ldquo;11 anos de estudo\u0026rdquo;,NA \u0026hellip;e assim por diante\nVamos carregar novamente os dados da pnad que foram mostrados na aula passada:\nurl \u0026lt;- \u0026quot;https://raw.githubusercontent.com/laddem/site/master/amostra_pnad.csv\u0026quot;\rdf \u0026lt;- read.csv(url)\rhead(df)\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## 2 2021 1 Distrito Federal Urbana Mulher 19 Parda 4\r## 3 2021 1 Pernambuco Urbana Mulher 36 Preta 2\r## 4 2021 1 Santa Catarina Urbana Homem 50 Parda 2\r## 5 2021 1 S√£o Paulo Urbana Mulher 43 Parda 3\r## 6 2021 1 Goi√°s Urbana Homem 35 Parda 3\r## VD3005 VD4016\r## 1 16 anos ou mais de estudo NA\r## 2 11 anos de estudo NA\r## 3 12 anos de estudo 1045\r## 4 5 anos de estudo 1500\r## 5 9 anos de estudo 1600\r## 6 14 anos de estudo 3000\r Se a importa√ß√£o ocorrer corretamente, o data.frame ir√° aparecer no ambiente Environment mostrando o n√∫mero de observa√ß√µes e o n√∫mero de vari√°veis (colunas).\nQuando voc√™ importa um conjunto de dados, o RStudio salva os dados em um data frame e, em seguida, exibe o data frame em uma guia Exibir. Voc√™ pode abrir qualquer data frame em uma guia Exibir a qualquer momento com a fun√ß√£o View().\nExerc√≠cios Visualize os dados que voc√™ acabou de importar em formato de planilha atrav√©s do Environment e usando a fun√ß√£o View(). √â poss√≠vel tamb√©m visualizar as 6 primeiras linhas do data.frame ou as 6 √∫ltimas linhas. Para isso, use as fun√ß√µes head() e tail().\nObs: se voc√™ quiser ver mais que 6 linhas, coloque o segundo argumento na fun√ß√£o head(df, 10). Quantas linhas v√£o ser mostradas neste caso?\nEscrita/Salvar Voc√™ pode salvar e exportar um novo arquivo .csv para o seu computador. Assim, voc√™ pode envi√°-lo por e-mail a um colega, armazen√°-lo em um pen drive ou abri-lo em um programa diferente. Voc√™ pode salvar quaisquer dados executados e alterados no R em um arquivo .csv com o comando write.csv.\nwrite.csv(df, file = \u0026quot;df_pnad.csv\u0026quot;, row.names = FALSE)\r R transformar√° seu data frame em um arquivo de texto simples com o formato de valores separados por v√≠rgula e salvar√° o arquivo em seu diret√≥rio de trabalho. Para ver onde est√° seu diret√≥rio de trabalho, execute getwd(). Para alterar a localiza√ß√£o do seu diret√≥rio de trabalho, visite Sess√£o \u0026gt; Definir Diret√≥rio de Trabalho \u0026gt; Escolher Diret√≥rio na barra de menus do RStudio.\nVoc√™ pode personalizar o processo de salvamento com o grande conjunto de argumentos opcionais de write.csv (consulte ?write.csv para obter detalhes). No entanto, existem tr√™s argumentos que voc√™ deve usar sempre que executar write.csv.\nPrimeiro, voc√™ deve fornecer a fun√ß√£o write.csv o nome do data frame que deseja salvar. Em seguida, voc√™ deve fornecer um nome de arquivo para dar ao seu arquivo. R entender√° esse nome literalmente, portanto, certifique-se de fornecer uma extens√£o.\nFinalmente, voc√™ deve adicionar o argumento row.names = FALSE. Isso impedir√° R de adicionar uma coluna de n√∫meros no in√≠cio do seu data frame. Esses n√∫meros identificar√£o suas linhas de 1 a 1000, mas √© improv√°vel que qualquer programa em que voc√™ abrir df_pnad.csv compreender√° o sistema de nomes de linhas. Muito provavelmente, o programa assumir√° que os nomes das linhas s√£o a primeira coluna de dados em seu data frame. Na verdade, isso √© exatamente o que R assumir√° se voc√™ reabrir df_pnad.csv. Se voc√™ salvar e abrir df_pnad.csv v√°rias vezes em R, notar√° colunas duplicadas de n√∫meros de linha se formando no in√≠cio de seu data frame. N√£o posso explicar por que R faz isso, mas posso explicar como evit√°-lo: use row.names = FALSE sempre que salvar dados com write.csv.\nNota√ß√£o Para que voc√™ consiga trabalhar com valores individuais dentro do seu data frame, tarefa necess√°ria em an√°lise de dados, voc√™ pode selecionar valores dentro de um objeto R atrav√©s do seu sistema de nota√ß√£o.\nSelecionando valores O R tem um sistema de nota√ß√£o que permite extrair valores de objetos R. Para extrair um valor ou conjunto de valores de um data frame, escreva o nome do data frame seguido por um par de colchetes:\ndf[ , ]\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## 2 2021 1 Distrito Federal Urbana Mulher 19 Parda 4\r## 3 2021 1 Pernambuco Urbana Mulher 36 Preta 2\r## 4 2021 1 Santa Catarina Urbana Homem 50 Parda 2\r## 5 2021 1 S√£o Paulo Urbana Mulher 43 Parda 3\r## 6 2021 1 Goi√°s Urbana Homem 35 Parda 3\r## 7 2021 1 Amap√° Urbana Homem 72 Parda 3\r## 8 2021 1 S√£o Paulo Urbana Mulher 23 Amarela 8\r## 9 2021 1 Distrito Federal Urbana Homem 23 Parda 5\r....\rSa√≠da truncada para visualiza√ß√£o\r Entre os colchetes estar√£o dois √≠ndices separados por uma v√≠rgula. Os √≠ndices dizem ao R quais valores retornar. O R usar√° o primeiro √≠ndice para o subconjunto das linhas do dataframe e o segundo √≠ndice para o subconjunto das colunas. Ou seja, df[linhas, colunas].\nVoc√™ pode pensar em um √≠ndice como um CEP ou o endere√ßo de um valor ou um conjunto de valores, e a indexa√ß√£o como o processo que voc√™ utilizaria para encontrar um desses valores numa lista telef√¥nica, no Google ou no Maps.\nVoc√™ tem uma escolha quando se trata de escrever √≠ndices. Existem seis maneiras diferentes de escrever um √≠ndice para o R e cada uma faz algo ligeiramente diferente. Eles s√£o todos muito simples e muito √∫teis, ent√£o vamos dar uma olhada em cada um deles. Voc√™ pode criar √≠ndices com:\n Inteiros positivos Inteiros negativos Zero Espa√ßos em branco Valores l√≥gicos Nomes  O mais simples de usar s√£o os inteiros positivos.\nPor exemplo, caso voc√™ queira extrair um valor que est√° na primeira linha e na quarta coluna do seu data frame, no caso, estamos usando o df, que √© uma pequena amostra da pnad, lembra? Como podemos fazer isso?\ndf[1, 4]\r ## [1] \u0026quot;Urbana\u0026quot;\r Para extrair mais de um valor, use um vetor com inteiros positivos. Por exemplo, se voc√™ quer retornar a primeira linha de df com df[1, c(1,2,3)] ou df[1, 1:3]\ndf[1,1:3]\r ## Ano Trimestre UF\r## 1 2021 1 Cear√°\r df[1, c(1,2,3)]\r ## Ano Trimestre UF\r## 1 2021 1 Cear√°\r Essa nota√ß√£o n√£o √© limitada somente a objetos do tipo data frame. Voc√™ pode usar a mesma sintaxe para selecionar valores em qualquer objeto R, desde que voc√™ forne√ßa um √≠ndice para cada dimens√£o do objeto. Ent√£o, por exemplo, voc√™ pode definir um subconjunto de um vetor (que tem uma dimens√£o) com um √∫nico √≠ndice:\nvec \u0026lt;- c(10, 15, 31, 60, 10, 2)\rvec[1:3]\r ## [1] 10 15 31\r Bom, isso √© a nota√ß√£o usando usando inteiros positivos. Como seria com inteiros negativos? Quais as diferen√ßas?\nVamos l√°!\nOs inteiros negativos fazem exatamente o oposto dos inteiros positivos durante a indexa√ß√£o. O R retornar√° todos os elementos, exceto os elementos em um √≠ndice negativo. Por exemplo, df[-1, 1:10] retornar√° tudo, exceto a primeira linha do data frame. df[-(2:999), 1:10] retornar√° a primeira linha e a √∫ltima linha (e excluir√° todo o resto):\ndf[-(2:999), 1:10]\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## 1000 2021 1 Santa Catarina Rural Homem 66 Branca 2\r## VD3005 VD4016\r## 1 16 anos ou mais de estudo NA\r## 1000 5 anos de estudo 1000\r df[-1, 9]\r ## [1] \u0026quot;11 anos de estudo\u0026quot; ## [2] \u0026quot;12 anos de estudo\u0026quot; ## [3] \u0026quot;5 anos de estudo\u0026quot; ## [4] \u0026quot;9 anos de estudo\u0026quot; ## [5] \u0026quot;14 anos de estudo\u0026quot; ## [6] \u0026quot;16 anos ou mais de estudo\u0026quot; ## [7] \u0026quot;12 anos de estudo\u0026quot; ## [8] \u0026quot;14 anos de estudo\u0026quot; ## [9] \u0026quot;5 anos de estudo\u0026quot; ## [10] \u0026quot;9 anos de estudo\u0026quot; ....\rSa√≠da truncada para visualiza√ß√£o\r A vantagem de usar inteiros negativos ao inv√©s de inteiros positivos na indexa√ß√£o, √© que os inteiros negativos s√£o uma maneira mais eficiente de criar um subconjunto do que os inteiros positivos, se voc√™ quiser incluir a maioria das linhas ou colunas de um data frame.\nNa nota√ß√£o df[-2,2] o que ir√° ser mostrado pelo R?\nO que acontecer√° se voc√™ usar o zero como um √≠ndice? Zero n√£o √© um inteiro positivo nem um inteiro negativo, mas ele ainda usar√° para fazer um tipo de subconjunto. O R, neste caso, n√£o retornar√° nada de uma dimens√£o quando voc√™ usa zero como um √≠ndice:\ndf[0, 0]\r ## data frame with 0 columns and 0 rows\r Pra ser sincera, indexar com 0 n√£o ajuda em muita coisa.\nAl√©m dos inteiros positivos, inteiros negativos, e zero, voc√™ pode tamb√©m usar espa√ßos em branco na indexa√ß√£o. O espa√ßo em branco no R vai extrair todos os valores em uma dimens√£o. Isso permite subdividir um objeto em uma dimens√£o, mas n√£o nas outras, o que √© √∫til para extrair linhas ou colunas inteiras de um data frame:\ndf[1, ]\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## VD3005 VD4016\r## 1 16 anos ou mais de estudo NA\r df[, 5]\r ## [1] \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot;\r## [9] \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot;\r## [17] \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot;\r## [25] \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; ## [33] \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot;\r## [41] \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; ## [49] \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot;\r## [57] \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot;\r## [65] \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot;\r## [73] \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Homem\u0026quot; \u0026quot;Mulher\u0026quot; \u0026quot;Mulher\u0026quot;\r....\rSa√≠da truncada para visualiza√ß√£o\r Estamos quase chegando no final dos tipos de indexa√ß√£o que s√£o poss√≠veis de serem feitas no R. No caso de valores l√≥gicos, se voc√™ fornecer um vetor de TRUEs e FALSEs como seu √≠ndice, o R combinar√° cada TRUE e FALSE com uma linha do data frame (ou uma coluna, dependendo de onde voc√™ colocar o √≠ndice). O R ent√£o retornar√° cada linha que corresponde a um TRUE.\nPode ser √∫til imaginar R lendo o data frame e perguntando: \u0026ldquo;Devo retornar a en√©sima linha da estrutura de dados?\u0026rdquo; e depois consultar o en√©simo valor do √≠ndice para obter sua resposta. Para que este sistema funcione, seu vetor deve ser t√£o longo quanto a dimens√£o que voc√™ est√° tentando subdividir:\ndf[1, c(TRUE, TRUE, FALSE)]\r ## Ano Trimestre V1022 V2007 V2010 VD2003 VD4016\r## 1 2021 1 Urbana Homem Branca 2 NA\r rows \u0026lt;- c(F, TRUE, TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F)\rdf[rows, ]\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 2 2021 1 Distrito Federal Urbana Mulher 19 Parda 4\r## 3 2021 1 Pernambuco Urbana Mulher 36 Preta 2\r## 54 2021 1 Rond√¥nia Urbana Homem 44 Branca 2\r## 55 2021 1 Esp√≠rito Santo Urbana Mulher 45 Branca 4\r## 106 2021 1 Minas Gerais Rural Homem 31 Parda 3\r## 107 2021 1 S√£o Paulo Urbana Homem 14 Branca 4\r## 158 2021 1 Alagoas Urbana Homem 38 Parda 1\r## 159 2021 1 Amap√° Urbana Mulher 20 Parda 3\r## 210 2021 1 Roraima Urbana Homem 55 Parda 6\r....\rSa√≠da truncada para visualiza√ß√£o\r Esse sistema ser√° de grande ajuda na parte de modifica√ß√£o de valores que veremos daqui a pouco.\nFinalmente, voc√™ pode pedir os elementos que deseja pelo nome - se o seu objeto tiver nomes (consulte Nomes). Essa √© uma maneira comum de extrair as colunas de um data frame, j√° que as colunas quase sempre t√™m um nome:\nnames(df)\r ## [1] \u0026quot;Ano\u0026quot; \u0026quot;Trimestre\u0026quot; \u0026quot;UF\u0026quot; \u0026quot;V1022\u0026quot; \u0026quot;V2007\u0026quot; \u0026quot;V2009\u0026quot; ## [7] \u0026quot;V2010\u0026quot; \u0026quot;VD2003\u0026quot; \u0026quot;VD3005\u0026quot; \u0026quot;VD4016\u0026quot;\r df[3, c(\u0026quot;UF\u0026quot;, \u0026quot;V2007\u0026quot;, \u0026quot;V2010\u0026quot;)]\r ## UF V2007 V2010\r## 3 Pernambuco Mulher Preta\r df[ , \u0026quot;VD3005\u0026quot;]\r ## [1] \u0026quot;16 anos ou mais de estudo\u0026quot; ## [2] \u0026quot;11 anos de estudo\u0026quot; ## [3] \u0026quot;12 anos de estudo\u0026quot; ## [4] \u0026quot;5 anos de estudo\u0026quot; ## [5] \u0026quot;9 anos de estudo\u0026quot; ## [6] \u0026quot;14 anos de estudo\u0026quot; ## [7] \u0026quot;16 anos ou mais de estudo\u0026quot; ## [8] \u0026quot;12 anos de estudo\u0026quot; ## [9] \u0026quot;14 anos de estudo\u0026quot; ## [10] \u0026quot;5 anos de estudo\u0026quot; ....\rSa√≠da truncada para visualiza√ß√£o\r Exerc√≠cios Retorne a informa√ß√£o da observa√ß√£o 800, e as colunas Ano, VD3005, V2009, V2010 do nosso data frame da amostra da pnad. O que o R retornar√°? Fa√ßa a mesma indexa√ß√£o usando inteiros positivos ou inteiros negativos.\nDiferentes sele√ß√µes: [[ e $ Dois tipos de objeto em R obedecem a um segundo sistema opcional de nota√ß√£o. Voc√™ pode extrair valores de data frames e listas com a sintaxe $. Voc√™ encontrar√° a sintaxe $ repetidamente no R, ent√£o vamos examinar como ela funciona.\nPara selecionar uma coluna de um data frame, escreva o nome do data frame, no caso df, e o nome da coluna separados por $. Observe que nenhuma aspa deve estar no nome da coluna:\ndf$V2009\r ## [1] 80 19 36 50 43 35 72 23 23 47 71 16 48 13 25 3 27 83\r## [19] 55 79 14 80 20 21 22 69 57 27 63 35 28 41 39 71 7 45\r## [37] 11 9 48 14 48 47 5 36 25 55 8 64 7 58 30 1 18 44\r## [55] 45 17 9 24 11 11 71 75 49 20 55 31 60 2 7 81 68 15\r## [73] 31 2 44 40 49 55 9 40 55 0 35 32 7 63 62 54 48 5\r## [91] 46 49 20 90 16 0 41 15 67 26 22 18 58 63 0 31 14 39\r## [109] 34 44 61 48 47 29 43 65 10 36 20 7 28 18 23 75 37 49\r## [127] 45 3 61 54 38 50 41 47 39 44 32 27 66 55 70 69 41 31\r## [145] 38 91 62 30 21 59 4 29 5 24 83 6 15 38 20 89 85 44\r## [163] 73 7 49 22 33 5 18 4 27 22 0 21 74 26 58 52 77 36\r....\rSa√≠da truncada para visualiza√ß√£o\r O R retornar√° todos os valores da coluna como um vetor. Esta nota√ß√£o $ √© muito √∫til e muito usada porque voc√™ freq√ºentemente armazenar√° as vari√°veis de seus conjuntos de dados como colunas em um data frame. De vez em quando, voc√™ desejar√° executar uma fun√ß√£o como mean() ou median() nos valores de uma vari√°vel. Em R, essas fun√ß√µes esperam um vetor de valores como entrada, e o df$V2009 entrega seus dados no formato certo:\nmean(df$V2009)\r ## [1] 36.939\r Voc√™ pode usar a mesma nota√ß√£o com $ com os elementos de uma lista, se eles tiverem nomes. Essa nota√ß√£o tamb√©m tem uma vantagem com listas. Se voc√™ criar um subconjunto de uma lista da maneira usual, o R retornar√° uma nova lista que cont√©m os elementos solicitados, mesmo se voc√™ solicitar apenas um √∫nico elemento.\nlista \u0026lt;- list(numbers = c(1, 2), logical = TRUE, strings = c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;))\rlista\r ## $numbers\r## [1] 1 2\r## ## $logical\r## [1] TRUE\r## ## $strings\r## [1] \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; \u0026quot;c\u0026quot;\r lista[1]\r ## $numbers\r## [1] 1 2\r O resultado √© uma lista menor com um elemento. Esse elemento √© o vetor c(1, 2). Isso pode ser irritante porque muitas fun√ß√µes R n√£o funcionam com listas. Por exemplo, sum(lst[1]) retornar√° um erro. Para voc√™ conseguir fazer uma opera√ß√£o com lista, voc√™ precisar√° usar $:\nsum(lista$numbers)\r ## [1] 3\r Se os elementos em sua lista n√£o tiverem nomes (ou voc√™ n√£o quiser usar os nomes), voc√™ pode usar dois colchetes [[ ]], em vez de um, para criar um subconjunto da lista. Essa nota√ß√£o far√° a mesma coisa que a nota√ß√£o $:\nlista[[1]]\r ## [1] 1 2\r Em outras palavras, se voc√™ subdividir uma lista com a nota√ß√£o de colchete √∫nico, o R retornar√° uma lista menor. Se voc√™ subdividir uma lista com a nota√ß√£o de colchetes duplos, o R retornar√° apenas os valores que estavam dentro de um elemento da lista. Voc√™ pode combinar esse recurso com qualquer um dos m√©todos de indexa√ß√£o de R:\nlista[\u0026quot;numbers\u0026quot;]\r ## $numbers\r## [1] 1 2\r lista[[\u0026quot;numbers\u0026quot;]]\r ## [1] 1 2\r Essa diferen√ßa √© sutil, mas importante. Na comunidade R, h√° uma maneira popular e √∫til de pensar sobre isso. Imagine que cada lista √© um trem e cada elemento √© um vag√£o. Quando voc√™ usa colchetes simples, o R seleciona vag√µes de trem individuais e os retorna como um novo trem. Cada vag√£o mant√©m seu conte√∫do, mas esse conte√∫do ainda est√° dentro de um vag√£o de trem (ou seja, uma lista). Quando voc√™ usa colchetes duplos, o R realmente descarrega o carro e lhe devolve o conte√∫do. Resumindo:\nUse colchetes simples para selecionar vag√µes de trem e colchetes duplos para selecionar o conte√∫do dentro de um vag√£o.\nExerc√≠cios Assim como na lista, √© poss√≠vel usar os colchetes [[ ]] em data frame. Tente us√°-los no data frame da pnad. Quais s√£o as diferen√ßas encontradas?\nModificando valores Para manipular os valores dentro do seu data frame, fa√ßa primeiro uma c√≥pia que voc√™ pode manipular. Isso garantir√° que voc√™ sempre tenha uma c√≥pia original do data frame para usar (caso as coisas d√™em errado):\ndf2 \u0026lt;- df\r Modificando os valores diretamente Voc√™ pode usar o sistema de nota√ß√£o de R para modificar valores dentro de um objeto. Primeiro, descreva o valor (ou valores) que voc√™ deseja modificar. Em seguida, use o operador de atribui√ß√£o \u0026lt;- para sobrescrever esses valores. O R ir√° atualizar os valores selecionados no objeto original. Em um exemplo real:\nvetor \u0026lt;- c(0, 0, 0, 0, 0, 0)\rvetor\r ## [1] 0 0 0 0 0 0\r Voc√™ pode selecionar um valor dentro desse vetor¬∑ Neste caso selecionamos o primeiro:\nvetor[1]\r ## [1] 0\r E aqui, podemos modificar o valor:\nvetor[1] \u0026lt;- 35\rvetor\r ## [1] 35 0 0 0 0 0\r Voc√™ pode substituir v√°rios valores de uma vez, desde que o n√∫mero de novos valores seja igual ao n√∫mero de valores selecionados:\nvetor[c(3, 4, 5)] \u0026lt;- c(1, 1, 1)\rvetor\r ## [1] 35 0 1 1 1 0\r vetor[4:6] \u0026lt;- vetor[4:6] + 1\rvetor\r ## [1] 35 0 1 2 2 1\r Voc√™ tamb√©m pode criar valores que ainda n√£o existem em seu objeto. O R ir√° expandir o objeto para acomodar os novos valores:\nvetor[7] \u0026lt;- 20\rvetor\r ## [1] 35 0 1 2 2 1 20\r Isto √© uma √≥tima maneira de adicionar novas vari√°veis ao data frame:\ndf2$nova_coluna \u0026lt;- 1:1000\rhead(df2)\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## 2 2021 1 Distrito Federal Urbana Mulher 19 Parda 4\r## 3 2021 1 Pernambuco Urbana Mulher 36 Preta 2\r## 4 2021 1 Santa Catarina Urbana Homem 50 Parda 2\r## 5 2021 1 S√£o Paulo Urbana Mulher 43 Parda 3\r## 6 2021 1 Goi√°s Urbana Homem 35 Parda 3\r## VD3005 VD4016 nova_coluna\r## 1 16 anos ou mais de estudo NA 1\r## 2 11 anos de estudo NA 2\r## 3 12 anos de estudo 1045 3\r## 4 5 anos de estudo 1500 4\r## 5 9 anos de estudo 1600 5\r## 6 14 anos de estudo 3000 6\r Da mesma forma que voc√™ criou uma nova coluna, √© poss√≠vel remov√™-la atribuindo o valor NULL\ndf2$nova_coluna \u0026lt;- NULL\rhead(df2)\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## 2 2021 1 Distrito Federal Urbana Mulher 19 Parda 4\r## 3 2021 1 Pernambuco Urbana Mulher 36 Preta 2\r## 4 2021 1 Santa Catarina Urbana Homem 50 Parda 2\r## 5 2021 1 S√£o Paulo Urbana Mulher 43 Parda 3\r## 6 2021 1 Goi√°s Urbana Homem 35 Parda 3\r## VD3005 VD4016\r## 1 16 anos ou mais de estudo NA\r## 2 11 anos de estudo NA\r## 3 12 anos de estudo 1045\r## 4 5 anos de estudo 1500\r## 5 9 anos de estudo 1600\r## 6 14 anos de estudo 3000\r Voc√™ pode selecionar um conjunto de linhas dentro de um data frame usando uma combina√ß√£o dos sistemas de nota√ß√£o do R. Voc√™ pode destacar apenas os valores que voc√™ quer, definindo a dimens√£o das colunas do df2 com [. Ou, voc√™ pode definir um subconjunto da coluna df2$UF, misturando o $ com o [.\ndf2[c(5, 8, 39,44), ]\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 5 2021 1 S√£o Paulo Urbana Mulher 43 Parda 3\r## 8 2021 1 S√£o Paulo Urbana Mulher 23 Amarela 8\r## 39 2021 1 S√£o Paulo Urbana Mulher 48 Branca 3\r## 44 2021 1 S√£o Paulo Urbana Homem 36 Branca 2\r## VD3005 VD4016\r## 5 9 anos de estudo 1600\r## 8 12 anos de estudo 1200\r## 39 12 anos de estudo 1200\r## 44 16 anos ou mais de estudo NA\r ## selecionando linhas especificas e a coluna V2010\rdf2[c(5, 8, 39,44), 6]\r ## [1] 43 23 48 36\r ## podemos fazer o mesmo dessa forma\rdf2$V2009[c(5, 8, 39,44)]\r ## [1] 43 23 48 36\r Suponha que voc√™ sabe que os valores dessas linhas na coluna V2009 est√£o errados e voc√™ precisa arrum√°-los atribuindo novos valores. O conjunto de novos valores ter√° que ser do mesmo tamanho que o conjunto de valores que voc√™ est√° substituindo.\ndf2$V2009[c(5, 8, 39,44)] \u0026lt;- c(23, 23, 23, 23)\r# ou\rdf2$V2009[c(5, 8, 39,44)]\u0026lt;- 23\rhead(df2, 44)\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## 2 2021 1 Distrito Federal Urbana Mulher 19 Parda 4\r## 3 2021 1 Pernambuco Urbana Mulher 36 Preta 2\r## 4 2021 1 Santa Catarina Urbana Homem 50 Parda 2\r## 5 2021 1 S√£o Paulo Urbana Mulher 23 Parda 3\r## 6 2021 1 Goi√°s Urbana Homem 35 Parda 3\r## 7 2021 1 Amap√° Urbana Homem 72 Parda 3\r## 8 2021 1 S√£o Paulo Urbana Mulher 23 Amarela 8\r## 9 2021 1 Distrito Federal Urbana Homem 23 Parda 5\r....\rSa√≠da truncada para visualiza√ß√£o\r Observe que voc√™ est√° mudando os valores dos objetos salvos em df2, nos livros em ingl√™s, isso √© chamado de modify in place. Voc√™ n√£o acaba com uma c√≥pia modificada do df2; os novos valores aparecer√£o dentro do df2. √â preciso fazer isso de forma consciente e segura, para n√£o sobrescrever informa√ß√µes, por isso, recomendamos trabalhar com c√≥pias do objeto original (df2 ao inv√©s de df).\nA mesma t√©cnica funcionar√° se voc√™ armazenar seus dados em um vetor, matriz, array, lista ou data frame. Basta descrever os valores que voc√™ deseja alterar com o sistema de nota√ß√£o de R e, em seguida, atribuir esses valores com o operador de atribui√ß√£o de R \u0026lt;-.\nExerc√≠cios Considere o vetor abaixo. Atribua um novo valor na posi√ß√£o 3 deste vetor. √â poss√≠vel atribuir uma string no lugar de um n√∫mero?\nvetor_x\u0026lt;- c(10,30,50,10)\r Modificando com testes l√≥gicos E se voc√™ precisa saber um valor espec√≠fico e precise que o R te retorne a linha em que este valor est√°? Por que no caso anterior voc√™ sabia as linhas que voc√™ queria mudar, mas e quando o seu objeto √© grande e voc√™ n√£o sabe exatamente onde a informa√ß√£o se encontra? Como fazer?\nLembra do sistema de nota√ß√£o do R que permitia valores l√≥gicos? Voc√™ pode deixar um teste l√≥gico criar um vetor de TRUEs e FALSEs para voc√™.\nUm teste l√≥gico √© uma compara√ß√£o como ‚Äúum √© menor que dois?‚Äù, 1 \u0026lt; 2 ou ‚Äútr√™s √© maior que quatro?‚Äù, 3 \u0026gt; 4. O R fornece sete operadores l√≥gicos que voc√™ pode usar para fazer compara√ß√µes, e eles podem ser vistos na tabela abaixo.\nCada operador retorna TRUE ou FALSE. Se voc√™ usar um operador para comparar vetores, o R far√° compara√ß√µes entre elementos - assim como faz com os operadores aritm√©ticos:\nTable: Table 1: Operadores l√≥gicos\n   Operador Sintaxe Teste     \u0026gt; a \u0026gt; b a √© maior que b?   \u0026gt;= a \u0026gt;= b a √© maior ou igual a b?   \u0026lt; a \u0026lt; b a √© menor que b?   \u0026lt;= a \u0026lt;= b a √© menor ou igual a b?   == a == b a √© igual a b?   != a != b a √© diferente de b?   %in% a %in% c(a, b, c) a est√° contido em algum dos elementos de b?    1 \u0026gt; 2\r ## [1] FALSE\r 1 \u0026gt; c(0, 1, 2)\r ## [1] TRUE FALSE FALSE\r c(1, 2, 3) == c(3, 2, 1)\r ## [1] FALSE TRUE FALSE\r O operador %in% √© o √∫nico que n√£o executa normalmente o elemento inteiro. %in% testa se os valores do lado esquerdo est√£o no vetor do lado direito. Se voc√™ fornecer um vetor no lado esquerdo, este operador n√£o ir√° emparelhar os valores √† esquerda com os valores √† direita e, em seguida, far√° testes de elementos. Em vez disso, ele testar√° independentemente se cada valor √† esquerda est√° em algum lugar do vetor √† direita:\n1 %in% c(3, 4, 5)\r ## [1] FALSE\r c(1, 2) %in% c(3, 4, 5)\r ## [1] FALSE FALSE\r c(1, 2, 3) %in% c(3, 4, 5)\r ## [1] FALSE FALSE TRUE\r c(1, 2, 3, 4) %in% c(3, 4, 5)\r ## [1] FALSE FALSE TRUE TRUE\r Observe que voc√™ testa a igualdade com um sinal de igual duplo, ==, e n√£o um √∫nico sinal de igual, =, que √© outra maneira de escrever \u0026lt;-. √â f√°cil esquecer e usar a = b para testar se a √© igual a b. Infelizmente, voc√™ ter√° uma surpresa desagrad√°vel. O R n√£o retornar√° TRUE ou FALSE, porque n√£o ter√° que: a ser√° igual a b, porque voc√™ acabou de executar o equivalente a a \u0026lt;- b.\nVoc√™ pode comparar quaisquer dois objetos no R com um operador l√≥gico; no entanto, os operadores l√≥gicos fazem mais sentido se voc√™ comparar dois objetos do mesmo tipo de dados. Se voc√™ comparar objetos de diferentes tipos de dados, o R usar√° suas regras de coer√ß√£o para for√ßar os objetos ao mesmo tipo antes de fazer a compara√ß√£o.\nExerc√≠cios Extraia a coluna V2010 do df2 e teste os valores igual a \u0026lsquo;Branca\u0026rsquo;. Al√©m disso conte quantas linhas s√£o iguais a \u0026lsquo;Branca\u0026rsquo;. Dica: use a fun√ß√£o sum() para fazer a contagem.\nPara resumir, voc√™ pode usar um teste l√≥gico para selecionar valores dentro de um objeto.\nO subconjunto l√≥gico √© uma t√©cnica poderosa porque permite identificar, extrair e modificar rapidamente valores individuais em seu conjunto de dados. Ao trabalhar com subconjuntos l√≥gicos, voc√™ n√£o precisa saber onde existe um valor em seu conjunto de dados. Voc√™ s√≥ precisa saber como descrever o valor com um teste l√≥gico.\nAl√©m dos operadores l√≥gicos, tamb√©m temos os operadores booleanos, os operadores booleanos s√£o como \u0026amp; ou |. Eles reduzem os resultados de v√°rios testes l√≥gicos em um √∫nico TRUE ou FALSE. Os operadores e seus testes podem ser vistos na tabela abaixo.\nTable: Table 2: Operadores booleanos\n   Operador Sintaxe Teste     \u0026amp; cond1 \u0026amp; cond2 cond1 e cond2 s√£o simult√¢neamente verdadeiros?   | cond1 | cond2 cond1 ou cond2 √© verdadeiro?   xor xor(cond1, cond2) Apenas cond1 ou apenas cond2 √© verdadeiro?   ! !cond1 Inverta o resultado de cond1   any any(cond1, cond2, cond3, \u0026hellip;) Algum resultado em c(cond1, cond2, cond3, \u0026hellip;) √© verdadeiro?   all all(cond1, cond2, cond3, \u0026hellip;) Todos os resultados em c(cond1, cond2, cond3, \u0026hellip;) s√£o verdadeiros?    Para usar um operador booleano, coloque-o entre dois testes l√≥gicos completos. O R ir√° executar cada teste l√≥gico e, em seguida, usar o operador booleano para combinar os resultados em um √∫nico TRUE ou FALSE.\nQuando usados com vetores, os operadores booleanos seguir√£o a mesma execu√ß√£o elementar que os operadores aritm√©ticos e l√≥gicos:\na \u0026lt;- c(1, 2, 3)\rb \u0026lt;- c(1, 2, 3)\rc \u0026lt;- c(1, 2, 4)\ra == b\r ## [1] TRUE TRUE TRUE\r b == c\r ## [1] TRUE TRUE FALSE\r a == b \u0026amp; b == c\r ## [1] TRUE TRUE FALSE\r Voc√™ pode usar um operador booleano para localizar as pessoas de 40 anos e de escolaridade 9 anos de estudo no df2.\ndf2$V2009 == 40 \u0026amp; df2$VD3005 == \u0026quot;8 anos de estudo\u0026quot;\r ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r## [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r## [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r## [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r## [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r## [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r## [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r## [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r## [109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r....\rSa√≠da truncada para visualiza√ß√£o\r Valores desconhecidos Problemas com informa√ß√µes desconhecidas acontecem com frequ√™ncia na an√°lise de dados. Normalmente, eles s√£o mais simples: voc√™ n√£o sabe um valor porque a medi√ß√£o foi perdida, corrompida ou nunca feita para come√ßar. O R tem uma maneira de ajud√°-lo a gerenciar esses valores ausentes.\nO caractere NA √© um s√≠mbolo especial em R. Ele significa ‚Äún√£o dispon√≠vel‚Äù e pode ser usado como um espa√ßo reservado para informa√ß√µes ausentes. O R tratar√° NA exatamente como voc√™ deseja que as informa√ß√µes ausentes sejam tratadas. Por exemplo, qual resultado voc√™ esperaria se adicionar 1 a uma informa√ß√£o ausente?\n1 + NA\r ## [1] NA\r O R retornar√° uma segunda informa√ß√£o faltante. N√£o seria correto dizer que 1 + NA = 1 porque h√° uma boa chance de que o valor ausente n√£o seja zero. Voc√™ n√£o tem informa√ß√µes suficientes para determinar o resultado.\nNA == 1\r ## [1] NA\r Valores ausentes podem ajud√°-lo a contornar lacunas em seus conjuntos de dados, mas tamb√©m podem criar alguns problemas frustrantes. Suponha, por exemplo, que voc√™ coletou 1.000 observa√ß√µes e deseja tirar sua m√©dia com a fun√ß√£o mean(). Se um dos valores for NA, seu resultado ser√° NA:\nc(NA, 1:50)\r ## [1] NA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\r## [26] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\r## [51] 50\r mean(c(NA, 1:50))\r ## [1] NA\r A maioria das fun√ß√µes R vem com o argumento opcional, na.rm, que significa NA remove. o R ir√° ignorar NAs quando avaliar uma fun√ß√£o se voc√™ adicionar o argumento na.rm = TRUE:\nmean(c(NA, 1:50), na.rm = TRUE)\r ## [1] 25.5\r Ocasionalmente, voc√™ pode querer identificar os NAs em seu conjunto de dados com um teste l√≥gico, mas isso tamb√©m cria um problema. Como voc√™ faria isso? Se algo for um valor ausente, qualquer teste l√≥gico que o use retornar√° um valor ausente, at√© mesmo este teste:\nNA == NA\r ## [1] NA\r O que significa que testes como este n√£o ajudar√£o voc√™ a encontrar valores ausentes:\nc(1, 2, 3, NA) == NA\r ## [1] NA NA NA NA\r O R fornece uma fun√ß√£o especial que pode testar se um valor √© um NA. A fun√ß√£o √© is.na:\nis.na(NA)\r ## [1] TRUE\r vet \u0026lt;- c(1, 2, 3, NA)\ris.na(vet)\r ## [1] FALSE FALSE FALSE TRUE\r Exerc√≠cios Conte o n√∫mero de NAs na coluna VD4016 do data frame df2.\nRevis√£o Na aula de hoje falamos sobre como importar dados, exportar dados, manipula√ß√£o e diferentes nota√ß√µes para identifica√ß√£o de informa√ß√µes e modifica√ß√£o.\nPara selecionar os valores em um data frame, ou em outro objeto R, aprendemos a usar a nota√ß√£o data.frame[ , ] e a partir dessa nota√ß√£o, selecionar diferentes linhas e colunas, usando n√∫meros inteiros, n√∫meros negativos, espa√ßos em branco, valores l√≥gicos e nomes.\nAprendemos com listas e dataframes a sele√ß√£o pela nota√ß√£o de colchetes duplos [[ e $.\nEm rela√ß√£o a modifica√ß√£o de valores, aprendemos a modificar os valores no local dentro de um objeto R ao combinar a sintaxe da nota√ß√£o de R com o operador de atribui√ß√£o, \u0026lt;-. Isso permite que voc√™ atualize seus dados e limpe seus conjuntos de dados.\nAprendemos diferentes operadores l√≥gicos: \u0026gt;; \u0026gt;=; \u0026lt;; \u0026lt;=; ==; !=; %in% e operadores booleanos: \u0026amp;; |; xor; !; any; all.\nQuando voc√™ trabalha com grandes conjuntos de dados, modificar e recuperar valores cria um problema log√≠stico pr√≥prio. Como voc√™ pode pesquisar os dados para encontrar os valores que deseja modificar ou recuperar? Como um usu√°rio R, voc√™ pode fazer isso com subconjuntos l√≥gicos. Crie um teste l√≥gico com operadores l√≥gicos e booleanos e, em seguida, use o teste como um √≠ndice na nota√ß√£o de colchetes de R. O R retornar√° os valores que voc√™ est√° procurando, mesmo se voc√™ n√£o souber onde eles est√£o.\nExerc√≠cios Para os pr√≥ximos exerc√≠cios considere o data frame da pnad que estamos usando nas aulas.\n  Como voc√™ selecionaria o mesmo valor abaixo, mas usando inteiros negativos na sele√ß√£o?\ndf2[1,5]\r ## [1] \u0026quot;Homem\u0026quot;\r   Qual a diferen√ßa em usar em selecionar determinada informa√ß√£o em um data frame usando colchetes duplos [[]] e usando colchetes simples? Observe o exemplo abaixo para responder:\ndf2[['Ano']]\r ## [1] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [15] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [29] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [43] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [57] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [71] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [85] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [99] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [113] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [127] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r....\rSa√≠da truncada para visualiza√ß√£o\r df['Ano']\r ## Ano\r## 1 2021\r## 2 2021\r## 3 2021\r## 4 2021\r## 5 2021\r## 6 2021\r## 7 2021\r## 8 2021\r## 9 2021\r....\rSa√≠da truncada para visualiza√ß√£o\r   Considere o data frame abaixo:\nsala \u0026lt;- data.frame(\rid = c(1, 2, 3, 4, 5, 6),\ridade = c(20, 25, 30, 35, 40, 45),\rnome = c(\u0026quot;Fulano\u0026quot;, \u0026quot;Cicrano\u0026quot;, \u0026quot;Beltrano\u0026quot;, \u0026quot;Herculano\u0026quot;, \u0026quot;Mariano\u0026quot;, \u0026quot;Carrano\u0026quot;),\rsexo = \u0026quot;Masculino\u0026quot;,\rorigem = c(\u0026quot;Campinas\u0026quot;, \u0026quot;Barueri\u0026quot;, \u0026quot;Monte Verde\u0026quot;, \u0026quot;Rio de Janeiro\u0026quot;, \u0026quot;Natal\u0026quot;, \u0026quot;Belo Horizonte\u0026quot;)\r)\r Modifique o nome de \u0026lsquo;Mariano\u0026rsquo; por \u0026lsquo;Mariana\u0026rsquo;. E altere a vari√°vel sexo para que seja um vetor que altere o valor para \u0026lsquo;Feminino\u0026rsquo; na posi√ß√£o em que o nome foi trocado para Mariana.\n  Considere o mesmo data frame sala constru√≠do no exerc√≠cio anterior. Usando testes l√≥gicos e operadores Booleanos. Verifique:\na. se existe algum aluno que seja do sexo Masculino e seja de S√£o Paulo.\nb. se existe algum aluno que tem idade maior ou igual a 20 anos ou que seja de Campinas. c. se existe algu√©m com o nome Beltrano.\n  Agora considere o seguinte data frame e, usando as fun√ß√µes apropriadas ensinadas na aula de hoje, responda:\ncadastro \u0026lt;- data.frame(\rid = c(10, 105, 299, 645, 7907, 8660, 4992, 630),\ridade = c(20, 25, 30, 35, 40, 45, 60, 53),\rnome = c(\u0026quot;Thais\u0026quot;, NA, \u0026quot;Guilherme\u0026quot;, \u0026quot;Bet√¢nia\u0026quot;, \u0026quot;Ana Lucia\u0026quot;, NA, NA, \u0026quot;P√¢mela\u0026quot;),\rsexo = c(\u0026quot;Feminino\u0026quot;, \u0026quot;Masculino\u0026quot;,\u0026quot;Masculino\u0026quot;, NA ,NA, \u0026quot;Feminino\u0026quot;, \u0026quot;Masculino\u0026quot;, \u0026quot;Feminino\u0026quot;),\rorigem = c(\u0026quot;Campinas\u0026quot;, NA, \u0026quot;Monte Verde\u0026quot;, \u0026quot;Rio de Janeiro\u0026quot;, NA, \u0026quot;Belo Horizonte\u0026quot;,\u0026quot;S√£o Paulo\u0026quot;,\r\u0026quot;Rio de Janeiro\u0026quot;)\r)\r  Quantos NAs existe na coluna nome? Quantos NAs existe na coluna sexo? Quantos NAs existe na coluna origem? Substitua os NAs na coluna sexo pelo valor \u0026lsquo;Feminino\u0026rsquo;    Salve o data frame \u0026lsquo;cadastro\u0026rsquo; do exercicio anterior em um arquivo .csv. Como voc√™ faria isso? Quais os argumentos que devem ser usados?\n   ","date":1623715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623715200,"objectID":"12939f5bfef311db6bdd7d2b8245828b","permalink":"https://laddem.github.io/courses/rbase/dia2/","publishdate":"2021-06-15T00:00:00Z","relpermalink":"/courses/rbase/dia2/","section":"courses","summary":"Primeiros passos: trabalhando com bancos de dados em R","tags":null,"title":"Manipula√ß√£o de objetos em R","type":"book"},{"authors":null,"categories":null,"content":"Um modelo de ci√™ncia de dados Uma forma esquem√°tica, mas √∫til de encarar o processo de an√°lise de dados e de produ√ß√£o de conhecimento a partir de informa√ß√µes secund√°rias √© esta figura:\nEla acaba sendo um ponto de partida interessante porque contextualiza a maioria dos pacotes que vamos utilizar. O readr √© uma maneira de facilitar e tornar mais r√°pida a importa√ß√£o de dados em formatos comuns, como o texto delimitado por separadores e o formato colunado com larguras-fixas utilizado pelo IBGE.\nA tibble √© uma proposta de moderniza√ß√£o para o data.frame, aproveitando a estrutura flex√≠vel e poderosa, mas mudando certas conven√ß√µes, como a convers√£o de strings para fatores, permitindo a cria√ß√£o de colunas de listas, utiliza√ß√£o de nomes mais complexos para colunas, etc.\nO tidyr √© uma forma de reformatar (reshape) bancos de dados que v√™m em formatos que dificultam seu processamento, permitindo que o analista facilmente reconfigure a informa√ß√£o para o formato mais adequado. Ele √© o primeiro pacote que veremos sobre a parte de \u0026ldquo;cozinha\u0026rdquo; dos dados, no qual √© preciso processar o dado bruto para torn√°-lo pass√≠vel de an√°lise.\nO mesmo pode ser dito para os outros pacotes que veremos nos pr√≥ximos dias. Cada um deles foi pensado para resolver um problema ou facilitar uma rotina de trabalho relacionada com um dos passos descritos acima.\nPrograma√ß√£o liter√°ria V√°rios dos conceitos que guiam o design do tidyverse s√£o orientados por uma certa filosofia. Esta filosofia dita que a principal preocupa√ß√£o por tr√°s de um programa n√£o √© que ele funcione. Eventualmente e com um pouco de persist√™ncia, √© quase sempre poss√≠vel chegar a uma solu√ß√£o t√©cnica adequada. A principal quest√£o √© que o programa √© uma ferramenta de comunica√ß√£o com outras pessoas que o ler√£o, seja seus colegas, colaboradores, alunos ou voc√™ mesmo, daqui a 2 anos, quando lembrar que voc√™ j√° escreveu um programa para aquela tarefa. Trago aqui alguns trechos de Literate Programming, de Donald Knuth (1984), traduzidos livremente por este que vos fala:\n Creio que chegou a hora de melhorar significativamente a documenta√ß√£o dos programas, e que podemos atingir este objetivo tratando programas como obras liter√°rias. Por isso o t√≠tulo: \u0026ldquo;Programa√ß√£o Liter√°ria\u0026rdquo;. Abandonemos os velhos h√°bitos de construir programas: ao inv√©s de imaginar que nossa tarefa principal √© instruir um computador sobre o que deve ser feito, concentremo-nos em explicar aos seres humanos o que queremos que o computador fa√ßa. O praticante da programa√ß√£o liter√°ria pode ser visto como um ensa√≠sta, cuja principal preocupa√ß√£o √© com a clareza da exposi√ß√£o e a excel√™ncia no estilo. Tal autor, com um dicion√°rio na m√£o, escolhe os nomes das vari√°veis com cuidado e explica claramente seu significado. Ele ou ela esmera por um programa que √© compreens√≠vel porque seus conceitos foram introduzidos na melhor ordem poss√≠vel para o entendimento humano, utilizando uma mistura de m√©todos formais e informais que se complementam.\n Assim, v√°rias das escolhas feitas na constru√ß√£o de tidyverse procuram refor√ßar essa caracter√≠stica de interpretabilidade dos programas, como a ordem l√≥gica das opera√ß√µes com o pipe (%\u0026gt;%), fun√ß√µes com nomes mais longos e sem√¢nticos, a utiliza√ß√£o de uma fun√ß√£o espec√≠fica para cada tarefa, ao inv√©s da adapta√ß√£o de fun√ß√µes gen√©ricas para uma grande variedade de tarefas. O prop√≥sito de um c√≥digo escrito como tidyverse √© que, no limite, a pr√≥pria s√≠ntaxe do c√≥digo funcione como parte da documenta√ß√£o do programa.\nO mist√©rio do pipe: %\u0026gt;% Usu√°rios de longa data do R j√° podem ter encontrado no mato esse animal estranho e podem ter ficado confusos com seu significado. O pipe √© de origem humilde e nasceu nos sistemas Unix h√° muitas d√©cadas atr√°s. Seu objetivo √© muito simples: e se voc√™ tiver uma sequ√™ncia de computa√ß√µes em que cada uma recebe o resultado daquela feita anteriormente? Claro que voc√™ poderia fazer:\nx \u0026lt;- 1:10\ry \u0026lt;- diff(x)\rmean(y)\r ## [1] 1\r Mas n√£o seria interessante pular os objetos intermedi√°rios e ir direto ao ponto? O pipe vem do pacote magrittr, mas ele v√™m carregado em quase todos os pacotes do tidyverse. Vamos carregar logo o tibble.\n# Para ter acesso ao pipe, basta carregar um pacote do tidyverse, como tibble, dplyr, tidyr, etc.\r# Vamos carregar o tibble agora\rlibrary(tibble)\rx %\u0026gt;% diff() %\u0026gt;% mean()\r ## [1] 1\r Vejamos um exemplo mais real, quantos artistas existem no dataset billboard? Podemos usar unique e length para descobrir.\nx \u0026lt;- unique(tidyr::billboard$artist)\rlength(x)\r ## [1] 228\r Mas com %\u0026gt;% fica bem melhor:\ntidyr::billboard %\u0026gt;% .$artist %\u0026gt;% unique() %\u0026gt;% length()\r ## [1] 228\r Ok, mas como ele funciona? √â simples, o pipe carrega o objeto a sua esquerda num ponto . invis√≠vel que √© automaticamente passado como o primeiro argumento da fun√ß√£o √† direita.\nx \u0026lt;- 1:10\rmean(x)\r ## [1] 5.5\r x %\u0026gt;% mean()\r ## [1] 5.5\r OK, mas e se meu argumento n√£o for o primeiro, ainda posso usar pipe? Pode! √â s√≥ usar explicitamente um ponto no lugar onde voc√™ quer aproveitar o efeito:\niris %\u0026gt;% boxplot(Sepal.Length ~ Species, data = .)\r O ponto . depois de data indica indica que ali deve ser colocado o iris. O pipe √© uma pe√ßa chave de muitas fun√ß√µes do tidyverse, n√£o porque ele seja obrigat√≥rio, mas sim porque ele permite expressar sequ√™ncias de opera√ß√µes numa ordem mais l√≥gica, do tipo: \u0026ldquo;Primeiro fa√ßa a, ent√£o b, ent√£o c, \u0026hellip; \u0026ldquo;, ao contr√°rio da forma como isto √© geralmente feito usando par√™nteses para preced√™ncia.\n# Compare\rmean(diff(1:10))\r ## [1] 1\r 1:10 %\u0026gt;% diff %\u0026gt;% mean\r ## [1] 1\r E assim fica desmistificado o mist√©rio do pipe! Um √∫ltimo pulo do gato: pelo amor de deus ningu√©m digita Shift + %, \u0026gt;, Shift + %, basta usar o atalho: Ctrl + Shift + M que ele p√µe um pipe separado por espa√ßos %\u0026gt;%.\nreadr Usu√°rios do R provavelmente v√£o estar familiarizados com os nossos leitores de arquivos mais comuns: read.table e read.csv. Talvez muitos de voc√™s j√° at√© memorizaram alguns dos argumentos mais comuns. N√£o √© o caso aqui de revisitar esta fun√ß√£o, mas o readr tem muitos paralelos com elas, porque √© pensado como uma nova vers√£o da mesma coisa.\n# Comecemos carregando o readr\rlibrary(readr)\r Debaixo do cap√¥ O readr, como as fun√ß√µes de leitura do base √© uma cole√ß√£o de parsers, que transformam texto em objetos R com o tipo desejado.\nparse_number(c(\u0026quot;1\u0026quot;, \u0026quot;20\u0026quot;, \u0026quot;38\u0026quot;))\r ## [1] 1 20 38\r parse_character(c(\u0026quot;banana\u0026quot;, \u0026quot;ma√ß√£\u0026quot;, \u0026quot;p√™ra\u0026quot;))\r ## [1] \u0026quot;banana\u0026quot; \u0026quot;ma\u0026lt;e7\u0026gt;\u0026lt;e3\u0026gt;\u0026quot; \u0026quot;p\u0026lt;ea\u0026gt;ra\u0026quot;\r # Note os acentos e caracteres especiais\rparse_character(c(\u0026quot;banana\u0026quot;, \u0026quot;ma√ß√£\u0026quot;, \u0026quot;p√™ra\u0026quot;), locale = locale(encoding = \u0026quot;Windows-1252\u0026quot;))\r ## [1] \u0026quot;banana\u0026quot; \u0026quot;ma√ß√£\u0026quot; \u0026quot;p√™ra\u0026quot;\r parse_logical(c(\u0026quot;true\u0026quot;, \u0026quot;false\u0026quot;, \u0026quot;true\u0026quot;))\r ## [1] TRUE FALSE TRUE\r Em geral, a gente n√£o precisa descer tanto o n√≠vel, a gente vai trabalhar mesmo √© com os leitores de dados \u0026ldquo;retangulares\u0026rdquo;. Como os do base, eles s√£o read_csv, read_table, etc. Vamos trabalhar com bancos de dados que j√° v√™m no pacote, para facilitar o processo.\n# Lista os datasets que vem no pacote\rreadr_example()\r ## [1] \u0026quot;challenge.csv\u0026quot; \u0026quot;epa78.txt\u0026quot; \u0026quot;example.log\u0026quot; ## [4] \u0026quot;fwf-sample.txt\u0026quot; \u0026quot;massey-rating.txt\u0026quot; \u0026quot;mtcars.csv\u0026quot; ## [7] \u0026quot;mtcars.csv.bz2\u0026quot; \u0026quot;mtcars.csv.zip\u0026quot;\r Uma coisa que gosto de fazer √© olhar como o arquivo est√° organizado antes de tentar abr√≠-lo. Muitos de voc√™s podem fazer isso com readLines. Ela ganhou sua vers√£o no pacote com read_lines.\n# Vamos tentar abrir massey-rating.txt\rread_lines(readr_example(\u0026quot;massey-rating.txt\u0026quot;), n_max = 10)\r ## [1] \u0026quot;UCC PAY LAZ KPK RT COF BIH DII ENG ACU Rank Team Conf\u0026quot; ## [2] \u0026quot; 1 1 1 1 1 1 1 1 1 1 1 Ohio St B10 \u0026quot;\r## [3] \u0026quot; 2 2 2 2 2 2 2 2 4 2 2 Oregon P12 \u0026quot;\r## [4] \u0026quot; 3 4 3 4 3 4 3 4 2 3 3 Alabama SEC \u0026quot;\r## [5] \u0026quot; 4 3 4 3 4 3 5 3 3 4 4 TCU B12 \u0026quot;\r## [6] \u0026quot; 6 6 6 5 5 7 6 5 6 11 5 Michigan St B10 \u0026quot;\r## [7] \u0026quot; 7 7 7 6 7 6 11 8 7 8 6 Georgia SEC \u0026quot;\r## [8] \u0026quot; 5 5 5 7 6 8 4 6 5 5 7 Florida St ACC \u0026quot;\r## [9] \u0026quot; 8 8 9 9 10 5 7 7 10 7 8 Baylor B12 \u0026quot;\r## [10] \u0026quot; 9 11 8 13 11 11 12 9 14 9 9 Georgia Tech ACC \u0026quot;\r # Identificando o separador, escolho a fun√ß√£o adequada\rread_table(readr_example(\u0026quot;massey-rating.txt\u0026quot;))\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## UCC = col_double(),\r## PAY = col_double(),\r## LAZ = col_double(),\r## KPK = col_double(),\r## RT = col_double(),\r## COF = col_double(),\r## BIH = col_double(),\r## DII = col_double(),\r## ENG = col_double(),\r## ACU = col_double(),\r## Rank = col_double(),\r## Team = col_character(),\r## Conf = col_character()\r## )\r ## # A tibble: 10 x 13\r## UCC PAY LAZ KPK RT COF BIH DII ENG ACU Rank Team Conf ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 1 1 1 1 1 1 1 1 1 1 1 Ohio~ B10 ## 2 2 2 2 2 2 2 2 2 4 2 2 Oreg~ P12 ## 3 3 4 3 4 3 4 3 4 2 3 3 Alab~ SEC ## 4 4 3 4 3 4 3 5 3 3 4 4 TCU B12 ## 5 6 6 6 5 5 7 6 5 6 11 5 Mich~ B10 ## 6 7 7 7 6 7 6 11 8 7 8 6 Geor~ SEC ## 7 5 5 5 7 6 8 4 6 5 5 7 Flor~ ACC ## 8 8 8 9 9 10 5 7 7 10 7 8 Bayl~ B12 ## 9 9 11 8 13 11 11 12 9 14 9 9 Geor~ ACC ## 10 13 10 13 11 8 9 10 11 9 10 10 Miss~ SEC\r Como identifiquei que as colunas estavam separadas por espa√ßos, utilizei read_table cujo delimitador √© o espa√ßo \u0026quot; \u0026quot;.\nA segunda feature mais interessante do readr, √© uma interface para selecionar os tipos de colunas que ser√£o importadas. Vejamos o seguinte exemplo.\n# Vamos abrir mtcars.csv\rread_lines(readr_example(\u0026quot;mtcars.csv\u0026quot;), n_max = 10)\r ## [1] \u0026quot;\\\u0026quot;mpg\\\u0026quot;,\\\u0026quot;cyl\\\u0026quot;,\\\u0026quot;disp\\\u0026quot;,\\\u0026quot;hp\\\u0026quot;,\\\u0026quot;drat\\\u0026quot;,\\\u0026quot;wt\\\u0026quot;,\\\u0026quot;qsec\\\u0026quot;,\\\u0026quot;vs\\\u0026quot;,\\\u0026quot;am\\\u0026quot;,\\\u0026quot;gear\\\u0026quot;,\\\u0026quot;carb\\\u0026quot;\u0026quot;\r## [2] \u0026quot;21,6,160,110,3.9,2.62,16.46,0,1,4,4\u0026quot; ## [3] \u0026quot;21,6,160,110,3.9,2.875,17.02,0,1,4,4\u0026quot; ## [4] \u0026quot;22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\u0026quot; ## [5] \u0026quot;21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\u0026quot; ## [6] \u0026quot;18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\u0026quot; ## [7] \u0026quot;18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\u0026quot; ## [8] \u0026quot;14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\u0026quot; ## [9] \u0026quot;24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\u0026quot; ## [10] \u0026quot;22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\u0026quot;\r # Identificamos o separador de colunas, selecionamos a fun√ß√£o adequada\rread_csv(readr_example(\u0026quot;mtcars.csv\u0026quot;))\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## mpg = col_double(),\r## cyl = col_double(),\r## disp = col_double(),\r## hp = col_double(),\r## drat = col_double(),\r## wt = col_double(),\r## qsec = col_double(),\r## vs = col_double(),\r## am = col_double(),\r## gear = col_double(),\r## carb = col_double()\r## )\r ## # A tibble: 32 x 11\r## mpg cyl disp hp drat wt qsec vs am gear carb\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 21 6 160 110 3.9 2.62 16.5 0 1 4 4\r## 2 21 6 160 110 3.9 2.88 17.0 0 1 4 4\r## 3 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1\r## 4 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1\r## 5 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2\r## 6 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1\r## 7 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4\r## 8 24.4 4 147. 62 3.69 3.19 20 1 0 4 2\r## 9 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2\r## 10 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4\r## # ... with 22 more rows\r O console nos mostra que a leitura do banco foi completada, mas tamb√©m mostra Column Specification. Isto indica qual o tipo de dado que foi identificado automaticamente numa an√°lise feita pela fun√ß√£o guess_parser. Em diversos casos, n√≥s podemos querer identificar manualmente as colunas. Vejamos um exemplo:\n# Vamos identificar as colunas com spec\rspec_csv(readr_example(\u0026quot;mtcars.csv\u0026quot;))\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## mpg = col_double(),\r## cyl = col_double(),\r## disp = col_double(),\r## hp = col_double(),\r## drat = col_double(),\r## wt = col_double(),\r## qsec = col_double(),\r## vs = col_double(),\r## am = col_double(),\r## gear = col_double(),\r## carb = col_double()\r## )\r ## cols(\r## mpg = col_double(),\r## cyl = col_double(),\r## disp = col_double(),\r## hp = col_double(),\r## drat = col_double(),\r## wt = col_double(),\r## qsec = col_double(),\r## vs = col_double(),\r## am = col_double(),\r## gear = col_double(),\r## carb = col_double()\r## )\r # Copia e cola, modifica as colunas que queremos alterar\rspec_cols \u0026lt;- cols(\rmpg = col_double(),\rcyl = col_factor(), # N de cilindros do autom√≥vel\rdisp = col_double(),\rhp = col_double(),\rdrat = col_double(),\rwt = col_double(),\rqsec = col_double(),\rvs = col_double(),\ram = col_factor(c(\u0026quot;0\u0026quot;, \u0026quot;1\u0026quot;)), # Transmiss√£o autom√°tica ou manual\rgear = col_double(),\rcarb = col_double()\r)\rdf \u0026lt;- read_csv(readr_example(\u0026quot;mtcars.csv\u0026quot;), col_types = spec_cols)\rdf\r ## # A tibble: 32 x 11\r## mpg cyl disp hp drat wt qsec vs am gear carb\r## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 21 6 160 110 3.9 2.62 16.5 0 1 4 4\r## 2 21 6 160 110 3.9 2.88 17.0 0 1 4 4\r## 3 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1\r## 4 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1\r## 5 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2\r## 6 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1\r## 7 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4\r## 8 24.4 4 147. 62 3.69 3.19 20 1 0 4 2\r## 9 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2\r## 10 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4\r## # ... with 22 more rows\r # Para importar apenas colunas selecionadas, utilize 'cols_only()'\rspec_cols2 \u0026lt;- cols_only(\rmpg = col_double(),\rcyl = col_factor(), # N de cilindros do autom√≥vel\ram = col_factor(c(\u0026quot;0\u0026quot;, \u0026quot;1\u0026quot;)), # Transmiss√£o autom√°tica ou manual\rgear = col_double(),\rcarb = col_double()\r)\rdf2 \u0026lt;- read_csv(readr_example(\u0026quot;mtcars.csv\u0026quot;), col_types = spec_cols2)\rdf2\r ## # A tibble: 32 x 5\r## mpg cyl am gear carb\r## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 21 6 1 4 4\r## 2 21 6 1 4 4\r## 3 22.8 4 1 4 1\r## 4 21.4 6 0 3 1\r## 5 18.7 8 0 3 2\r## 6 18.1 6 0 3 1\r## 7 14.3 8 0 3 4\r## 8 24.4 4 0 4 2\r## 9 22.8 4 0 4 2\r## 10 19.2 6 0 4 4\r## # ... with 22 more rows\r # Para indicar os tipos de colunas de um jeito mais sucinto, utilize uma string:\rdf \u0026lt;- read_csv(readr_example(\u0026quot;mtcars.csv\u0026quot;), col_types = \u0026quot;dfddddddfdd\u0026quot;)\r# S√≥ cuidado pra n√£o perder a conta dos ds!\rdf\r ## # A tibble: 32 x 11\r## mpg cyl disp hp drat wt qsec vs am gear carb\r## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 21 6 160 110 3.9 2.62 16.5 0 1 4 4\r## 2 21 6 160 110 3.9 2.88 17.0 0 1 4 4\r## 3 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1\r## 4 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1\r## 5 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2\r## 6 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1\r## 7 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4\r## 8 24.4 4 147. 62 3.69 3.19 20 1 0 4 2\r## 9 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2\r## 10 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4\r## # ... with 22 more rows\r Voc√™ tamb√©m pode querer definir caracter√≠sticas de localiza√ß√£o, como a codifica√ß√£o de caracteres, os separadores de decimal e de milhar e etc. A melhor forma de fazer isso √© definir um locale.\nmeu_locale \u0026lt;- locale(encoding = \u0026quot;UTF-8\u0026quot;, decimal_mark = \u0026quot;,\u0026quot;, grouping_mark = \u0026quot;.\u0026quot;)\r A√≠ √© s√≥ passar isso pra uma das fun√ß√µes do pacote sob o argumento locale\nread_csv(readr_example(\u0026quot;mtcars.csv\u0026quot;), locale = meu_locale)\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## mpg = col_number(),\r## cyl = col_double(),\r## disp = col_number(),\r## hp = col_double(),\r## drat = col_number(),\r## wt = col_number(),\r## qsec = col_number(),\r## vs = col_double(),\r## am = col_double(),\r## gear = col_double(),\r## carb = col_double()\r## )\r ## # A tibble: 32 x 11\r## mpg cyl disp hp drat wt qsec vs am gear carb\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 21 6 160 110 39 262 1646 0 1 4 4\r## 2 21 6 160 110 39 2875 1702 0 1 4 4\r## 3 228 4 108 93 385 232 1861 1 1 4 1\r## 4 214 6 258 110 308 3215 1944 1 0 3 1\r## 5 187 8 360 175 315 344 1702 0 0 3 2\r## 6 181 6 225 105 276 346 2022 1 0 3 1\r## 7 143 8 360 245 321 357 1584 0 0 3 4\r## 8 244 4 1467 62 369 319 20 1 0 4 2\r## 9 228 4 1408 95 392 315 229 1 0 4 2\r## 10 192 6 1676 123 392 344 183 1 0 4 4\r## # ... with 22 more rows\r Existe ainda a possibilidade de ler dados colunados com largura-fixa. readr implementa quatro fun√ß√µes diferentes para ajudar na constru√ß√£o do dicion√°rio:\n# Nossos dados\rx \u0026lt;- readr_example(\u0026quot;fwf-sample.txt\u0026quot;)\rread_lines(x, n_max = 10)\r ## [1] \u0026quot;John Smith WA 418-Y11-4111\u0026quot;\r## [2] \u0026quot;Mary Hartford CA 319-Z19-4341\u0026quot;\r## [3] \u0026quot;Evan Nolan IL 219-532-c301\u0026quot;\r # separados por espa√ßo\rdic1 \u0026lt;- fwf_empty(x)\rdic1\r ## $begin\r## [1] 0 5 20 30\r## ## $end\r## [1] 4 13 22 NA\r## ## $skip\r## [1] 0\r## ## $col_names\r## [1] \u0026quot;X1\u0026quot; \u0026quot;X2\u0026quot; \u0026quot;X3\u0026quot; \u0026quot;X4\u0026quot;\r df \u0026lt;- read_fwf(file = x, col_positions = dic1)\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## X1 = col_character(),\r## X2 = col_character(),\r## X3 = col_character(),\r## X4 = col_character()\r## )\r df\r ## # A tibble: 3 x 4\r## X1 X2 X3 X4 ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 John Smith WA 418-Y11-4111\r## 2 Mary Hartford CA 319-Z19-4341\r## 3 Evan Nolan IL 219-532-c301\r # indicando a largura da coluna\rlarguras \u0026lt;- c(20, 10, 12)\rdic2 \u0026lt;- fwf_widths(larguras)\rdic2\r ## # A tibble: 3 x 3\r## begin end col_names\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 0 20 X1 ## 2 20 30 X2 ## 3 30 42 X3\r df \u0026lt;- read_fwf(file = x, col_positions = dic2)\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## X1 = col_character(),\r## X2 = col_character(),\r## X3 = col_character()\r## )\r df\r ## # A tibble: 3 x 3\r## X1 X2 X3 ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 John Smith WA 418-Y11-4111\r## 2 Mary Hartford CA 319-Z19-4341\r## 3 Evan Nolan IL 219-532-c301\r # indicando onde cada coluna come√ßa e termina\rcomeca \u0026lt;- c(1, 21, 30)\rtermina \u0026lt;- c(20, 29, 42)\rdic3 \u0026lt;- fwf_positions(comeca, termina)\rdic3\r ## # A tibble: 3 x 3\r## begin end col_names\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 0 20 X1 ## 2 20 29 X2 ## 3 29 42 X3\r df \u0026lt;- read_fwf(file = x, col_positions = dic3)\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## X1 = col_character(),\r## X2 = col_character(),\r## X3 = col_character()\r## )\r df\r ## # A tibble: 3 x 3\r## X1 X2 X3 ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 John Smith WA 418-Y11-4111\r## 2 Mary Hartford CA 319-Z19-4341\r## 3 Evan Nolan IL 219-532-c301\r # indicando pares nome-valor\rdic4 \u0026lt;- fwf_cols(\rnome = c(1, 20),\ruf = c(21, 29),\rnumero = c(30, 42))\rdic4\r ## # A tibble: 3 x 3\r## begin end col_names\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; ## 1 0 20 nome ## 2 20 29 uf ## 3 29 42 numero\r df \u0026lt;- read_fwf(file = x, col_positions = dic4)\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## nome = col_character(),\r## uf = col_character(),\r## numero = col_character()\r## )\r df\r ## # A tibble: 3 x 3\r## nome uf numero ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 John Smith WA 418-Y11-4111\r## 2 Mary Hartford CA 319-Z19-4341\r## 3 Evan Nolan IL 219-532-c301\r Especificar dicion√°rios para arquivos colunados √© um p√©-no-saco, por sorte, existem pacotes que j√° fizeram parte desse trabalho por n√≥s. O readr n√£o melhora muita o servi√ßo manual de constru√ß√£o de dicion√°rios, o que ele oferece √© um ganho de performance tremendo. read_fwf √© centenas de vezes mais r√°pido que o base read.fwf.\nEm termos do que o pacote faz, √© basicamente isso. A √∫nica coisa que falta mencionar √© que ele importa os dados como tibbles ao inv√©s do data.frame padr√£o, mas isso j√° √© um √≥timo gancho pra nossa pr√≥xima parte.\ntibbles Tibbles s√£o basicamente data.frames com um m√©todo mais bonitinho de print. Elas automaticamente se ajustam a largura da sua tela, omitindo as colunas que estouram, e por padr√£o imprimem s√≥ as 10 primeiras observa√ß√µes. Outras caracter√≠sticas que pessoalmente gosto, √© que elas informam o tipo de vari√°vel junto com o nome, arrendondam digitos significativos, destacam n√∫meros grandes, negativos, NAs e etc.\ndf \u0026lt;- read_csv(readr_example(\u0026quot;mtcars.csv\u0026quot;), col_types = cols()) # omitir a especifica√ß√£o\rdf\r ## # A tibble: 32 x 11\r## mpg cyl disp hp drat wt qsec vs am gear carb\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 21 6 160 110 3.9 2.62 16.5 0 1 4 4\r## 2 21 6 160 110 3.9 2.88 17.0 0 1 4 4\r## 3 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1\r## 4 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1\r## 5 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2\r## 6 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1\r## 7 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4\r## 8 24.4 4 147. 62 3.69 3.19 20 1 0 4 2\r## 9 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2\r## 10 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4\r## # ... with 22 more rows\r Do ponto de vista pr√°tico, elas funcionam exatamente igual a data.frames, tudo que voc√™ pode fazer com um data.frame, voc√™ faz com tibbles. O que elas trazem de novidade √©:\n Elas nunca mudam o tipo de dado inputado.  df1 \u0026lt;- data.frame(x = list(1:5, 1:10, 1:20))\rdf1\r ## x.1.5 x.1.10 x.1.20\r## 1 1 1 1\r## 2 2 2 2\r## 3 3 3 3\r## 4 4 4 4\r## 5 5 5 5\r## 6 1 6 6\r## 7 2 7 7\r## 8 3 8 8\r## 9 4 9 9\r## 10 5 10 10\r## 11 1 1 11\r## 12 2 2 12\r## 13 3 3 13\r## 14 4 4 14\r## 15 5 5 15\r## 16 1 6 16\r## 17 2 7 17\r## 18 3 8 18\r## 19 4 9 19\r## 20 5 10 20\r df2 \u0026lt;- tibble(x = list(1:5, 1:10, 1:20))\rdf2\r ## # A tibble: 3 x 1\r## x ## \u0026lt;list\u0026gt; ## 1 \u0026lt;int [5]\u0026gt; ## 2 \u0026lt;int [10]\u0026gt;\r## 3 \u0026lt;int [20]\u0026gt;\r  Elas nunca ajustam os nomes das vari√°veis  names(data.frame(`nome hipster` = 1))\r ## [1] \u0026quot;nome.hipster\u0026quot;\r names(tibble(`nome hipster` = 1))\r ## [1] \u0026quot;nome hipster\u0026quot;\r  Ela avalia cada argumento de forma \u0026ldquo;pregui√ßosa\u0026rdquo; e sequencial  # erro\rdata.frame(x = 1:5, y = x ^ 2)\r ## Error in x^2: argumento n√£o-num√©rico para operador bin√°rio\r # funciona\rtibble(x = 1:5, y = x ^ 2)\r ## # A tibble: 5 x 2\r## x y\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 1\r## 2 2 4\r## 3 3 9\r## 4 4 16\r## 5 5 25\r  Ela nunca utiliza row.names  head(data.frame(state.x77))\r ## Population Income Illiteracy Life.Exp Murder HS.Grad Frost Area\r## Alabama 3615 3624 2.1 69.05 15.1 41.3 20 50708\r## Alaska 365 6315 1.5 69.31 11.3 66.7 152 566432\r## Arizona 2212 4530 1.8 70.55 7.8 58.1 15 113417\r## Arkansas 2110 3378 1.9 70.66 10.1 39.9 65 51945\r## California 21198 5114 1.1 71.71 10.3 62.6 20 156361\r## Colorado 2541 4884 0.7 72.06 6.8 63.9 166 103766\r as_tibble(state.x77)\r ## # A tibble: 50 x 8\r## Population Income Illiteracy `Life Exp` Murder `HS Grad` Frost Area\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 3615 3624 2.1 69.0 15.1 41.3 20 50708\r## 2 365 6315 1.5 69.3 11.3 66.7 152 566432\r## 3 2212 4530 1.8 70.6 7.8 58.1 15 113417\r## 4 2110 3378 1.9 70.7 10.1 39.9 65 51945\r## 5 21198 5114 1.1 71.7 10.3 62.6 20 156361\r## 6 2541 4884 0.7 72.1 6.8 63.9 166 103766\r## 7 3100 5348 1.1 72.5 3.1 56 139 4862\r## 8 579 4809 0.9 70.1 6.2 54.6 103 1982\r## 9 8277 4815 1.3 70.7 10.7 52.6 11 54090\r## 10 4931 4091 2 68.5 13.9 40.6 60 58073\r## # ... with 40 more rows\r  Ela muda a \u0026ldquo;regra da reciclagem\u0026rdquo;: apenas s√£o aceitos vetores unit√°rios ou vetores de tamanho igual aos demais  data.frame(x = 1:10, y = 1:5)\r ## x y\r## 1 1 1\r## 2 2 2\r## 3 3 3\r## 4 4 4\r## 5 5 5\r## 6 6 1\r## 7 7 2\r## 8 8 3\r## 9 9 4\r## 10 10 5\r # erro\rtibble(x = 1:10, y = 1:5)\r ## Error: Tibble columns must have compatible sizes.\r## * Size 10: Existing data.\r## * Size 5: Column `y`.\r## i Only values of size one are recycled.\r tibble(x = 1:10, y = 1)\r ## # A tibble: 10 x 2\r## x y\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 1\r## 2 2 1\r## 3 3 1\r## 4 4 1\r## 5 5 1\r## 6 6 1\r## 7 7 1\r## 8 8 1\r## 9 9 1\r## 10 10 1\r tibble(x = 1:10, y = c(1:5, 1:5))\r ## # A tibble: 10 x 2\r## x y\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 1 1\r## 2 2 2\r## 3 3 3\r## 4 4 4\r## 5 5 5\r## 6 6 1\r## 7 7 2\r## 8 8 3\r## 9 9 4\r## 10 10 5\r  Tibbles s√£o estritas com rela√ß√£o as opera√ß√µes de subsetting com [  df1 \u0026lt;- data.frame(x = 1:3, y = 3:1)\rclass(df1[,1:2])\r ## [1] \u0026quot;data.frame\u0026quot;\r class(df1[,1])\r ## [1] \u0026quot;integer\u0026quot;\r df2 \u0026lt;- tibble(x = 1:3, y = 3:1)\rclass(df2[, 1:2])\r ## [1] \u0026quot;tbl_df\u0026quot; \u0026quot;tbl\u0026quot; \u0026quot;data.frame\u0026quot;\r class(df2[, 1])\r ## [1] \u0026quot;tbl_df\u0026quot; \u0026quot;tbl\u0026quot; \u0026quot;data.frame\u0026quot;\r # Se quiser extrair s√≥ uma coluna, utilize '[[' ou '$'\rclass(df2[[1]])\r ## [1] \u0026quot;integer\u0026quot;\r class(df2$x)\r ## [1] \u0026quot;integer\u0026quot;\r Elas tamb√©m n√£o aceitam \u0026lsquo;partial matching\u0026rsquo; de nomes de vari√°veis.\ndf \u0026lt;- data.frame(nome_de_cavalo = 1)\rdf$nome\r ## [1] 1\r df2 \u0026lt;- tibble(nome_de_cavalo = 1)\rdf2$nome\r ## Warning: Unknown or uninitialised column: `nome`.\r ## NULL\r tidyr Ok, nossos dados est√£o no R, mas, muitas vezes, n√£o est√£o no formato adequado. De maneira geral, analistas de dados v√£o dar prefer√™ncia a um formato parecido com este:\nIsto tem uma raz√£o de ser que deve tornar-se √≥bvia quando tentarmos realizar as opera√ß√µes de transforma√ß√£o de vari√°veis, visualiza√ß√£o, modelos, etc. Por√©m, muitas vezes outras considera√ß√µes s√£o feitas na hora registrar os dados, armazen√°-los, apresent√°-los ao p√∫blico, por isso, frequentemente nossos dados n√£o est√£o no formato tidy e precisam ser reformatados. Essa √© uma das principais tarefas do tidyr e √© nela que vamos nos concentrar.\nAtente que reformata√ß√£o, como muitos outros aspectos da an√°lise de dados, n√£o √© receita de bolo. Muitas vezes o formato desejado n√£o √© √≥bvio, muito menos os passos necess√°rios para chegar l√°. Por√©m, vou apresentar as ferramentas e alguns exemplos simples que cobrem muitos dos nossos casos de uso.\nlibrary(tidyr)\rwho\r ## # A tibble: 7,240 x 60\r## country iso2 iso3 year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 Afghani~ AF AFG 1980 NA NA NA NA\r## 2 Afghani~ AF AFG 1981 NA NA NA NA\r## 3 Afghani~ AF AFG 1982 NA NA NA NA\r## 4 Afghani~ AF AFG 1983 NA NA NA NA\r## 5 Afghani~ AF AFG 1984 NA NA NA NA\r## 6 Afghani~ AF AFG 1985 NA NA NA NA\r## 7 Afghani~ AF AFG 1986 NA NA NA NA\r## 8 Afghani~ AF AFG 1987 NA NA NA NA\r## 9 Afghani~ AF AFG 1988 NA NA NA NA\r## 10 Afghani~ AF AFG 1989 NA NA NA NA\r## # ... with 7,230 more rows, and 52 more variables: new_sp_m4554 \u0026lt;int\u0026gt;,\r## # new_sp_m5564 \u0026lt;int\u0026gt;, new_sp_m65 \u0026lt;int\u0026gt;, new_sp_f014 \u0026lt;int\u0026gt;,\r## # new_sp_f1524 \u0026lt;int\u0026gt;, new_sp_f2534 \u0026lt;int\u0026gt;, new_sp_f3544 \u0026lt;int\u0026gt;,\r## # new_sp_f4554 \u0026lt;int\u0026gt;, new_sp_f5564 \u0026lt;int\u0026gt;, new_sp_f65 \u0026lt;int\u0026gt;,\r## # new_sn_m014 \u0026lt;int\u0026gt;, new_sn_m1524 \u0026lt;int\u0026gt;, new_sn_m2534 \u0026lt;int\u0026gt;,\r## # new_sn_m3544 \u0026lt;int\u0026gt;, new_sn_m4554 \u0026lt;int\u0026gt;, new_sn_m5564 \u0026lt;int\u0026gt;,\r## # new_sn_m65 \u0026lt;int\u0026gt;, new_sn_f014 \u0026lt;int\u0026gt;, new_sn_f1524 \u0026lt;int\u0026gt;,\r## # new_sn_f2534 \u0026lt;int\u0026gt;, new_sn_f3544 \u0026lt;int\u0026gt;, new_sn_f4554 \u0026lt;int\u0026gt;,\r## # new_sn_f5564 \u0026lt;int\u0026gt;, new_sn_f65 \u0026lt;int\u0026gt;, new_ep_m014 \u0026lt;int\u0026gt;,\r## # new_ep_m1524 \u0026lt;int\u0026gt;, new_ep_m2534 \u0026lt;int\u0026gt;, new_ep_m3544 \u0026lt;int\u0026gt;,\r## # new_ep_m4554 \u0026lt;int\u0026gt;, new_ep_m5564 \u0026lt;int\u0026gt;, new_ep_m65 \u0026lt;int\u0026gt;,\r## # new_ep_f014 \u0026lt;int\u0026gt;, new_ep_f1524 \u0026lt;int\u0026gt;, new_ep_f2534 \u0026lt;int\u0026gt;,\r## # new_ep_f3544 \u0026lt;int\u0026gt;, new_ep_f4554 \u0026lt;int\u0026gt;, new_ep_f5564 \u0026lt;int\u0026gt;,\r## # new_ep_f65 \u0026lt;int\u0026gt;, newrel_m014 \u0026lt;int\u0026gt;, newrel_m1524 \u0026lt;int\u0026gt;,\r## # newrel_m2534 \u0026lt;int\u0026gt;, newrel_m3544 \u0026lt;int\u0026gt;, newrel_m4554 \u0026lt;int\u0026gt;,\r## # newrel_m5564 \u0026lt;int\u0026gt;, newrel_m65 \u0026lt;int\u0026gt;, newrel_f014 \u0026lt;int\u0026gt;,\r## # newrel_f1524 \u0026lt;int\u0026gt;, newrel_f2534 \u0026lt;int\u0026gt;, newrel_f3544 \u0026lt;int\u0026gt;,\r## # newrel_f4554 \u0026lt;int\u0026gt;, newrel_f5564 \u0026lt;int\u0026gt;, newrel_f65 \u0026lt;int\u0026gt;\r Esse √© um banco de dados dif√≠cil de analisar, ele tem 60 colunas, indicando o n√∫mero de casos de tuberculose em diversos est√°gios da doen√ßa, por pa√≠s e ano. O problema √© que ao inv√©s de termos algo como:\ntribble(\r~pais, ~ano, ~tipo, ~idade, ~casos,\r\u0026quot;brasil\u0026quot;, 1980, \u0026quot;extrapulmonar\u0026quot;, \u0026quot;15-24\u0026quot;, 10,\r\u0026quot;brasil\u0026quot;, 1990, \u0026quot;relapso\u0026quot;, \u0026quot;15-24\u0026quot;, 10\r)\r ## # A tibble: 2 x 5\r## pais ano tipo idade casos\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 brasil 1980 extrapulmonar 15-24 10\r## 2 brasil 1990 relapso 15-24 10\r As informa√ß√µes de tipo de tuberculose e idade dos pacientes est√£o espalhadas pelas colunas. Pra encurtar a hist√≥ria, precisamos \u0026ldquo;tombar\u0026rdquo; esse banco para que essas colunas se tornem um novo conjunto de vari√°veis. Vamos passo a passo.\n# Primeiro, vamos excluir as colunas iso2 e iso3, porque elas s√£o a mesma informa√ß√£o redundante\rwho$iso2 \u0026lt;- NULL\rwho$iso3 \u0026lt;- NULL\rwho1 \u0026lt;- pivot_longer(who,\rcols = c(new_sp_m014:newrel_f65),\rnames_to = \u0026quot;tipo_tb\u0026quot;,\rvalues_to = \u0026quot;casos\u0026quot;,\rvalues_drop_na = TRUE)\rwho1\r ## # A tibble: 76,046 x 4\r## country year tipo_tb casos\r## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt;\r## 1 Afghanistan 1997 new_sp_m014 0\r## 2 Afghanistan 1997 new_sp_m1524 10\r## 3 Afghanistan 1997 new_sp_m2534 6\r## 4 Afghanistan 1997 new_sp_m3544 3\r## 5 Afghanistan 1997 new_sp_m4554 5\r## 6 Afghanistan 1997 new_sp_m5564 2\r## 7 Afghanistan 1997 new_sp_m65 0\r## 8 Afghanistan 1997 new_sp_f014 5\r## 9 Afghanistan 1997 new_sp_f1524 38\r## 10 Afghanistan 1997 new_sp_f2534 36\r## # ... with 76,036 more rows\r Nosso primeiro passo √© transformar todas as colunas de novos casos em um par de colunas:\n cols indica quais colunas ser√£o tombadas e quais ser√£o mantidas. Uma coluna names_to recebe as categorias da vari√°vel. Uma coluna values_to recebe os valores das c√©lulas. values_drop_na √© uma op√ß√£o para eliminar c√©lulas vazias.  Essa primeira transforma√ß√£o j√° nos d√° um banco de dados um pouco mais amig√°vel, por√©m, ainda temos vari√°veis \u0026ldquo;presas\u0026rdquo; na coluna tipo_tb. Vamos tentar solt√°-las.\n# primeiro, corrigir uma pequena inconsistencia:\runique(who1$tipo_tb)\r ## [1] \u0026quot;new_sp_m014\u0026quot; \u0026quot;new_sp_m1524\u0026quot; \u0026quot;new_sp_m2534\u0026quot; \u0026quot;new_sp_m3544\u0026quot; \u0026quot;new_sp_m4554\u0026quot;\r## [6] \u0026quot;new_sp_m5564\u0026quot; \u0026quot;new_sp_m65\u0026quot; \u0026quot;new_sp_f014\u0026quot; \u0026quot;new_sp_f1524\u0026quot; \u0026quot;new_sp_f2534\u0026quot;\r## [11] \u0026quot;new_sp_f3544\u0026quot; \u0026quot;new_sp_f4554\u0026quot; \u0026quot;new_sp_f5564\u0026quot; \u0026quot;new_sp_f65\u0026quot; \u0026quot;new_sn_m014\u0026quot; ## [16] \u0026quot;new_sn_m1524\u0026quot; \u0026quot;new_sn_m2534\u0026quot; \u0026quot;new_sn_m3544\u0026quot; \u0026quot;new_sn_m4554\u0026quot; \u0026quot;new_sn_m5564\u0026quot;\r## [21] \u0026quot;new_sn_m65\u0026quot; \u0026quot;new_ep_m014\u0026quot; \u0026quot;new_ep_m1524\u0026quot; \u0026quot;new_ep_m2534\u0026quot; \u0026quot;new_ep_m3544\u0026quot;\r## [26] \u0026quot;new_ep_m4554\u0026quot; \u0026quot;new_ep_m5564\u0026quot; \u0026quot;new_ep_m65\u0026quot; \u0026quot;new_sn_f014\u0026quot; \u0026quot;newrel_m014\u0026quot; ## [31] \u0026quot;newrel_f014\u0026quot; \u0026quot;new_sn_f1524\u0026quot; \u0026quot;new_sn_f2534\u0026quot; \u0026quot;new_sn_f3544\u0026quot; \u0026quot;new_sn_f4554\u0026quot;\r## [36] \u0026quot;new_sn_f5564\u0026quot; \u0026quot;new_sn_f65\u0026quot; \u0026quot;new_ep_f014\u0026quot; \u0026quot;new_ep_f1524\u0026quot; \u0026quot;new_ep_f2534\u0026quot;\r## [41] \u0026quot;new_ep_f3544\u0026quot; \u0026quot;new_ep_f4554\u0026quot; \u0026quot;new_ep_f5564\u0026quot; \u0026quot;new_ep_f65\u0026quot; \u0026quot;newrel_m1524\u0026quot;\r## [46] \u0026quot;newrel_m2534\u0026quot; \u0026quot;newrel_m3544\u0026quot; \u0026quot;newrel_m4554\u0026quot; \u0026quot;newrel_m5564\u0026quot; \u0026quot;newrel_m65\u0026quot; ## [51] \u0026quot;newrel_f1524\u0026quot; \u0026quot;newrel_f2534\u0026quot; \u0026quot;newrel_f3544\u0026quot; \u0026quot;newrel_f4554\u0026quot; \u0026quot;newrel_f5564\u0026quot;\r## [56] \u0026quot;newrel_f65\u0026quot;\r # Notem que newrel deveria ser new_rel\r# Alguns de voc√™s devem conhecer 'gsub'\rwho1$tipo_tb \u0026lt;- gsub(\u0026quot;newrel\u0026quot;, \u0026quot;new_rel\u0026quot;, who1$tipo_tb)\r# Agora, podemos usar outra fun√ß√£o chave do tidyr, 'separate'\rwho2 \u0026lt;- who1 %\u0026gt;% separate(col = tipo_tb,\rinto = c(NA, \u0026quot;tipo_tb\u0026quot;, \u0026quot;sexo_idade\u0026quot;),\rsep = \u0026quot;_\u0026quot;)\rwho2\r ## # A tibble: 76,046 x 5\r## country year tipo_tb sexo_idade casos\r## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt;\r## 1 Afghanistan 1997 sp m014 0\r## 2 Afghanistan 1997 sp m1524 10\r## 3 Afghanistan 1997 sp m2534 6\r## 4 Afghanistan 1997 sp m3544 3\r## 5 Afghanistan 1997 sp m4554 5\r## 6 Afghanistan 1997 sp m5564 2\r## 7 Afghanistan 1997 sp m65 0\r## 8 Afghanistan 1997 sp f014 5\r## 9 Afghanistan 1997 sp f1524 38\r## 10 Afghanistan 1997 sp f2534 36\r## # ... with 76,036 more rows\r # E outra passagem de separate para separar a idade do sexo\rwho3 \u0026lt;- who2 %\u0026gt;% separate(col = sexo_idade,\rinto = c(\u0026quot;sexo\u0026quot;, \u0026quot;idade\u0026quot;),\rsep = 1)\rwho3\r ## # A tibble: 76,046 x 6\r## country year tipo_tb sexo idade casos\r## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt;\r## 1 Afghanistan 1997 sp m 014 0\r## 2 Afghanistan 1997 sp m 1524 10\r## 3 Afghanistan 1997 sp m 2534 6\r## 4 Afghanistan 1997 sp m 3544 3\r## 5 Afghanistan 1997 sp m 4554 5\r## 6 Afghanistan 1997 sp m 5564 2\r## 7 Afghanistan 1997 sp m 65 0\r## 8 Afghanistan 1997 sp f 014 5\r## 9 Afghanistan 1997 sp f 1524 38\r## 10 Afghanistan 1997 sp f 2534 36\r## # ... with 76,036 more rows\r Bem melhor, n√£o acham? Estamos agora com um banco de dados muito mais adequado para uma an√°lise de dados em R. Cada linha √© uma observa√ß√£o, cada coluna √© uma informa√ß√£o sobre ela.\nAlguns de voc√™s podem ter reparado que fizemos um caminho em que nosso banco de dados passou de ter muitas colunas para muitas linhas (ficou mais \u0026ldquo;longo\u0026rdquo;) e depois precisamos separar algumas das colunas que criamos em outras (o que fizemos com separate). Podemos facilmente imaginar situa√ß√µes em que queremos fazer o caminho inverso: transformar um banco do formato longo para o formato com mais colunas e unir colunas separadas em uma nova. Vamos ver um exemplo.\n# Exemplo adaptado de https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population\rpopulacao \u0026lt;- tribble(\r~Rank, ~Country, ~Population,\t~'% of world', ~Day, ~Month, ~Year, ~Source,\r1L, \u0026quot;China\u0026quot;, 1411778724, \u0026quot;17.9%\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;Nov\u0026quot;, \u0026quot;2020\u0026quot;, \u0026quot;Seventh Census on 2020\u0026quot;,\r2L, \u0026quot;India\u0026quot;, 1377123716, \u0026quot;17.5%\u0026quot;, \u0026quot;19\u0026quot;, \u0026quot;May\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;National population clock[3]\u0026quot;,\r3L, \u0026quot;United States\u0026quot;, 331695937, \u0026quot;4.22%\u0026quot;, \u0026quot;19\u0026quot;, \u0026quot;May\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;National population clock[4]\u0026quot;,\r4L, \u0026quot;Indonesia\u0026quot;, 271350000, \u0026quot;3.45%\u0026quot;, \u0026quot;31\u0026quot;, \u0026quot;Dec\u0026quot;, \u0026quot;2020\u0026quot;, \u0026quot;National annual estimate[5]\u0026quot;,\r5L, \u0026quot;Pakistan\u0026quot;, 225200000, \u0026quot;2.86%\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;Jul\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;UN projection[2]\u0026quot;,\r6L, \u0026quot;Brazil\u0026quot;, 213154869, \u0026quot;2.71%\u0026quot;, \u0026quot;19\u0026quot;, \u0026quot;May\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;National population clock[6]\u0026quot;,\r7L, \u0026quot;Nigeria\u0026quot;, 211401000, \u0026quot;2.69%\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;Jul\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;UN projection[2]\u0026quot;,\r8L, \u0026quot;Bangladesh\u0026quot;, 170689832, \u0026quot;2.17%\u0026quot;, \u0026quot;19\u0026quot;, \u0026quot;May\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;National population clock[7]\u0026quot;,\r9L, \u0026quot;Russia\u0026quot;, 146171015, \u0026quot;1.86%\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;Jan\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;National annual estimate[8]\u0026quot;,\r10L, \u0026quot;Mexico\u0026quot;, 126014024, \u0026quot;1.60%\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;Mar\u0026quot;, \u0026quot;2020\u0026quot;, \u0026quot;2020 census result[9]\u0026quot;\r)\rpopulacao\r ## # A tibble: 10 x 8\r## Rank Country Population `% of world` Day Month Year Source ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 1 China 1411778724 17.9% 1 Nov 2020 Seventh Census o~\r## 2 2 India 1377123716 17.5% 19 May 2021 National populat~\r## 3 3 United Sta~ 331695937 4.22% 19 May 2021 National populat~\r## 4 4 Indonesia 271350000 3.45% 31 Dec 2020 National annual ~\r## 5 5 Pakistan 225200000 2.86% 1 Jul 2021 UN projection[2] ## 6 6 Brazil 213154869 2.71% 19 May 2021 National populat~\r## 7 7 Nigeria 211401000 2.69% 1 Jul 2021 UN projection[2] ## 8 8 Bangladesh 170689832 2.17% 19 May 2021 National populat~\r## 9 9 Russia 146171015 1.86% 1 Jan 2021 National annual ~\r## 10 10 Mexico 126014024 1.60% 2 Mar 2020 2020 census resu~\r Imagine que, por qualquer motivo, voc√™ prefira trabalhar com uma vari√°vel \u0026ldquo;Data\u0026rdquo; ao inv√©s de dia, m√™s e ano. Podemos usar unite:\npopulacao2 \u0026lt;- populacao %\u0026gt;% unite(col = Data, Day, Month, Year, sep = \u0026quot; \u0026quot;)\rpopulacao2\r ## # A tibble: 10 x 6\r## Rank Country Population `% of world` Data Source ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 1 China 1411778724 17.9% 1 Nov 2020 Seventh Census on 2020 ## 2 2 India 1377123716 17.5% 19 May 20~ National population cl~\r## 3 3 United Stat~ 331695937 4.22% 19 May 20~ National population cl~\r## 4 4 Indonesia 271350000 3.45% 31 Dec 20~ National annual estima~\r## 5 5 Pakistan 225200000 2.86% 1 Jul 2021 UN projection[2] ## 6 6 Brazil 213154869 2.71% 19 May 20~ National population cl~\r## 7 7 Nigeria 211401000 2.69% 1 Jul 2021 UN projection[2] ## 8 8 Bangladesh 170689832 2.17% 19 May 20~ National population cl~\r## 9 9 Russia 146171015 1.86% 1 Jan 2021 National annual estima~\r## 10 10 Mexico 126014024 1.60% 2 Mar 2020 2020 census result[9]\r O outro problema que precisamos resolver frequentemente, √© separar um par de vari√°veis em diversas colunas, fazendo o caminho inverso que fizemos no caso do dataset da OMS.\nus_rent_income\r ## # A tibble: 104 x 5\r## GEOID NAME variable estimate moe\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 01 Alabama income 24476 136\r## 2 01 Alabama rent 747 3\r## 3 02 Alaska income 32940 508\r## 4 02 Alaska rent 1200 13\r## 5 04 Arizona income 27517 148\r## 6 04 Arizona rent 972 4\r## 7 05 Arkansas income 23789 165\r## 8 05 Arkansas rent 709 5\r## 9 06 California income 29454 109\r## 10 06 California rent 1358 3\r## # ... with 94 more rows\r No exemplo acima, queremos separar em colunas os valores das vari√°veis de renda e valor do aluguel. Esse tipo de opera√ß√£o tem um certo grau de abstra√ß√£o que me deu bastante dor de cabe√ßa para entender inicialmente, ent√£o vamos olhar com carinho para o que queremos ter depois da transforma√ß√£o.\nus_rent_income2 \u0026lt;- tribble(\r~GEOID, ~NAME, ~income_estimate, ~rent_estimate, ~income_moe, ~rent_moe,\r\u0026quot;01\u0026quot;, \u0026quot;Alabama\u0026quot;, 24476, 747, 136, 3,\r\u0026quot;02\u0026quot;, \u0026quot;Alaska\u0026quot;, 32940, 1200, 508, 13\r)\rus_rent_income2\r ## # A tibble: 2 x 6\r## GEOID NAME income_estimate rent_estimate income_moe rent_moe\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 01 Alabama 24476 747 136 3\r## 2 02 Alaska 32940 1200 508 13\r O banco que queremos tem uma cara assim. Ele tem mais colunas novas e menos linhas, j√° que eu tinha no formato tidy uma vari√°vel chamada \u0026ldquo;variable\u0026rdquo; que guardava os valores renda e aluguel e duas colunas que guardavam os valores da estimativa e do moe. Agora, eu vou ter 4 colunas, duas para as estimativas de renda e aluguel e duas para os moes das mesmas vari√°veis. Como especificar isso para o banco todo? Usando pivot_wider.\nus_rent_income %\u0026gt;% pivot_wider(names_from = variable, values_from = c(estimate, moe))\r ## # A tibble: 52 x 6\r## GEOID NAME estimate_income estimate_rent moe_income moe_rent\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 01 Alabama 24476 747 136 3\r## 2 02 Alaska 32940 1200 508 13\r## 3 04 Arizona 27517 972 148 4\r## 4 05 Arkansas 23789 709 165 5\r## 5 06 California 29454 1358 109 3\r## 6 08 Colorado 32401 1125 109 5\r## 7 09 Connecticut 35326 1123 195 5\r## 8 10 Delaware 31560 1076 247 10\r## 9 11 District of Columbia 43198 1424 681 17\r## 10 12 Florida 25952 1077 70 3\r## # ... with 42 more rows\r As fun√ß√µes pivot_ tem diversos outros argumentos e cobrem diversos casos de uso. Vejam este exemplo da documenta√ß√£o de pivot_longer:\nanscombe\r ## x1 x2 x3 x4 y1 y2 y3 y4\r## 1 10 10 10 8 8.04 9.14 7.46 6.58\r## 2 8 8 8 8 6.95 8.14 6.77 5.76\r## 3 13 13 13 8 7.58 8.74 12.74 7.71\r## 4 9 9 9 8 8.81 8.77 7.11 8.84\r## 5 11 11 11 8 8.33 9.26 7.81 8.47\r## 6 14 14 14 8 9.96 8.10 8.84 7.04\r## 7 6 6 6 8 7.24 6.13 6.08 5.25\r## 8 4 4 4 19 4.26 3.10 5.39 12.50\r## 9 12 12 12 8 10.84 9.13 8.15 5.56\r## 10 7 7 7 8 4.82 7.26 6.42 7.91\r## 11 5 5 5 8 5.68 4.74 5.73 6.89\r Podemos transformar esse banco de dados rapidamente usando um dos argumentos de pivot_longer, chamado names_pattern.\nanscombe %\u0026gt;% pivot_longer(everything(),\rnames_to = c(\u0026quot;.value\u0026quot;, \u0026quot;set\u0026quot;),\rnames_pattern = \u0026quot;(.)(.)\u0026quot;)\r ## # A tibble: 44 x 3\r## set x y\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 10 8.04\r## 2 2 10 9.14\r## 3 3 10 7.46\r## 4 4 8 6.58\r## 5 1 8 6.95\r## 6 2 8 8.14\r## 7 3 8 6.77\r## 8 4 8 5.76\r## 9 1 13 7.58\r## 10 2 13 8.74\r## # ... with 34 more rows\r Esse exemplo √© interessante, porque ele se aproveita de uma \u0026ldquo;regular expression\u0026rdquo;, tema da parte do nosso curso em que falaremos sobre manipula√ß√£o de strings com o stringr. Resumidas as contas, as colunas se chamam \u0026ldquo;x1, x2, x3 \u0026hellip;\u0026rdquo; e a string \u0026ldquo;(.)(.)\u0026rdquo; indica que h√° dois \u0026ldquo;grupos\u0026rdquo; formados por um caractere cada. A string \u0026ldquo;.value\u0026rdquo; que vai no argumento de cima √© um atalho da fun√ß√£o para dizer \u0026ldquo;pegue o valor de todas as c√©lulas das vari√°veis selecionadas\u0026rdquo;, aqui, todas. Ou seja, ele indica para a fun√ß√£o que o primeiro caractere \u0026ldquo;x\u0026rdquo; ou \u0026ldquo;y\u0026rdquo; definir√° uma nova vari√°vel e armazenar√° os valores das celulas, enquanto o segundo grupo \u0026ldquo;1\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026ldquo;3\u0026rdquo; ou \u0026ldquo;4\u0026rdquo; formar√° uma segunda vari√°vel chamada \u0026ldquo;set\u0026rdquo; que cont√©m apenas os nomes das colunas. Deu um n√≥ na cabe√ßa?\nUma √∫ltima preocupa√ß√£o ao utilizar a reformata√ß√£o de dados √© o que ocorre com os valores NA. Vejamos este exemplo:\nacoes \u0026lt;- tibble(\rano = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),\rqdr = c( 1, 2, 3, 4, 2, 3, 4),\rlucro = c(1.88, 0.59, 0.35, NA, 0.92, 0.17, 2.66)\r)\r Existem dois tipos de valor nulo, expl√≠cito se diz de um valor nulo como aquele NA que aparece na vari√°vel lucro. Impl√≠cito √© o valor que ocorre no primeiro quadrimestre de 2016, onde sequer foi adicionada uma linha no banco de dados. Os valores impl√≠citos s√£o muito sacanas, porque eles n√£o s√£o imediatamente vis√≠veis.\nacoes %\u0026gt;% pivot_wider(names_from = ano, values_from = lucro)\r ## # A tibble: 4 x 3\r## qdr `2015` `2016`\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 1.88 NA ## 2 2 0.59 0.92\r## 3 3 0.35 0.17\r## 4 4 NA 2.66\r Ao transformar o banco, o valor impl√≠cito ficou expl√≠cito. Caso voc√™ n√£o esteja interessado neste valor, voc√™ pode passar o values_drop_na durante a transforma√ß√£o de volta ao formato original.\nacoes %\u0026gt;% pivot_wider(names_from = ano, values_from = lucro) %\u0026gt;% pivot_longer(c(`2015`, `2016`),\rnames_to = \u0026quot;ano\u0026quot;,\rvalues_to = \u0026quot;lucro\u0026quot;,\rvalues_drop_na = TRUE)\r ## # A tibble: 6 x 3\r## qdr ano lucro\r## \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 2015 1.88\r## 2 2 2015 0.59\r## 3 2 2016 0.92\r## 4 3 2015 0.35\r## 5 3 2016 0.17\r## 6 4 2016 2.66\r Que faz os valores missing desaparecerem do resultado.\ncomplete pode ser usada pra tornar valores impl√≠citos, expl√≠citos! A fun√ß√£o toma todas as colunas pedidas e verifica todas as combina√ß√µes poss√≠veis de valores, preenchendo as lacunas com NA. Cuidado ao utilizar complete com valores num√©ricos ou conjuntos de colunas com muitas combina√ß√µes poss√≠veis, pois o n√∫mero de combina√ß√µes pode ser infinitamente grande e travar sua sess√£o!\nacoes %\u0026gt;% complete(ano, qdr)\r ## # A tibble: 8 x 3\r## ano qdr lucro\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2015 1 1.88\r## 2 2015 2 0.59\r## 3 2015 3 0.35\r## 4 2015 4 NA ## 5 2016 1 NA ## 6 2016 2 0.92\r## 7 2016 3 0.17\r## 8 2016 4 2.66\r Pra encerrar, fill serve para aqueles casos em que um valor missing indica que a √∫ltima observa√ß√£o deve ser repetida. Pesquisadores brasileiros das antigas podem lembrar-se do Censo de 1991, em que o IBGE registrava os arquivos de dom√≠cilio e pessoas com esse sistema. Em ingl√™s, isso se chama LOCF, ou \u0026ldquo;last observation carried forward\u0026rdquo;.\ntreatment \u0026lt;- tribble(\r~ person, ~ treatment, ~response,\r\u0026quot;Derrick Whitmore\u0026quot;, 1, 7,\rNA, 2, 10,\rNA, 3, 9,\r\u0026quot;Katherine Burke\u0026quot;, 1, 4\r)\rtreatment\r ## # A tibble: 4 x 3\r## person treatment response\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Derrick Whitmore 1 7\r## 2 \u0026lt;NA\u0026gt; 2 10\r## 3 \u0026lt;NA\u0026gt; 3 9\r## 4 Katherine Burke 1 4\r treatment %\u0026gt;% fill(person)\r ## # A tibble: 4 x 3\r## person treatment response\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Derrick Whitmore 1 7\r## 2 Derrick Whitmore 2 10\r## 3 Derrick Whitmore 3 9\r## 4 Katherine Burke 1 4\r tidyr tem tamb√©m outras funcionalidades relevantes para modelagem estat√≠stica, mas acho que isso sai um pouco do escopo do curso. Quem sabe a gente n√£o faz um curso posterior s√≥ sobre modelagem no tidyverse?\nRevis√£o readr O pacote readr apresenta uma fam√≠lia de fun√ß√µes para substituir as fun√ß√µes do base relacionadas a importa√ß√£o de arquivos em formato texto, seja delimitado ou largura-fixa. S√£o elas,\n read_delim read_csv read_csv2 read_tsv read_table read_fwf  E assim sucessivamente. Durante o processo de importa√ß√£o, voc√™ pode querer especificar o tipo de coluna com cols ou cols_only, usando o argumento col_types. Ou use uma string do tipo \u0026ldquo;ddcdiDT\u0026rdquo; em que cada letra √© um tipo de vari√°vel.\n col_integer col_double col_factor col_character  Etc. Voc√™ tamb√©m pode querer definir caracter√≠sticas de localiza√ß√£o, como a codifica√ß√£o de caracteres, os separadores de decimal e de milhar e etc. A melhor forma de fazer isso √© definir um locale.\nAh, e voc√™ sempre pode salvar com write_, inclusive salvando/lendo compactado para bzip, gzip ou xzip.\ntibble Tibbles s√£o uma vers√£o do data.frame com algumas regrinhas novas. Vou apenas repet√≠-las aqui de forma resumida.\n tibbles tem um m√©todo print mais bonito e amig√°vel, especialmente para bancos com muitas observa√ß√µes e vari√°veis. elas s√£o estritas com opera√ß√µes de subsetting com [ e $. elas n√£o aceita a reciclagem de argumento de tamanho diferente de 1.  tidyr tidyr √© um pacote de reformata√ß√£o de bancos, criando novas linhas e colunas a partir da reorganiza√ß√£o das vari√°veis e valores existentes. Suas principais opera√ß√µes s√£o:\n pivot_longer para converter colunas em linhas pivot_wider para converter linhas em colunas separate para separar uma coluna em v√°rias com base em caracteres unite para unir diversas colunas em uma com base em caracteres  Ufa. Acabou n√©? Posso ir dormir j√°? Claro, s√≥ fazer uns exerc√≠cios!\nExerc√≠cios  Como voc√™ importaria o banco \u0026ldquo;epa78.csv\u0026rdquo;  file \u0026lt;- readr_example(\u0026quot;epa78.txt\u0026quot;)\r Importe o banco \u0026ldquo;challenge.csv\u0026rdquo; e resolva os problemas com o tipo da coluna.  file \u0026lt;- readr_example(\u0026quot;challenge.csv\u0026quot;)\r Com o banco sala_aula dado a seguir, transforme-o para que ele contenha as vari√°veis nome, avalia√ß√£o e nota.  sala_aula \u0026lt;- tribble(\r~name, ~teste1, ~teste2, ~prova1,\r\u0026quot;Billy\u0026quot;, \u0026quot;\u0026lt;NA\u0026gt;\u0026quot;, \u0026quot;D\u0026quot; , \u0026quot;C\u0026quot;,\r\u0026quot;Suzy\u0026quot;, \u0026quot;F\u0026quot;, \u0026quot;\u0026lt;NA\u0026gt;\u0026quot;, \u0026quot;\u0026lt;NA\u0026gt;\u0026quot;,\r\u0026quot;Lionel\u0026quot;, \u0026quot;B\u0026quot;, \u0026quot;C\u0026quot; , \u0026quot;B\u0026quot;,\r\u0026quot;Jenny\u0026quot;, \u0026quot;A\u0026quot;, \u0026quot;A\u0026quot; , \u0026quot;B\u0026quot;\r)\r Transforme o banco relig_income para que ele contenha as colunas religi√£o, renda e frequ√™ncia.  relig_income\r ## # A tibble: 18 x 11\r## religion `\u0026lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Agnostic 27 34 60 81 76 137 122\r## 2 Atheist 12 27 37 52 35 70 73\r## 3 Buddhist 27 21 30 34 33 58 62\r## 4 Catholic 418 617 732 670 638 1116 949\r## 5 Don‚Äôt k~ 15 14 15 11 10 35 21\r## 6 Evangel~ 575 869 1064 982 881 1486 949\r## 7 Hindu 1 9 7 9 11 34 47\r## 8 Histori~ 228 244 236 238 197 223 131\r## 9 Jehovah~ 20 27 24 24 21 30 15\r## 10 Jewish 19 19 25 25 30 95 69\r## 11 Mainlin~ 289 495 619 655 651 1107 939\r## 12 Mormon 29 40 48 51 56 112 85\r## 13 Muslim 6 7 9 10 9 23 16\r## 14 Orthodox 13 17 23 32 32 47 38\r## 15 Other C~ 9 7 11 13 13 14 18\r## 16 Other F~ 20 33 40 46 49 63 46\r## 17 Other W~ 5 2 3 4 2 7 3\r## 18 Unaffil~ 217 299 374 365 341 528 407\r## # ... with 3 more variables: $100-150k \u0026lt;dbl\u0026gt;, \u0026gt;150k \u0026lt;dbl\u0026gt;,\r## # Don't know/refused \u0026lt;dbl\u0026gt;\r Transforme o banco billboard para que ele contenha apenas uma coluna \u0026ldquo;semana\u0026rdquo; e uma coluna com a posi√ß√£o da m√∫sica no ranking.  # Dica, voc√™ pode selecionar v√°rias colunas usando o atalho wk1:wk76\rbillboard  ## # A tibble: 317 x 79\r## artist track date.entered wk1 wk2 wk3 wk4 wk5 wk6 wk7 wk8\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2 Pac Baby D~ 2000-02-26 87 82 72 77 87 94 99 NA\r## 2 2Ge+her The Ha~ 2000-09-02 91 87 92 NA NA NA NA NA\r## 3 3 Doors~ Krypto~ 2000-04-08 81 70 68 67 66 57 54 53\r## 4 3 Doors~ Loser 2000-10-21 76 76 72 69 67 65 55 59\r## 5 504 Boyz Wobble~ 2000-04-15 57 34 25 17 17 31 36 49\r## 6 98^0 Give M~ 2000-08-19 51 39 34 26 26 19 2 2\r## 7 A*Teens Dancin~ 2000-07-08 97 97 96 95 100 NA NA NA\r## 8 Aaliyah I Don'~ 2000-01-29 84 62 51 41 38 35 35 38\r## 9 Aaliyah Try Ag~ 2000-03-18 59 53 38 28 21 18 16 14\r## 10 Adams, ~ Open M~ 2000-08-26 76 76 74 69 68 67 61 58\r## # ... with 307 more rows, and 68 more variables: wk9 \u0026lt;dbl\u0026gt;, wk10 \u0026lt;dbl\u0026gt;,\r## # wk11 \u0026lt;dbl\u0026gt;, wk12 \u0026lt;dbl\u0026gt;, wk13 \u0026lt;dbl\u0026gt;, wk14 \u0026lt;dbl\u0026gt;, wk15 \u0026lt;dbl\u0026gt;, wk16 \u0026lt;dbl\u0026gt;,\r## # wk17 \u0026lt;dbl\u0026gt;, wk18 \u0026lt;dbl\u0026gt;, wk19 \u0026lt;dbl\u0026gt;, wk20 \u0026lt;dbl\u0026gt;, wk21 \u0026lt;dbl\u0026gt;, wk22 \u0026lt;dbl\u0026gt;,\r## # wk23 \u0026lt;dbl\u0026gt;, wk24 \u0026lt;dbl\u0026gt;, wk25 \u0026lt;dbl\u0026gt;, wk26 \u0026lt;dbl\u0026gt;, wk27 \u0026lt;dbl\u0026gt;, wk28 \u0026lt;dbl\u0026gt;,\r## # wk29 \u0026lt;dbl\u0026gt;, wk30 \u0026lt;dbl\u0026gt;, wk31 \u0026lt;dbl\u0026gt;, wk32 \u0026lt;dbl\u0026gt;, wk33 \u0026lt;dbl\u0026gt;, wk34 \u0026lt;dbl\u0026gt;,\r## # wk35 \u0026lt;dbl\u0026gt;, wk36 \u0026lt;dbl\u0026gt;, wk37 \u0026lt;dbl\u0026gt;, wk38 \u0026lt;dbl\u0026gt;, wk39 \u0026lt;dbl\u0026gt;, wk40 \u0026lt;dbl\u0026gt;,\r## # wk41 \u0026lt;dbl\u0026gt;, wk42 \u0026lt;dbl\u0026gt;, wk43 \u0026lt;dbl\u0026gt;, wk44 \u0026lt;dbl\u0026gt;, wk45 \u0026lt;dbl\u0026gt;, wk46 \u0026lt;dbl\u0026gt;,\r## # wk47 \u0026lt;dbl\u0026gt;, wk48 \u0026lt;dbl\u0026gt;, wk49 \u0026lt;dbl\u0026gt;, wk50 \u0026lt;dbl\u0026gt;, wk51 \u0026lt;dbl\u0026gt;, wk52 \u0026lt;dbl\u0026gt;,\r## # wk53 \u0026lt;dbl\u0026gt;, wk54 \u0026lt;dbl\u0026gt;, wk55 \u0026lt;dbl\u0026gt;, wk56 \u0026lt;dbl\u0026gt;, wk57 \u0026lt;dbl\u0026gt;, wk58 \u0026lt;dbl\u0026gt;,\r## # wk59 \u0026lt;dbl\u0026gt;, wk60 \u0026lt;dbl\u0026gt;, wk61 \u0026lt;dbl\u0026gt;, wk62 \u0026lt;dbl\u0026gt;, wk63 \u0026lt;dbl\u0026gt;, wk64 \u0026lt;dbl\u0026gt;,\r## # wk65 \u0026lt;dbl\u0026gt;, wk66 \u0026lt;lgl\u0026gt;, wk67 \u0026lt;lgl\u0026gt;, wk68 \u0026lt;lgl\u0026gt;, wk69 \u0026lt;lgl\u0026gt;, wk70 \u0026lt;lgl\u0026gt;,\r## # wk71 \u0026lt;lgl\u0026gt;, wk72 \u0026lt;lgl\u0026gt;, wk73 \u0026lt;lgl\u0026gt;, wk74 \u0026lt;lgl\u0026gt;, wk75 \u0026lt;lgl\u0026gt;, wk76 \u0026lt;lgl\u0026gt;\r  Experimente fazer o caminho inverso dos exerc√≠cios 3 a 5, devolvendo os datasets ao seu formato original. O que voc√™ observou?\n  O que os argumentos extra e fill em separate fazem? Utilize o exemplo a seguir como guia.\n  tibble(x = c(\u0026quot;a,b,c\u0026quot;, \u0026quot;d,e,f,g\u0026quot;, \u0026quot;h,i,j\u0026quot;)) %\u0026gt;% separate(x, c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;, \u0026quot;tres\u0026quot;))\r ## Warning: Expected 3 pieces. Additional pieces discarded in 1 rows [2].\r ## # A tibble: 3 x 3\r## um dois tres ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 a b c ## 2 d e f ## 3 h i j\r tibble(x = c(\u0026quot;a,b,c\u0026quot;, \u0026quot;d,e\u0026quot;, \u0026quot;f,g,i\u0026quot;)) %\u0026gt;% separate(x, c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;, \u0026quot;tres\u0026quot;))\r ## Warning: Expected 3 pieces. Missing pieces filled with `NA` in 1 rows [2].\r ## # A tibble: 3 x 3\r## um dois tres ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 a b c ## 2 d e \u0026lt;NA\u0026gt; ## 3 f g i\r  Tanto unite como separate possuem um argumento remove. Pra que ele serve e quando voc√™ o utilizaria no valor FALSE?\n  Compare o argumento values_fill em pivot_wider e fill em complete. Qual √© a diferen√ßa?\n  Agradecimentos Esse material √© uma adapta√ß√£o livre das vinhetas dos pacotes tidyr, readr e tibble e do cap√≠tulo Tidy Data do R for Data Science, de Wickham \u0026amp; Grolemund.\n","date":1621728000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621728000,"objectID":"0bad4868b4cebec13d81438fabee26ad","permalink":"https://laddem.github.io/courses/tidyverse/dia1/","publishdate":"2021-05-23T00:00:00Z","relpermalink":"/courses/tidyverse/dia1/","section":"courses","summary":"Um modelo de ci√™ncia de dados Uma forma esquem√°tica, mas √∫til de encarar o processo de an√°lise de dados e de produ√ß√£o de conhecimento a partir de informa√ß√µes secund√°rias √© esta figura:","tags":null,"title":"readr, tibble e tidyr","type":"book"},{"authors":null,"categories":null,"content":"Introdu√ß√£o Sempre que voc√™ obt√©m um novo conjunto de dados para examinar, uma das primeiras tarefas que voc√™ precisa fazer √© encontrar maneiras de resumir os dados de uma forma compacta e de f√°cil compreens√£o. √â disso que se trata a estat√≠stica descritiva. Nesta aula vamos aprender fun√ß√µes de estat√≠stica descritiva usando R e fazer gr√°ficos usando o pacote stat de gr√°ficos b√°sicos.\nPara esta aula vamos usar o mesmo data frame da PNAD que olhamos nas aulas anteriores. Primeiro vamos importar os dados (voc√™ aprendeu como fazer isso na aula anterior, lembra?):\nurl \u0026lt;- \u0026quot;https://raw.githubusercontent.com/laddem/site/master/amostra_pnad.csv\u0026quot;\rdf \u0026lt;- read.csv(url)\rhead(df)\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## 2 2021 1 Distrito Federal Urbana Mulher 19 Parda 4\r## 3 2021 1 Pernambuco Urbana Mulher 36 Preta 2\r## 4 2021 1 Santa Catarina Urbana Homem 50 Parda 2\r## 5 2021 1 S√£o Paulo Urbana Mulher 43 Parda 3\r## 6 2021 1 Goi√°s Urbana Homem 35 Parda 3\r## VD3005 VD4016\r## 1 16 anos ou mais de estudo NA\r## 2 11 anos de estudo NA\r## 3 12 anos de estudo 1045\r## 4 5 anos de estudo 1500\r## 5 9 anos de estudo 1600\r## 6 14 anos de estudo 3000\r Estat√≠stica descritiva em R Com o objetivo de ter uma ideia sobre o que est√° acontecendo no data frame, precisamos calcular algumas estat√≠sticas descritivas e desenhar alguns gr√°ficos.\nSomas Para calcular a soma, a fun√ß√£o mais usada √© sum()\nvetor\u0026lt;- c(1,3,2,5,6,10)\rsum(vetor)\r ## [1] 27\r sum(vetor[2:4])\r ## [1] 10\r A fun√ß√£o permite que voc√™ some um vetor espec√≠fico, ou posi√ß√µes dentro deste vetor.\nExerc√≠cio Some as primeiras tr√™s posi√ß√µes da vari√°vel V2009 do data frame df\nna.rm Caso os dados tenham NA, ser√° necess√°rio usar o argumento na.rm = TRUE por que para o R a soma dos elementos ser√° NA.\nvetor \u0026lt;- c(2, 5, 10, 28, NA)\rsum(vetor[3:5])\r ## [1] NA\r sum(vetor[3:5], na.rm = TRUE)\r ## [1] 38\r Exerc√≠cio Some as primeiras 30 observa√ß√µes da vari√°vel VD4016 do data frame df. O que aconteceu? Foi necess√°rio usar na.rm?\nContagens Podemos fazer contagens usando a fun√ß√£o abaixo:\ntable(df$Trimestre)\r ## ## 1 ## 1000\r table(df$UF)\r ## ## Acre Alagoas Amap√° Amazonas ## 19 52 12 35 ## Bahia Cear√° Distrito Federal Esp√≠rito Santo ## 52 53 14 39 ## Goi√°s Maranh√£o Mato Grosso Mato Grosso do Sul ## 28 67 23 24 ## Minas Gerais Par√° Para√≠ba Paran√° ## 104 36 21 40 ## Pernambuco Piau√≠ Rio de Janeiro Rio Grande do Norte ## 53 20 49 17 ## Rio Grande do Sul Rond√¥nia Roraima Santa Catarina ## 65 13 13 45 ## S√£o Paulo Sergipe Tocantins ## 82 10 14\r table(df$V1022)\r ## ## Rural Urbana ## 257 743\r table(df$V2010)\r ## ## Amarela Branca Ind√≠gena Parda Preta ## 7 407 3 506 77\r A fun√ß√£o table n√£o serve apenas para contagens simples, mas tamb√©m para tabula√ß√µes cruzadas:\ntable(df$V1022, df$V2010)\r ## ## Amarela Branca Ind√≠gena Parda Preta\r## Rural 0 83 1 160 13\r## Urbana 7 324 2 346 64\r table(df$V1022, df$V2007)\r ## ## Homem Mulher\r## Rural 125 132\r## Urbana 368 375\r table(df$UF, df$V1022)\r ## ## Rural Urbana\r## Acre 1 18\r## Alagoas 26 26\r## Amap√° 0 12\r## Amazonas 12 23\r## Bahia 18 34\r## Cear√° 17 36\r## Distrito Federal 1 13\r## Esp√≠rito Santo 4 35\r## Goi√°s 5 23\r## Maranh√£o 27 40\r## Mato Grosso 6 17\r## Mato Grosso do Sul 5 19\r## Minas Gerais 34 70\r## Par√° 15 21\r## Para√≠ba 4 17\r## Paran√° 4 36\r## Pernambuco 13 40\r## Piau√≠ 10 10\r## Rio de Janeiro 1 48\r## Rio Grande do Norte 3 14\r## Rio Grande do Sul 16 49\r## Rond√¥nia 1 12\r## Roraima 2 11\r## Santa Catarina 8 37\r## S√£o Paulo 14 68\r## Sergipe 3 7\r## Tocantins 7 7\r Essa forma de especificar √© conhecida como forma \u0026ldquo;x,y\u0026rdquo;, mas h√° tamb√©m outra forma especificar tabula√ß√µes cruzadas, como um subconjunto de data.frame:\ntable(df[, c(\u0026quot;UF\u0026quot;, \u0026quot;V1022\u0026quot;)])\r ## V1022\r## UF Rural Urbana\r## Acre 1 18\r## Alagoas 26 26\r## Amap√° 0 12\r## Amazonas 12 23\r## Bahia 18 34\r## Cear√° 17 36\r## Distrito Federal 1 13\r## Esp√≠rito Santo 4 35\r## Goi√°s 5 23\r## Maranh√£o 27 40\r## Mato Grosso 6 17\r## Mato Grosso do Sul 5 19\r## Minas Gerais 34 70\r## Par√° 15 21\r## Para√≠ba 4 17\r## Paran√° 4 36\r## Pernambuco 13 40\r## Piau√≠ 10 10\r## Rio de Janeiro 1 48\r## Rio Grande do Norte 3 14\r## Rio Grande do Sul 16 49\r## Rond√¥nia 1 12\r## Roraima 2 11\r## Santa Catarina 8 37\r## S√£o Paulo 14 68\r## Sergipe 3 7\r## Tocantins 7 7\r table(df[, c(\u0026quot;V2007\u0026quot;, \u0026quot;V2010\u0026quot;)])\r ## V2010\r## V2007 Amarela Branca Ind√≠gena Parda Preta\r## Homem 5 201 2 247 38\r## Mulher 2 206 1 259 39\r table(df[, c(\u0026quot;VD3005\u0026quot;, \u0026quot;V2007\u0026quot;)])\r ## V2007\r## VD3005 Homem Mulher\r## 1 ano de estudo 12 17\r## 10 anos de estudo 8 16\r## 11 anos de estudo 10 14\r## 12 anos de estudo 105 111\r## 13 anos de estudo 12 7\r## 14 anos de estudo 6 13\r## 15 anos de estudo 9 8\r## 16 anos ou mais de estudo 51 61\r## 2 anos de estudo 14 13\r## 3 anos de estudo 16 15\r## 4 anos de estudo 19 27\r## 5 anos de estudo 44 46\r## 6 anos de estudo 25 23\r## 7 anos de estudo 13 20\r## 8 anos de estudo 25 19\r## 9 anos de estudo 44 27\r## Sem instru√ß√£o e menos de 1 ano de estudo 47 45\r √â poss√≠vel fazer tabula√ß√µes mais complexas, com 3 vari√°veis, mas eu deixo para voc√™s descobrirem por conta pr√≥pria! Tamb√©m explorem a fun√ß√£o xtabs(), que faz algo parecido, mas com uma sintaxe diferente.\nM√©dias Entre as medidas de tend√™ncia central, temos a m√©dia, calculada no R pela fun√ß√£o mean()\nvetor\u0026lt;- c(20,10,30,4085,1292)\rmean(vetor)\r ## [1] 1087.4\r mean(vetor[2:4])\r ## [1] 1375\r A fun√ß√£o mean() tamb√©m permite calcular a m√©dia especificando a posi√ß√£o das observa√ß√µes que voc√™ quer no c√°lculo.\nM√©dia \u0026ldquo;trimmed\u0026rdquo; Quando nos deparamos com casos em os dados podem ser suspeitos, como este por exemplo: -15,2,3,4,5,6,7,8,9,12 o valor -15 √© meio suspeito, por√©m n√£o conseguimos saber se √© verdadeiro ou n√£o. A m√©dia √© altamente sens√≠vel a um ou dois valores extremos e, portanto, n√£o √© considerado uma medida robusta. Uma forma de resolver √© usando a m√©dia trimmed. Para calcular este tipo de m√©dia, o que acontece √© que voc√™ descarta os valores mais extremos nas duas pontas do vetor (o maior e o menor) e depois tira a m√©dia de todo o resto.\nGeralmente, descrevemos uma m√©dia trimmed em termos da porcentagem de observa√ß√£o de cada lado que √© descartada. Por exemplo, uma m√©dia trimmed de 10% descarta os maiores 10% das observa√ß√µes e os menores 10% e, em seguida, toma a m√©dia dos 80% restantes das observa√ß√µes.\nvetor\u0026lt;- c(-15,2,3,4,5,6,7,8,9,12)\rmean(vetor)\r ## [1] 4.1\r mean(vetor, trim = 0.1)\r ## [1] 5.5\r Se eu pegar uma m√©dia trimmed de 10%, deixaremos os valores extremos de cada lado e pegaremos a m√©dia do resto como foi feita acima usando o argumento trim = 0.1\nmean(df$VD4016, na.rm = T)\r ## [1] 2000.636\r mean(df$VD4016, na.rm = T, trim = 0.05)\r ## [1] 1704.745\r mean(df$VD4016, na.rm = T, trim = 0.1)\r ## [1] 1591.949\r Exerc√≠cio Calcule a m√©dia da vari√°vel V2009 do data frame df. Calcule a m√©dia e m√©dia trimmed. Quais s√£o as principais diferen√ßas?\nMedianas A segunda medida de tend√™ncia central que se usa muito √© a mediana. A mediana de um conjunto de observa√ß√µes √© o valor que divide o conjunto de dados em duas partes iguais. A func√£o do R que calcula a mediana √© median()\nvetor\u0026lt;- c(20,30, 50, 47,59)\rmedian(vetor)\r ## [1] 47\r Exerc√≠cio Calcule a mediana da vari√°vel V2009 do data frame df. Quais as diferen√ßas encontradas em rela√ß√£o a m√©dia calculada no exerc√≠cio anterior?\nAmplitude A amplitude √© uma das medidas de dispers√£o calculada pelo R atrav√©s da fun√ß√£o range(). Al√©m dela, podemos ver atrav√©s do R, o valor m√°ximo atrav√©s da fun√ß√£o max() e o valor m√≠nimo atrav√©s da fun√ß√£o min() de um vetor de valores.\nA amplitude basicamente calcula o valor m√°ximo menos o valor m√≠nimo de um vetor.\nvetor\u0026lt;- c(20,30,60,80,17)\rrange(vetor)\r ## [1] 17 80\r Podemos calcular esses valores tamb√©m usando a fun√ß√£o max() e min() separadamente\nvetor\u0026lt;- c(20,30,60,80,17)\rmax(vetor)\r ## [1] 80\r min(vetor)\r ## [1] 17\r Exerc√≠cio Calcule o valor m√°ximo, m√≠nimo e a amplitude da vari√°vel V2009 do data frame df.\nPercentis A divis√£o dos conjunto de dados em percentuais √© o que se denomina de percentil. Os percentis mais famosos s√£o justamente o 1¬∫ quartil ( = percentil 25%), o 2¬∫ quartil ( = percentil 50% = mediana), e o 3¬∫ quartil (= percentil 75%). Para calcular o percentil no R, usa-se a fun√ß√£o quantile() o argumento probs permite a especifica√ß√£o de outros percentis al√©m do padr√£o.\nquantile(df$V2009, probs = c(.25, .75))\r ## 25% 75% ## 18 55\r quantile(df$V2009, probs = c(.1, .3, .5, .7, .9))\r ## 10% 30% 50% 70% 90% ## 7 22 36 49 67\r Dist√¢ncia interquartil A dist√¢ncia interquartil √© uma medida de dispers√£o estat√≠stica, sendo igual √† diferen√ßa entre o quartil superior (Q3) e quartil inferior (Q1). No R, a fun√ß√£o que calcula o interquatil √© IQR().\na \u0026lt;- c(1, 1.2, 1.5, 1.7, 1.8, 1.9, 2.2, 2.3, 2.6, 2.7, 8)\rIQR(a)\r ## [1] 0.85\r Exerc√≠cio Calcule a dist√¢ncia interquatil da vari√°vel V2009 do data frame df da pnad. Que valor voc√™ encontrou? Compare com os valores encontrados no percentil 25% e 75%.\nVari√¢ncia A vari√¢ncia de um conjunto de valores √© calculada pelo R usando a fun√ß√£o var().\nb \u0026lt;- c(1, 2, 2.5, 4, 4.5, 5.5, 6, 6.4, 7, 7.5, 8)\rvar(b)\r ## [1] 5.492727\r Exerc√≠cio Calcule a vari√¢ncia da vari√°vel V2009 do data frame df.\nDesvio padr√£o Pegue a raiz quadrada da vari√¢ncia e teremos mais uma medida conhecida como desvio padr√£o. Para calcular o desvio padr√£o no R, usamos a fun√ß√£o sd() (Standard Deviation).\na \u0026lt;- c(1, 1.2, 1.5, 1.7, 1.8, 1.9, 2.2, 2.3, 2.6, 2.7, 8)\rsd(a)\r ## [1] 1.919043\r Exerc√≠cio Calcule o desvio padr√£o da vari√°vel V2009 do data frame df.\nDesvio absoluto da mediana Cada observa√ß√£o no conjunto de dados fica a alguma dist√¢ncia do valor t√≠pico (a mediana). Portanto, o desvio absoluto da mediana(median absolute deviation - MAD) √© uma tentativa de descrever a tend√™ncia de desvio um valor t√≠pico no conjunto de dados. A fun√ß√£o que calcula essa medida pelo R chama-se mad(), para median absolute deviation.\na \u0026lt;- c(1, 1.2, 1.5, 1.7, 1.8, 1.9, 2.2, 2.3, 2.6, 2.7, 8)\rmad(a)\r ## [1] 0.59304\r Exerc√≠cio Calcule o Desvio absoluto da mediana da vari√°vel V2009 do data frame df.\nSum√°rio estat√≠stico Existe uma fun√ß√£o do R que √© capaz de calcular as principais medidas apresentadas acima, de uma vez, em uma √∫nica fun√ß√£o. Dessa forma, √© muito mais pr√°tico utilizar as fun√ß√µes que resumem algumas medidas estat√≠sticas principais summary().\nsummary(df$V2009)\r ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00 18.00 36.00 36.94 55.00 104.00\r summary(df$V2010)\r ## Length Class Mode ## 1000 character character\r A fun√ß√£o summary() se comporta de maneiras diferentes dependendo do tipo de vari√°vel, por exemplo, na vari√°vel V2009 num√©rica, a fun√ß√£o summary() retorna as medidas: min, 1¬∫ quartil, mediana, m√©dia, 3¬∫ quartil e max. Na vari√°vel V2010, categ√≥rica, a fun√ß√£o summary() retorna a frequ√™ncia absoluta de cada categoria. √â poss√≠vel fazer o summary de um data frame inteiro de uma vez.\nsummary(df)\r ## Ano Trimestre UF V1022 ## Min. :2021 Min. :1 Length:1000 Length:1000 ## 1st Qu.:2021 1st Qu.:1 Class :character Class :character ## Median :2021 Median :1 Mode :character Mode :character ## Mean :2021 Mean :1 ## 3rd Qu.:2021 3rd Qu.:1 ## Max. :2021 Max. :1 ## ## V2007 V2009 V2010 VD2003 ## Length:1000 Min. : 0.00 Length:1000 Min. : 1.000 ## Class :character 1st Qu.: 18.00 Class :character 1st Qu.: 2.000 ## Mode :character Median : 36.00 Mode :character Median : 3.000 ## Mean : 36.94 Mean : 3.609 ## 3rd Qu.: 55.00 3rd Qu.: 4.000 ## Max. :104.00 Max. :11.000 ## ## VD3005 VD4016 ## Length:1000 Min. : 50 ## Class :character 1st Qu.: 1000 ## Mode :character Median : 1262 ## Mean : 2001 ## 3rd Qu.: 2300 ## Max. :19000 ## NA's :613\r Esse √© um excelente exemplo do R utilizar a classe de um objeto para mudar o comportamento de uma fun√ß√£o: summary() l√™ o atributo classe de cada vetor ou objeto que voc√™ passar como argumento e define um m√©todo adequado para resumir esse objeto.\nEstat√≠sticas por grupo √â muito comum que voc√™ precise olhar para estat√≠sticas descritivas, divididas por alguma vari√°vel de agrupamento\nIsso √© muito f√°cil de fazer no R e h√° duas fun√ß√µes em particular que vale a pena conhecer: by() e aggregate().\nA fun√ß√£o by() mostra algo semelhante a fun√ß√£o summary() por√©m dividido por grupo especificado no argumento INDICES.\nby(data=df, INDICES=df$V1022, FUN=summary)\r ## df$V1022: Rural\r## Ano Trimestre UF V1022 ## Min. :2021 Min. :1 Length:257 Length:257 ## 1st Qu.:2021 1st Qu.:1 Class :character Class :character ## Median :2021 Median :1 Mode :character Mode :character ## Mean :2021 Mean :1 ## 3rd Qu.:2021 3rd Qu.:1 ## Max. :2021 Max. :1 ## ## V2007 V2009 V2010 VD2003 ## Length:257 Min. : 0.00 Length:257 Min. : 1.000 ## Class :character 1st Qu.: 18.00 Class :character 1st Qu.: 2.000 ## Mode :character Median : 35.00 Mode :character Median : 3.000 ## Mean : 37.01 Mean : 3.763 ## 3rd Qu.: 54.00 3rd Qu.: 5.000 ## Max. :104.00 Max. :11.000 ## ## VD3005 VD4016 ## Length:257 Min. : 50 ## Class :character 1st Qu.: 500 ## Mode :character Median :1022 ## Mean :1199 ## 3rd Qu.:1500 ## Max. :5800 ## NA's :169 ## ------------------------------------------------------------ ## df$V1022: Urbana\r## Ano Trimestre UF V1022 ## Min. :2021 Min. :1 Length:743 Length:743 ## 1st Qu.:2021 1st Qu.:1 Class :character Class :character ## Median :2021 Median :1 Mode :character Mode :character ## Mean :2021 Mean :1 ## 3rd Qu.:2021 3rd Qu.:1 ## Max. :2021 Max. :1 ## ## V2007 V2009 V2010 VD2003 ## Length:743 Min. : 0.00 Length:743 Min. : 1.000 ## Class :character 1st Qu.:18.00 Class :character 1st Qu.: 2.000 ## Mode :character Median :37.00 Mode :character Median : 3.000 ## Mean :36.92 Mean : 3.556 ## 3rd Qu.:55.00 3rd Qu.: 4.000 ## Max. :96.00 Max. :10.000 ## ## VD3005 VD4016 ## Length:743 Min. : 50 ## Class :character 1st Qu.: 1100 ## Mode :character Median : 1500 ## Mean : 2237 ## 3rd Qu.: 2700 ## Max. :19000 ## NA's :444\r Neste exemplo, a fun√ß√£o by mostra as medidas separadas pelas categorias de vari√°veis V1022, ou seja, mostra o summary para categoria Urbana e um summary para categoria Rural.\nPara a aggregate() tamb√©m √© necess√°rio especificar tr√™s argumentos. O lado esquerdo da f√≥rmula √© usado para indicar qual vari√°vel voc√™ deseja analisar e o lado direito, quais vari√°veis s√£o usadas para especificar os grupos.\naggregate(formula = V2009 ~ V1022 + V2007, data = df, FUN = mean)\r ## V1022 V2007 V2009\r## 1 Rural Homem 35.60800\r## 2 Urbana Homem 36.13859\r## 3 Rural Mulher 38.33333\r## 4 Urbana Mulher 37.67733\r Escores e testes O R inclui toda uma su√≠te de fun√ß√µes para trabalhar com distribui√ß√µes estat√≠sticas, elas seguem uma conven√ß√£o de nomes que indicam \u0026lt;fun√ß√£o_estat√≠stica\u0026gt;\u0026lt;tipo_de_distribui√ß√£o\u0026gt;, exemplo:\nNo caso da distribui√ß√£o de poisson, s√£o quatro fun√ß√µes, uma para a densidade:\ndpois(0:7, lambda = 1)\r ## [1] 3.678794e-01 3.678794e-01 1.839397e-01 6.131324e-02 1.532831e-02\r## [6] 3.065662e-03 5.109437e-04 7.299195e-05\r Uma para a distribui√ß√£o:\nppois(0:7, lambda = 1)\r ## [1] 0.3678794 0.7357589 0.9196986 0.9810118 0.9963402 0.9994058 0.9999168\r## [8] 0.9999898\r Uma para os quartis (ou quantis):\nqpois(c(.3, .5, .9, .95, .99), lambda = 1)\r ## [1] 0 1 2 3 4\r Uma para gerar distribui√ß√µes aleat√≥rias:\nrpois(100, lambda = 1)\r ## [1] 0 1 0 0 1 1 0 2 0 1 1 3 2 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 2 0 2 1 1 0 1 1\r## [38] 1 1 1 2 1 1 0 3 2 2 2 1 0 0 1 1 1 1 1 1 1 1 0 0 1 3 1 1 2 2 0 0 2 0 1 1 1\r## [75] 0 2 0 1 1 1 0 0 0 1 0 2 1 2 0 2 0 1 1 1 1 1 1 0 1 0\r O mesmo ocorre com as outras distribui√ß√µes estat√≠sticas, por exemplo, a distribui√ß√£o normal ter√° as fun√ß√µes:\n?dnorm\r?pnorm\r?qnorm\r?rnorm\r E a distribui√ß√£o binomial:\n?dnorm\r?pnorm\r?qnorm\r?rnorm\r E assim sucessivamente.\nUma √∫ltima coisa, voc√™ pode usar esses fun√ß√µes para calcular um p valor a partir de uma estat√≠stica escore de um teste:\nx \u0026lt;- 1:10\ry \u0026lt;- 11:20\rt \u0026lt;- (mean(x) - mean(y)) / sqrt(var(x) / length(x) + var(y) / length(y))\rpt(t, df = 18)\r ## [1] 3.751569e-07\r Onde x e y s√£o duas vari√°veis, t √© o valor da estat√≠stica t calculada pela f√≥rmula e pt() √© a fun√ß√£o de distribui√ß√£o da distribui√ß√£o T de Student. L√≥gico que, sendo um teste extremamente comum, ele j√° foi programado em uma fun√ß√£o no R:\nt.test(x, y)\r ## ## Welch Two Sample t-test\r## ## data: x and y\r## t = -7.3855, df = 18, p-value = 7.503e-07\r## alternative hypothesis: true difference in means is not equal to 0\r## 95 percent confidence interval:\r## -12.844662 -7.155338\r## sample estimates:\r## mean of x mean of y ## 5.5 15.5\r Exerc√≠cio Utilize seus conhecimentos de indexa√ß√£o e distribui√ß√µes para fazer verificar se as diferen√ßas de renda entre a popula√ß√£o rural e urbana s√£o estatisticamente significativas ao n√≠vel de 0.05.\nCorrela√ß√µes Em geral, um dos √∫ltimos assuntos cobertos numa introdu√ß√£o a estat√≠stica, as correla√ß√µes tamb√©m s√£o implementadas em R. Aqui, veremos a aplica√ß√£o da fun√ß√£o cor para pares de vari√°veis e para um data frame como um todo.\nAbaixo, voc√™s encontram um exemplo da medi√ß√£o da correla√ß√£o entre duas vari√°aveis:\ncor(df$VD2003, df$V2009)\r ## [1] -0.3656368\r E um teste de correla√ß√£o linear de Pearson:\ncor.test(df$VD2003, df$V2009)\r ## ## Pearson's product-moment correlation\r## ## data: df$VD2003 and df$V2009\r## t = -12.41, df = 998, p-value \u0026lt; 2.2e-16\r## alternative hypothesis: true correlation is not equal to 0\r## 95 percent confidence interval:\r## -0.4181517 -0.3106861\r## sample estimates:\r## cor ## -0.3656368\r Abaixo, podemos ver que a fun√ß√£o cor() tem uma sa√≠da diferente se usada em um data frame, para tornar isso poss√≠vel, √© preciso primeiro selecionar apenas as vari√°veis num√©ricas:\ncor(df[, c(\u0026quot;V2009\u0026quot;, \u0026quot;VD2003\u0026quot;, \u0026quot;VD4016\u0026quot;)])\r ## V2009 VD2003 VD4016\r## V2009 1.0000000 -0.3656368 NA\r## VD2003 -0.3656368 1.0000000 NA\r## VD4016 NA NA 1\r Exerc√≠cio Fa√ßa um teste de correla√ß√£o linear entre a idade (V2009) e o n√∫mero de moradores (VD2003). O que esse resultado significa?\nuse=??? Nosso resultado √© a matriz de correla√ß√µes entre as vari√°veis de df! Por√©m, temos um problema, os NAs presentes na vari√°vel VD4016 se propagaram para todas as correla√ß√µes envolvendo-a. Quando executamos opera√ß√µes com vetores, aprendemos que na.rm era a solu√ß√£o para esse tipo de situa√ß√£o. Mas na.rm √© uma solu√ß√£o para problemas envolvendo apenas uma vari√°vel. O que fazer com os NAs que podem estar vindo de m√∫ltiplas vari√°veis diferentes?\n Poder√≠amos optar por remover todos os NAs de todas as vari√°veis envolvidas e computar apenas as correla√ß√µes entre valores v√°lidos, mas sacrificar√≠amos grande parte da nossa amostra.  cor(df[, c(\u0026quot;V2009\u0026quot;, \u0026quot;VD2003\u0026quot;, \u0026quot;VD4016\u0026quot;)], use = \u0026quot;complete.obs\u0026quot;)\r ## V2009 VD2003 VD4016\r## V2009 1.0000000 -0.2271063 0.1655302\r## VD2003 -0.2271063 1.0000000 -0.1032641\r## VD4016 0.1655302 -0.1032641 1.0000000\r  Poder√≠amos remover apenas os valores inv√°lidos dos pares que est√£o sendo correlacionados, preservando o m√°ximo de amostra poss√≠vel.  cor(df[, c(\u0026quot;V2009\u0026quot;, \u0026quot;VD2003\u0026quot;, \u0026quot;VD4016\u0026quot;)], use = \u0026quot;pairwise.complete.obs\u0026quot;)\r ## V2009 VD2003 VD4016\r## V2009 1.0000000 -0.3656368 0.1655302\r## VD2003 -0.3656368 1.0000000 -0.1032641\r## VD4016 0.1655302 -0.1032641 1.0000000\r Existem outras op√ß√µes na ajuda da fun√ß√£o ?cor, mas al√©m do padr√£o que √© \u0026quot;everything\u0026quot;, o mais comum √© utilizar essas duas. No caso que estamos considerando, n√£o h√° diferen√ßa entre os resultados porque a √∫nica vari√°vel com NA √© VD4016, mas em situa√ß√µes em que duas ou mais vari√°veis contenham NAs √© prov√°vel que os resultados de \u0026quot;complete.obs\u0026quot; e \u0026quot;pairwise.complete.obs\u0026quot; sejam diferentes.\nExerc√≠cio Agora calcule correla√ß√µes lineares entre as vari√°veis renda (VD4016), idade (V2009) e n√∫mero de moradores (VD4016) tratando adequadamente os NAs na vari√°vel renda.\nVisualiza√ß√µes Desenhar gr√°ficos ajuda a compreender os dados. Para isso, √© importante desenhar \u0026ldquo;gr√°ficos explorat√≥rios\u0026rdquo; que o ajudem a aprender sobre os dados √† medida que os analisa. Iremos mostrar os principais tipos de gr√°ficos que usamos para analisar e apresentar os dados e, mostrar como criar esses gr√°ficos no R.\nVoc√™ pode pensar em um gr√°fico como uma pintura. Voc√™ come√ßa com uma tela vazia. Cada vez que voc√™ usa uma fun√ß√£o gr√°fica, ela pinta algumas coisas novas em sua tela. Mais tarde, voc√™ pode pintar mais coisas por cima, se quiser; mas, assim como na pintura, voc√™ n√£o pode \u0026ldquo;desfazer\u0026rdquo; seus tra√ßos. Se voc√™ cometer um erro, ter√° que jogar fora sua pintura e come√ßar de novo. Felizmente, isso √© muito mais f√°cil de fazer ao usar o R do que ao pintar um quadro na vida real: voc√™ deleta o gr√°fico e come√ßa novos comandos para fazer um novo gr√°fico.\nNo RStudio, o gr√°fico ser√° exibido em um device e neste caso ir√° aparecer na √°rea plot, no canto superior direito (uma aba do lado da sess√£o Environment que j√° vimos nas aulas anteriores). √â poss√≠vel tamb√©m salvar o gr√°fico como um arquivo de imagem jpeg, png, pdf, postscript, tiff, bmp, entre outros formatos.\nDiferentes sistemas gr√°ficos no R Existem diferentes pacotes para desenhar gr√°ficos no R, pois existem diferentes formas computacionais de desenhar gr√°ficos, ou seja, diferentes sistemas de gr√°ficos. Um sistema gr√°fico define uma cole√ß√£o de comandos gr√°ficos de baixo n√≠vel sobre o que desenhar e onde desenhar. Algo que surpreende a maioria dos novos usu√°rios √© a descoberta de que realmente existem sistemas gr√°ficos totalmente independentes, gr√°ficos tradicionais conhecidos (no pacote graphics) e gr√°ficos de grade (no pacote grid). Esses dois sistemas diferentes s√£o praticamente incompat√≠veis um com o outro.\nO R tem v√°rios pacotes diferentes, cada um fornece um conjunto de comandos gr√°ficos de alto n√≠vel. Um √∫nico comando de alto n√≠vel √© capaz de desenhar um gr√°fico inteiro, completo com uma variedade de op√ß√µes de personaliza√ß√£o. A maioria dos comandos (mas n√£o todos) do pacote graphics √© de alto n√≠vel, e neste sentido, funciona para o sistema dos gr√°ficos tradicionais. Todos esses comandos tendem a compartilhar um estilo visual comum, embora haja alguns gr√°ficos que diferem um pouco no estilo.\nDo outro lado do sistema de gr√°ficos, o universo do sistema de grade depende fortemente de dois pacotes diferentes ‚Äìlattice e ggplot2‚Äì os dois fornecem um estilo visual bastante diferente. Como voc√™ provavelmente j√° deve ter adivinhado, h√° um monte de fun√ß√µes separadas que voc√™ precisa aprender se quiser usar gr√°ficos do pacote lattice ou fazer uso do ggplot2.\nPara esta aula vamos falar sobre as ferramentas gr√°ficas b√°sicas do sistema tradicional do pacote graphics.\nPar√¢metros gr√°ficos vs argumentos de fun√ß√£o As diferentes fun√ß√µes de plotagem do graphics compartilham de alguns argumentos gerais que podem ser usados na maioria das fun√ß√µes e outros argumentos que s√£o pr√≥prios de cada fun√ß√£o de plotagem. Existem diferentes par√¢metros que podem ser usados.\nO que exatamente √© um par√¢metro no gr√°fico? Basicamente, a ideia √© que existem algumas caracter√≠sticas de um gr√°fico que s√£o bastante universais: por exemplo, independentemente do tipo de gr√°fico que voc√™ est√° desenhando, voc√™ provavelmente precisa especificar a cor a ser usada no gr√°fico, certo? Ent√£o √© muito prov√°vel que haja algum tipo de argumento para cada fun√ß√£o gr√°fica no R? Bem, mais ou menos. A fim de evitar centenas de argumentos para cada fun√ß√£o, o que o R faz √© referir-se a um monte desses ‚Äúpar√¢metros gr√°ficos‚Äù que t√™m um prop√≥sito bem geral. Os par√¢metros gr√°ficos podem ser alterados diretamente usando a fun√ß√£o low-level par().\n?par\r Se voc√™ procurar saber mais, vai perceber que existem milhares de argumentos que podem ser especificados usando a fun√ß√£o par(). Raramente voc√™ vai precisar usar a fun√ß√£o par() diretamente, voc√™ pode colocar os argumentos diretamente na fun√ß√£o que voc√™ est√° usando para construir algum gr√°fico.\nPlot Introdu√ß√£o ao scatterplot atrav√©s de um exemplo de plotagem simples\nAntes de mostrar os tipos de fun√ß√µes gr√°ficas mais espec√≠ficas, vamos come√ßar com a fun√ß√£o b√°sica plot().\nfibonacci \u0026lt;- c(1,1,2,3,5,8,13)\rplot(fibonacci)\r Como voc√™ pode ver, o R plotou os valores armazenados no vetor fibonacci no eixo vertical (eixo y) e o √≠ndice correspondente no eixo horizontal (eixo x). Ou seja, no eixo x, o valor seria o da posi√ß√£o dentro do vetor fibonacci, e no eixo y, o valor que est√° naquela posi√ß√£o. O importante a se notar ao usar a fun√ß√£o plot(), √© que √© um outro exemplo de uma fun√ß√£o gen√©rica muito parecida com a fun√ß√£o summary() que aprendemos na aula anterior.\nA fun√ß√£o plot() depende de dois argumentos, x (a primeira entrada, que √© necess√°ria) e y (que √© opcional). Isso o torna (a) extremamente poderoso quando voc√™ pega o jeito e (b) imprevis√≠vel, quando voc√™ n√£o tem certeza do que est√° fazendo.\nTipo de gr√°fico Voc√™ pode personalizar a apar√™ncia do gr√°fico atual! Para come√ßar, vamos dar uma olhada nas op√ß√µes mais importantes que a fun√ß√£o plot() fornece para voc√™ usar (lembrando que estamos lidando com uma fun√ß√£o gen√©rica, neste caso a fun√ß√£o plot.default(), j√° que √© aquela que faz todo o trabalho), que √© o argumento type. O argumento type especifica o estilo visual do do gr√°fico. Os valores poss√≠veis para o argumento type: \u0026ldquo;p\u0026rdquo;, \u0026ldquo;l\u0026rdquo;, \u0026ldquo;h\u0026rdquo;, \u0026ldquo;o\u0026rdquo;, \u0026ldquo;b\u0026rdquo;, \u0026ldquo;s\u0026rdquo;, \u0026ldquo;S\u0026rdquo;, \u0026ldquo;c\u0026rdquo;, \u0026ldquo;n\u0026rdquo;\nplot(fibonacci, type = \u0026quot;p\u0026quot;)\r plot(fibonacci, type = \u0026quot;l\u0026quot;)\r plot(fibonacci, type = \u0026quot;h\u0026quot;)\r plot(fibonacci, type = \u0026quot;o\u0026quot;)\r plot(fibonacci, type = \u0026quot;b\u0026quot;)\r plot(fibonacci, type = \u0026quot;s\u0026quot;)\r plot(fibonacci, type = \u0026quot;S\u0026quot;)\r plot(fibonacci, type = \u0026quot;c\u0026quot;)\r plot(fibonacci, type = \u0026quot;n\u0026quot;)\r Como voc√™ pode ver, alterando o argumento type, voc√™ pode obter uma apar√™ncia diferente para seu gr√°fico. Em outras palavras, no que diz respeito ao R, a √∫nica diferen√ßa entre um gr√°fico de dispers√£o e um gr√°fico de linha √© que para desenhar um gr√°fico de dispers√£o voc√™ coloca type = \u0026quot;p\u0026quot;, e no de linha type = \u0026quot;l\u0026quot; como se fossem equivalentes, por√©m estilos diferentes. Mas, um gr√°fico de linha implica que h√° alguma no√ß√£o de continuidade de um ponto para o pr√≥ximo, enquanto um gr√°fico de dispers√£o n√£o.\n type = \u0026ldquo;p\u0026rdquo; desenha somente pontos type = \u0026ldquo;o\u0026rdquo; desenha uma linha sobre os pontos type = \u0026ldquo;h\u0026rdquo; desenha barras verticais type = \u0026ldquo;s\u0026rdquo; desenha as linhas em formato de escada, indo do horizontal para o vertical type = \u0026ldquo;S\u0026rdquo; desenha as linhas em formato de escada, indo do vertical para o horizontal type = \u0026ldquo;l\u0026rdquo; desenha somente a linha, sem os pontos. type = \u0026ldquo;c\u0026rdquo; desenha somente as linhas conectando os pontos, sem passar por cima deles type = \u0026ldquo;n\u0026rdquo; n√£o desenha nada (aparentemente isso de alguma forma pode ser √∫til?)  Exerc√≠cio Plote um gr√°fico, usando a fun√ß√£o plot(), da vari√°vel V2009 do data frame df. O que ocorre se voc√™ tenta plotar a vari√°vel Trimeste como gr√°fico de dispers√£o? E de linha?\nAgora vamos para tipos de gr√°ficos mais espec√≠ficos. Iremos come√ßar pelos histogramas.\nHistogramas Os histogramas s√£o uma das formas mais simples e √∫teis de visualizar dados e voc√™ consegue ter uma impress√£o geral dos seus dados.\nO que um histograma faz? Ele divide os valores poss√≠veis em caixas e, em seguida, conta o n√∫mero de observa√ß√µes que caem dentro de cada bin.\nA fun√ß√£o do R base que cria um histograma √© hist(). Dentro desta fun√ß√£o existem alguns argumentos especificos dentre eles o argumento breaks que define o n√∫mero de quebras ou bins que o seu histograma ter√°\nhist(df$V2009)\r A maneira como voc√™ especifica as quebras tem um grande efeito na apar√™ncia do histograma, por isso √© importante ter certeza de escolher as quebras de maneira sensata.\nhist(vetor, breaks = 3)\r hist(vetor, breaks = 20)\r Em geral, o R faz um bom trabalho ao selecionar as quebras por conta pr√≥pria, uma vez que faz uso de alguns truques que os estat√≠sticos desenvolveram para selecionar automaticamente as caixas certas para um histograma, mas, no entanto, geralmente √© uma boa ideia brincar com as quebras um pouco para ver o que acontece.\n√â poss√≠vel usar outros argumentos dentro da fun√ß√£o hist(). Iremos listar todos os argumentos que podem ser usados no final desta aula.\nExerc√≠cio Considere a vari√°vel VD4016 do data frame df. Desenho o histograma, e use diferentes valores no argumento breaks, teste aquele que ficar√° melhor para esta vari√°vel. O que acontece se voc√™ tentar fazer um histograma da vari√°vel V2010?\nBoxplots Uma outra alternativa, em rela√ß√£o ao histograma, s√£o os BoxPlots. Lembra das informa√ß√µes que a fun√ß√£o summary() nos d√°?\nVamos relembr√°-la aqui.\nsummary(df$V2009)\r ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00 18.00 36.00 36.94 55.00 104.00\r O boxplot nada mais √© do que uma maneira visual de ver essas informa√ß√µes (min, max, 1¬∫ quartil, mediana, m√©dia, 3¬∫ quartil) contidas no summary().\nA fun√ß√£o que desenha um boxplot, adivinha? Chama-se boxplot(). Como sempre, h√° muitos argumentos opcionais que voc√™ pode especificar se quiser, mas na maioria das vezes voc√™ pode apenas deixar o R escolher por padr√£o. Dito isso, vou substituir um dos padr√µes para come√ßar especificando a op√ß√£o de intervalo (argumento range), mas na maioria das vezes voc√™ n√£o vai querer fazer isso (explicarei o porqu√™ em um minuto). Vamos tentar o seguinte comando:\nboxplot(df$V2009, range = 100)\r Quando voc√™ olha para este gr√°fico, √© assim que voc√™ deve interpret√°-lo: a linha grossa no meio da caixa √© a mediana; a caixa em si abrange a faixa do 25¬∫ ao 75¬∫ percentil; e os ‚Äútra√ßos‚Äù cobrem toda a faixa do valor m√≠nimo ao valor m√°ximo.\nNa pr√°tica, n√£o √© bem assim que boxplots geralmente funcionam. Na maioria das aplica√ß√µes, os ‚Äútra√ßos‚Äù (whiskers) n√£o cobrem todo o intervalo do m√≠nimo ao m√°ximo. Em vez disso, eles v√£o para o ponto de dados mais extremo que n√£o excede um certo limite. Por padr√£o, esse valor √© 1,5 vezes o intervalo interquartil, correspondendo a um valor de 1,5. Qualquer observa√ß√£o cujo valor esteja fora desse intervalo (range) √© representada graficamente como um c√≠rculo em vez de ser coberta pelos tra√ßos e √© comumente referida como outlier.\nboxplot(df$V2009)\r Exerc√≠cio Fa√ßa um boxplot da vari√°vel VD4016. O que voc√™ v√™ de diferente em rela√ß√£o a vari√°vel V2009 usada no exemplo anterior? Como voc√™ interpretaria esse boxplot.\n√â poss√≠vel usar dentro da fun√ß√£o boxplot(), o argumento formula que ir√° relacionar duas vari√°veis. Veja:\nboxplot(formula = V2009 ~ V2010,\rdata = df)\r Diagramas de dispers√£o A gente j√° viu um pouquinho do que √© um gr√°fico de dispers√£o quando usamos a fun√ß√£o plot() no come√ßo desta se√ß√£o de visualiza√ß√£o de gr√°ficos. Lembra?\nMas agora, vamos mostrar como fazer um gr√°fico de dispers√£o (scatterplot) relacionando duas vari√°veis, e n√£o plotando somente uma como foi feito no exemplo l√° no come√ßo.\nNesse tipo de gr√°fico, cada observa√ß√£o corresponde a um ponto: a localiza√ß√£o horizontal do ponto representa o valor da observa√ß√£o em uma vari√°vel e a localiza√ß√£o vertical exibe seu valor na outra vari√°vel. Em muitas situa√ß√µes, voc√™ realmente n√£o tem uma opini√£o clara sobre quais as rela√ß√µes causais entre as duas vari√°veis escolhidas, ent√£o tanto faz qual voc√™ ira colocar no eixo x e qual voc√™ ir√° colocar no eixo y.\nNo entanto, em muitas situa√ß√µes, voc√™ tem uma ideia bastante clara de qual vari√°vel voc√™ acha que √© mais prov√°vel de ser causal, ou pelo menos tem algumas suspeitas nessa dire√ß√£o. Nesse caso, ent√£o √© convencional plotar a vari√°vel de causa no eixo x, e a vari√°vel de efeito no eixo y.\nplot(x= df$V2009,\ry = df$VD4016)\r √â poss√≠vel escrever as vari√°veis atrav√©s do argumento formula e especificando o data frame no argumento separado data\nplot(V2009 ~ VD4016,\rdata = df)\r Adicionar linhas a um scatterplot Caso voc√™ queira adicionar uma linha no gr√°fico de dispers√£o √© necess√°rio definir pelos argumentos x e y, a localiza√ß√£o da linha e da coluna dentro da fun√ß√£o lines()\nplot(V2009 ~ VD4016,\rdata = df)\rlines(x = c(40,15000), y = c(40,45),\rlwd = 2)\r Matriz de scatterplots Freq√ºentemente, voc√™ deseja examinar as rela√ß√µes entre v√°rias vari√°veis ao mesmo tempo. Uma ferramenta √∫til para fazer isso √© produzir uma matriz de scatterplots, an√°loga √† matriz de correla√ß√£o. A matriz de scatterplots √© poss√≠vel usando a fun√ß√£o pairs() .\npairs(df[c(\u0026quot;VD4016\u0026quot;, \u0026quot;V2009\u0026quot;, \u0026quot;VD2003\u0026quot;)])\r Uma maneira alternativa de chamar a fun√ß√£o pairs(), que pode ser √∫til em algumas situa√ß√µes, √© especificar as vari√°veis a serem inclu√≠das usando uma f√≥rmula unilateral. Por exemplo:\npairs(formula = ~ VD4016 + V2009 + VD2003,\rdata = df)\r Barras Outra forma de gr√°fico que voc√™ pode desejar fazer √© o gr√°fico de barras. A principal fun√ß√£o que voc√™ pode usar no R para desenh√°-los √© a fun√ß√£o barplot()\n# Primeiro, √© preciso transformar em fator\rf \u0026lt;- as.factor(df$VD3005)\r# Agora sim, podemos tabular e plotar\rescolaridade \u0026lt;- tabulate(f)\rbarplot(escolaridade)\r labels_esc\u0026lt;-levels(f)\rbarplot(height = escolaridade, names.arg = labels_esc)\r O problema ao executar este gr√°fico, √© que os nomes das categorias s√£o grandes demais e n√£o couberam no gr√°fico, n√£o aparecendo todos, para isso, existe o argumento las, que rotaciona os r√≥tulos (labels).\nhead(df)\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## 2 2021 1 Distrito Federal Urbana Mulher 19 Parda 4\r## 3 2021 1 Pernambuco Urbana Mulher 36 Preta 2\r## 4 2021 1 Santa Catarina Urbana Homem 50 Parda 2\r## 5 2021 1 S√£o Paulo Urbana Mulher 43 Parda 3\r## 6 2021 1 Goi√°s Urbana Homem 35 Parda 3\r## VD3005 VD4016\r## 1 16 anos ou mais de estudo NA\r## 2 11 anos de estudo NA\r## 3 12 anos de estudo 1045\r## 4 5 anos de estudo 1500\r## 5 9 anos de estudo 1600\r## 6 14 anos de estudo 3000\r barplot(height = escolaridade, names.arg = labels_esc, las = 2)\r Exerc√≠cio Crie um barplot para a vari√°vel V2007 do dataframe df.\nO primo pobre: gr√°ficos de pizza Para calcular um gr√°fico de pizzas, a fun√ß√£o se chama pie()\nf \u0026lt;- as.factor(df$V2007)\rsexo \u0026lt;- tabulate(f)\rlabels_sexo \u0026lt;- levels(f)\rpie(sexo, labels = labels_sexo)\r Exerc√≠cio Crie um gr√°fico de pizza da vari√°vel V1022.\nPar√¢metros globais √â poss√≠vel usar alguns par√¢metros globais a partir da fun√ß√£o par(). Vamos especificar alguns aqui.\nCaso voc√™ queira mudar as margens do gr√°fico, podemos usar o par√¢metro mar. Parece simples, mas em alguns situa√ß√µes acaba sendo mais complicado do que voc√™ pode imaginar. Em princ√≠pio, o tamanho das margens √© estruturado atrav√©s do par√¢metro gr√°fico chamado mar, ent√£o tudo o que precisamos fazer √© alterar esse par√¢metro. Primeiro, vamos ver o que o argumento especifica. O argumento √© um vetor contendo quatro n√∫meros: especificando a quantidade de espa√ßo na parte inferior, na esquerda, na parte superior e, em seguida, na direita. As unidades s√£o ‚Äún√∫mero de linhas‚Äù.\npar(mar = c( 10.1, 4.1, 4.1, 2.1))\r N√£o h√° sa√≠da vis√≠vel aqui, mas nos bastidores o R mudou os par√¢metros gr√°ficos associados ao dispositivo atual (lembre-se, na terminologia todos os gr√°ficos s√£o desenhados em um \u0026ldquo;dispositivo\u0026rdquo; ou device). Agora que isso foi feito, poder√≠amos usar exatamente o mesmo comando para plotar um gr√°fico, mas desta vez voc√™ veria que todos os r√≥tulos se ajustam, porque o R agora vai deixar o dobro de espa√ßo para os r√≥tulos na parte inferior. No entanto, como agora descobri como fazer com que os r√≥tulos sejam exibidos corretamente, posso tamb√©m brincar com algumas das outras op√ß√µes, todas as quais voc√™ j√° viu antes:\nf \u0026lt;- as.factor(df$VD3005)\rescolaridade \u0026lt;- tabulate(f)\rbarplot(escolaridade)\r labels \u0026lt;-levels(f)\rbarplot(height = escolaridade, names.arg = labels,\rlas = 2)\r O argumento mfrow permite que voc√™ combine mais de um gr√°fico em uma mesma \u0026ldquo;p√°gina\u0026rdquo;. √â um vetor c(num de linhas,num de colunas).\npar(mfrow=c(1,2))\rpie(sexo, labels = labels_sexo)\rbarplot(height = escolaridade, names.arg = labels_esc,\rlas = 2)\r Salvando seus gr√°ficos Usando a interface do RStudio Se voc√™ estiver executando o R atrav√©s do Rstudio, a maneira mais f√°cil de salvar sua imagem √© clicar no bot√£o \u0026ldquo;Export\u0026rdquo; no painel Plot (ou seja, a √°rea do Rstudio onde todos os gr√°ficos aparecem). Veremos um menu que cont√©m as op√ß√µes ‚ÄúSalvar plotagem como PDF‚Äù e ‚ÄúSalvar plotagem como imagem‚Äù. Qualquer uma das vers√µes funciona. Ambos abrir√£o caixas de di√°logo que fornecem algumas op√ß√µes para salvar seu gr√°fico em forma de imagem.\nUsando grDevices A fun√ß√£o dev.list() lista todos os dispositivos gr√°ficos que existem no dispositivo nesse momento\nboxplot(df$V2009)\r dev.list()\r ## png ## 2\r O que isso significa √© que h√° um dispositivo gr√°fico (dispositivo 2) que est√° aberto no momento e √© uma janela com uma figura.\nO R entende que seus dispositivos gr√°ficos podem estar rodando simult√¢neamente. O dispositivo da janela Plots do RStudio se chama RStudioGD, no windows, o dispositivo se chama windows, em outros sistemas operacionais, os nomes s√£o diferentes, mas a ideia √© a mesma. Para ver os dispositivos abertos, use:\ndev.list()\r ## png ## 2\r Em geral, faz sentido escolher o que voc√™ quer de fato plotar e depois salvar isso num arquivo. Mas se voc√™ quiser salvar todos os dispositivos ativos no momento, use:\ndev.print( device = jpeg, filename = \u0026quot;thisfile.jpg\u0026quot;, width = 480, height = 300)\r ## png ## 2\r Essa fun√ß√£o guardar√° todos os seus dispositivos abertos num arquivo jpeg chamado thisfile.jpg, com largura 480 pixels e largura 300 pixels e em seguida, fechar√° os gr√°ficos. Na pr√°tica, o mais comum √© fazer o salvamento de forma mais consciente, primeiro, fechando todos os dispositivos abertos (pela vassourinha ou usando a fun√ß√£o abaixo):\ndev.off()\r ## null device ## 1\r Depois, voc√™ plota o gr√°fico que deseja salvar:\npar(mfrow=c(1,2))\rpie(sexo, labels = labels_sexo)\rbarplot(height = escolaridade, names.arg = labels_esc,\rlas = 2)\r E s√≥ ent√£o chama dev.print()\ndev.print(device = jpeg, filename = \u0026quot;thisfile.jpg\u0026quot;, width = 480, height = 300)\r ## png ## 2\r A parte filename = \u0026ldquo;thisfile.jpg\u0026rdquo; diz ao R como nomear o arquivo gr√°fico, e os argumentos width = 480 (largura) e height = 300 (altura) dizem ao R para desenhar uma imagem com 300 pixels de altura e 480 pixels de largura. Se voc√™ quiser um tipo diferente de arquivo, apenas altere o argumento do dispositivo de jpeg para outro. O salva em png, tiff e bmp que funcionam exatamente da mesma maneira que o comando jpeg, mas produzem diferentes tipos de arquivos.\nExecute o processo de listar todos os dispostivos abertos, fech√°-los, plotar um gr√°fico de sua prefer√™ncia e ent√£o salv√°-lo num arquivo usando as fun√ß√µes dev.___.\nCustomiza√ß√£o de gr√°ficos T√≠tulos de gr√°ficos e eixos Uma das primeiras coisas que voc√™ vai querer fazer ao personalizar seu gr√°fico √© usar alguns labels diferentes. Voc√™ pode querer especificar r√≥tulos de eixo mais apropriados, adicionar um t√≠tulo ou adicionar um subt√≠tulo. Os argumentos que voc√™ precisa especificar para que isso aconte√ßa s√£o:\n‚Ä¢ main: Uma sequ√™ncia de caracteres contendo o t√≠tulo. ‚Ä¢ sub: Uma string de caracteres contendo o subt√≠tulo. ‚Ä¢ xlab: Uma string de caracteres contendo o r√≥tulo do eixo x. ‚Ä¢ ylab: Uma string de caracteres contendo o r√≥tulo do eixo y.\nExemplo geral de como usar esses argumentos:\nfibonacci \u0026lt;- c( 1,1,2,3,5,8,13 )\rplot(x = fibonacci, main = \u0026quot;T√≠tulo do Gr√°fico\u0026quot;,\rsub = \u0026quot;subt√≠tulo do gr√°fico\u0026quot;,\rxlab = \u0026quot;t√≠tulo do eixo x\u0026quot;,\rylab = \u0026quot;t√≠tulo do eixo y\u0026quot;)\r Customiza√ß√£o de fonte H√° alguns recursos interessantes para os quais vale a pena conhecer. Em primeiro lugar, observe que o subt√≠tulo est√° desenhado abaixo do gr√°fico, como conseq√º√™ncia, quase nunca uso legendas. Voc√™ pode ter uma opini√£o diferente, √© claro, mas o importante √© que voc√™ se lembre onde a legenda realmente vai.\nEm segundo lugar, observe que o R coloca texto em negrito e um tamanho de fonte maior para o t√≠tulo. √â poss√≠vel alterar essas configura√ß√µes. O t√≠tulo, pelos padr√µes do R, s√£o muito grandes e chamam muita aten√ß√£o.\nPara esse fim, h√° um monte de par√¢metros gr√°ficos que voc√™ pode usar para personalizar o estilo da fonte:\n‚Ä¢ font.main: estilo da fonte usado para o t√≠tulo do gr√°fico ‚Ä¢ font.sub: o subt√≠tulo ‚Ä¢ font.axis: os n√∫mero perto das marcas nos eixos ‚Ä¢ font.lab: os r√≥tulos dos eixos\nEsses argumentos s√£o n√∫meros em vez de nomes: valor 1 corresponde a texto simples, 2 significa negrito, 3 significa it√°lico e 4 significa negrito it√°lico.\n Cores  col.main, col.sub, col.axis, col.lab: Esses par√¢metros fazem praticamente o que o nome diz: cada um especifica uma cor em parte de um texto, seja do t√≠tulo (main), do subt√≠tulo (sub), t√≠tulo dos eixos (lab) ou os n√∫mero das marcas dos eixos (axis).\nO R tem uma grande lista de nomes para cores, digite colours()para ver uma lista de 650 nomes de cores que ele reconhece.\n Tamanho  cex.main, cex.sub, cex.axis: A parte ‚Äúcex‚Äù aqui √© abrevia√ß√£o de ‚Äúexpans√£o de caracteres‚Äù e √© essencialmente um valor de amplia√ß√£o. Por padr√£o, todos eles s√£o definidos com um valor de 1, exceto para o t√≠tulo da fonte: cex.main que possue uma amplia√ß√£o padr√£o de 1.2, a fonte do t√≠tulo √© 20% maior do que as outras por padr√£o do R.\n Fam√≠lia  family: esse argumento especifica a fam√≠lia da fonte para usar: a maneira mais simples de usar √© definir como \u0026ldquo;sans\u0026rdquo;, \u0026ldquo;serif\u0026rdquo; ou \u0026ldquo;mono\u0026rdquo;, correspondendo a uma fonte san serif, uma fonte serif ou uma fonte monospaced Se desejar, voc√™ pode fornecer o nome de uma fonte espec√≠fica, mas tenha em mente que diferentes sistemas operacionais usam fontes diferentes, ent√£o provavelmente √© mais seguro n√£o mudar esse argumento. Mas caso queira tentar, esse √© o argumento necess√°rio.\n  fibonacci \u0026lt;- c( 1,1,2,3,5,8,13 )\rplot(x = fibonacci, main = \u0026quot;T√≠tulo do Gr√°fico\u0026quot;,\rxlab = \u0026quot;t√≠tulo do eixo x\u0026quot;,\rylab = \u0026quot;t√≠tulo do eixo y\u0026quot;,\rfont.main = 1, family = 'serif',\rcex.main = 1, font.axis = 2, col.lab = \u0026quot;gray50\u0026quot;,\rcol.axis = 'blue')\r Cores col: este argumento muda a cor do gr√°fico atrav√©s de um string com o nome dela, assim como mostrado no argumento para mudar a cor da fonte dos t√≠tulos, esse √© o jeito mais simples.\nForma pch: O par√¢metro de caractere gr√°fico √© um n√∫mero, geralmente entre 1 e 25. O que ele faz √© definir o s√≠mbolo que ser√° usado para desenhar os pontos que ele plota.\nTamanho cex: Este par√¢metro descreve um fator de expans√£o de caractere (ou seja, amplia√ß√£o) para os caracteres tra√ßados. Por padr√£o o cex = 1, mas se voc√™ quiser s√≠mbolos maiores em seu gr√°fico, voc√™ deve especificar um valor maior que 1.\nTipo de linha lty: define o tipo de linha que o R ir√° desenhar. Tem sete valores que voc√™ pode especificar usando um n√∫mero entre 0 e 7, ou usando uma seq√º√™ncia de caracteres: \u0026ldquo;blank\u0026rdquo;, \u0026ldquo;solid\u0026rdquo;, \u0026ldquo;dashed\u0026rdquo;, \u0026ldquo;dotted\u0026rdquo;, \u0026ldquo;dotdash\u0026rdquo;, \u0026ldquo;longdash\u0026rdquo;, \u0026ldquo;twodash\u0026rdquo;.\nEspessura de linha lwd: este argumento muda a espessura da linha desenhada no gr√°fico. O valor padr√£o √© 1. Neste sentido, valores maiores produzem linhas mais grossas e valores menores produzem linhas mais finas.\nfibonacci \u0026lt;- c( 1,1,2,3,5,8,13 )\rplot(x = fibonacci, type = \u0026quot;b\u0026quot;, col = \u0026quot;blue\u0026quot;, pch = 19, cex = 5, lty = 2, lwd = 4)\r Eixos Escalas dos eixos Caso voc√™ queira √© poss√≠vel mudar a escala dos eixos. O R faz um bom trabalho em escolar os limites inferiores e superiores dos eixos, mas as vezes √© necess√°rio mudar os limites. Os argumentos necess√°rios para fazer essas altera√ß√µes s√£o xlim para o eixo x e ylim para o eixo y. O argumento aceita um vetor de duas posi√ß√µes, uma com o limite inferior e outra com o superios c(0,40).\nRemover t√≠tulos O argumento ann √© um argumento que aceita TRUE ou FALSE e serve para voc√™ excluir algum t√≠tulo que voc√™ n√£o queira que apare√ßa no gr√°fico caso coloque ann = FALSE, o t√≠tulo especificado n√£o ir√° aparecer.\nRemover eixos axes: esse tamb√©m √© um argumento l√≥gico como o argumento anterior. Suponha que voc√™ n√£o queira que o R desenhe os eixos. Para suprimir os eixos, tudo que voc√™ precisa fazer √© adicionar o argumento axes = FALSE. Isso remover√° os eixos e a numera√ß√£o, mas n√£o os r√≥tulos dos eixos (ou seja, o texto ylab e xlab).\nManter √°rea de plotagem Suponha que voc√™ tenha removido os eixos definindo axes = FALSE, mas ainda deseja ter uma caixa simples desenhada ao redor do gr√°fico; ou seja, voc√™ s√≥ queria se livrar da numera√ß√£o e das marcas de sele√ß√£o, mas deseja manter a √°rea. Para fazer isso, voc√™ define frame.plot = TRUE.\nplot( x = fibonacci, xlim = c(0, 15), ylim = c(0, 15), ann = FALSE, axes = FALSE, frame.plot = TRUE)\r Argumentos espec√≠ficos de cada fun√ß√£o   Fun√ß√£o hist() e alguns argumentos.\n  Linhas de sombreamento: argumentos densitye angle esses argumentos adicionam linhas diagonais para sombrear as barras: o valor no argumento density √© um n√∫mero que indica quantas linhas por polegada deve ser desenhada (o valor padr√£o de NULL significa sem linhas) e o angle √© um n√∫mero que indica a quantos graus a partir da horizontal as linhas devem ser tra√ßadas (padr√£o angle = 45 graus).\n  Especificidades quanto √†s cores: col, border. Voc√™ tamb√©m pode alterar as cores: neste caso, o par√¢metro colore a cor do sombreamento (ou as linhas de sombreamento, se houver, ou a cor do interior das barras, se n√£o houver), e o argumento de border define a cor das bordas das barras\n  labels. Voc√™ tamb√©m pode anexar r√≥tulos a cada uma das barras usando o argumento labels. A maneira mais simples de fazer isso √© definir labels= TRUE, caso em que o R adicionar√° um n√∫mero logo acima de cada barra, sendo esse n√∫mero o n√∫mero exato de observa√ß√µes dentro daquele bin. Como alternativa, voc√™ mesmo pode escolher os labels, inserindo um vetor de strings, por exemplo, labels = c (\u0026ldquo;r√≥tulo 1\u0026rdquo;, \u0026ldquo;r√≥tulo2\u0026rdquo;, \u0026ldquo;etc\u0026rdquo;)\n  hist(x = df$V2009,\rmain = \u0026quot;Amostra Pnad\u0026quot;,\rxlab = \u0026quot;Margin\u0026quot;,\rdensity = 40,\rangle = 40,\rborder = \u0026quot;gray20\u0026quot;,\rcol = \u0026quot;gray80\u0026quot;,\rlabels = TRUE,\rylim = c(0,200)\r)\r Al√©m da gama usual de par√¢metros gr√°ficos que voc√™ pode ajustar para fazer o gr√°fico parecer bonito, voc√™ tamb√©m mudar qualquer outros elementos que fazem parte de um boxplot.\nCom o argumento border √© poss√≠vel mudar a cor dos os elementos gr√°ficos do boxplot, exceto a barra central que representa a mediana (borda), de modo a chamar mais aten√ß√£o para a mediana do que para o resto do boxplot.\nAs partes do boxplot que voc√™ pode personalizar s√£o:\n box. A caixa que cobre o intervalo interquartil. med. A linha usada para mostrar a mediana. whisk As linhas verticais usadas para desenhar os tra√ßos inferiores e superiores. staple As barras transversais nas extremidades os tra√ßos inferiores e superiores. out. Os pontos usados para mostrar os outliers.  As seguintes especifica√ß√µes dos gr√°ficos s√£o necess√°rias para mudar algumas das partes do boxplot listadas acima:\n  Para aumentar a largura/espessura: boxwex, staplewex, outwex. Esses s√£o fatores de escala que governam a largura de v√°rias partes do gr√°fico. O fator de escala padr√£o √© (geralmente) 0.8 para a caixa e 0.5 para as outras duas partes.\n  Para mudar o tipo de linha: boxlty, medlty, whisklty, staplelty, outlty. Os valores para esses argumentos s√£o iguais aos usados no par√¢metro regular lty, com duas exce√ß√µes. H√° uma op√ß√£o adicional onde voc√™ pode definir medlty = \u0026quot;blank\u0026quot; para suprimir a linha mediana completamente (√∫til se voc√™ quiser desenhar um ponto para a linha mediana em vez de plotar). Da mesma forma, por padr√£o, o tipo de linha outlier √© definido como outlty = \u0026quot;blank\u0026quot;, porque o comportamento padr√£o √© desenhar outliers como pontos em vez de linhas.\n  Para mudar a Largura da linha: boxlwd, medlwd, whisklwd, staplelwd, outlwd. Eles alteram as larguras de linha para os elementos relevantes e se comportam da mesma maneira que o par√¢metro regular lwd. A √∫nica coisa a notar √© que o valor padr√£o para o medlwd √© tr√™s vezes o valor dos outros.\n  Para mudar a cor das linhas dos principais elementos: boxcol, medcol, whiskcol, staplecol, outcol. Especifique uma cor da mesma maneira que voc√™ faz normalmente em outros argumentos de altera√ß√£o de cores j√° mostrados por aqui.\n  Cor de preenchimento da caixa do boxplot: boxfill\n  para mudar o formato do ponto: medpch, outpch. Eles se comportam como o par√¢metro regular pch.\n  tamanho dos pontos: medcex, outcex. Par√¢metros de tamanho para os pontos usados para plotar medianas e outliers. Eles s√≥ s√£o significativos se os pontos correspondentes forem realmente plotados. Portanto, para o boxplot padr√£o, que inclui pontos at√≠picos, mas usa uma linha em vez de um ponto para desenhar a mediana, apenas o par√¢metro outcex √© significativo.\n  Cores de fundo: medbg, outbg. Novamente, as cores de fundo s√≥ s√£o significativas se os pontos forem realmente tra√ßados.\n  boxplot(x = df$V2009, main = \u0026quot;Amostra Pnad\u0026quot;,\rxlab = \u0026quot;V2009\u0026quot;, ylab = \u0026quot;Freq\u0026quot;)\r boxplot(x = df$V2009, main = \u0026quot;Amostra Pnad\u0026quot;,\rxlab = \u0026quot;V2009\u0026quot;, ylab = \u0026quot;Freq\u0026quot;, border = \u0026quot;blue\u0026quot;, frame.plot = FALSE, staplewex = 0,\rwhisklty = 1)  Se voc√™ quiser que o boxplot apare√ßa horizontalmente, coloque o argumento horizontal = TRUE:\nboxplot(x = df$V2009, main = \u0026quot;Amostra Pnad\u0026quot;,\rxlab = \u0026quot;V2009\u0026quot;, ylab = \u0026quot;Freq\u0026quot;, border = \u0026quot;blue\u0026quot;, frame.plot = FALSE, staplewex = 0,\rwhisklty = 1,\rhorizontal = TRUE)  Revis√£o Nesta aula vimos algumas fun√ß√µes principais que calculam medidas usadas em estat√≠stica descritiva que permitem voc√™ entender melhor os seus dados e o que eles podem estar querendo mostrar para voc√™:\n entre as fun√ß√µes que nos retornam uma medida √∫nica, aprendemos: sum(), mean(), median(), range(), max(), min(), quantile(),IQR(), var(), sd() e mad(). a fun√ß√£o table() permite que voc√™ fa√ßa a contagem de observa√ß√µes em uma determinada categoria, assim como permite cruzar a contagem em duas vari√°veis. as fun√ß√µes que entregam v√°rias medidas sumarisadas: summary(), by(), aggregate() vimos tamb√©m a fun√ß√£o cor()e as fun√ß√µes de testes estat√≠sticos:  Al√©m disso, vimos diferentes formas de fazermos gr√°ficos b√°sicos com a fun√ß√£o global plot() e tamb√©m aprendemos as fun√ß√µes para gr√°ficos espec√≠ficos como hist() (para histogramas), barplot() (para gr√°ficos de barras), pie() para gr√°ficos de pizza e boxplot() (bom, o nome √© auto explicativo)\nExerc√≠cios  Usando as fun√ß√µes de medidas individuais, rode o dataset \u0026lsquo;airquality\u0026rsquo; (se voc√™ escrever assim no R, ele j√° mostra o dataset).  head(airquality)\r ## Ozone Solar.R Wind Temp Month Day\r## 1 41 190 7.4 67 5 1\r## 2 36 118 8.0 72 5 2\r## 3 12 149 12.6 74 5 3\r## 4 18 313 11.5 62 5 4\r## 5 NA NA 14.3 56 5 5\r## 6 28 NA 14.9 66 5 6\r  Crie um histograma para a vari√°vel airquality$Temp.\n  Use a fun√ß√£o que sumarisa as principais informa√ß√µes de estat√≠stica b√°sica e tamb√©m construa um boxplot para comparar as informa√ß√µes escritas e visuais para as seguintes vari√°veis do dado airquality: Wind, Temp and Ozone).\n  # Exemplo\rsummary(airquality$Wind)\r ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.700 7.400 9.700 9.958 11.500 20.700\r Agora usando somente os dados da amostra da pnad que temos visto at√© agora, fa√ßa uma an√°lise descritiva usando as medidas individiuais, as de correla√ß√£o e as de contagem. Al√©m disso observe as diferen√ßas entre a medida sumary para uma vari√°vel num√©rica e uma vari√°vel categ√≥rica.  head(df)\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## 2 2021 1 Distrito Federal Urbana Mulher 19 Parda 4\r## 3 2021 1 Pernambuco Urbana Mulher 36 Preta 2\r## 4 2021 1 Santa Catarina Urbana Homem 50 Parda 2\r## 5 2021 1 S√£o Paulo Urbana Mulher 43 Parda 3\r## 6 2021 1 Goi√°s Urbana Homem 35 Parda 3\r## VD3005 VD4016\r## 1 16 anos ou mais de estudo NA\r## 2 11 anos de estudo NA\r## 3 12 anos de estudo 1045\r## 4 5 anos de estudo 1500\r## 5 9 anos de estudo 1600\r## 6 14 anos de estudo 3000\r Algumas ideias:\na. Use a fun√ß√£o table para ver as rela√ß√µes entre a vari√°vel V1022 e V2007. Fa√ßa tamb√©m para a vari√°vel V2007 e V2010. Veja as contagens de observa√ß√µes para cada categoria e entenda um pouco melhor o perfil dos dados.\nb. Fa√ßa as medida resumo para a ver a m√©dia, mediana, quartis da sua amostra.\nDepois de fazer as an√°lises descritivas, fa√ßa gr√°ficos para ver os dados de forma visual, com o mesmo dado da pnad usado no exerc√≠cio 4.  Ideias:\na. Fa√ßa um histograma das vari√°veis num√©ricas, talvez um boxplot tamb√©m seja interessante. b. Fa√ßa um gr√°fico de barras para as vari√°veis categ√≥ricas.\n","date":1623801600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623801600,"objectID":"a411bad1062bafa42af03401e22f5205","permalink":"https://laddem.github.io/courses/rbase/dia3/","publishdate":"2021-06-16T00:00:00Z","relpermalink":"/courses/rbase/dia3/","section":"courses","summary":"Fun√ß√µes para estat√≠sticas descritivas e gr√°ficos em R","tags":null,"title":"Estat√≠stica e visualiza√ß√£o: analisando seus dados e obtendo resultados","type":"book"},{"authors":null,"categories":null,"content":"\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\rOpera√ß√µes em vari√°veis e bancos de dados Hoje vamos apresentar dois pacotes com finalidades mais espec√≠ficas para trabalhar com vari√°veis de tipo caractere e fator e um pacote super importante para as opera√ß√µes com bancos de dados.\nO pacote stringr √© uma s√©rie de adapta√ß√µes da biblioteca stringi e serve para a manipula√ß√£o de vari√°veis texto, incluindo fun√ß√µes para detec√ß√£o, modifica√ß√£o, substitui√ß√£o, remo√ß√£o de texto em vari√°veis caractere. Para dominar esse assunto, √© necess√°rio compreender o conceito de ‚Äúregex,‚Äù ou ‚Äúexpress√£o regular,‚Äù que foge um pouco do escopo do curso, mas que ser√° introduzido brevemente.\nO pacote forcats cont√©m uma s√©rie de fun√ß√µes para trabalhar com o tipo factor. S√£o fun√ß√µes que facilitam opera√ß√µes envolvendo esse tipo de vari√°vel, como contagens, troca dos nomes das categorias, agrupamento de categorias, recodifica√ß√£o, plotagem, etc.\nO pacote dplyr √© um dos pilares do tidyverse e ele tem dois pap√©is principais: opera√ß√µes de manipula√ß√£o de banco de dados simples e opera√ß√µes de bancos de dados relacionais. No primeiro tipo s√£o inclu√≠das as opera√ß√µes de cria√ß√£o e modifica√ß√£o de vari√°veis, medidas resumo globais e por grupos, sele√ß√£o de vari√°veis, mudan√ßa da ordem das linhas e colunas, etc. No segundo tipo, s√£o as opera√ß√µes de tipo _join, em que uma vari√°vel chave √© utilizada para combinar registros de dois bancos de dados distintos.\nOs pacotes stringr e forcats s√£o mais diretos, mas o dplyr pode representar um certo n√≠vel de abstra√ß√£o que pode incomodar usu√°rios de longa data do R, portanto, vamos nos esfor√ßar para demonstrar as vantagens de mudar seu workflow para incluir as fun√ß√µes desse pacote atrav√©s de compara√ß√µes com o R base.\ndplyr dplyr para manipula√ß√£o de dados Talvez o pacote mais utilizado de todo o tidyverse, dplyr √© um pacote de manipula√ß√£o de bancos de dados inspirado pela linguagem SQL. A ideia √© concatenar opera√ß√µes de sele√ß√£o de vari√°veis, filtragem de observa√ß√£o, arranjo e ordenamento, deriva√ß√£o de vari√°veis, computa√ß√£o de medidas resumo para o banco todo ou para grupos. As fun√ß√µes b√°sicas e mais utilizadas s√£o, portanto:\n select filter arrange mutate summarize group_by  Para praticar, vamos usar o dataset flights, que cont√©m informa√ß√µes sobre os v√¥os sa√≠dos de Nova Iorque em 2013.\nlibrary(nycflights13)\rlibrary(dplyr)\r ## ## Attaching package: 'dplyr'\r## The following objects are masked from 'package:stats':\r## ## filter, lag\r## The following objects are masked from 'package:base':\r## ## intersect, setdiff, setequal, union\r flights\r ## # A tibble: 336,776 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830 819\r## 2 2013 1 1 533 529 4 850 830\r## 3 2013 1 1 542 540 2 923 850\r## 4 2013 1 1 544 545 -1 1004 1022\r## 5 2013 1 1 554 600 -6 812 837\r## 6 2013 1 1 554 558 -4 740 728\r## 7 2013 1 1 555 600 -5 913 854\r## 8 2013 1 1 557 600 -3 709 723\r## 9 2013 1 1 557 600 -3 838 846\r## 10 2013 1 1 558 600 -2 753 745\r## # ... with 336,766 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r glimpse(flights)\r ## Rows: 336,776\r## Columns: 19\r## $ year \u0026lt;int\u0026gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2~\r## $ month \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\r## $ day \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\r## $ dep_time \u0026lt;int\u0026gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, ~\r## $ sched_dep_time \u0026lt;int\u0026gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, ~\r## $ dep_delay \u0026lt;dbl\u0026gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1~\r## $ arr_time \u0026lt;int\u0026gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,~\r## $ sched_arr_time \u0026lt;int\u0026gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,~\r## $ arr_delay \u0026lt;dbl\u0026gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1~\r## $ carrier \u0026lt;chr\u0026gt; \u0026quot;UA\u0026quot;, \u0026quot;UA\u0026quot;, \u0026quot;AA\u0026quot;, \u0026quot;B6\u0026quot;, \u0026quot;DL\u0026quot;, \u0026quot;UA\u0026quot;, \u0026quot;B6\u0026quot;, \u0026quot;EV\u0026quot;, \u0026quot;B6\u0026quot;, \u0026quot;~\r## $ flight \u0026lt;int\u0026gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4~\r## $ tailnum \u0026lt;chr\u0026gt; \u0026quot;N14228\u0026quot;, \u0026quot;N24211\u0026quot;, \u0026quot;N619AA\u0026quot;, \u0026quot;N804JB\u0026quot;, \u0026quot;N668DN\u0026quot;, \u0026quot;N394~\r## $ origin \u0026lt;chr\u0026gt; \u0026quot;EWR\u0026quot;, \u0026quot;LGA\u0026quot;, \u0026quot;JFK\u0026quot;, \u0026quot;JFK\u0026quot;, \u0026quot;LGA\u0026quot;, \u0026quot;EWR\u0026quot;, \u0026quot;EWR\u0026quot;, \u0026quot;LGA\u0026quot;,~\r## $ dest \u0026lt;chr\u0026gt; \u0026quot;IAH\u0026quot;, \u0026quot;IAH\u0026quot;, \u0026quot;MIA\u0026quot;, \u0026quot;BQN\u0026quot;, \u0026quot;ATL\u0026quot;, \u0026quot;ORD\u0026quot;, \u0026quot;FLL\u0026quot;, \u0026quot;IAD\u0026quot;,~\r## $ air_time \u0026lt;dbl\u0026gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1~\r## $ distance \u0026lt;dbl\u0026gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, ~\r## $ hour \u0026lt;dbl\u0026gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6~\r## $ minute \u0026lt;dbl\u0026gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0~\r## $ time_hour \u0026lt;dttm\u0026gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0~\r Podemos filtrar nossas linhas: filter\n# Voos de primeiro de janeiro\rflights %\u0026gt;% filter(month == 1, day == 1)\r ## # A tibble: 842 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830 819\r## 2 2013 1 1 533 529 4 850 830\r## 3 2013 1 1 542 540 2 923 850\r## 4 2013 1 1 544 545 -1 1004 1022\r## 5 2013 1 1 554 600 -6 812 837\r## 6 2013 1 1 554 558 -4 740 728\r## 7 2013 1 1 555 600 -5 913 854\r## 8 2013 1 1 557 600 -3 709 723\r## 9 2013 1 1 557 600 -3 838 846\r## 10 2013 1 1 558 600 -2 753 745\r## # ... with 832 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r # Voos a partir de junho\rflights %\u0026gt;% filter(month \u0026gt; 6)\r ## # A tibble: 170,618 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 10 1 447 500 -13 614 648\r## 2 2013 10 1 522 517 5 735 757\r## 3 2013 10 1 536 545 -9 809 855\r## 4 2013 10 1 539 545 -6 801 827\r## 5 2013 10 1 539 545 -6 917 933\r## 6 2013 10 1 544 550 -6 912 932\r## 7 2013 10 1 549 600 -11 653 716\r## 8 2013 10 1 550 600 -10 648 700\r## 9 2013 10 1 550 600 -10 649 659\r## 10 2013 10 1 551 600 -9 727 730\r## # ... with 170,608 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r # Voos sa√≠dos do aeroporto JFK\rflights %\u0026gt;% filter(origin == \u0026quot;JFK\u0026quot;)\r ## # A tibble: 111,279 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 542 540 2 923 850\r## 2 2013 1 1 544 545 -1 1004 1022\r## 3 2013 1 1 557 600 -3 838 846\r## 4 2013 1 1 558 600 -2 849 851\r## 5 2013 1 1 558 600 -2 853 856\r## 6 2013 1 1 558 600 -2 924 917\r## 7 2013 1 1 559 559 0 702 706\r## 8 2013 1 1 606 610 -4 837 845\r## 9 2013 1 1 611 600 11 945 931\r## 10 2013 1 1 613 610 3 925 921\r## # ... with 111,269 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r # Voos com destino ao aeroporto de Albuquerque\rflights %\u0026gt;% filter(dest == \u0026quot;ABQ\u0026quot;)\r ## # A tibble: 254 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 10 1 1955 2001 -6 2213 2248\r## 2 2013 10 2 2010 2001 9 2230 2248\r## 3 2013 10 3 1955 2001 -6 2232 2248\r## 4 2013 10 4 2017 2001 16 2304 2248\r## 5 2013 10 5 1959 1959 0 2226 2246\r## 6 2013 10 6 1959 2001 -2 2234 2248\r## 7 2013 10 7 2002 2001 1 2233 2248\r## 8 2013 10 8 1957 2001 -4 2216 2248\r## 9 2013 10 9 1957 2001 -4 2220 2248\r## 10 2013 10 10 2011 2001 10 2235 2248\r## # ... with 244 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r # Voos com atraso de at√© 10 minutos\rflights %\u0026gt;% filter(dep_delay \u0026lt;= 10)\r ## # A tibble: 245,687 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830 819\r## 2 2013 1 1 533 529 4 850 830\r## 3 2013 1 1 542 540 2 923 850\r## 4 2013 1 1 544 545 -1 1004 1022\r## 5 2013 1 1 554 600 -6 812 837\r## 6 2013 1 1 554 558 -4 740 728\r## 7 2013 1 1 555 600 -5 913 854\r## 8 2013 1 1 557 600 -3 709 723\r## 9 2013 1 1 557 600 -3 838 846\r## 10 2013 1 1 558 600 -2 753 745\r## # ... with 245,677 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r # Voos com atraso de cerca de 10 minutos\rflights %\u0026gt;% filter(near(dep_delay, 10, tol = 2))\r ## # A tibble: 8,677 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 611 600 11 945 931\r## 2 2013 1 1 709 700 9 852 832\r## 3 2013 1 1 826 817 9 1145 1158\r## 4 2013 1 1 851 840 11 1215 1206\r## 5 2013 1 1 1011 1001 10 1133 1128\r## 6 2013 1 1 1208 1158 10 1540 1502\r## 7 2013 1 1 1240 1229 11 1451 1428\r## 8 2013 1 1 1310 1300 10 1559 1554\r## 9 2013 1 1 1330 1321 9 1613 1536\r## 10 2013 1 1 1511 1500 11 1753 1742\r## # ... with 8,667 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r # Voos que ocorreram entre abril e maio\rflights %\u0026gt;% filter(between(month, 4, 5))\r ## # A tibble: 57,126 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 4 1 454 500 -6 636 640\r## 2 2013 4 1 509 515 -6 743 814\r## 3 2013 4 1 526 530 -4 812 827\r## 4 2013 4 1 534 540 -6 833 850\r## 5 2013 4 1 542 545 -3 914 920\r## 6 2013 4 1 543 545 -2 921 927\r## 7 2013 4 1 551 600 -9 748 659\r## 8 2013 4 1 552 600 -8 641 701\r## 9 2013 4 1 553 600 -7 725 735\r## 10 2013 4 1 554 600 -6 752 805\r## # ... with 57,116 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r Podemos combinar v√°rias condi√ß√µes usando operadores l√≥gicos\n# Voos at√© 15 de abril ou at√© 15 de maio\rflights %\u0026gt;% filter(\rbetween(month, 4, 5), # mesmo que usar \u0026amp;\rbetween(day, 1, 15)\r)\r ## # A tibble: 28,176 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 4 1 454 500 -6 636 640\r## 2 2013 4 1 509 515 -6 743 814\r## 3 2013 4 1 526 530 -4 812 827\r## 4 2013 4 1 534 540 -6 833 850\r## 5 2013 4 1 542 545 -3 914 920\r## 6 2013 4 1 543 545 -2 921 927\r## 7 2013 4 1 551 600 -9 748 659\r## 8 2013 4 1 552 600 -8 641 701\r## 9 2013 4 1 553 600 -7 725 735\r## 10 2013 4 1 554 600 -6 752 805\r## # ... with 28,166 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r # Voos entre 15 de abril e 15 de maio\rflights %\u0026gt;% filter(\rmonth == 4 \u0026amp; between(day, 15, 30) | # OU\rmonth == 5 \u0026amp; between(day, 1, 15)\r)\r ## # A tibble: 29,101 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 4 15 2 2359 3 341 339\r## 2 2013 4 15 453 500 -7 639 640\r## 3 2013 4 15 511 515 -4 741 802\r## 4 2013 4 15 527 530 -3 806 813\r## 5 2013 4 15 527 529 -2 750 743\r## 6 2013 4 15 537 540 -3 846 840\r## 7 2013 4 15 542 545 -3 931 927\r## 8 2013 4 15 551 600 -9 728 758\r## 9 2013 4 15 552 600 -8 835 850\r## 10 2013 4 15 552 600 -8 648 701\r## # ... with 29,091 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r # Voos em todas os primeiros 7 dias de cada m√™s, exceto em janeiro e dezembro\rflights %\u0026gt;% filter(\rbetween(day, 1, 7),\r!month %in% c(1, 12)\r)\r ## # A tibble: 64,365 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 10 1 447 500 -13 614 648\r## 2 2013 10 1 522 517 5 735 757\r## 3 2013 10 1 536 545 -9 809 855\r## 4 2013 10 1 539 545 -6 801 827\r## 5 2013 10 1 539 545 -6 917 933\r## 6 2013 10 1 544 550 -6 912 932\r## 7 2013 10 1 549 600 -11 653 716\r## 8 2013 10 1 550 600 -10 648 700\r## 9 2013 10 1 550 600 -10 649 659\r## 10 2013 10 1 551 600 -9 727 730\r## # ... with 64,355 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r # Voos saidos de JFK, excluindo aqueles para os quais n√£o tem informa√ß√µes de hor√°rio de sa√≠da\rflights %\u0026gt;% filter(\rorigin == \u0026quot;JFK\u0026quot;, !is.na(dep_time)\r)\r ## # A tibble: 109,416 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 542 540 2 923 850\r## 2 2013 1 1 544 545 -1 1004 1022\r## 3 2013 1 1 557 600 -3 838 846\r## 4 2013 1 1 558 600 -2 849 851\r## 5 2013 1 1 558 600 -2 853 856\r## 6 2013 1 1 558 600 -2 924 917\r## 7 2013 1 1 559 559 0 702 706\r## 8 2013 1 1 606 610 -4 837 845\r## 9 2013 1 1 611 600 11 945 931\r## 10 2013 1 1 613 610 3 925 921\r## # ... with 109,406 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r # Voos com mais de 30 minutos de atraso em janeiro ou dezembro\rflights %\u0026gt;% filter(\rdep_delay \u0026gt; 30, xor(month == 1, month == 12)\r)\r ## # A tibble: 8,221 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 732 645 47 1011 941\r## 2 2013 1 1 749 710 39 939 850\r## 3 2013 1 1 811 630 101 1047 830\r## 4 2013 1 1 826 715 71 1136 1045\r## 5 2013 1 1 848 1835 853 1001 1950\r## 6 2013 1 1 903 820 43 1045 955\r## 7 2013 1 1 909 810 59 1331 1315\r## 8 2013 1 1 953 921 32 1320 1241\r## 9 2013 1 1 957 733 144 1056 853\r## 10 2013 1 1 1025 951 34 1258 1302\r## # ... with 8,211 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r E assim sucessivamente.\nDa mesma forma, temos select para selecionar as vari√°veis do banco. As duas grandes novidades s√£o que voc√™ n√£o precisa utilizar aspas na sele√ß√£o de vari√°veis e que select introduz v√°rias helper functions para facilitar a sele√ß√£o de vari√°veis parecidas.\n# Selecionar as colunas ano, mes, dia, horario de saida e horario de chegada\rflights %\u0026gt;% select(year, month, day, dep_time, arr_time)\r ## # A tibble: 336,776 x 5\r## year month day dep_time arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 830\r## 2 2013 1 1 533 850\r## 3 2013 1 1 542 923\r## 4 2013 1 1 544 1004\r## 5 2013 1 1 554 812\r## 6 2013 1 1 554 740\r## 7 2013 1 1 555 913\r## 8 2013 1 1 557 709\r## 9 2013 1 1 557 838\r## 10 2013 1 1 558 753\r## # ... with 336,766 more rows\r # Utilizando helpers\rflights %\u0026gt;% select(year:dep_time, arr_time)\r ## # A tibble: 336,776 x 5\r## year month day dep_time arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 830\r## 2 2013 1 1 533 850\r## 3 2013 1 1 542 923\r## 4 2013 1 1 544 1004\r## 5 2013 1 1 554 812\r## 6 2013 1 1 554 740\r## 7 2013 1 1 555 913\r## 8 2013 1 1 557 709\r## 9 2013 1 1 557 838\r## 10 2013 1 1 558 753\r## # ... with 336,766 more rows\r # Mais helpers\rflights %\u0026gt;% select(year:day, starts_with(\u0026quot;dep\u0026quot;), starts_with(\u0026quot;arr\u0026quot;))\r ## # A tibble: 336,776 x 7\r## year month day dep_time dep_delay arr_time arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2013 1 1 517 2 830 11\r## 2 2013 1 1 533 4 850 20\r## 3 2013 1 1 542 2 923 33\r## 4 2013 1 1 544 -1 1004 -18\r## 5 2013 1 1 554 -6 812 -25\r## 6 2013 1 1 554 -4 740 12\r## 7 2013 1 1 555 -5 913 19\r## 8 2013 1 1 557 -3 709 -14\r## 9 2013 1 1 557 -3 838 -8\r## 10 2013 1 1 558 -2 753 8\r## # ... with 336,766 more rows\r flights %\u0026gt;% select(year:day, ends_with(\u0026quot;time\u0026quot;))\r ## # A tibble: 336,776 x 8\r## year month day dep_time sched_dep_time arr_time sched_arr_time air_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2013 1 1 517 515 830 819 227\r## 2 2013 1 1 533 529 850 830 227\r## 3 2013 1 1 542 540 923 850 160\r## 4 2013 1 1 544 545 1004 1022 183\r## 5 2013 1 1 554 600 812 837 116\r## 6 2013 1 1 554 558 740 728 150\r## 7 2013 1 1 555 600 913 854 158\r## 8 2013 1 1 557 600 709 723 53\r## 9 2013 1 1 557 600 838 846 140\r## 10 2013 1 1 558 600 753 745 138\r## # ... with 336,766 more rows\r flights %\u0026gt;% select(year:day, c(ends_with(\u0026quot;time\u0026quot;)) \u0026amp; !contains(\u0026quot;sched\u0026quot;))\r ## # A tibble: 336,776 x 6\r## year month day dep_time arr_time air_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2013 1 1 517 830 227\r## 2 2013 1 1 533 850 227\r## 3 2013 1 1 542 923 160\r## 4 2013 1 1 544 1004 183\r## 5 2013 1 1 554 812 116\r## 6 2013 1 1 554 740 150\r## 7 2013 1 1 555 913 158\r## 8 2013 1 1 557 709 53\r## 9 2013 1 1 557 838 140\r## 10 2013 1 1 558 753 138\r## # ... with 336,766 more rows\r # Voc√™ pode mudar o nome das colunas durante um call para select\rflights %\u0026gt;% select(ano = year, mes = month, dia = day)\r ## # A tibble: 336,776 x 3\r## ano mes dia\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1\r## 2 2013 1 1\r## 3 2013 1 1\r## 4 2013 1 1\r## 5 2013 1 1\r## 6 2013 1 1\r## 7 2013 1 1\r## 8 2013 1 1\r## 9 2013 1 1\r## 10 2013 1 1\r## # ... with 336,766 more rows\r # Ou voc√™ pode usar rename para mudar os nomes sem selecionar vari√°veis\rflights %\u0026gt;% rename(ano = year, mes = month, dia = day)\r ## # A tibble: 336,776 x 19\r## ano mes dia dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830 819\r## 2 2013 1 1 533 529 4 850 830\r## 3 2013 1 1 542 540 2 923 850\r## 4 2013 1 1 544 545 -1 1004 1022\r## 5 2013 1 1 554 600 -6 812 837\r## 6 2013 1 1 554 558 -4 740 728\r## 7 2013 1 1 555 600 -5 913 854\r## 8 2013 1 1 557 600 -3 709 723\r## 9 2013 1 1 557 600 -3 838 846\r## 10 2013 1 1 558 600 -2 753 745\r## # ... with 336,766 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r S√£o realmente muitas possibilidades, vejam a documenta√ß√£o e os exemplos em ?select.\nUtilizando arrange podemos facilmente organizar nosso banco a partir de vari√°veis de interesse:\n# Selecionar algumas vari√°veis e ver organizar de acordar com os mais adiantados\rflights %\u0026gt;% select(year:day,matches(\u0026quot;^dep|^arr\u0026quot;)) %\u0026gt;% arrange(dep_delay, arr_delay)\r ## # A tibble: 336,776 x 7\r## year month day dep_time dep_delay arr_time arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2013 12 7 2040 -43 40 48\r## 2 2013 2 3 2022 -33 2240 -58\r## 3 2013 11 10 1408 -32 1549 -10\r## 4 2013 1 11 1900 -30 2233 -10\r## 5 2013 1 29 1703 -27 1947 -10\r## 6 2013 8 9 729 -26 1002 7\r## 7 2013 3 30 2030 -25 2213 -37\r## 8 2013 10 23 1907 -25 2143 0\r## 9 2013 5 5 934 -24 1225 -44\r## 10 2013 9 18 1631 -24 1812 -33\r## # ... with 336,766 more rows\r # Ou os mais atrasados\rflights %\u0026gt;% select(year:day,matches(\u0026quot;^dep|^arr\u0026quot;)) %\u0026gt;% arrange(-dep_delay, -arr_delay)\r ## # A tibble: 336,776 x 7\r## year month day dep_time dep_delay arr_time arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2013 1 9 641 1301 1242 1272\r## 2 2013 6 15 1432 1137 1607 1127\r## 3 2013 1 10 1121 1126 1239 1109\r## 4 2013 9 20 1139 1014 1457 1007\r## 5 2013 7 22 845 1005 1044 989\r## 6 2013 4 10 1100 960 1342 931\r## 7 2013 3 17 2321 911 135 915\r## 8 2013 6 27 959 899 1236 850\r## 9 2013 7 22 2257 898 121 895\r## 10 2013 12 5 756 896 1058 878\r## # ... with 336,766 more rows\r √â basicamente isso, voc√™ pode especificar uma ou muitas colunas para organizar, decidir se a ordem √© ascendente ou descendente e pronto.\nUtilizando mutate, voc√™ cria vari√°veis derivadas das originais. Como tibble, essa fun√ß√£o avalia seus argumentos de maneira pregui√ßosa e sequencial, o que permite voc√™ criar vari√°veis derivadas umas das outras muito facilmente.\nflights %\u0026gt;% select(sched_dep_time, dep_time, sched_arr_time, arr_time) %\u0026gt;% mutate(atraso_decolagem = dep_time - sched_dep_time,\ratraso_pouso = arr_time - sched_arr_time,\ratraso_dec_horas = atraso_decolagem / 60,\ratraso_pouso_horas = atraso_pouso / 60)\r ## # A tibble: 336,776 x 8\r## sched_dep_time dep_time sched_arr_time arr_time atraso_decolagem atraso_pouso\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 515 517 819 830 2 11\r## 2 529 533 830 850 4 20\r## 3 540 542 850 923 2 73\r## 4 545 544 1022 1004 -1 -18\r## 5 600 554 837 812 -46 -25\r## 6 558 554 728 740 -4 12\r## 7 600 555 854 913 -45 59\r## 8 600 557 723 709 -43 -14\r## 9 600 557 846 838 -43 -8\r## 10 600 558 745 753 -42 8\r## # ... with 336,766 more rows, and 2 more variables: atraso_dec_horas \u0026lt;dbl\u0026gt;,\r## # atraso_pouso_horas \u0026lt;dbl\u0026gt;\r # Transmute √© um atalho para quando voc√™ quer apenas as vari√°veis resultado e n√£o est√° interessado nas intermedi√°rias.\rflights %\u0026gt;% transmute(atraso_decolagem = dep_time - sched_dep_time,\ratraso_pouso = arr_time - sched_arr_time,\ratraso_dec_horas = atraso_decolagem / 60,\ratraso_pouso_horas = atraso_pouso / 60)\r ## # A tibble: 336,776 x 4\r## atraso_decolagem atraso_pouso atraso_dec_horas atraso_pouso_horas\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2 11 0.0333 0.183\r## 2 4 20 0.0667 0.333\r## 3 2 73 0.0333 1.22 ## 4 -1 -18 -0.0167 -0.3 ## 5 -46 -25 -0.767 -0.417\r## 6 -4 12 -0.0667 0.2 ## 7 -45 59 -0.75 0.983\r## 8 -43 -14 -0.717 -0.233\r## 9 -43 -8 -0.717 -0.133\r## 10 -42 8 -0.7 0.133\r## # ... with 336,766 more rows\r Usando o pipe, √© fazer diversas opera√ß√µes de transforma√ß√£o de vari√°veis simult√¢neamente em um √∫nico call sem a necessidade de repetir o nome do objeto e $ a cada refer√™ncia. mutate √© uma fun√ß√£o extremamente flex√≠vel, voc√™ pode chamar qualquer fun√ß√£o que retorne um vetor de tamanho 1 ou de tamanho do n√∫mero de linhas do banco l√° dentro para criar uma vari√°vel.\ndesabafo \u0026lt;- function(x) {\ry \u0026lt;- floor(x / 60)\rdplyr::case_when(\r# Condi√ß√µes ~ Resultados\ry \u0026lt; 0 ~ \u0026quot;Opa, vou chegar cedo!\u0026quot;,\ry \u0026lt; 1 ~ \u0026quot;Atraso de menos de 1 hora √© toler√°vel\u0026quot;,\ry \u0026gt;= 1 ~ paste0(\u0026quot;Atraso de mais de \u0026quot;, y, \u0026quot; horas √© f***.\u0026quot;),\rTRUE ~ \u0026quot;Ahn?\u0026quot; # Condi√ß√£o guarda-chuva\r)\r}\rflights %\u0026gt;% select(dep_delay) %\u0026gt;% mutate(desabafo = desabafo(dep_delay)) %\u0026gt;% sample_n(10)\r ## # A tibble: 10 x 2\r## dep_delay desabafo ## \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 -5 Opa, vou chegar cedo! ## 2 23 Atraso de menos de 1 hora √© toler√°vel\r## 3 -4 Opa, vou chegar cedo! ## 4 -3 Opa, vou chegar cedo! ## 5 -8 Opa, vou chegar cedo! ## 6 -3 Opa, vou chegar cedo! ## 7 -5 Opa, vou chegar cedo! ## 8 22 Atraso de menos de 1 hora √© toler√°vel\r## 9 23 Atraso de menos de 1 hora √© toler√°vel\r## 10 -2 Opa, vou chegar cedo!\r Utilizando summarize voc√™ tira medidas resumo das suas colunas de interesse:\nflights %\u0026gt;% summarize(atraso_decolagem_medio = mean(dep_delay, na.rm = T),\ratraso_decolagem_desvpad = sd(dep_delay, na.rm = T),\ratraso_pouso_medio = mean(arr_delay, na.rm = T),\ratraso_pouso_desvpad = sd(arr_delay, na.rm = T),\rn_voos = n())\r ## # A tibble: 1 x 5\r## atraso_decolagem_~ atraso_decolagem_~ atraso_pouso_me~ atraso_pouso_de~ n_voos\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r## 1 12.6 40.2 6.90 44.6 336776\r Parece uma bobagem, mas quando voc√™ junta isso com a √∫ltima fun√ß√£o, group_by, √© poss√≠vel obter diversas estat√≠sticas de interesse muito rapidamente e para v√°rios dom√≠nios:\n# Por m√™s\rflights %\u0026gt;% group_by(month) %\u0026gt;% summarize(atraso_decolagem_medio = mean(dep_delay, na.rm = T),\ratraso_decolagem_desvpad = sd(dep_delay, na.rm = T),\ratraso_pouso_medio = mean(arr_delay, na.rm = T),\ratraso_pouso_desvpad = sd(arr_delay, na.rm = T),\rn_voos = n())\r ## # A tibble: 12 x 6\r## month atraso_decolagem_~ atraso_decolagem_~ atraso_pouso_me~ atraso_pouso_de~\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 10.0 36.4 6.13 40.4\r## 2 2 10.8 36.3 5.61 39.5\r## 3 3 13.2 40.1 5.81 44.1\r## 4 4 13.9 43.0 11.2 47.5\r## 5 5 13.0 39.4 3.52 44.2\r## 6 6 20.8 51.5 16.5 56.1\r## 7 7 21.7 51.6 16.7 57.1\r## 8 8 12.6 37.7 6.04 42.6\r## 9 9 6.72 35.6 -4.02 39.7\r## 10 10 6.24 29.7 -0.167 32.6\r## 11 11 5.44 27.6 0.461 31.4\r## 12 12 16.6 41.9 14.9 46.1\r## # ... with 1 more variable: n_voos \u0026lt;int\u0026gt;\r # Por m√™s e aeroporto de origem\rflights %\u0026gt;% group_by(month, origin) %\u0026gt;% summarize(atraso_decolagem_medio = mean(dep_delay, na.rm = T),\ratraso_decolagem_desvpad = sd(dep_delay, na.rm = T),\ratraso_pouso_medio = mean(arr_delay, na.rm = T),\ratraso_pouso_desvpad = sd(arr_delay, na.rm = T),\rn_voos = n())\r ## `summarise()` has grouped output by 'month'. You can override using the `.groups` argument.\r## # A tibble: 36 x 7\r## # Groups: month [12]\r## month origin atraso_decolagem_medio atraso_decolagem_desvp~ atraso_pouso_med~\r## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 EWR 14.9 40.8 12.8 ## 2 1 JFK 8.62 36.0 1.37\r## 3 1 LGA 5.64 29.7 3.38\r## 4 2 EWR 13.1 37.2 8.78\r## 5 2 JFK 11.8 37.4 4.39\r## 6 2 LGA 6.96 33.4 3.15\r## 7 3 EWR 18.1 44.1 10.6 ## 8 3 JFK 10.7 35.3 2.58\r## 9 3 LGA 10.2 39.7 3.74\r## 10 4 EWR 17.4 43.9 14.1 ## # ... with 26 more rows, and 2 more variables: atraso_pouso_desvpad \u0026lt;dbl\u0026gt;,\r## # n_voos \u0026lt;int\u0026gt;\r Uma vez que voc√™ se familiariza com a gram√°tica do dplyr, o processo de an√°lise explorat√≥ria se torna bastante trivial e at√© certo ponto, prazeiroso. Mas o que eu realmente gosto √© que ele tamb√©m se torna visualmente √≥bvio para o leitor, com cada chamado podendo ser lido como uma declara√ß√£o:\n Utilizando o banco de dados flights, agrupe as observa√ß√µes por m√™s e aeroporto de origem, ent√£o, calcule as m√©dias e desvios padr√£o dos atrasos no pouso e na decolagem e o n√∫mero de v√¥os para cada grupo.\n Voc√™ tamb√©m pode rapidamente introduzir ou retirar passos em cada chamado deste utilizando o pipe, por exemplo:\nflights %\u0026gt;% group_by(month, origin) %\u0026gt;% summarize(atraso_decolagem_medio = mean(dep_delay, na.rm = T),\ratraso_decolagem_desvpad = sd(dep_delay, na.rm = T),\ratraso_pouso_medio = mean(arr_delay, na.rm = T),\ratraso_pouso_desvpad = sd(arr_delay, na.rm = T),\rn_voos = n()) %\u0026gt;% arrange(-atraso_decolagem_medio)\r ## `summarise()` has grouped output by 'month'. You can override using the `.groups` argument.\r## # A tibble: 36 x 7\r## # Groups: month [12]\r## month origin atraso_decolagem_medio atraso_decolagem_desvp~ atraso_pouso_med~\r## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 7 JFK 23.8 53.3 20.2 ## 2 6 EWR 22.5 50.8 16.9 ## 3 7 EWR 22.0 49.5 15.5 ## 4 12 EWR 21.0 45.7 19.6 ## 5 6 JFK 20.5 50.2 17.6 ## 6 6 LGA 19.3 53.6 14.8 ## 7 7 LGA 19.0 52.0 14.2 ## 8 3 EWR 18.1 44.1 10.6 ## 9 4 EWR 17.4 43.9 14.1 ## 10 5 EWR 15.4 39.0 5.38\r## # ... with 26 more rows, and 2 more variables: atraso_pouso_desvpad \u0026lt;dbl\u0026gt;,\r## # n_voos \u0026lt;int\u0026gt;\r E a leitura fica:\n Utilizando o banco de dados flights, agrupe as observa√ß√µes por m√™s e aeroporto de origem, ent√£o, calcule as m√©dias e desvios padr√£o dos atrasos no pouso e na decolagem e o n√∫mero de v√¥os para cada grupo, ent√£o, ordene os resultados pelo maior atraso.\n De quebra, voc√™ ainda leva para casa um dado no formato ‚Äútabela,‚Äù f√°cil de exportar para outros softwares para embelezamento e publica√ß√£o. Veja:\nresumo \u0026lt;- flights %\u0026gt;% group_by(month, origin) %\u0026gt;% summarize(atraso_decolagem_medio = mean(dep_delay, na.rm = T),\ratraso_decolagem_desvpad = sd(dep_delay, na.rm = T),\ratraso_pouso_medio = mean(arr_delay, na.rm = T),\ratraso_pouso_desvpad = sd(arr_delay, na.rm = T),\rn_voos = n()) %\u0026gt;% arrange(-atraso_decolagem_medio)\r ## `summarise()` has grouped output by 'month'. You can override using the `.groups` argument.\r print(resumo, n = Inf)\r ## # A tibble: 36 x 7\r## # Groups: month [12]\r## month origin atraso_decolagem_medio atraso_decolagem_desvp~ atraso_pouso_med~\r## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 7 JFK 23.8 53.3 20.2 ## 2 6 EWR 22.5 50.8 16.9 ## 3 7 EWR 22.0 49.5 15.5 ## 4 12 EWR 21.0 45.7 19.6 ## 5 6 JFK 20.5 50.2 17.6 ## 6 6 LGA 19.3 53.6 14.8 ## 7 7 LGA 19.0 52.0 14.2 ## 8 3 EWR 18.1 44.1 10.6 ## 9 4 EWR 17.4 43.9 14.1 ## 10 5 EWR 15.4 39.0 5.38 ## 11 1 EWR 14.9 40.8 12.8 ## 12 12 JFK 14.8 39.1 12.7 ## 13 12 LGA 13.6 39.8 12.0 ## 14 8 EWR 13.5 37.6 6.71 ## 15 2 EWR 13.1 37.2 8.78 ## 16 8 JFK 12.9 36.3 5.91 ## 17 5 JFK 12.5 38.5 2.12 ## 18 4 JFK 12.2 41.2 7.01 ## 19 2 JFK 11.8 37.4 4.39 ## 20 4 LGA 11.5 43.4 12.0 ## 21 8 LGA 11.2 39.2 5.41 ## 22 3 JFK 10.7 35.3 2.58 ## 23 5 LGA 10.6 40.6 2.80 ## 24 3 LGA 10.2 39.7 3.74 ## 25 10 EWR 8.64 32.7 2.60 ## 26 1 JFK 8.62 36.0 1.37 ## 27 9 EWR 7.29 35.0 -4.73 ## 28 2 LGA 6.96 33.4 3.15 ## 29 11 EWR 6.72 28.8 0.672\r## 30 9 JFK 6.64 32.5 -4.46 ## 31 9 LGA 6.21 39.0 -2.83 ## 32 1 LGA 5.64 29.7 3.38 ## 33 10 LGA 5.31 30.1 0.186\r## 34 11 LGA 4.77 26.6 1.55 ## 35 11 JFK 4.68 27.1 -0.873\r## 36 10 JFK 4.59 25.2 -3.59 ## # ... with 2 more variables: atraso_pouso_desvpad \u0026lt;dbl\u0026gt;, n_voos \u0026lt;int\u0026gt;\r Lembrem-se que √© necess√°rio atribuir \u0026lt;- os resultados das opera√ß√µes para que elas sejam salvas. Em geral, meu workflow √© assim:\n# Come√ßo com o banco\rflights\r ## # A tibble: 336,776 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830 819\r## 2 2013 1 1 533 529 4 850 830\r## 3 2013 1 1 542 540 2 923 850\r## 4 2013 1 1 544 545 -1 1004 1022\r## 5 2013 1 1 554 600 -6 812 837\r## 6 2013 1 1 554 558 -4 740 728\r## 7 2013 1 1 555 600 -5 913 854\r## 8 2013 1 1 557 600 -3 709 723\r## 9 2013 1 1 557 600 -3 838 846\r## 10 2013 1 1 558 600 -2 753 745\r## # ... with 336,766 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r # Seleciono algumas vari√°veis\rflights %\u0026gt;% select(month, dep_delay, arr_delay)\r ## # A tibble: 336,776 x 3\r## month dep_delay arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 2 11\r## 2 1 4 20\r## 3 1 2 33\r## 4 1 -1 -18\r## 5 1 -6 -25\r## 6 1 -4 12\r## 7 1 -5 19\r## 8 1 -3 -14\r## 9 1 -3 -8\r## 10 1 -2 8\r## # ... with 336,766 more rows\r # Recorto algumas observa√ß√µes\rflights %\u0026gt;% select(month, dep_delay, arr_delay) %\u0026gt;% filter(between(month, 1, 6))\r ## # A tibble: 166,158 x 3\r## month dep_delay arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 2 11\r## 2 1 4 20\r## 3 1 2 33\r## 4 1 -1 -18\r## 5 1 -6 -25\r## 6 1 -4 12\r## 7 1 -5 19\r## 8 1 -3 -14\r## 9 1 -3 -8\r## 10 1 -2 8\r## # ... with 166,148 more rows\r # Escolho os dominios e calculo as medidas resumo\rflights %\u0026gt;% select(month, dep_delay, arr_delay) %\u0026gt;% filter(between(month, 1, 6)) %\u0026gt;% group_by(month) %\u0026gt;% summarise(atraso_dec_medio = mean(dep_delay, na.rm = T),\ratraso_pou_medio = mean(arr_delay, na.rm = T))\r ## # A tibble: 6 x 3\r## month atraso_dec_medio atraso_pou_medio\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 10.0 6.13\r## 2 2 10.8 5.61\r## 3 3 13.2 5.81\r## 4 4 13.9 11.2 ## 5 5 13.0 3.52\r## 6 6 20.8 16.5\r # Acho bom organizar pelos atrasos maiores\rflights %\u0026gt;% select(month, dep_delay, arr_delay) %\u0026gt;% filter(between(month, 1, 6)) %\u0026gt;% group_by(month) %\u0026gt;% summarise(atraso_dec_medio = mean(dep_delay, na.rm = T),\ratraso_pou_medio = mean(arr_delay, na.rm = T)) %\u0026gt;% arrange(-atraso_dec_medio, -atraso_pou_medio)\r ## # A tibble: 6 x 3\r## month atraso_dec_medio atraso_pou_medio\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 6 20.8 16.5 ## 2 4 13.9 11.2 ## 3 3 13.2 5.81\r## 4 5 13.0 3.52\r## 5 2 10.8 5.61\r## 6 1 10.0 6.13\r # Estou satisfeito, salvo meu resultado em outro objeto\ratrasos \u0026lt;- flights %\u0026gt;% select(month, dep_delay, arr_delay) %\u0026gt;% filter(between(month, 1, 6)) %\u0026gt;% group_by(month) %\u0026gt;% summarise(atraso_dec_medio = mean(dep_delay, na.rm = T),\ratraso_pou_medio = mean(arr_delay, na.rm = T)) %\u0026gt;% arrange(-atraso_dec_medio, -atraso_pou_medio)\ratrasos\r ## # A tibble: 6 x 3\r## month atraso_dec_medio atraso_pou_medio\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 6 20.8 16.5 ## 2 4 13.9 11.2 ## 3 3 13.2 5.81\r## 4 5 13.0 3.52\r## 5 2 10.8 5.61\r## 6 1 10.0 6.13\r Desta forma, consigo construir interativamente meus c√°lculos, verificando a cada passo se estou obtendo o resultado esperado. Visto de outra perspectiva, se encontro um c√≥digo programado desta forma que n√£o funciona, posso ir apagando cada %\u0026gt;% para identificar onde o problema ocorreu.\nEspero que tenha ficado claro que o assunto n√£o se encerra por aqui. Existem diversas outras fun√ß√µes √∫teis no pacote, como count, if_else, case_when, top_n, bind_rows, bind_cols, as novas fun√ß√µes across e c_across e muitas, muitas outras. Nos livros voc√™s encontram v√°rios outros exemplos e fun√ß√µes para facilitar o processo de an√°lise de dados, mas nossa expectativa √© que essa apresenta√ß√£o seja um ponto de partida para voc√™s se aprofundarem no seu pr√≥prio ritmo.\ndplyr para bancos de dados relacionais Nesta se√ß√£o, o nosso problema n√£o √© mais a an√°lise de dados presentes em um banco, mas o problema de relacionar informa√ß√µes sobre uma mesma unidade de an√°lise que est√£o presentes em v√°rios bancos de dados distintos.\nO banco nycflights13 cont√©m v√°rias tabelas que se relacionam, e elas funcionam como um excelente exemplo de banco de dados relacionais.\nNote que al√©m do banco de dados dos v√¥os, temos informa√ß√µes sobre clima, avi√µes e companhias a√©reas. Para n√≥s, pode ser relevante reunir informa√ß√µes de diferentes fontes em um mesmo banco de dados, algo que √© poss√≠vel atrav√©s de joins. Por uma quest√£o de tempo, n√£o vamos entrar muito a fundo no assunto, mas vamos introduzir dois conceitos chave e partir pros exemplos.\n  chaves s√£o as vari√°veis que identificam cada observa√ß√£o em um banco de dados de forma √∫nica. Uma chave √© dita ‚Äúprim√°ria‚Äù quando identifica uma observa√ß√£o na sua pr√≥pria tabela e ‚Äúexterna‚Äù quando ela identifica uma observa√ß√£o em outra tabela. Assim, qualquer opera√ß√£o de join √© uma forma de relacionar uma chave prim√°ria e uma chave externa. Essa jun√ß√£o de chaves √© uma rela√ß√£o, e as rela√ß√µes podem ser 1 para 1, 1 para muitos ou muitos para 1.\n  joins s√£o tipos de opera√ß√£o no qual se opta por priorizar um grupo de observa√ß√µes em detrimento de outras. Podemos v√™-los didaticamente a partir de duas figuras:\n  A primeira figura √© interessante porque nos d√° uma ideia de quais observa√ß√µes ser√£o mantidas e quais ser√£o descartadas, podemos imagin√°-la como uma abstra√ß√£o da nossa escolha.\n Quero todas as informa√ß√µes sobre os v√¥os e os aeroportos, e as duas s√£o igualmente importantes (inner_join, x = flights, y = airports).\n  Quero todas as observa√ß√µes do banco v√¥os e as informa√ß√µes dispon√≠veis sobre a aeronave (left_join, x = flights, y = planes).\n  Quero todas as informa√ß√µes tanto sobre os v√¥os quanto sobre o clima em cada dia (full_join, x = flights, y = weather).\n  Quero as informa√ß√µes dos v√¥os realizados pelas companhias a√©reas - minha prioridade s√£o as cias. √°reas (right_join, x = flights, y = carriers).\n A segunda figura √© interessante porque elas mostra a mec√¢nica de um join: cada observa√ß√£o tem a sua chave marcada com a observa√ß√£o correspondente no outro banco. Se as chaves s√£o iguais, a opera√ß√£o √© realizada, se as chaves n√£o s√£o iguais, a opera√ß√£o n√£o √© realizada. Dependendo do tipo de join, uma, as duas ou nenhuma das observa√ß√µes √© descartada do banco resultante.\n Antes de come√ßar a trabalhar com bancos relacionais, √© uma boa ideia dar uma explorada nas chaves, vendo suas contagens, se h√° erros de digita√ß√£o, etc. Por uma quest√£o de tempo, vamos pular essa fase.\n Se as nossas chaves forem perfeitinhas, e inclusive tiverem o mesmo nome nas duas tabelas, basta invocar o tipo de join desejado.\n# Vamos dar uma enxugada no flights para poder ver o efeito dos joins com maior facilidade.\rflights2 \u0026lt;- flights %\u0026gt;% select(year:day, hour, origin, dest, tailnum, carrier)\rflights2\r ## # A tibble: 336,776 x 8\r## year month day hour origin dest tailnum carrier\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 2013 1 1 5 EWR IAH N14228 UA ## 2 2013 1 1 5 LGA IAH N24211 UA ## 3 2013 1 1 5 JFK MIA N619AA AA ## 4 2013 1 1 5 JFK BQN N804JB B6 ## 5 2013 1 1 6 LGA ATL N668DN DL ## 6 2013 1 1 5 EWR ORD N39463 UA ## 7 2013 1 1 6 EWR FLL N516JB B6 ## 8 2013 1 1 6 LGA IAD N829AS EV ## 9 2013 1 1 6 JFK MCO N593JB B6 ## 10 2013 1 1 6 LGA ORD N3ALAA AA ## # ... with 336,766 more rows\r # Chaves perfeitas, mesmo nome nos dois bancos = natural join\rflights2 %\u0026gt;% left_join(weather) # Moleza\r ## Joining, by = c(\u0026quot;year\u0026quot;, \u0026quot;month\u0026quot;, \u0026quot;day\u0026quot;, \u0026quot;hour\u0026quot;, \u0026quot;origin\u0026quot;)\r## # A tibble: 336,776 x 18\r## year month day hour origin dest tailnum carrier temp dewp humid\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2013 1 1 5 EWR IAH N14228 UA 39.0 28.0 64.4\r## 2 2013 1 1 5 LGA IAH N24211 UA 39.9 25.0 54.8\r## 3 2013 1 1 5 JFK MIA N619AA AA 39.0 27.0 61.6\r## 4 2013 1 1 5 JFK BQN N804JB B6 39.0 27.0 61.6\r## 5 2013 1 1 6 LGA ATL N668DN DL 39.9 25.0 54.8\r## 6 2013 1 1 5 EWR ORD N39463 UA 39.0 28.0 64.4\r## 7 2013 1 1 6 EWR FLL N516JB B6 37.9 28.0 67.2\r## 8 2013 1 1 6 LGA IAD N829AS EV 39.9 25.0 54.8\r## 9 2013 1 1 6 JFK MCO N593JB B6 37.9 27.0 64.3\r## 10 2013 1 1 6 LGA ORD N3ALAA AA 39.9 25.0 54.8\r## # ... with 336,766 more rows, and 7 more variables: wind_dir \u0026lt;dbl\u0026gt;,\r## # wind_speed \u0026lt;dbl\u0026gt;, wind_gust \u0026lt;dbl\u0026gt;, precip \u0026lt;dbl\u0026gt;, pressure \u0026lt;dbl\u0026gt;,\r## # visib \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r flights2 %\u0026gt;% left_join(airlines) # Moleza\r ## Joining, by = \u0026quot;carrier\u0026quot;\r## # A tibble: 336,776 x 9\r## year month day hour origin dest tailnum carrier name ## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 2013 1 1 5 EWR IAH N14228 UA United Air Lines Inc. ## 2 2013 1 1 5 LGA IAH N24211 UA United Air Lines Inc. ## 3 2013 1 1 5 JFK MIA N619AA AA American Airlines Inc. ## 4 2013 1 1 5 JFK BQN N804JB B6 JetBlue Airways ## 5 2013 1 1 6 LGA ATL N668DN DL Delta Air Lines Inc. ## 6 2013 1 1 5 EWR ORD N39463 UA United Air Lines Inc. ## 7 2013 1 1 6 EWR FLL N516JB B6 JetBlue Airways ## 8 2013 1 1 6 LGA IAD N829AS EV ExpressJet Airlines Inc.\r## 9 2013 1 1 6 JFK MCO N593JB B6 JetBlue Airways ## 10 2013 1 1 6 LGA ORD N3ALAA AA American Airlines Inc. ## # ... with 336,766 more rows\r # Chaves perfeitas, mas h√° vari√°veis nos dois bancos com o mesmo nome e que n√£o s√£o chaves\r# √â necess√°rio especificar qual a chave\rflights2 %\u0026gt;% left_join(planes, by = \u0026quot;tailnum\u0026quot;)\r ## # A tibble: 336,776 x 16\r## year.x month day hour origin dest tailnum carrier year.y type ## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; ## 1 2013 1 1 5 EWR IAH N14228 UA 1999 Fixed wing mult~\r## 2 2013 1 1 5 LGA IAH N24211 UA 1998 Fixed wing mult~\r## 3 2013 1 1 5 JFK MIA N619AA AA 1990 Fixed wing mult~\r## 4 2013 1 1 5 JFK BQN N804JB B6 2012 Fixed wing mult~\r## 5 2013 1 1 6 LGA ATL N668DN DL 1991 Fixed wing mult~\r## 6 2013 1 1 5 EWR ORD N39463 UA 2012 Fixed wing mult~\r## 7 2013 1 1 6 EWR FLL N516JB B6 2000 Fixed wing mult~\r## 8 2013 1 1 6 LGA IAD N829AS EV 1998 Fixed wing mult~\r## 9 2013 1 1 6 JFK MCO N593JB B6 2004 Fixed wing mult~\r## 10 2013 1 1 6 LGA ORD N3ALAA AA NA \u0026lt;NA\u0026gt; ## # ... with 336,766 more rows, and 6 more variables: manufacturer \u0026lt;chr\u0026gt;,\r## # model \u0026lt;chr\u0026gt;, engines \u0026lt;int\u0026gt;, seats \u0026lt;int\u0026gt;, speed \u0026lt;int\u0026gt;, engine \u0026lt;chr\u0026gt;\r Veja que tanto flights2 quanto planes tem uma vari√°vel chamada year, mas elas significados diferentes. Em flights2 √© o ano do v√¥o, enquanto em planes √© o ano em que a aeronave entra em servi√ßo. Na hora que fazemos o join, uma recebe o sufixo ‚Äúx‚Äù e a outra ‚Äúy‚Äù para a indicar a diferen√ßa. Voc√™ pode especificar o sufixo desejado para evitar confus√£o:\nflights2 %\u0026gt;% left_join(planes, by = \u0026quot;tailnum\u0026quot;, suffix = c(\u0026quot;_flight\u0026quot;, \u0026quot;_entered_service\u0026quot;))\r ## # A tibble: 336,776 x 16\r## year_flight month day hour origin dest tailnum carrier year_entered_serv~\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 5 EWR IAH N14228 UA 1999\r## 2 2013 1 1 5 LGA IAH N24211 UA 1998\r## 3 2013 1 1 5 JFK MIA N619AA AA 1990\r## 4 2013 1 1 5 JFK BQN N804JB B6 2012\r## 5 2013 1 1 6 LGA ATL N668DN DL 1991\r## 6 2013 1 1 5 EWR ORD N39463 UA 2012\r## 7 2013 1 1 6 EWR FLL N516JB B6 2000\r## 8 2013 1 1 6 LGA IAD N829AS EV 1998\r## 9 2013 1 1 6 JFK MCO N593JB B6 2004\r## 10 2013 1 1 6 LGA ORD N3ALAA AA NA\r## # ... with 336,766 more rows, and 7 more variables: type \u0026lt;chr\u0026gt;,\r## # manufacturer \u0026lt;chr\u0026gt;, model \u0026lt;chr\u0026gt;, engines \u0026lt;int\u0026gt;, seats \u0026lt;int\u0026gt;, speed \u0026lt;int\u0026gt;,\r## # engine \u0026lt;chr\u0026gt;\r Um aviso: cuidado com os produtos cartesianos. N√£o h√° um bom exemplo aqui no caso do flights porque o banco j√° est√° limpinho, mas se voc√™ especificar chaves com uma rela√ß√£o ‚Äúmuitos para muitos,‚Äù ele vai registrar no banco novo uma linha para cada combina√ß√£o poss√≠vel de vari√°veis. Em bancos maiores, isso geralmente estoura sua mem√≥ria e trava o R. Veja este pequeno exemplo de brinquedo.\nx \u0026lt;- tribble(\r~key, ~val_x,\r1, \u0026quot;x1\u0026quot;,\r2, \u0026quot;x2\u0026quot;,\r2, \u0026quot;x3\u0026quot;,\r3, \u0026quot;x4\u0026quot;\r)\ry \u0026lt;- tribble(\r~key, ~val_y,\r1, \u0026quot;y1\u0026quot;,\r2, \u0026quot;y2\u0026quot;,\r2, \u0026quot;y3\u0026quot;,\r3, \u0026quot;y4\u0026quot;\r)\rleft_join(x, y, by = \u0026quot;key\u0026quot;)\r ## # A tibble: 6 x 3\r## key val_x val_y\r## \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 1 x1 y1 ## 2 2 x2 y2 ## 3 2 x2 y3 ## 4 2 x3 y2 ## 5 2 x3 y3 ## 6 3 x4 y4\r Veja que no resultado foi criada uma linha para cada combina√ß√£o de val_x e val_y que tem a mesma chave repetida. Podem at√© existir situa√ß√µes em que isso seja o que voc√™ quer mesmo, mas na minha experi√™ncia at√© o momento isso √© problema com as chaves duplicadas e √© sinal de que h√° algo errado.\nMas pera√≠, se voc√™ falou que tem 4 tipos de join, porque s√≥ d√° exemplo de left_join?\nNa pr√°tica, opera√ß√µes relacionais s√£o feitas de forma intencional: escolhemos bancos de dados de acordo com o valor que atribu√≠mos a informa√ß√£o presente nele e pin√ßamos informa√ß√µes relacionadas de outros lugares para adicionar aquilo que √© nosso foco. Por isso, na maioria dos casos, o left_join √© o mais usual, porque preserva todas as informa√ß√µes do meu banco x e adiciona apenas as informa√ß√µes do banco y que combinaram com sucesso. Isso garante que eu n√£o vou perder nenhuma informa√ß√£o do meu banco principal.\nPra encerrar essa parte, mais exemplos de joins.\n# Minhas chaves tem nomes diferentes, ent√£o uso um vetor do tipo c(\u0026quot;chave_x\u0026quot; = \u0026quot;chave_y\u0026quot;)\rflights2 %\u0026gt;% left_join(airports, c(\u0026quot;dest\u0026quot; = \u0026quot;faa\u0026quot;))\r ## # A tibble: 336,776 x 15\r## year month day hour origin dest tailnum carrier name lat lon alt\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2013 1 1 5 EWR IAH N14228 UA Georg~ 30.0 -95.3 97\r## 2 2013 1 1 5 LGA IAH N24211 UA Georg~ 30.0 -95.3 97\r## 3 2013 1 1 5 JFK MIA N619AA AA Miami~ 25.8 -80.3 8\r## 4 2013 1 1 5 JFK BQN N804JB B6 \u0026lt;NA\u0026gt; NA NA NA\r## 5 2013 1 1 6 LGA ATL N668DN DL Harts~ 33.6 -84.4 1026\r## 6 2013 1 1 5 EWR ORD N39463 UA Chica~ 42.0 -87.9 668\r## 7 2013 1 1 6 EWR FLL N516JB B6 Fort ~ 26.1 -80.2 9\r## 8 2013 1 1 6 LGA IAD N829AS EV Washi~ 38.9 -77.5 313\r## 9 2013 1 1 6 JFK MCO N593JB B6 Orlan~ 28.4 -81.3 96\r## 10 2013 1 1 6 LGA ORD N3ALAA AA Chica~ 42.0 -87.9 668\r## # ... with 336,766 more rows, and 3 more variables: tz \u0026lt;dbl\u0026gt;, dst \u0026lt;chr\u0026gt;,\r## # tzone \u0026lt;chr\u0026gt;\r # Mesma coisa, s√≥ que agora juntando as informa√ß√µes da origem ao inv√©s do destino\rflights2 %\u0026gt;% left_join(airports, c(\u0026quot;origin\u0026quot; = \u0026quot;faa\u0026quot;))\r ## # A tibble: 336,776 x 15\r## year month day hour origin dest tailnum carrier name lat lon alt\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2013 1 1 5 EWR IAH N14228 UA Newar~ 40.7 -74.2 18\r## 2 2013 1 1 5 LGA IAH N24211 UA La Gu~ 40.8 -73.9 22\r## 3 2013 1 1 5 JFK MIA N619AA AA John ~ 40.6 -73.8 13\r## 4 2013 1 1 5 JFK BQN N804JB B6 John ~ 40.6 -73.8 13\r## 5 2013 1 1 6 LGA ATL N668DN DL La Gu~ 40.8 -73.9 22\r## 6 2013 1 1 5 EWR ORD N39463 UA Newar~ 40.7 -74.2 18\r## 7 2013 1 1 6 EWR FLL N516JB B6 Newar~ 40.7 -74.2 18\r## 8 2013 1 1 6 LGA IAD N829AS EV La Gu~ 40.8 -73.9 22\r## 9 2013 1 1 6 JFK MCO N593JB B6 John ~ 40.6 -73.8 13\r## 10 2013 1 1 6 LGA ORD N3ALAA AA La Gu~ 40.8 -73.9 22\r## # ... with 336,766 more rows, and 3 more variables: tz \u0026lt;dbl\u0026gt;, dst \u0026lt;chr\u0026gt;,\r## # tzone \u0026lt;chr\u0026gt;\r O assunto, obviamente, n√£o p√°ra por a√≠. Nos livros voc√™s encontrar√£o mais exemplos e fun√ß√µes, como √© o caso do semi_join e do anti_join e das opera√ß√µes ‚Äúset,‚Äù intersect, union e setdiff, mas isso fica pra voc√™s explorarem por conta pr√≥pria e virem tirar as d√∫vidas depois!\nstringr stringr cont√©m uma fam√≠lia de fun√ß√µes, todas come√ßadas em str_, cuja principal preocupa√ß√£o √© a consist√™ncia. As fun√ß√µes do base para strings s√£o muito √∫teis, por√©m, seus argumentos est√£o numa ordem um pouco estranha, algumas fun√ß√µes s√£o vetorizadas e outras n√£o. Quando voc√™ se acostuma, at√© que n√£o √© t√£o ruim, mas voltando para o assunto discutido ontem de tornar o seu c√≥digo mais leg√≠vel, √© interessante ter a simplicidade oferecida.\nBasic√£o da string Como este curso j√° √© pra praticantes de R, vou pular algumas coisas muito b√°sicas de string, vamos ao que interessa.\nDeterminados caracteres tem um significado especial dentro das strings. Quem j√° tentou copiar e colar um caminho de arquivo do Windows pro R sabe disso. Ent√£o, nesses casos, √© precisar ‚Äúescapar‚Äù caracteres. Por exemplo, se voc√™ quiser escrever aspas, voc√™ usar a contrabarra \\ para ‚Äúescapar‚Äù um caractere.\naspa_simples \u0026lt;- '\\'' # ou \u0026quot;'\u0026quot;\raspa_dupla \u0026lt;- \u0026quot;\\\u0026quot;\u0026quot; # ou '\u0026quot;'\r A regra do escape √© simples, ent√£o se voc√™ quiser colocar uma contrabarra \\\nx \u0026lt;- c(\u0026quot;\\\\\u0026quot;, \u0026quot;\\\u0026quot;\u0026quot;)\rx\r ## [1] \u0026quot;\\\\\u0026quot; \u0026quot;\\\u0026quot;\u0026quot;\r writeLines(x)\r ## \\\r## \u0026quot;\r Outros caracteres especiais √∫teis: \u0026quot;\\n\u0026quot; para pular uma linha, \\t para Tab. Voc√™ pode ver os outros na ajuda das aspas \u0026quot;, basta digitar no console ?\u0026quot;'\u0026quot; ou ?'\u0026quot;'.\nOutra coisa que d√° pra fazer, se voc√™ precisar incluir um caractere distinto, √© usar unicode:\nx \u0026lt;- \u0026quot;\\u00b5\u0026quot;\rx\r ## [1] \u0026quot;¬µ\u0026quot;\r Ok, mas e o pacote stringr? Bem, ele tem o intuito de facilitar e dar consist√™ncia, ent√£o, todas as fun√ß√µes do pacote come√ßam com as iniciais str_ justamente para serem utilizadas com o autocompletar do RStudio, que pode ser acessada com os atalhos Ctrl + Espa√ßo ou Tab. Vamos ver agora alguns exemplos de fun√ß√µes do pacote.\nComprimento da string em caracteres:\nlibrary(stringr)\r# No RStudio, basta digitar 'str_' e apertar Tab ou Ctrl + Espa√ßo\rx \u0026lt;- \u0026quot;Ministro Sinistro\u0026quot;\rstr_length(x)\r ## [1] 17\r x \u0026lt;- c(\u0026quot;Ministro Sinistro\u0026quot;, \u0026quot;Abelha Gulosa\u0026quot;, \u0026quot;p\u0026quot;)\rstr_length(x)\r ## [1] 17 13 1\r Concatena√ß√£o de strings:\nstr_c(\u0026quot;x\u0026quot;, \u0026quot;y\u0026quot;, \u0026quot;z\u0026quot;)\r ## [1] \u0026quot;xyz\u0026quot;\r Use o argumento sep para definir caracteres que aparecer√£o entre as strings originais:\nstr_c(\u0026quot;x\u0026quot;, \u0026quot;y\u0026quot;, \u0026quot;z\u0026quot;, sep = \u0026quot; + \u0026quot;)\r ## [1] \u0026quot;x + y + z\u0026quot;\r Voc√™ pode trabalhar com strings que cont√©m NAs:\nx \u0026lt;- c(\u0026quot;abc\u0026quot;, NA)\rstr_c(\u0026quot;|-\u0026quot;, x, \u0026quot;-|\u0026quot;)\r ## [1] \u0026quot;|-abc-|\u0026quot; NA\r str_c(\u0026quot;|-\u0026quot;, str_replace_na(x), \u0026quot;-|\u0026quot;)\r ## [1] \u0026quot;|-abc-|\u0026quot; \u0026quot;|-NA-|\u0026quot;\r str_c √© uma fun√ß√£o vetorizada e automaticamente recicla seus argumentos pra ter o tamanho do maior:\n# Eu na gradua√ß√£o\rstr_c(\u0026quot;Profe, me d√° mais \u0026quot;, c(\u0026quot;1\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;3\u0026quot;), \u0026quot; semanas pra entregar, por favor!\u0026quot;)\r ## [1] \u0026quot;Profe, me d√° mais 1 semanas pra entregar, por favor!\u0026quot;\r## [2] \u0026quot;Profe, me d√° mais 2 semanas pra entregar, por favor!\u0026quot;\r## [3] \u0026quot;Profe, me d√° mais 3 semanas pra entregar, por favor!\u0026quot;\r # Eu de manh√£\rstr_c(\u0026quot;S√≥ mais \u0026quot;, c(\u0026quot;5\u0026quot;, \u0026quot;10\u0026quot;, \u0026quot;20\u0026quot;, \u0026quot;30\u0026quot;), \u0026quot; minutinhos e eu acordo!\u0026quot;)\r ## [1] \u0026quot;S√≥ mais 5 minutinhos e eu acordo!\u0026quot; \u0026quot;S√≥ mais 10 minutinhos e eu acordo!\u0026quot;\r## [3] \u0026quot;S√≥ mais 20 minutinhos e eu acordo!\u0026quot; \u0026quot;S√≥ mais 30 minutinhos e eu acordo!\u0026quot;\r Se algum dos objetos passados para str_c tiver tamanho 0, ele √© descartado. √ötil para usar com testes l√≥gicos.\nnome \u0026lt;- \u0026quot;Vinicius\u0026quot;\rsobrenome \u0026lt;- \u0026quot;Maia\u0026quot;\rtem_nome_do_meio \u0026lt;- FALSE\rstr_c(\r\u0026quot;Meu nome √© \u0026quot;, nome, \u0026quot; \u0026quot;,\r# isso aqui retorna um vetor tamanho 0\rif (tem_nome_do_meio) \u0026quot; de Souza\u0026quot;, sobrenome,\r\u0026quot;.\u0026quot;\r)\r ## [1] \u0026quot;Meu nome √© Vinicius Maia.\u0026quot;\r Conhecedores de paste reconhecer√£o o argumento collapse, que serve para transformar vetores de strings em uma √∫nica string.\nstr_c(c(\u0026quot;Nat√°lia\u0026quot;, \u0026quot;Martins\u0026quot;, \u0026quot;Arruda\u0026quot;), collapse = \u0026quot; \u0026quot;)\r ## [1] \u0026quot;Nat√°lia Martins Arruda\u0026quot;\r De forma similar, conhecedores de substring dever√£o imediatamente reconhecer essa:\nx \u0026lt;- c(\u0026quot;Ma√ß√£\u0026quot;, \u0026quot;Banana\u0026quot;, \u0026quot;Abacaxi\u0026quot;)\rstr_sub(x, 1, 3)\r ## [1] \u0026quot;Ma√ß\u0026quot; \u0026quot;Ban\u0026quot; \u0026quot;Aba\u0026quot;\r str_sub(x, -3, -1)\r ## [1] \u0026quot;a√ß√£\u0026quot; \u0026quot;ana\u0026quot; \u0026quot;axi\u0026quot;\r str_sub n√£o vai dar erro se a string for muito curta:\nstr_sub(\u0026quot;a\u0026quot;, 1, 5)\r ## [1] \u0026quot;a\u0026quot;\r D√° pra usar a forma str_sub(x) \u0026lt;- para modificar partes de strings\nstr_sub(x, 1, 1) \u0026lt;- str_to_lower(str_sub(x, 1, 1))\rx\r ## [1] \u0026quot;ma√ß√£\u0026quot; \u0026quot;banana\u0026quot; \u0026quot;abacaxi\u0026quot;\r Note o uso de str_to_lower para mudar para min√∫sculas. O contr√°rio √© str_to_upper, tamb√©m h√° uma para t√≠tulos, str_to_title, e para a primeira letra de uma frase, str_to_sentence.\nx \u0026lt;- \u0026quot;Ministro Sinistro\u0026quot;\rstr_to_lower(x)\r ## [1] \u0026quot;ministro sinistro\u0026quot;\r str_to_upper(x)\r ## [1] \u0026quot;MINISTRO SINISTRO\u0026quot;\r str_to_sentence(x)\r ## [1] \u0026quot;Ministro sinistro\u0026quot;\r str_to_title(x)\r ## [1] \u0026quot;Ministro Sinistro\u0026quot;\r Como vimos no readr, algumas quest√µes relacionadas a strings dependem da l√≠ngua, ou, na linguagem do pacote, s√£o ‚Äúlocale dependent.‚Äù Por isso nas fun√ß√µes onde isso √© relevante, o argumento se chama locale. Isso n√£o √© super relevante para quem trabalha com o ingl√™s ou as l√≠nguas do oeste europeu, considerando que a maioria das l√≠nguas tem ra√≠zes similares, mas pode ser muito importante para outros idiomas. Vejamos este exemplo com a mudan√ßa da ordem das strings.\nx \u0026lt;- c(\u0026quot;abacaxi\u0026quot;, \u0026quot;escarola\u0026quot;, \u0026quot;banana\u0026quot;)\rstr_sort(x, locale = \u0026quot;en\u0026quot;) # Ingl√™s\r ## [1] \u0026quot;abacaxi\u0026quot; \u0026quot;banana\u0026quot; \u0026quot;escarola\u0026quot;\r str_sort(x, locale = \u0026quot;haw\u0026quot;) # Havaiano\r ## [1] \u0026quot;abacaxi\u0026quot; \u0026quot;escarola\u0026quot; \u0026quot;banana\u0026quot;\r √â justamente para esses casos que str_sort e str_order oferecem a alternativa de voc√™ especificar o locale.\nTrabalhando com padr√µes e ‚Äúexpress√µes regulares‚Äù Express√µes regulares s√£o quase uma linguagem de programa√ß√£o em si, aqui, vamos dar uma passada muito r√°pida e ver alguns exemplos simples. S√£o uma ferramenta muito √∫til, mas talvez n√£o do interesse de todos.\nBasicamente, a ideia √© fazer uma pesquisa na string, em busca de um padr√£o espec√≠fico. Pode ser uma palavra, um espa√ßo em branco, uma quebra de linha. Pode ficar muito complexo ou ser bem b√°sico. O nosso objetivo aqui √© que todos tenham a capacidade de trabalhar com padr√µes simples para corrigir inconsist√™ncias em bancos de dados, como no exemplo da aula anterior das colunas do dataset da OMS.\nPara visualizar padr√µes, vamos usar duas helper functions, str_view e str_view_all.\nx \u0026lt;- c(\u0026quot;mam√£o\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;ananas\u0026quot;)\rstr_view(x, \u0026quot;an\u0026quot;)\r \r{\"x\":{\"html\":\"\\n mam√£o\\n banana\\n ananas\\n\"},\"evals\":[],\"jsHooks\":[]}\rO resultado sai na aba ‚ÄúViewer‚Äù do seu RStudio.\nO primeiro padr√£o que podemos usar √© o ., que identifica qualquer caractere. As vezes na documenta√ß√£o esse tipo de padr√£o gen√©rico √© chamado de ‚Äúwildcard.‚Äù\nstr_view(x, \u0026quot;.a.\u0026quot;)\r \r{\"x\":{\"html\":\"\\n mam√£o\\n banana\\n ananas\\n\"},\"evals\":[],\"jsHooks\":[]}\rA forma de ler essa opera√ß√£o √©: ‚ÄúIdentifique qualquer conjunto de caracteres que tenha uma letra a no meio deles.‚Äù\nSe voc√™ quiser identificar um . numa string, voc√™ precisa usar o escape \\. Por√©m, a barra tamb√©m √© um escape! Ent√£o, ao escrever express√µes regulares, precisamos usar \\\\. Veja:\ndot \u0026lt;- \u0026quot;.\u0026quot;\rcat(dot)\r ## .\r # erro\rdot \u0026lt;- \u0026quot;\\.\u0026quot;\r ## Error: '\\.' √© uma seq√º√™ncia de escape n√£o reconhecida na cadeia de caracteres come√ßando com \u0026quot;\u0026quot;\\.\u0026quot;\r # agora sim\rdot \u0026lt;- \u0026quot;\\\\.\u0026quot;\rcat(dot)\r ## \\.\r Agora em um exemplo:\nx \u0026lt;- c(\u0026quot;Praia.\u0026quot;, \u0026quot;Agora.\u0026quot;, \u0026quot;Ou.\u0026quot;, \u0026quot;Me.\u0026quot;, \u0026quot;Rebelo.\u0026quot;)\rstr_view(x, \u0026quot;a\\\\.\u0026quot;)\r \r{\"x\":{\"html\":\"\\n Praia.\\n Agora.\\n Ou.\\n Me.\\n Rebelo.\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;u\\\\.\u0026quot;)\r \r{\"x\":{\"html\":\"\\n Praia.\\n Agora.\\n Ou.\\n Me.\\n Rebelo.\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;o\\\\.\u0026quot;)\r \r{\"x\":{\"html\":\"\\n Praia.\\n Agora.\\n Ou.\\n Me.\\n Rebelo.\\n\"},\"evals\":[],\"jsHooks\":[]}\rT√°, mas se a contrabarra √© utilizada para denotar uma express√£o regular tipo o ., como eu fa√ßo para pesquisar uma contrabarra?\nx \u0026lt;- \u0026quot;Jake Peralta √© o melhor detetive\\\\g√™nio\u0026quot;\rcat(x)\r ## Jake Peralta √© o melhor detetive\\g√™nio\r A solu√ß√£o √© escapar o escape do escape, sacou?\nstr_view(x, \u0026quot;\\\\\\\\\u0026quot;)\r \r{\"x\":{\"html\":\"\\n Jake Peralta √© o melhor detetive\\\\g√™nio\\n\"},\"evals\":[],\"jsHooks\":[]}\r√â enrolado mesmo‚Ä¶\nPara n√£o estender muito o assunto, vamos ver v√°rios exemplos de caracteres especiais a ser usados em express√µes regulares.\n^ encontra o in√≠cio de uma string\nx \u0026lt;- c(\u0026quot;ma√ß√£\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;mam√£o\u0026quot;)\rstr_view(x, \u0026quot;^m\u0026quot;)\r \r{\"x\":{\"html\":\"\\n ma√ß√£\\n banana\\n mam√£o\\n\"},\"evals\":[],\"jsHooks\":[]}\r$ encontra o final\nstr_view(x, \u0026quot;a$\u0026quot;)\r \r{\"x\":{\"html\":\"\\n ma√ß√£\\n banana\\n mam√£o\\n\"},\"evals\":[],\"jsHooks\":[]}\rPara for√ßar a express√£o a achar apenas a palavra completa, use os dois\nx \u0026lt;- c(\u0026quot;vitamina de banana\u0026quot;, \u0026quot;sundae de banana\u0026quot;, \u0026quot;banana\u0026quot;)\rstr_view(x, \u0026quot;banana\u0026quot;)\r \r{\"x\":{\"html\":\"\\n vitamina de banana\\n sundae de banana\\n banana\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;^banana$\u0026quot;)\r \r{\"x\":{\"html\":\"\\n vitamina de banana\\n sundae de banana\\n banana\\n\"},\"evals\":[],\"jsHooks\":[]}\rUse classes de caracteres para encontrar gen√©ricos\nQualquer digito:\nx \u0026lt;- \u0026quot;15 de Maio de 2021.\u0026quot;\rstr_view(x, \u0026quot;\\\\d\u0026quot;)\r \r{\"x\":{\"html\":\"\\n 15 de Maio de 2021.\\n\"},\"evals\":[],\"jsHooks\":[]}\rQualquer espa√ßo em branco:\nstr_view(x, \u0026quot;\\\\s\u0026quot;)\r \r{\"x\":{\"html\":\"\\n 15de Maio de 2021.\\n\"},\"evals\":[],\"jsHooks\":[]}\rQualquer caractere de um grupo: [abc]\nstr_view(x, \u0026quot;[M]\u0026quot;)\r \r{\"x\":{\"html\":\"\\n 15 de Maio de 2021.\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;[eM]\u0026quot;)\r \r{\"x\":{\"html\":\"\\n 15 de Maio de 2021.\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;[deM]\u0026quot;)\r \r{\"x\":{\"html\":\"\\n 15 de Maio de 2021.\\n\"},\"evals\":[],\"jsHooks\":[]}\rQualquer caractere menos esses: [^abc]\nstr_view(x, \u0026quot;[^15]\u0026quot;)\r \r{\"x\":{\"html\":\"\\n 15de Maio de 2021.\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;[^15 de]\u0026quot;)\r \r{\"x\":{\"html\":\"\\n 15 de Maio de 2021.\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;[^15 de Maio de ]\u0026quot;)\r \r{\"x\":{\"html\":\"\\n 15 de Maio de 2021.\\n\"},\"evals\":[],\"jsHooks\":[]}\rUsar uma classe pra evitar digitar 5 milh√µes de contrabarras\nstr_view(x, \u0026quot;[.]\u0026quot;)\r \r{\"x\":{\"html\":\"\\n 15 de Maio de 2021.\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(\u0026quot;a*c\u0026quot;, \u0026quot;[*]\u0026quot;)\r \r{\"x\":{\"html\":\"\\n a*c\\n\"},\"evals\":[],\"jsHooks\":[]}\rVoc√™ pode misturar strings com classes tamb√©m\nx \u0026lt;- c(\u0026quot;15 de Maio de 2021.\u0026quot;, \u0026quot;16 de Maio de 2021.\u0026quot;)\rstr_view(x, \u0026quot;1[56] de Maio\u0026quot;)\r \r{\"x\":{\"html\":\"\\n 15 de Maio de 2021.\\n 16 de Maio de 2021.\\n\"},\"evals\":[],\"jsHooks\":[]}\rInfelizmente, alguns caracteres tem significado especial dentro das classes, e voc√™ tem que usar contrabarras para fugir deles: ] \\ ^ e -.\nVoc√™ pode lidar com repeti√ß√µes\nx \u0026lt;- c(\u0026quot;Mariele\u0026quot;, \u0026quot;Marielle\u0026quot;, \u0026quot;Mariellle\u0026quot;, \u0026quot;Marie\u0026quot;)\rstr_view(x, \u0026quot;Mariell?e\u0026quot;) # l aparece 0 ou 1 vez\r \r{\"x\":{\"html\":\"\\n Mariele\\n Marielle\\n Mariellle\\n Marie\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;Mariel+e\u0026quot;) # l aparece 1 ou + vezes\r \r{\"x\":{\"html\":\"\\n Mariele\\n Marielle\\n Mariellle\\n Marie\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;Mariel*\u0026quot;) # l aparece 0 ou + vezes\r \r{\"x\":{\"html\":\"\\n Mariele\\n Marielle\\n Mariellle\\n Marie\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;Mariel{0}\u0026quot;) # l aparece exatamente 0 vezes\r \r{\"x\":{\"html\":\"\\n Mariele\\n Marielle\\n Mariellle\\n Marie\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;Mariel{1}\u0026quot;) # l aparece exatamente 1 vez\r \r{\"x\":{\"html\":\"\\n Mariele\\n Marielle\\n Mariellle\\n Marie\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;Mariel{2}\u0026quot;) # l aparece exatamente 2 vezes\r \r{\"x\":{\"html\":\"\\n Mariele\\n Marielle\\n Mariellle\\n Marie\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;Mariel{3}\u0026quot;) # l aparece exatamente 3 vezes\r \r{\"x\":{\"html\":\"\\n Mariele\\n Marielle\\n Mariellle\\n Marie\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;Mariel{1,}\u0026quot;) # l aparece exatamente 1 vez ou mais\r \r{\"x\":{\"html\":\"\\n Mariele\\n Marielle\\n Mariellle\\n Marie\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;Mariel{2,}\u0026quot;) # l aparece exatamente 2 vezes ou mais\r \r{\"x\":{\"html\":\"\\n Mariele\\n Marielle\\n Mariellle\\n Marie\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;Mariel{1,2}\u0026quot;) # l aparece de 1 a 2 vezes\r \r{\"x\":{\"html\":\"\\n Mariele\\n Marielle\\n Mariellle\\n Marie\\n\"},\"evals\":[],\"jsHooks\":[]}\rstr_view(x, \u0026quot;Mariel{2,3}\u0026quot;) # l aparece de 2 a 3 vezes\r \r{\"x\":{\"html\":\"\\n Mariele\\n Marielle\\n Mariellle\\n Marie\\n\"},\"evals\":[],\"jsHooks\":[]}\rEsse assunto √© enorme, e ainda estamos s√≥ na superf√≠cie. H√° grupos, lookarounds, e muitos outros detalhes envolvendo express√µes regulares, e voc√™s podem consultar os livros de refer√™ncia para mergulhar mais fundo. Mas vamos parar por aqui para nos concentrar no que interessa.\nEm geral, temos um banco de dados com strings problem√°ticas, tipo erros de digita√ß√£o, inconsist√™ncias etc. O primeiro passo, em geral, √© detectar os problemas.\nx \u0026lt;- c(\u0026quot;S√£o Paulo\u0026quot;, \u0026quot;SAO PAULO\u0026quot;, \u0026quot;Sao Paulo\u0026quot;, \u0026quot;sp\u0026quot;, \u0026quot;SP\u0026quot;, \u0026quot;Sp\u0026quot;)\rstr_detect(x, \u0026quot;√£\u0026quot;)\r ## [1] TRUE FALSE FALSE FALSE FALSE FALSE\r str_detect(x, \u0026quot;[Ss][Pp]\u0026quot;)\r ## [1] FALSE FALSE FALSE TRUE TRUE TRUE\r str_detect(x, \u0026quot;[Ss][Aa][Oo]\u0026quot;)\r ## [1] FALSE TRUE TRUE FALSE FALSE FALSE\r Voc√™ pode se utilizar do fato da resposta ser um vetor l√≥gico para descobrir quantos problemas voc√™ tem\n# Contagens\rstr_detect(x, \u0026quot;√£\u0026quot;) %\u0026gt;% sum()\r ## [1] 1\r str_detect(x, \u0026quot;[Ss][Pp]\u0026quot;) %\u0026gt;% sum()\r ## [1] 3\r str_detect(x, \u0026quot;[Ss][Aa][Oo]\u0026quot;) %\u0026gt;% sum()\r ## [1] 2\r # Propor√ß√µes\rstr_detect(x, \u0026quot;√£\u0026quot;) %\u0026gt;% mean()\r ## [1] 0.1666667\r str_detect(x, \u0026quot;[Ss][Pp]\u0026quot;) %\u0026gt;% mean()\r ## [1] 0.5\r str_detect(x, \u0026quot;[Ss][Aa][Oo]\u0026quot;) %\u0026gt;% mean()\r ## [1] 0.3333333\r Depois de detectar seus problemas, voc√™ pode querer extrair uma parte dos seus casos: use str_subset\nstr_subset(x, \u0026quot;[Ss][Pp]\u0026quot;)\r ## [1] \u0026quot;sp\u0026quot; \u0026quot;SP\u0026quot; \u0026quot;Sp\u0026quot;\r Em geral, no entanto, voc√™ vai estar trabalhando num data frame. Ent√£o use dplyr::filter e str_detect.\ndf \u0026lt;- tibble::tibble(\rnome = c(\u0026quot;Marcos\u0026quot;, \u0026quot;rog√©rio\u0026quot;, \u0026quot;cebolinha\u0026quot;, \u0026quot;Bei√ßola\u0026quot;, \u0026quot;nadir\u0026quot;, \u0026quot;Monica\u0026quot;),\ruf = x,\rdtnsc = c(\u0026quot;15 de Maio de 1980\u0026quot;, \u0026quot;1 de Jan de 2001\u0026quot;, \u0026quot;6 de Ago de 1993\u0026quot;, \u0026quot;20 de Abril de 1964\u0026quot;, \u0026quot;24 de Nov de 1975\u0026quot;, \u0026quot;14 de Dezembro de 1997\u0026quot;)\r)\rdf %\u0026gt;% dplyr::filter(str_detect(uf, \u0026quot;[Ss][Pp]\u0026quot;))\r ## # A tibble: 3 x 3\r## nome uf dtnsc ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 Bei√ßola sp 20 de Abril de 1964 ## 2 nadir SP 24 de Nov de 1975 ## 3 Monica Sp 14 de Dezembro de 1997\r Voc√™ pode contar quantos matches voc√™ tem str_count\nstr_count(x, \u0026quot;o\u0026quot;)\r ## [1] 2 0 2 0 0 0\r str_count(x, \u0026quot;[Oo]\u0026quot;)\r ## [1] 2 2 2 0 0 0\r # e usar num data frame\rdf %\u0026gt;% dplyr::mutate(vogais = str_count(uf, \u0026quot;[aeiou]\u0026quot;),\rconsoantes = str_count(uf, \u0026quot;[^aeiou]\u0026quot;))\r ## # A tibble: 6 x 5\r## nome uf dtnsc vogais consoantes\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 Marcos S√£o Paulo 15 de Maio de 1980 4 5\r## 2 rog√©rio SAO PAULO 1 de Jan de 2001 0 9\r## 3 cebolinha Sao Paulo 6 de Ago de 1993 5 4\r## 4 Bei√ßola sp 20 de Abril de 1964 0 2\r## 5 nadir SP 24 de Nov de 1975 0 2\r## 6 Monica Sp 14 de Dezembro de 1997 0 2\r Voc√™ pode extrair str_extract as informa√ß√µes que voc√™ quer\nstr_extract(df$dtnsc, \u0026quot;\\\\d+\u0026quot;)\r ## [1] \u0026quot;15\u0026quot; \u0026quot;1\u0026quot; \u0026quot;6\u0026quot; \u0026quot;20\u0026quot; \u0026quot;24\u0026quot; \u0026quot;14\u0026quot;\r str_extract(df$dtnsc, \u0026quot;\\\\d+$\u0026quot;)\r ## [1] \u0026quot;1980\u0026quot; \u0026quot;2001\u0026quot; \u0026quot;1993\u0026quot; \u0026quot;1964\u0026quot; \u0026quot;1975\u0026quot; \u0026quot;1997\u0026quot;\r str_extract(df$dtnsc, \u0026quot;\\\\D+\u0026quot;)\r ## [1] \u0026quot; de Maio de \u0026quot; \u0026quot; de Jan de \u0026quot; \u0026quot; de Ago de \u0026quot; \u0026quot; de Abril de \u0026quot; ## [5] \u0026quot; de Nov de \u0026quot; \u0026quot; de Dezembro de \u0026quot;\r # Na tibble\rdf %\u0026gt;% dplyr::mutate(\rdia = str_extract(dtnsc, \u0026quot;\\\\d+\u0026quot;),\rmes = str_extract(df$dtnsc, \u0026quot;\\\\D+\u0026quot;),\rano = str_extract(dtnsc, \u0026quot;\\\\d+$\u0026quot;))\r ## # A tibble: 6 x 6\r## nome uf dtnsc dia mes ano ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 Marcos S√£o Paulo 15 de Maio de 1980 15 \u0026quot; de Maio de \u0026quot; 1980 ## 2 rog√©rio SAO PAULO 1 de Jan de 2001 1 \u0026quot; de Jan de \u0026quot; 2001 ## 3 cebolinha Sao Paulo 6 de Ago de 1993 6 \u0026quot; de Ago de \u0026quot; 1993 ## 4 Bei√ßola sp 20 de Abril de 1964 20 \u0026quot; de Abril de \u0026quot; 1964 ## 5 nadir SP 24 de Nov de 1975 24 \u0026quot; de Nov de \u0026quot; 1975 ## 6 Monica Sp 14 de Dezembro de 1997 14 \u0026quot; de Dezembro de \u0026quot; 1997\r # Melhor ainda\rdf %\u0026gt;% tidyr::extract(\rdtnsc, c(\u0026quot;dia\u0026quot;, \u0026quot;mes\u0026quot;, \u0026quot;ano\u0026quot;), regex = \u0026quot;(\\\\d+) de (\\\\D+) de (\\\\d+$)\u0026quot;\r)\r ## # A tibble: 6 x 5\r## nome uf dia mes ano ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 Marcos S√£o Paulo 15 Maio 1980 ## 2 rog√©rio SAO PAULO 1 Jan 2001 ## 3 cebolinha Sao Paulo 6 Ago 1993 ## 4 Bei√ßola sp 20 Abril 1964 ## 5 nadir SP 24 Nov 1975 ## 6 Monica Sp 14 Dezembro 1997\r Similar a ideia de extra√ß√£o, podemos substituir com str_replace\nstr_replace(x, \u0026quot;[Ss][Pp]\u0026quot;, \u0026quot;S√£o Paulo\u0026quot;)\r ## [1] \u0026quot;S√£o Paulo\u0026quot; \u0026quot;SAO PAULO\u0026quot; \u0026quot;Sao Paulo\u0026quot; \u0026quot;S√£o Paulo\u0026quot; \u0026quot;S√£o Paulo\u0026quot; \u0026quot;S√£o Paulo\u0026quot;\r str_replace(x, \u0026quot;SAO PAULO\u0026quot;, \u0026quot;S√£o Paulo\u0026quot;)\r ## [1] \u0026quot;S√£o Paulo\u0026quot; \u0026quot;S√£o Paulo\u0026quot; \u0026quot;Sao Paulo\u0026quot; \u0026quot;sp\u0026quot; \u0026quot;SP\u0026quot; \u0026quot;Sp\u0026quot;\r str_replace(x, \u0026quot;a\u0026quot;, \u0026quot;√£\u0026quot;)\r ## [1] \u0026quot;S√£o P√£ulo\u0026quot; \u0026quot;SAO PAULO\u0026quot; \u0026quot;S√£o Paulo\u0026quot; \u0026quot;sp\u0026quot; \u0026quot;SP\u0026quot; \u0026quot;Sp\u0026quot;\r Tanto str_extract quanto str_replace substituem apenas a primeira marca, se voc√™ quiser substituir todas, utilize str_..._all\nstr_extract_all(x, \u0026quot;a\u0026quot;, simplify = TRUE)\r ## [,1] [,2]\r## [1,] \u0026quot;a\u0026quot; \u0026quot;\u0026quot; ## [2,] \u0026quot;\u0026quot; \u0026quot;\u0026quot; ## [3,] \u0026quot;a\u0026quot; \u0026quot;a\u0026quot; ## [4,] \u0026quot;\u0026quot; \u0026quot;\u0026quot; ## [5,] \u0026quot;\u0026quot; \u0026quot;\u0026quot; ## [6,] \u0026quot;\u0026quot; \u0026quot;\u0026quot;\r str_replace_all(x, \u0026quot;a\u0026quot;, \u0026quot;√£\u0026quot;)\r ## [1] \u0026quot;S√£o P√£ulo\u0026quot; \u0026quot;SAO PAULO\u0026quot; \u0026quot;S√£o P√£ulo\u0026quot; \u0026quot;sp\u0026quot; \u0026quot;SP\u0026quot; \u0026quot;Sp\u0026quot;\r O assunto n√£o acaba, mas vamos parar por aqui. Novamente, recomendo consultarem os materiais para quem quiser ir mais a fundo nisso. √â bem capaz de no andar da carruagem aparecerem outros exemplos nos quais a manipula√ß√£o de strings pode ser importante.\nforcats Esse √© um pacotinho muito que facilita bastante a vida de quem trabalha com vari√°vel categ√≥rica, ou, no R, os factors. Ele consiste em uma s√©rie de ‚Äúhelper functions‚Äù baseadas em fun√ß√µes do base e do stats que trabalham com os componentes de um factor, ou seja, seus levels e seus values.\nImagino que todos aqui est√£o familiarizados com fatores e com a sua cria√ß√£o, ent√£o vamos direto ao que interessa. Educa√ß√£o √© um vetor de caracteres que vem com os n√≠veis educacionais de um popula√ß√£o.\neducacao \u0026lt;- c(\u0026quot;Superior\u0026quot;, \u0026quot;Fundamental\u0026quot;, \u0026quot;M√©dio\u0026quot;, \u0026quot;Superior\u0026quot;, \u0026quot;Fundamental\u0026quot;, \u0026quot;M√©dio\u0026quot;,\r\u0026quot;Superior\u0026quot;, \u0026quot;Fundamental\u0026quot;, \u0026quot;M√©dio\u0026quot;, \u0026quot;Superior\u0026quot;, \u0026quot;Fundamental\u0026quot;, \u0026quot;M√©dio\u0026quot;)\rx \u0026lt;- factor(educacao, levels = c(\u0026quot;Fundamental\u0026quot;, \u0026quot;M√©dio\u0026quot;, \u0026quot;Superior\u0026quot;))\rx\r ## [1] Superior Fundamental M√©dio Superior Fundamental M√©dio ## [7] Superior Fundamental M√©dio Superior Fundamental M√©dio ## Levels: Fundamental M√©dio Superior\r levels(x)\r ## [1] \u0026quot;Fundamental\u0026quot; \u0026quot;M√©dio\u0026quot; \u0026quot;Superior\u0026quot;\r relevel(x, \u0026quot;Superior\u0026quot;)\r ## [1] Superior Fundamental M√©dio Superior Fundamental M√©dio ## [7] Superior Fundamental M√©dio Superior Fundamental M√©dio ## Levels: Superior Fundamental M√©dio\r Em geral, diversas tarefas envolvendo fatores no base n√£o s√£o muito simples. Por exemplo, se eu quiser modificar os nomes dos n√≠veis de um fator depois dele j√° estar criado, modificar a ordem dos n√≠veis, ou agrupar diversos n√≠veis em um s√≥. forcats vem justamente oferecer solu√ß√µes nesse sentido. Normalmente, estamos trabalhando com bancos de dados, e n√£o com um vetor solit√°rio, por isso, vamos usar o gss_cat, uma amostra do General Social Survey aplicado pelo NORC e pela Universidade de Chicago, que vem no pacote forcats.\nlibrary(forcats)\rgss_cat\r ## # A tibble: 21,483 x 9\r## year marital age race rincome partyid relig denom tvhours\r## \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 2000 Never ma~ 26 White $8000 to ~ Ind,near r~ Protesta~ Souther~ 12\r## 2 2000 Divorced 48 White $8000 to ~ Not str re~ Protesta~ Baptist~ NA\r## 3 2000 Widowed 67 White Not appli~ Independent Protesta~ No deno~ 2\r## 4 2000 Never ma~ 39 White Not appli~ Ind,near r~ Orthodox~ Not app~ 4\r## 5 2000 Divorced 25 White Not appli~ Not str de~ None Not app~ 1\r## 6 2000 Married 25 White $20000 - ~ Strong dem~ Protesta~ Souther~ NA\r## 7 2000 Never ma~ 36 White $25000 or~ Not str re~ Christian Not app~ 3\r## 8 2000 Divorced 44 White $7000 to ~ Ind,near d~ Protesta~ Luthera~ NA\r## 9 2000 Married 44 White $25000 or~ Not str de~ Protesta~ Other 0\r## 10 2000 Married 47 White $25000 or~ Strong rep~ Protesta~ Souther~ 3\r## # ... with 21,473 more rows\r Contagens\nUma das primeiras coisas que interessa ao lidar com fatores, √© obter suas contagens, o que √© algo muito simples utilizando a gram√°tica do dplyr.\n# Fun√ß√£o count\rgss_cat %\u0026gt;% count(race)\r ## # A tibble: 3 x 2\r## race n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 Other 1959\r## 2 Black 3129\r## 3 White 16395\r # Incluindo n√≠veis com contagem = 0.\rgss_cat %\u0026gt;% count(race, .drop = FALSE)\r ## # A tibble: 4 x 2\r## race n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 Other 1959\r## 2 Black 3129\r## 3 White 16395\r## 4 Not applicable 0\r # Visualiza√ß√£o com ggplot\rlibrary(ggplot2)\rgss_cat %\u0026gt;% ggplot(aes(race)) + geom_bar()\r # Incluindo n√≠veis com contagem = 0.\rgss_cat %\u0026gt;% ggplot(aes(race)) + geom_bar() + scale_x_discrete(drop = FALSE)\r Note o uso do argumento drop nos dois casos, para indicar que casos com 0 observa√ß√µes n√£o devem ser removidos do resultado.\nModificando a ordem A segunda tarefa comum quando trabalhamos com fatores √© modificar a ordem em que eles aparecem. N√£o √© tanto o caso quando trabalhamos com fatores ordenados, mas diversos tipos de vari√°veis categ√≥ricas n√£o possuem uma ordem l√≥gica pre-definida e, mesmo assim, nos interessa apresent√°-los de acordo com uma determinada hierarquia visual, seja porque eles s√£o os mais frequentes ou porque queremos destacar algum elemento em particular. forcats implementa diversas estrat√©gias de reordenamento de fatores. Vamos v√™-las brevemente.\nDigamos que eu queira saber o tempo m√©dio de televis√£o assistida por membros das diversas religi√µes. Eu poderia produzir um sum√°rio e depois plotar isso num gr√°fico.\nrelig_summary \u0026lt;- gss_cat %\u0026gt;%\rgroup_by(relig) %\u0026gt;%\rsummarise(\rage = mean(age, na.rm = TRUE),\rtvhours = mean(tvhours, na.rm = TRUE),\rn = n()\r)\rrelig_summary %\u0026gt;% ggplot(aes(tvhours, relig)) + geom_point()\r O display est√° t√©cnicamente correto, mas a forma desorganizada dos n√≠veis no eixo Y dificulta a nossa capacidade de fazer compara√ß√µes. Talvez fosse mais interessante ordenar este resultado por ordem decrescente do n√∫mero de horas de tv. Mas, como fazer isso de forma direta, sem precisar realizar diversas computa√ß√µes?\n# Direto no plot\rrelig_summary %\u0026gt;% ggplot(aes(tvhours, fct_reorder(relig, tvhours))) + geom_point()\r # Antes de passar o data.frame para a plotagem\rrelig_summary %\u0026gt;% mutate(relig = fct_reorder(relig, tvhours)) %\u0026gt;% ggplot(aes(tvhours, relig)) + geom_point()\r Note como posso aplicar a transforma√ß√£o diretamente na vari√°vel durante o processo de plotagem, ou antes, e uma invoca√ß√£o de mutate. Na minha opini√£o, o segundo jeito √© o mais adequado, por duas raz√µes: √© mais f√°cil de digitar, inserir e retirar do c√≥digo e √© mais f√°cil para um leitor identificar que uma transforma√ß√£o foi feita na vari√°vel plotada.\nOutro exemplo: que tal exarminarmos a rela√ß√£o entre a idade e a renda declarada? Primeiro, √© preciso construir um sum√°rio, parecido com o primeiro:\nrincome_summary \u0026lt;- gss_cat %\u0026gt;%\rgroup_by(rincome) %\u0026gt;%\rsummarise(\rage = mean(age, na.rm = TRUE),\rtvhours = mean(tvhours, na.rm = TRUE),\rn = n()\r)\rrincome_summary %\u0026gt;% mutate(rincome = fct_reorder(rincome, age)) %\u0026gt;% ggplot(aes(age, rincome)) + geom_point()\r Aqui, o reordenamento das vari√°veis de acordo com a idade n√£o faz muito sentido, porque os n√≠veis de renda tem uma ordem pr√≥pria. Nesse caso, n√£o √© recomendado utilizar fct_reorder.\nrincome_summary %\u0026gt;% ggplot(aes(age, rincome)) + geom_point()\r S√≥ que ao plotar, notamos um problema: a categoria ‚ÄúNot applicable‚Äù ficou primeiro e isso desorganiza visualmente nosso gr√°fico. Sem problema! Utilizamos fct_relevel para modificar a ordem de uma vari√°vel arbitrariamente. O padr√£o √© colocar pro come√ßo (Parecido com o comportamento de stats::relevel), mas voc√™ pode especificar outra posi√ß√£o.\nrincome_summary %\u0026gt;% mutate(rincome = fct_relevel(rincome, \u0026quot;Not applicable\u0026quot;)) %\u0026gt;% ggplot(aes(age, rincome)) + geom_point()\r Notem como nos exemplos acima, o uso do %\u0026gt;% nos permite alterar partes do nosso c√≥digo de maneira interativa para chegar no resultado desejado.\nOutro tipo de mudan√ßa de ordem interessante ocorre quando temos uma terceira ‚Äúdimens√£o‚Äù no nosso gr√°fico. Em geral, utilizamos cores, formas ou linhas quebradas para diferenciar entre categorias e gostar√≠amos que a nossa legenda acompanhasse a tend√™ncia do gr√°fico. Compare:\nby_age \u0026lt;- gss_cat %\u0026gt;%\rfilter(!is.na(age)) %\u0026gt;%\rcount(age, marital) %\u0026gt;%\rgroup_by(age) %\u0026gt;%\rmutate(prop = n / sum(n))\r# Sem altera√ß√£o na ordem\rby_age %\u0026gt;% ggplot(aes(age, prop, colour = marital)) +\rgeom_line(na.rm = TRUE)\r # Com altera√ß√£o na ordem\rggplot(by_age, aes(age, prop, colour = fct_reorder2(marital, age, prop))) +\rgeom_line() +\rlabs(colour = \u0026quot;marital\u0026quot;)\r No caso de fct_reorder2, √© melhor fazer a altera√ß√£o de ordem dentro da fun√ß√£o gr√°fica, pois dentro uma invoca√ß√£o de mutate, ela n√£o funcionou durante meus testes.\nPor √∫ltimo, podemos querer ordenar um gr√°fico de barras de acordo com a frequ√™ncia das categorias, o que podemos fazer com fct_infreq e fct_rev (opcional).\ngss_cat %\u0026gt;%\rmutate(marital = marital %\u0026gt;% fct_infreq()) %\u0026gt;%\rggplot(aes(marital)) +\rgeom_bar()\r # OU\rgss_cat %\u0026gt;%\rmutate(marital = marital %\u0026gt;% fct_infreq() %\u0026gt;% fct_rev()) %\u0026gt;%\rggplot(aes(marital)) +\rgeom_bar()\r Notem o uso do pipe na hora de modificar a vari√°vel ‚Äúmarital.‚Äù\nModificando os n√≠veis O outro tipo de opera√ß√£o bastante comum √© a altera√ß√£o nos n√≠ves do fator. Em geral, queremos que os nossos n√≠veis sejam representativos das nossas categorias de an√°lise, sejam de f√°cil leitura e entendimento e contenham um n√∫mero significativo de observa√ß√µes. Por essa raz√£o, frequentemente precisamos alterar os r√≥tulos, agrupar categorias, etc.\nVejamos o exemplo da vari√°vel partyid, que registra a identifica√ß√£o do entrevistado com os partidos pol√≠ticos dos EUA.\ngss_cat %\u0026gt;% count(partyid)\r ## # A tibble: 10 x 2\r## partyid n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 No answer 154\r## 2 Don't know 1\r## 3 Other party 393\r## 4 Strong republican 2314\r## 5 Not str republican 3032\r## 6 Ind,near rep 1791\r## 7 Independent 4119\r## 8 Ind,near dem 2499\r## 9 Not str democrat 3690\r## 10 Strong democrat 3490\r Vamos supor que, por qualquer motivo, essa forma de representa√ß√£o das categorias n√£o nos satisfaz. Vejamos algumas das ferramentas que podemos utilizar para modificar esse fator.\nPodemos, simplesmente, reescrever essas categorias de forma mais completa:\ngss_cat %\u0026gt;% mutate(partyid = fct_recode(partyid,\r\u0026quot;Republicano, forte\u0026quot; = \u0026quot;Strong republican\u0026quot;,\r\u0026quot;Republicano, fraco\u0026quot; = \u0026quot;Not str republican\u0026quot;,\r\u0026quot;Independente, pr√≥x. repub.\u0026quot; = \u0026quot;Ind,near rep\u0026quot;,\r\u0026quot;Independente, pr√≥x. democ.\u0026quot; = \u0026quot;Ind,near dem\u0026quot;,\r\u0026quot;Independente\u0026quot; = \u0026quot;Independent\u0026quot;,\r\u0026quot;Democrata, forte\u0026quot; = \u0026quot;Strong democrat\u0026quot;,\r\u0026quot;Democrata, fraco\u0026quot; = \u0026quot;Not str democrat\u0026quot;,\r\u0026quot;Outro partido\u0026quot; = \u0026quot;Other party\u0026quot;,\r\u0026quot;N√£o sei\u0026quot; = \u0026quot;Don't know\u0026quot;,\r\u0026quot;Sem resposta\u0026quot; = \u0026quot;No answer\u0026quot;\r)) %\u0026gt;% count(partyid)\r ## # A tibble: 10 x 2\r## partyid n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 Sem resposta 154\r## 2 N√£o sei 1\r## 3 Outro partido 393\r## 4 Republicano, forte 2314\r## 5 Republicano, fraco 3032\r## 6 Independente, pr√≥x. repub. 1791\r## 7 Independente 4119\r## 8 Independente, pr√≥x. democ. 2499\r## 9 Democrata, fraco 3690\r## 10 Democrata, forte 3490\r A fun√ß√£o utilizada √© fct_recode e ela √© a mais gen√©rica e flex√≠vel de todas, por√©m, exige que cada n√≠vel seja modificado individualmente. Dentro dela, √© poss√≠vel agrupar v√°rios n√≠veis associando v√°rios n√≠veis antigos a um mesmo n√≠vel novo. Veja o exemplo:\ngss_cat %\u0026gt;% mutate(partyid = fct_recode(partyid,\r\u0026quot;Republicano, forte\u0026quot; = \u0026quot;Strong republican\u0026quot;,\r\u0026quot;Republicano, fraco\u0026quot; = \u0026quot;Not str republican\u0026quot;,\r\u0026quot;Independente, pr√≥x. repub.\u0026quot; = \u0026quot;Ind,near rep\u0026quot;,\r\u0026quot;Independente, pr√≥x. democ.\u0026quot; = \u0026quot;Ind,near dem\u0026quot;,\r\u0026quot;Independente\u0026quot; = \u0026quot;Independent\u0026quot;,\r\u0026quot;Democrata, forte\u0026quot; = \u0026quot;Strong democrat\u0026quot;,\r\u0026quot;Democrata, fraco\u0026quot; = \u0026quot;Not str democrat\u0026quot;,\r# Note o nome\r\u0026quot;Outro\u0026quot; = \u0026quot;Other party\u0026quot;,\r\u0026quot;Outro\u0026quot; = \u0026quot;Don't know\u0026quot;,\r\u0026quot;Outro\u0026quot; = \u0026quot;No answer\u0026quot;\r)) %\u0026gt;% count(partyid)\r ## # A tibble: 8 x 2\r## partyid n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 Outro 548\r## 2 Republicano, forte 2314\r## 3 Republicano, fraco 3032\r## 4 Independente, pr√≥x. repub. 1791\r## 5 Independente 4119\r## 6 Independente, pr√≥x. democ. 2499\r## 7 Democrata, fraco 3690\r## 8 Democrata, forte 3490\r Se voc√™ quiser recategorizar um fator que tem muitos n√≠veis para um menor, com poucos n√≠veis, utilize fct_collapse:\ngss_cat %\u0026gt;%\rmutate(partyid = fct_collapse(partyid,\rOutro = c(\u0026quot;No answer\u0026quot;, \u0026quot;Don't know\u0026quot;, \u0026quot;Other party\u0026quot;),\rRepublicano = c(\u0026quot;Strong republican\u0026quot;, \u0026quot;Not str republican\u0026quot;),\rIndependente = c(\u0026quot;Ind,near rep\u0026quot;, \u0026quot;Independent\u0026quot;, \u0026quot;Ind,near dem\u0026quot;),\rDemocrata = c(\u0026quot;Not str democrat\u0026quot;, \u0026quot;Strong democrat\u0026quot;)\r)) %\u0026gt;%\rcount(partyid)\r ## # A tibble: 4 x 2\r## partyid n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 Outro 548\r## 2 Republicano 5346\r## 3 Independente 8409\r## 4 Democrata 7180\r Repare que do lado esquerdo, nos valores novos, n√£o foi necess√°rio usar aspas. √â preciso cuidado com essa caracter√≠stica dos verbos do tidyverse. Ela se chama ‚Äútidy evaluation‚Äù e est√° um pouco fora do escopo do curso. Basicamente, se rolar d√∫vida ou der erros, se for usar acentos ou algum caractere diferente, use aspas.\ngss_cat %\u0026gt;%\rmutate(partyid = fct_collapse(partyid,\r\u0026quot;Outro\u0026quot; = c(\u0026quot;No answer\u0026quot;, \u0026quot;Don't know\u0026quot;, \u0026quot;Other party\u0026quot;),\r\u0026quot;Republicano\u0026quot; = c(\u0026quot;Strong republican\u0026quot;, \u0026quot;Not str republican\u0026quot;),\r\u0026quot;Independente\u0026quot; = c(\u0026quot;Ind,near rep\u0026quot;, \u0026quot;Independent\u0026quot;, \u0026quot;Ind,near dem\u0026quot;),\r\u0026quot;Democrata\u0026quot; = c(\u0026quot;Not str democrat\u0026quot;, \u0026quot;Strong democrat\u0026quot;)\r)) %\u0026gt;%\rcount(partyid)\r ## # A tibble: 4 x 2\r## partyid n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 Outro 548\r## 2 Republicano 5346\r## 3 Independente 8409\r## 4 Democrata 7180\r Outro tipo de mudan√ßa importante no n√∫mero de n√≠veis √© agrupar os n√≠veis menos frequentes, por exemplo, para produzir uma visualiza√ß√£o que d√™ maior destaque aos n√≠veis mais frequentes. Esse √© o trabalho de fct_lump.\ngss_cat %\u0026gt;% mutate(relig = fct_lump(relig, n = 5)) %\u0026gt;% count(relig)\r ## # A tibble: 6 x 2\r## relig n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 Christian 689\r## 2 None 3523\r## 3 Jewish 388\r## 4 Catholic 5124\r## 5 Protestant 10846\r## 6 Other 913\r Note que usando o argumento n eu indico quantos n√≠veis eu quero. No caso, escolhi os 5 n√≠veis mais frequentes e todos os outros s√£o autom√°ticamente agrupados na categoria ‚ÄúOther.‚Äù Posso mudar esse nome tamb√©m:\ngss_cat %\u0026gt;% mutate(relig = fct_lump(relig, n = 5, other_level = \u0026quot;Outros\u0026quot;)) %\u0026gt;% count(relig)\r ## # A tibble: 6 x 2\r## relig n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 Christian 689\r## 2 None 3523\r## 3 Jewish 388\r## 4 Catholic 5124\r## 5 Protestant 10846\r## 6 Outros 913\r Exerc√≠cios   Encontre os v√¥os que:\n Atrasaram mais de duas horas Com destino a Houston (IAH ou HOU) Operados pela United, American ou Delta Decolaram entre julho e setembro Chegaram com mais de duas horas de atraso, mas n√£o decolaram com atraso Atrasaram mais de uma hora para decolar, mas recuperaram mais de 30 minutos durante o voo Decolaram entre a meia-noite e 6 da manh√£ (inclusive)    Reordene suas colunas para encontrar os voos mais r√°pidos (maior velocidade de voo).\n  Teste v√°rias maneiras diferentes de selecionar as vari√°veis dep_time, dep_delay, arr_time e arr_delay usando as v√°rias helper functions de select.\n  As vari√°veis dep_time e sched_dep_time est√£o num formato incorreto (veja ?flights). Converta-as com mutate para um valor em minutos passados desde a meia-noite. Dica: utilize %/% e %%.\n  O que o c√≥digo abaixo est√° fazendo? Porque mesmo ap√≥s o c√≥digo abaixo continuam existindo diferen√ßas entre os valores das vari√°veis air_time e travel_time?\n  flights %\u0026gt;% select(air_time, dep_time, arr_time, dep_delay, arr_delay) %\u0026gt;% mutate(dep_hour = dep_time %/% 100,\rdep_min = dep_time %% 100,\rdep_time2 = dep_hour * 60 + dep_min,\rarr_hour = arr_time %/% 100,\rarr_min = arr_time %% 100,\rarr_time2 = arr_hour * 60 + arr_min,\rtravel_time = arr_time2 - dep_time2) %\u0026gt;% select(-dep_hour, -dep_min, -arr_hour, -arr_min)\r ## # A tibble: 336,776 x 8\r## air_time dep_time arr_time dep_delay arr_delay dep_time2 arr_time2\r## \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 227 517 830 2 11 317 510\r## 2 227 533 850 4 20 333 530\r## 3 160 542 923 2 33 342 563\r## 4 183 544 1004 -1 -18 344 604\r## 5 116 554 812 -6 -25 354 492\r## 6 150 554 740 -4 12 354 460\r## 7 158 555 913 -5 19 355 553\r## 8 53 557 709 -3 -14 357 429\r## 9 140 557 838 -3 -8 357 518\r## 10 138 558 753 -2 8 358 473\r## # ... with 336,766 more rows, and 1 more variable: travel_time \u0026lt;dbl\u0026gt;\r Use o stringr para concatenar as seguintes strings em uma frase  x \u0026lt;- \u0026quot;.\u0026quot;\ry \u0026lt;- \u0026quot;feliz\u0026quot;\rw \u0026lt;- \u0026quot;acordei\u0026quot;\rz \u0026lt;- \u0026quot;hoje\u0026quot;\r Corrija as inconsist√™ncias nas colunas pa√≠s, primeiro_nome, segundo_nome e crie uma nova coluna nomes contendo as duas anteriores. No final, ordene o banco em ordem alfab√©tica.  df \u0026lt;- tibble::tribble(\r~pais, ~primeiro_nome, ~segundo_nome,\r# -------|----------------|-------------|\r\u0026quot;BRASIL\u0026quot;, \u0026quot;ISABELA\u0026quot;, \u0026quot;MARTINS\u0026quot;,\r\u0026quot;Brasil\u0026quot;, \u0026quot;Eduardo\u0026quot;, \u0026quot;cabellos\u0026quot;,\r\u0026quot;brasil\u0026quot;, \u0026quot;m√°rcia\u0026quot;, \u0026quot;pinto\u0026quot;,\r\u0026quot;bRaSiL\u0026quot;, \u0026quot;rog√©rio\u0026quot;, \u0026quot;Marinho\u0026quot;,\r)\r Transforme a string c(\u0026quot;Seu nome\u0026quot;, \u0026quot;Seu sobrenome da m√£e\u0026quot;, \u0026quot;Seu sobrenome do pai\u0026quot;) na string \u0026quot;SEU SOBRENOME DO PAI, sua inicial do nome. sua inicial da m√£e.\u0026quot;, como numa cita√ß√£o. Veja o exemplo abaixo:  # Transforme\rc(\u0026quot;Vin√≠cius\u0026quot;, \u0026quot;de Souza\u0026quot;, \u0026quot;Maia\u0026quot;)\r ## [1] \u0026quot;Vin√≠cius\u0026quot; \u0026quot;de Souza\u0026quot; \u0026quot;Maia\u0026quot;\r # Resultado\r\u0026quot;MAIA, V. S.\u0026quot;\r ## [1] \u0026quot;MAIA, V. S.\u0026quot;\r DESAFIO: Nos microdados da √°rea de sa√∫de, √© comum que a vari√°vel idade esteja registrada da seguinte forma: ‚Äú150,‚Äù ‚Äú219,‚Äù ‚Äú312,‚Äù ‚Äú471.‚Äù Esses c√≥digos indicam primeiro qual a unidade de medida da idade e segundo o valor desta unidade, 1 = horas, 2 = dias, 3 = meses, 4 = anos. Proponha um c√≥digo usando stringr para transformar o vetor abaixo em um valor num√©rico.  # N√£o precisa se preocupar com essa parte\rx \u0026lt;- as.character(round(c(\rrunif(25, 100, 124),\rrunif(25, 201, 230),\rrunif(25, 301, 312),\rrunif(25, 401, 499)\r)))\r# Como voc√™ transformaria esse vetor em n√∫mero?\rx\r ## [1] \u0026quot;115\u0026quot; \u0026quot;113\u0026quot; \u0026quot;119\u0026quot; \u0026quot;121\u0026quot; \u0026quot;118\u0026quot; \u0026quot;116\u0026quot; \u0026quot;100\u0026quot; \u0026quot;108\u0026quot; \u0026quot;113\u0026quot; \u0026quot;119\u0026quot; \u0026quot;121\u0026quot; \u0026quot;103\u0026quot;\r## [13] \u0026quot;116\u0026quot; \u0026quot;111\u0026quot; \u0026quot;111\u0026quot; \u0026quot;115\u0026quot; \u0026quot;114\u0026quot; \u0026quot;102\u0026quot; \u0026quot;116\u0026quot; \u0026quot;103\u0026quot; \u0026quot;120\u0026quot; \u0026quot;115\u0026quot; \u0026quot;123\u0026quot; \u0026quot;103\u0026quot;\r## [25] \u0026quot;119\u0026quot; \u0026quot;230\u0026quot; \u0026quot;228\u0026quot; \u0026quot;225\u0026quot; \u0026quot;214\u0026quot; \u0026quot;225\u0026quot; \u0026quot;206\u0026quot; \u0026quot;207\u0026quot; \u0026quot;208\u0026quot; \u0026quot;202\u0026quot; \u0026quot;210\u0026quot; \u0026quot;229\u0026quot;\r## [37] \u0026quot;204\u0026quot; \u0026quot;207\u0026quot; \u0026quot;215\u0026quot; \u0026quot;218\u0026quot; \u0026quot;223\u0026quot; \u0026quot;221\u0026quot; \u0026quot;205\u0026quot; \u0026quot;214\u0026quot; \u0026quot;220\u0026quot; \u0026quot;227\u0026quot; \u0026quot;202\u0026quot; \u0026quot;224\u0026quot;\r## [49] \u0026quot;214\u0026quot; \u0026quot;201\u0026quot; \u0026quot;305\u0026quot; \u0026quot;310\u0026quot; \u0026quot;309\u0026quot; \u0026quot;310\u0026quot; \u0026quot;305\u0026quot; \u0026quot;305\u0026quot; \u0026quot;309\u0026quot; \u0026quot;303\u0026quot; \u0026quot;312\u0026quot; \u0026quot;310\u0026quot;\r## [61] \u0026quot;303\u0026quot; \u0026quot;302\u0026quot; \u0026quot;305\u0026quot; \u0026quot;303\u0026quot; \u0026quot;304\u0026quot; \u0026quot;306\u0026quot; \u0026quot;309\u0026quot; \u0026quot;304\u0026quot; \u0026quot;303\u0026quot; \u0026quot;309\u0026quot; \u0026quot;306\u0026quot; \u0026quot;311\u0026quot;\r## [73] \u0026quot;306\u0026quot; \u0026quot;307\u0026quot; \u0026quot;310\u0026quot; \u0026quot;417\u0026quot; \u0026quot;477\u0026quot; \u0026quot;470\u0026quot; \u0026quot;493\u0026quot; \u0026quot;414\u0026quot; \u0026quot;446\u0026quot; \u0026quot;402\u0026quot; \u0026quot;423\u0026quot; \u0026quot;476\u0026quot;\r## [85] \u0026quot;432\u0026quot; \u0026quot;490\u0026quot; \u0026quot;499\u0026quot; \u0026quot;429\u0026quot; \u0026quot;414\u0026quot; \u0026quot;455\u0026quot; \u0026quot;409\u0026quot; \u0026quot;462\u0026quot; \u0026quot;447\u0026quot; \u0026quot;483\u0026quot; \u0026quot;458\u0026quot; \u0026quot;471\u0026quot;\r## [97] \u0026quot;402\u0026quot; \u0026quot;423\u0026quot; \u0026quot;464\u0026quot; \u0026quot;483\u0026quot;\r  Explore as contagens da vari√°vel rincome em gss_cat, ela ficaria bem representada num gr√°fico? De qual tipo?\n  Qual a religi√£o mais comum em gss_cat? Qual o partido (partyid) mais popular?\n  A que religi√£o se refere a vari√°vel denom? Voc√™ pode descobrir isso fazendo uma tabela de contagens?\n  Como voc√™ poderia diminuir o n√∫mero de categorias da vari√°vel rincome do banco gss_cat?\n  ","date":1621728000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621728000,"objectID":"fa0304036676bc16efc6e61759597fd7","permalink":"https://laddem.github.io/courses/tidyverse/dia2/","publishdate":"2021-05-23T00:00:00Z","relpermalink":"/courses/tidyverse/dia2/","section":"courses","summary":"Opera√ß√µes em vari√°veis e bancos de dados Hoje vamos apresentar dois pacotes com finalidades mais espec√≠ficas para trabalhar com vari√°veis de tipo caractere e fator e um pacote super importante para as opera√ß√µes com bancos de dados.","tags":null,"title":"stringr, forcats e dplyr","type":"book"},{"authors":null,"categories":null,"content":"O pacote ggplot2 e a \u0026ldquo;gram√°tica dos gr√°ficos\u0026rdquo; Ainda me lembro da primeira vez que li o terceiro cap√≠tulo de R for Data Science em que o conceito de visualiza√ß√£o de dados √© apresentado junto com a ideia de data.frame e o c√≥digo utilizado para gerar o gr√°fico. Acho que se o termo sobrecarga infromacional n√£o existisse, eu teria inventado ele na hora.\nAnedotas a parte, n√£o √© culpa do autor. O livro pressup√µe um certo conhecimento pr√©vio que eu n√£o tinha quando o li pela primeira vez. Imagino que a maioria de voc√™s j√° viu gr√°ficos na vida e at√© construiu um ou dois deles usando esse ou outros softwares estat√≠sticos. O que talvez nem todos tenham claro na mente √© que os gr√°ficos s√£o uma codifica√ß√£o num sistema de coordenadas das informa√ß√µes presentes em um banco de dados atrav√©s de escalas. Vamos destrinchar um pouco melhor isso:\nSuponha que voc√™ tenha o banco de dados mpg, presente na biblioteca ggplot2.\nlibrary(ggplot2)\rmpg\r ## # A tibble: 234 x 11\r## manufacturer model displ year cyl trans drv cty hwy fl class\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 audi a4 1.8 1999 4 auto(l~ f 18 29 p comp~\r## 2 audi a4 1.8 1999 4 manual~ f 21 29 p comp~\r## 3 audi a4 2 2008 4 manual~ f 20 31 p comp~\r## 4 audi a4 2 2008 4 auto(a~ f 21 30 p comp~\r## 5 audi a4 2.8 1999 6 auto(l~ f 16 26 p comp~\r## 6 audi a4 2.8 1999 6 manual~ f 18 26 p comp~\r## 7 audi a4 3.1 2008 6 auto(a~ f 18 27 p comp~\r## 8 audi a4 quat~ 1.8 1999 4 manual~ 4 18 26 p comp~\r## 9 audi a4 quat~ 1.8 1999 4 auto(l~ 4 16 25 p comp~\r## 10 audi a4 quat~ 2 2008 4 manual~ 4 20 28 p comp~\r## # ... with 224 more rows\r De posse desse banco, voc√™ gostaria de construir um gr√°fico relacionando a efici√™ncia do combust√≠vel de um carro (hwy) com o seu peso (displ). S√°bio e malandro no ggplot2, voc√™ escreve o c√≥digo a seguir:\nggplot(mpg, aes(displ,hwy, color = class)) +\rgeom_point()\r Mas fica a d√∫vida: que escolhas foram feitas no momento de traduzir a minha inten√ß√£o de produzir um diagrama de dispers√£o (scatterplot) do peso com o consumo de gasolina para a representa√ß√£o gr√°fica diante de n√≥s? Que unidades de medidas est√£o dispostas nos eixos X e Y? Qual o sistema de coordenadas no qual isto foi representado? Quem define os limites de in√≠cio e fim de cada eixo? Como cada ponto recebeu a sua cor? Essas perguntas podem parecer √≥bvias ou tontas, dependendo da perspectiva e da experi√™ncia do usu√°rio, mas elas s√£o centrais para entender como construir e modificar gr√°ficos no ggplot2.\nO pacote √© inspirado pela Gram√°tica dos Gr√°ficos, e procura decompor o processo de produ√ß√£o de gr√°ficos em uma sequ√™ncia de camadas que v√£o se sobrepondo at√© chegar no objeto desejado.\n a camada dos dados e do mapeamento est√©tico (que vari√°veis v√£o em quais eixos/escalas) a camada dos objetos geom√©tricos (pontos, linhas, barras, etc.) a camada das escalas (natural? logar√≠tmica? escala de cores?) a camada das facetas (mini gr√°ficos separados por alguma caracter√≠stica) a camada das transforma√ß√µes estat√≠sticas (distribui√ß√µes de probabilidade, contagens, propor√ß√µes, etc.) o sistema de coordenadas (cartesiano? polar?)  Obviamente, nem todo gr√°fico possui essa complexidade, e na verdade, a maioria dos gr√°ficos que fazemos se encaixa num pequeno subgrupo de todas essas especifica√ß√µes, ent√£o porque toda essa complexidade?\nPorque n√£o? Em primeiro lugar, se voc√™ est√° produzindo visualiza√ß√µes simples que cumprem seu prop√≥sito, voc√™ n√£o precisa se preocupar com quase nada disso, os padr√µes do ggplot2, via de regra, se encaixam perfeitamente na maioria dos problemas e, em segundo lugar, se voc√™ sentir a necessidade de ir mais fundo e produzir visualiza√ß√µes mais complexas, as mesmas ferramentas que voc√™ j√° conhece est√£o a sua disposi√ß√£o.\nTr√™s gr√°ficos para entender a mec√¢nica do ggplot2 Scatterplots Voltemos para o nosso gr√°fico original, vamos decomp√¥-lo em suas camadas como se estiv√©ssemos construindo ele passo-a-passo:\n# Primeiro, a camada dos dados e mapeamentos est√©ticos\rggplot(\r# Dados\rdata = mpg,\r# Que vari√°vel vai em que eixo\rmapping = aes(x = displ, y = hwy)\r)\r Examinando a sa√≠da, vemos que ggplot desenhou um canvas com nossas vari√°veis, mas ainda nenhum objeto geom√©trico. Tudo bem, adicionamos (+) uma camada de objetos geom√©tricos, no caso, pontos.\n# Objetos geom√©tricos come√ßam com \u0026quot;geom_\u0026quot;\rggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + # adicionamos\rgeom_point()\r Agora, nosso gr√°fico j√° tem uma cara de diagrama de dispers√£o. Mas ainda n√£o tem as cores das classes de autom√≥vel. Tudo bem, voltamos para a primeira camada e informamos que queremos um terceiro mapeamento est√©tico.\n# A cor √© mapeada a vari√°vel class\rggplot(data = mpg, mapping = aes(\rx = displ, y = hwy,\rcolor = class) # novo mapeamento est√©tico\r) + # adicionamos\rgeom_point()\r Ok, chegamos no gr√°fico original. Mas como podem entender melhor as outras camadas? Vamos pensar, por exemplo, que talvez queiramos trabalhar a vari√°vel hwy numa escala logar√≠tmica. Poder√≠amos transformar a vari√°vel original, claro, mas o ggplot2 nos permite especificar as transforma√ß√µes diretamente nas escalas do gr√°fico!\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +\rgeom_point() + # adicionando uma nova \u0026quot;camada\u0026quot;\rscale_y_continuous(trans = \u0026quot;log\u0026quot;)\r Mas voc√™, leitor, n√£o ficou satisfeito. Voc√™ queria era transformar a vari√°vel displ em ra√≠z quadrada. Tudo bem:\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +\rgeom_point() +\rscale_x_continuous(trans = \u0026quot;sqrt\u0026quot;) # especificamos a transforma√ß√£o na escala de x\r Outro leitor n√£o estava interessado nas escalas dos eixos x ou y, que s√£o cont√≠nuas nesse caso, mas sim na sele√ß√£o de cores utilizadas para representar a escala das cores. Por ser um leitor conhecedor das formas de defici√™ncia visual crom√°tica, ele optou pelas paletas de cores do Colorbrewer:\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +\rgeom_point() +\rscale_color_brewer(palette = \u0026quot;Set1\u0026quot;) # transforma√ß√£o da escala de cores\r Um ge√≥grafo entrou na conversa e disse que o sistema cartesiano de coordenadas estava iludindo os leitores a pensar que a rela√ß√£o entre peso e consumo de combust√≠vel estava distorcida pelas diferen√ßas entre as unidades de medida das vari√°veis, produzida pelo sistema cartesiano de coordenadas, ent√£o ele sugeriu que us√°ssemos um sistema de coordenadas fixas:\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +\rgeom_point() +\rscale_color_brewer(palette = \u0026quot;Set1\u0026quot;) +\rcoord_fixed()\r Ficou horr√≠vel, esse ge√≥grafo n√£o sabe nada. Como recompensa pela sua ignor√¢ncia, agora ele ocupa um cargo no primeiro escal√£o do Minist√©rio da Sa√∫de.\nOutro pesquisador estava interessado em visualizar as rela√ß√µes entre consumo, peso e classe, mas levando em considera√ß√£o o fabricante do ve√≠culo, ent√£o, ele sugeriu que constru√≠ssemos um gr√°fico para cada. Voc√™, que √© pregui√ßoso, usou a capacidade do ggplot2 de dividir gr√°ficos atrav√©s da introdu√ß√£o de uma camada de facets.\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +\rgeom_point() +\rscale_color_brewer(palette = \u0026quot;Set1\u0026quot;) + # adicionamos mais uma camada\rfacet_wrap(~manufacturer) # de facetas\r Agora, muito satisfeitos com o resultado do nosso trabalho, resolvemos incluir o gr√°fico numa publica√ß√£o, mas do jeito que est√°, n√£o d√°. Ent√£o adicionamos mais algumas camadas para torn√°-lo apresent√°vel.\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +\rgeom_point() +\rscale_color_brewer(palette = \u0026quot;Set1\u0026quot;) + facet_wrap(~manufacturer) +\r# Colocamos os nomes nos eixos\rlabs(title = \u0026quot;Rela√ß√£o entre peso e economia de combust√≠vel de autom√≥veis\u0026quot;,\rsubtitle = \u0026quot;Separado por categoria e fabricante\u0026quot;,\rx = \u0026quot;Peso do ve√≠culo em toneladas\u0026quot;,\ry = \u0026quot;Consumo em milhas por gal√£o de 3,5l\u0026quot;,\rcolor = \u0026quot;Categoria\u0026quot;,\rcaption = \u0026quot;Fonte: Ag√™ncia de Prote√ß√£o Ambiental Estadunidense.\u0026quot;) +\r# Escolhemos um tema bonito\rtheme_light() +\r# Mudamos a posi√ß√£o da legenda, pra ficar mais jeitozinho\rtheme(legend.position = \u0026quot;bottom\u0026quot;)\r Pronto. Mam√£e vai ficar orgulhosa.\nBrincadeiras a parte, entendendo um pouco melhor a gram√°tica do gr√°fico, podemos construir nossas visualiza√ß√µes passo a passo, at√© chegar no resultado desejado.\nLineplots O segundo exemplo que quero mostrar pra voc√™s √© a constru√ß√£o de gr√°ficos com linhas. Eles s√£o interessantes porque d√£o bastante dor de cabe√ßa pra quem est√° come√ßando. Vamos continuar brincando com o mpg.\nAgora que eu fiz meu diagrama de dispers√£o, estou interessado em come√ßar um processo de modelagem, mas primeiro quero ter uma no√ß√£o visual da rela√ß√£o entre as vari√°veis.\nggplot(mpg, aes(displ, hwy)) +\rgeom_point() +\rgeom_smooth()\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r geom_smooth ajusta um modelo aos dados e desenha a linha com os valores preditos. Agora que temos dois objetos geom√©tricos, talvez seja interessante ver o que acontece se eu colocar as cores das classes.\nggplot(mpg, aes(displ, hwy, color = class)) +\rgeom_point() +\rgeom_smooth(se = FALSE)\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r Veja que ele fez o poss√≠vel para aplicar as escalas nos dois objetos geom√©tricos. Eu pedi para geom_smooth tirar os intervalos de confian√ßa para melhorar a visibilidade. Mas e seu eu quisesse ver a cor dos pontos, mas manter a linha de tend√™ncia geral? Voc√™ pode especificar mapeamentos est√©ticos gerais (na primeira camada) ou mapeamentos est√©ticos locais (dentro de cada camada geom√©trica).\nggplot(mpg, aes(displ, hwy)) + # mapeamentos gerais, se aplicam a todos os objetos\rgeom_point(aes(color = class)) + # mapeamento local, s√≥ se aplica aqui\rgeom_smooth(se = FALSE)\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r Ok, mas e se eu quisesse um modelo linear ao inv√©s de um \u0026ldquo;Smoother de Loess\u0026rdquo;?\nggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class)) +\rgeom_smooth(method = lm)\r ## `geom_smooth()` using formula 'y ~ x'\r N√£o vou entrar muito nos argumentos de cada objeto geom√©trico e fun√ß√£o, voc√™s podem aprender isso na pr√°tica olhando a documenta√ß√£o das fun√ß√µes que s√£o do interesse de voc√™s. ?geom_smooth para ver todas as possibilidades. Uma dica boa √© usar geom_smooth para verificar intera√ß√µes entre vari√°veis num√©ricas e fatores.\nggplot(mpg, aes(displ, hwy, color = factor(cyl))) + geom_point() +\rgeom_smooth(method = lm)\r ## `geom_smooth()` using formula 'y ~ x'\r Ok, mas e se temos um gr√°fico de linhas mais tradicional, tipo uma s√©rie hist√≥rica?\neconomics\r ## # A tibble: 574 x 6\r## date pce pop psavert uempmed unemploy\r## \u0026lt;date\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1967-07-01 507. 198712 12.6 4.5 2944\r## 2 1967-08-01 510. 198911 12.6 4.7 2945\r## 3 1967-09-01 516. 199113 11.9 4.6 2958\r## 4 1967-10-01 512. 199311 12.9 4.9 3143\r## 5 1967-11-01 517. 199498 12.8 4.7 3066\r## 6 1967-12-01 525. 199657 11.8 4.8 3018\r## 7 1968-01-01 531. 199808 11.7 5.1 2878\r## 8 1968-02-01 534. 199920 12.3 4.5 3001\r## 9 1968-03-01 544. 200056 11.7 4.1 2877\r## 10 1968-04-01 544 200208 12.3 4.6 2709\r## # ... with 564 more rows\r Podemos criar um gr√°fico de linhas tendo como base a data (date) e alguma das vari√°veis registradas, como a taxa de desemprego.\nggplot(economics, aes(x = date, y = uempmed)) +\rgeom_line()\r Ou o consumo em bilh√µes de d√≥lares\nggplot(economics, aes(x = date, y = pce)) +\rgeom_line()\r Ou a popula√ß√£o\nggplot(economics, aes(x = date, y = pop)) +\rgeom_line()\r Ok, mas eu quero comparar visualmente o que ocorre com uma vari√°vel quando a outra muda. Podemos recorrer ao que aprendemos sobre mapeamentos est√©ticos globais e locais.\nggplot(economics, aes(x = date)) +\rgeom_line(aes(y = uempmed)) +\rgeom_line(aes(y = pce)) +\rgeom_line(aes(y = pop))\r Ficou meio ruim, porque as vari√°vel tem grandezas distintas. Podemos tentar resolver esse problema aplicando transforma√ß√µes na vari√°vel idade, mas meio que pra qualquer lugar onde caminhos, batemos numa parede ou noutra. Esse tipo de solu√ß√£o √© muito frequente entre pessoas que vem do base pro ggplot2, porque no base estamos acostumado a ideia de adicionar mais objetos geom√©tricos ao nosso gr√°fico original adicionando invoca√ß√µes √† fun√ß√µes como lines ou text. Por√©m, a solu√ß√£o preferida no tidyverse √© aplicar uma transforma√ß√£o no banco original de tal forma que as nossas vari√°veis num√©ricas caiam todas num par que especifica o nome da vari√°vel | e o valor dela.\nlibrary(tidyr)\reconomics %\u0026gt;% pivot_longer(cols = -date,\rnames_to = \u0026quot;variavel\u0026quot;,\rvalues_to = \u0026quot;valor\u0026quot;)\r ## # A tibble: 2,870 x 3\r## date variavel valor\r## \u0026lt;date\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1967-07-01 pce 507. ## 2 1967-07-01 pop 198712 ## 3 1967-07-01 psavert 12.6\r## 4 1967-07-01 uempmed 4.5\r## 5 1967-07-01 unemploy 2944 ## 6 1967-08-01 pce 510. ## 7 1967-08-01 pop 198911 ## 8 1967-08-01 psavert 12.6\r## 9 1967-08-01 uempmed 4.7\r## 10 1967-08-01 unemploy 2945 ## # ... with 2,860 more rows\r Talvez n√£o fique imediatamente claro para todos porque eu optei por esta solu√ß√£o, mas talvez essa pr√≥xima figura fale mais que mil palavras.\neconomics %\u0026gt;% pivot_longer(cols = -date,\rnames_to = \u0026quot;variavel\u0026quot;,\rvalues_to = \u0026quot;valor\u0026quot;) %\u0026gt;% ggplot(aes(date, valor)) +\rgeom_line() +\rfacet_wrap(~variavel, scales = \u0026quot;free_y\u0026quot;, ncol = 1)\r A √™nfase em usar tidy data no tidyverse decorre do fato de que todos os pacotes s√£o programados para usar a forma de organiza√ß√£o do banco como uma alavanca para facilitar a an√°lise de dados. Vejam esta outra pipeline.\n# Como vamos fazer algumas transforma√ß√µes nos dados, vamos carregar o dplyr aqui\rlibrary(dplyr)\r ## ## Attaching package: 'dplyr'\r ## The following objects are masked from 'package:stats':\r## ## filter, lag\r ## The following objects are masked from 'package:base':\r## ## intersect, setdiff, setequal, union\r economics %\u0026gt;% pivot_longer(cols = -date,\rnames_to = \u0026quot;variavel\u0026quot;,\rvalues_to = \u0026quot;valor\u0026quot;) %\u0026gt;% filter(variavel %in% c(\u0026quot;psavert\u0026quot;, \u0026quot;uempmed\u0026quot;)) %\u0026gt;% ggplot(aes(date, valor, color = variavel, shape = variavel)) +\rgeom_line()\r E agora vejam um dos erros mais comuns de quem est√° come√ßando:\neconomics %\u0026gt;% pivot_longer(cols = -date,\rnames_to = \u0026quot;variavel\u0026quot;,\rvalues_to = \u0026quot;valor\u0026quot;) %\u0026gt;% filter(variavel %in% c(\u0026quot;psavert\u0026quot;, \u0026quot;uempmed\u0026quot;)) %\u0026gt;% ggplot(aes(date, valor)) +\rgeom_line()\r Ao n√£o especificar uma separa√ß√£o entre grupos, o ggplot2 n√£o interpreta meus dados! Ele simplesmente conecta as observa√ß√µes mais ou menos na ordem em que elas aparecem no eixo x. Para resolver esse problema, precisamos especificar grupos! Seja indiretamente, atrav√©s de uma escala de cores, formas ou tipos de linha, seja diretamente atrav√©s da est√©tica groups.\neconomics %\u0026gt;% pivot_longer(cols = -date,\rnames_to = \u0026quot;variavel\u0026quot;,\rvalues_to = \u0026quot;valor\u0026quot;) %\u0026gt;% filter(variavel %in% c(\u0026quot;psavert\u0026quot;, \u0026quot;uempmed\u0026quot;)) %\u0026gt;% ggplot(aes(date, valor, group = variavel)) +\rgeom_line()\r economics %\u0026gt;% pivot_longer(cols = -date,\rnames_to = \u0026quot;variavel\u0026quot;,\rvalues_to = \u0026quot;valor\u0026quot;) %\u0026gt;% filter(variavel %in% c(\u0026quot;psavert\u0026quot;, \u0026quot;uempmed\u0026quot;)) %\u0026gt;% ggplot(aes(date, valor, color = variavel, linetype = variavel)) +\rgeom_line()\r Legal n√©?\nBarcharts Para terminar e ilustrar alguns exemplos de transforma√ß√£o estat√≠stica, vamos fazer alguns gr√°ficos de barras usando o diamonds, um banco de dados para fazer a alegria das piores pessoas na hist√≥ria da humanidade.\ndiamonds\r ## # A tibble: 53,940 x 10\r## carat cut color clarity depth table price x y z\r## \u0026lt;dbl\u0026gt; \u0026lt;ord\u0026gt; \u0026lt;ord\u0026gt; \u0026lt;ord\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43\r## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31\r## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31\r## 4 0.29 Premium I VS2 62.4 58 334 4.2 4.23 2.63\r## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75\r## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48\r## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47\r## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53\r## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49\r## 10 0.23 Very Good H VS1 59.4 61 338 4 4.05 2.39\r## # ... with 53,930 more rows\r Que tal um gr√°fico b√°sico, do n√∫mero de diamantes de acordo com a qualidade de seu corte (cut). Olhando a ajuda do ?geom_bar voc√™ vai na certeza de que voc√™ entendeu a aula e escreve o seguinte c√≥digo:\nggplot(diamonds, aes(x = cut, color = cut)) +\rgeom_bar()\r E agora, voc√™ fica olhando pro seu computador com cara de tacho. O que aconteceu? Bom, no caso de geoms com duas dimens√µes, podem existir casos em que voc√™ quer dar mapeamentos est√©ticos distintos para as bordas e para o conte√∫do deles. Por isso, existem as est√©ticas color e fill. Voc√™ pode pensar nelas como a casca do p√£o e o recheio.\nggplot(diamonds, aes(x = cut, fill = cut)) +\rgeom_bar()\r Mas, voc√™ ainda n√£o est√° satisfeito. Pela sua ampla experi√™ncia com uma das ind√∫strias mais sangrentas e retr√≥gadas do planeta voc√™ entende que a qualidade do corte n√£o √© o suficiente para determinar o valor de um diamante, ent√£o voc√™ quer ver a distribui√ß√£o tamb√©m pelo n√≠vel de transpar√™ncia do diamante, codificado na vari√°vel clarity.\nggplot(diamonds, aes(x = cut, fill = clarity)) +\rgeom_bar()\r Esse √© um primeiro passo interessante, e se tivessemos apenas duas ou tr√™s categorias, a gente poderia parar por a√≠. Mas no geral, para facilitar compara√ß√µes, queremos poder controlar o posicionamento das barras. Isso √© poss√≠vel ajustando o argumento position dos geoms onde isso √© necess√°rio.\n# O padr√£o\rggplot(diamonds, aes(x = cut, fill = clarity)) +\rgeom_bar(position = \u0026quot;stack\u0026quot;)\r # O certo\rggplot(diamonds, aes(x = cut, fill = clarity)) +\rgeom_bar(position = \u0026quot;dodge\u0026quot;)\r # Empilhadas a 100%, para facilitar compara√ß√µes entre categorias\rggplot(diamonds, aes(x = cut, fill = clarity)) +\rgeom_bar(position = \u0026quot;fill\u0026quot;)\r Pode parecer jocoso, mas em 99% dos casos, o correto √© voc√™ usar barras lado-a-lado, assim voc√™ visualmente pode comparar as categorias simplesmente comparando a altura das barras. Da pr√≥xima vez que voc√™ pensar em construir um gr√°fico de pizza, desista e fa√ßa um gr√°fico de barras com position = \u0026quot;dodge\u0026quot;. Seus leitores v√£o agradecer.\nEsse exemplo tamb√©m √© legal para gente olhar um pouco para a parte de transforma√ß√µes estat√≠sticas nas vari√°veis:\ndiamonds2 \u0026lt;- diamonds %\u0026gt;% count(cut) %\u0026gt;% mutate(prop = n/sum(n))\rdiamonds2 %\u0026gt;% ggplot() +\rgeom_bar(aes(x = cut, y = prop), stat = \u0026quot;identity\u0026quot;)\r Por padr√£o, geom_bar j√° faz o primeiro passo e utiliza as contagens (stat_count) para produzir o gr√°fico de barras, mas eu posso mudar esse comportamento atrav√©s do argumento stat. Eu tamb√©m posso querer mostrar propr√ß√µes ao inv√©s de contagens de outra forma mais sucinta.\nggplot(diamonds, aes(x = cut, # ao fazer isso, eu mudo o padr√£o de contagens para propor√ß√µes.\ry = stat(prop), # preciso especificar o grupo, se n√£o todas as barras v√£o a 100%.\rgroup = 1)) +\rgeom_bar()\r Voc√™ pode construir seus gr√°ficos a partir de transforma√ß√µes estat√≠sticas ao inv√©s de objetos geom√©tricos:\nggplot(data = diamonds) + stat_summary(\rmapping = aes(x = cut, y = depth),\rfun.min = min,\rfun.max = max,\rfun = median\r)\r As transforma√ß√µes estat√≠sticas come√ßam sempre com stat_ e cada uma tem um objeto geom√©trico padr√£o, que voc√™ pode mudar com o argumento geom.\nggplot(data = diamonds) + stat_summary(\rmapping = aes(x = cut, y = depth),\rfun.min = min,\rfun.max = max,\r# N√£o d√° pra mostrar a mediana com barras de erro, sorry\r#fun = median,\rgeom = \u0026quot;errorbar\u0026quot;\r)\r E era basicamente isso que eu tinha a dizer sobre como construir gr√°ficos no ggplot2! Abaixo, uma se√ß√£o com alguns detalhes para quem tiver interesse nessa parte de embelezamento dos gr√°ficos.\nPerfumaria Essa se√ß√£o pretende introduzir um pouco uma parte de customiza√ß√£o dos gr√°ficos. Frequentemente, as publica√ß√µes de regras mais estritas sobre formatos, fontes, temas, etc. As op√ß√µes padr√£o do ggplot2 podem n√£o se acomodar, ent√£o, cabe a n√≥s ajeitar essa reta final.\nT√≠tulos e r√≥tulos A melhor maneira de ajustar t√≠tulos e r√≥tulos √© atrav√©s de labs, porque voc√™ resolve tudo em uma s√≥ invoca√ß√£o. Mas tamb√©m h√° uma fun√ß√£o ggtitle. Com ela, √© poss√≠vel setar apenas t√≠tulo e subt√≠tulo.\nggplot(mpg, aes(displ, hwy, color = class)) +\rgeom_point() +\rggtitle(\u0026quot;T√≠tulo do gr√°fico\u0026quot;, \u0026quot;Subt√≠tulo do gr√°fico\u0026quot;)\r A maioria das op√ß√µes de customiza√ß√£o mais fina est√° na camada theme. Internamente, cada elemento do gr√°fico √© controlado por uma fun√ß√£o element_, por exemplo, element_text desenha textos e recebe argumentos relativos a isso, como fam√≠lia da fonte, tamanho, cor, etc.\nAli, voc√™ tem um controle mais direto sobre a constru√ß√£o do gr√°fico. No que diz respeito aos r√≥tulos, podemos mudar a fonte do t√≠tulo.\nggplot(mpg, aes(displ, hwy, color = class)) +\rgeom_point() +\rggtitle(\u0026quot;T√≠tulo do gr√°fico\u0026quot;, \u0026quot;Subt√≠tulo do gr√°fico\u0026quot;) +\r# Family √© meio complicado de mudar, mas voc√™ pode escolher serif, sans ou mono\rtheme(plot.title = element_text(family = \u0026quot;serif\u0026quot;, face = \u0026quot;bold\u0026quot;, colour = \u0026quot;red\u0026quot;),\rplot.subtitle = element_text(family = \u0026quot;mono\u0026quot;, face = \u0026quot;italic\u0026quot;, color = \u0026quot;forestgreen\u0026quot;))\r Usando uma s√≠ntaxe similar e os argumentos da fun√ß√£o element_text, voc√™ pode mudar qual outro elemento textual do gr√°fico.\nEixos Continuando o nosso frankenstein, podemos fazer altera√ß√µes nos eixos, como remover peda√ßos de um eixo, modificar sua forma, seu √¢ngulo e ajustar sua posi√ß√£o.\nggplot(mpg, aes(displ, hwy, color = class)) +\rgeom_point() +\rggtitle(\u0026quot;T√≠tulo do gr√°fico\u0026quot;, \u0026quot;Subt√≠tulo do gr√°fico\u0026quot;) +\r# Family √© meio complicado de mudar, mas voc√™ pode escolher serif, sans ou mono\rtheme(plot.title = element_text(family = \u0026quot;serif\u0026quot;, face = \u0026quot;bold\u0026quot;, colour = \u0026quot;red\u0026quot;),\rplot.subtitle = element_text(family = \u0026quot;mono\u0026quot;, face = \u0026quot;italic\u0026quot;, color = \u0026quot;forestgreen\u0026quot;),\r# voc√™ pode remover peda√ßos inteiros do gr√°fico com \u0026quot;element_blank()\u0026quot;\raxis.ticks.y = element_blank(),\raxis.text.y = element_blank(),\raxis.title.y = element_blank(),\r# voc√™ pode mudar a orienta√ß√£o, angulo, posi√ß√£o e at√© formato de elementos\raxis.title = element_text(angle = 90, hjust = 1),\raxis.text.x = element_text(angle = 45, vjust = 1),\raxis.ticks.x = element_line(\rcolour = \u0026quot;royalblue3\u0026quot;,\rarrow = grid::arrow(angle = 45, length = unit(0.5, \u0026quot;cm\u0026quot;), ends = \u0026quot;first\u0026quot;, type = \u0026quot;closed\u0026quot;))\r)\r Realmente, o c√©u √© o limite e voc√™ pode deixar o seu gr√°fico t√£o horr√≠vel quanto voc√™ quiser.\nLegendas Legendas no ggplot2 s√£o controladas em alguns lugares diferentes. Elas s√£o tratadas como guias (guides) no sentido de que s√£o guias para o leitor. Vamos pegar outra vari√°vel de cores, para poder brincar com diferentes tipos de legenda.\nggplot(mpg, aes(displ, hwy, color = cyl)) +\rgeom_point()\r Por padr√£o, ele entende cilindros como num√©rico e faz uma barra de cores cont√≠nua. Mas eu quero uma legenda!\n# Jeito 1 - Simples e r√°pido\rggplot(mpg, aes(displ, hwy, color = cyl)) +\rgeom_point() +\rguides(color = \u0026quot;legend\u0026quot;)\r # Jeito 2 - Posso mudar detalhes!\rggplot(mpg, aes(displ, hwy, color = cyl)) +\rgeom_point() +\rguides(color = guide_legend(title = \u0026quot;Cilindrossss\u0026quot;,\rtitle.position = \u0026quot;right\u0026quot;,\rlabel.position = \u0026quot;bottom\u0026quot;,\rdirection = \u0026quot;horizontal\u0026quot;))\r # Jeito 3 - Mexendo diretamente nas escalas\rggplot(mpg, aes(displ, hwy, color = cyl)) +\rgeom_point() +\r# Minha escala de cores preferida\rscale_color_viridis_c(guide = \u0026quot;legend\u0026quot;, option = \u0026quot;B\u0026quot;)\r # Jeito 3 - de novo, mas agora usando a especifica√ß√£o mais completa do guia\rggplot(mpg, aes(displ, hwy, color = cyl)) +\rgeom_point() +\r# Minha escala de cores preferida\rscale_color_viridis_c(\rguide = guide_legend(title = \u0026quot;Cilindrossss\u0026quot;,\rtitle.position = \u0026quot;right\u0026quot;,\rlabel.position = \u0026quot;bottom\u0026quot;,\rdirection = \u0026quot;horizontal\u0026quot;), option = \u0026quot;B\u0026quot;)\r Em qualquer lugar onde voc√™ possa especificar guides, voc√™ pode passar o valor FALSE para remover a legenda.\n# Na camada \u0026quot;guides()\u0026quot;\rggplot(mpg, aes(displ, hwy, color = cyl, size = cyl)) +\rgeom_point() +\rguides(color = FALSE)\r # Na pr√≥pria escala\rggplot(mpg, aes(displ, hwy, color = cyl, size = cyl)) +\rgeom_point() +\rscale_size(guide = FALSE)\r # B√¥nus = no tema, mas a√≠ voc√™ remove todas\rggplot(mpg, aes(displ, hwy, color = cyl, size = cyl)) +\rgeom_point() +\rtheme(legend.position = \u0026quot;none\u0026quot;)\r Escalas J√° dei uma palhinha de editar escalas, antes, ent√£o aqui vai um pouco mais de detalhe:\nggplot(mpg, aes(displ, hwy, color = cyl, size = cyl)) +\rgeom_point()\r # Mudar as cores manualmente\rcores \u0026lt;- c(\u0026quot;red\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;purple\u0026quot;, \u0026quot;tomato\u0026quot;, \u0026quot;wheat2\u0026quot;)\rggplot(mpg, aes(displ, hwy, color = class, size = cyl)) +\rgeom_point() +\rscale_color_manual(values = cores)\r # Mudar os tamanhos\rggplot(mpg, aes(displ, hwy, color = class, size = cyl)) +\rgeom_point() +\rscale_color_manual(values = cores) +\r# scale_radius para fazer proprcional ao raio\rscale_radius(range = c(3,6))\r ggplot(mpg, aes(displ, hwy, color = class, size = cyl)) +\rgeom_point() +\rscale_color_manual(values = cores) +\r# scale_size para fazer proprcional a √°rea\rscale_size(range = c(2,4))\r √â poss√≠vel aplicar transforma√ß√µes na vari√°vel diretamente na escala, mudar o n√∫mero de breaks e especificar labels e alterar os limites do gr√°fico manualmente.\nggplot(mpg, aes(displ, hwy, color = class, size = cyl)) +\rgeom_point() +\rscale_x_continuous(trans = \u0026quot;sqrt\u0026quot;, name = \u0026quot;Peso\u0026quot;) +\rscale_y_continuous(\rname = \u0026quot;Consumo (rodovia)\u0026quot;,\rlimits = c(0, 50),\rbreaks = c(10, 20, 30, 40, 50), labels = c(\u0026quot;fogo no clima\u0026quot;, \u0026quot;aquecimento global\u0026quot;, \u0026quot;caldeira planet√°ria\u0026quot;, \u0026quot;deixa pra pr√≥xima gera√ß√£o\u0026quot;, \u0026quot;desastre em c√¢mera lenta\u0026quot;))\r Cada escala vai ter argumentos espec√≠ficos que fazem sentido em seu pr√≥prio contexto. Escalas cont√≠nuas tem argumentos para transforma√ß√£o estat√≠stica, escalas discretas n√£o aceitam argumentos cont√≠nuos e etc.\nIsto encerra nossa parte de ggplot2, que tal uns exerc√≠cios pra esquentar?\nExerc√≠cios  O que tem de errado no c√≥digo abaixo? Por que os pontos n√£o ficaram azuis?  ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = \u0026quot;blue\u0026quot;))\r  Utilizando o banco mpg, fa√ßa o diagrama de dispers√£o de displ por hwy e mapeie a cor para class, o tamanho para cyl e a forma para manufacturer. Como esses atributos est√©ticos se comportam diferente para vari√°veis categ√≥ricas vs cont√≠nuas?\n  Utilizando o diamonds, crie um diagrama de dispers√£o que relacione carat com price. Explore algumas outras vari√°veis utilizando escalas de cor para ver se voc√™ identifica algum padr√£o. Aplique transforma√ß√µes nas vari√°veis que voc√™ considerar justificadas.\n  Ainda continuando o exemplo anterior, aplique um geom_smooth utilizando v√°rias op√ß√µes de method para as vari√°veis originais ou transformadas.\n  No nosso gr√°fico de barras usando stat(prop) a gente precisou colocar group = 1, porque? Qual √© a diferen√ßa entre esses dois c√≥digos?\n  ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = after_stat(prop)))\r ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop)))\r stat_smooth √© muito parecido com geom_smooth, mas h√° uma diferen√ßa sutil. Compare os c√≥digos abaixo.  ggplot(mpg, aes(displ, hwy)) + geom_point() +\rgeom_smooth()\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r ggplot(mpg, aes(displ, hwy)) + geom_point() +\rstat_smooth(geom = \u0026quot;step\u0026quot;)\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r ggplot(mpg, aes(displ, hwy)) + geom_point() +\rstat_smooth(geom = \u0026quot;linerange\u0026quot;)\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r ggplot(mpg, aes(displ, hwy)) + geom_point() +\rstat_smooth(geom = \u0026quot;errorbar\u0026quot;)\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r ggplot(mpg, aes(displ, hwy)) + geom_point() +\rstat_smooth(geom = \u0026quot;crossbar\u0026quot;)\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r  Usando o mpg e facet_grid, crie um scatterplot que contenha displ no eixo x, hwy no eixo y, class na cor, drv nas facetas-coluna e cyl nas facetas linha.\n  Voc√™ acha que os dois gr√°ficos abaixo ficar√£o diferentes um do outro? Porque? Tente responder antes de rodar o c√≥digo.\n  ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth()\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r ggplot() + geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r Tente recriar o seguinte gr√°fico  ## `geom_smooth()` using formula 'y ~ x'\r Transforme o gr√°fico seguir em um gr√°fico de pizza usando coord_polar.  ggplot(diamonds, aes(cut, fill = cut)) +\rgeom_bar()\r ","date":1621728000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621728000,"objectID":"b9e37b7e1055bb09bf3bd731ebee0b86","permalink":"https://laddem.github.io/courses/tidyverse/dia3/","publishdate":"2021-05-23T00:00:00Z","relpermalink":"/courses/tidyverse/dia3/","section":"courses","summary":"O pacote ggplot2 e a \u0026ldquo;gram√°tica dos gr√°ficos\u0026rdquo; Ainda me lembro da primeira vez que li o terceiro cap√≠tulo de R for Data Science em que o conceito de visualiza√ß√£o de dados √© apresentado junto com a ideia de data.","tags":null,"title":"ggplot2","type":"book"},{"authors":null,"categories":null,"content":"O autor dos pacotes do tidyverse core √© completamente fascinado por gatos, por isso, tantas refer√™ncias ao bicho nos nomes dos pacotes. \u0026ldquo;Purr\u0026rdquo; (em ingl√™s) √© o som que os gatos fazem quando sentem prazer. Para n√£o ficar uma coisa solta no come√ßo da aula, aqui uma foto de gatinho pra voc√™s:\nO assunto da aula de hoje √© talvez um pouco mais abstrato do que as aulas anteriores. Vamos falar bastante de fun√ß√µes, loops e programa√ß√£o funcional. S√£o termos que fazem parte do jarg√£o da computa√ß√£o, mas que mesmo usu√°rios veteranos do R como software estat√≠stico para an√°lise de dados podem ter pouca familiaridade. Ao inv√©s de come√ßar definindo o que vamos fazer, vou come√ßar definindo o que n√£o vamos.\n  N√£o vamos revisar a fundo o assunto de itera√ß√µes. Os livros fazem um bom servi√ßo, √© um assunto espinhoso e n√£o basta compreender os conceitos, tem que botar a m√£o na massa pra ter um entendimento n√£o apenas da teoria, mas tamb√©m para conseguir resolver os muitos problemas que aparecem quando voc√™ est√° construindo itera√ß√µes com maior n√≠vel de complexidade.\n  N√£o vamos cavar fundo em todos os aspectos da programa√ß√£o funcional ou de todas as fun√ß√µes do purrr. S√£o muitas e temos poucas horas.\n  Agora o que SIM vamos fazer √© revisar muito brevemente a sintaxe de um for loop, ver em que situa√ß√µes a gente o utilizaria e como voc√™ pode substituir seus v√°rios for loops por fun√ß√µes no purrr, com exemplos de aplica√ß√£o quando poss√≠vel. Se der tempo, vamos entrar um pouco na ideia de utilizar programa√ß√£o funcional para resolver problemas mais gen√©ricos em que precisamos generalizar alguma tarefa.\n# Primeiro, nossos pacotes!\rlibrary(tidyverse) # o purrr j√° √© carregado automaticamente junto com os outros,\r ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 --\r ## v ggplot2 3.3.3 v purrr 0.3.4\r## v tibble 3.1.2 v dplyr 1.0.6\r## v tidyr 1.1.3 v stringr 1.4.0\r## v readr 1.4.0 v forcats 0.5.1\r ## -- Conflicts ------------------------------------------ tidyverse_conflicts() --\r## x dplyr::filter() masks stats::filter()\r## x dplyr::lag() masks stats::lag()\r # Se quiser carregar apenas o purrr, descomente a linha abaixo\r# library(purrr)\r Itera√ß√µes Do ponto de vista pr√°tico, uma itera√ß√£o √© uma repeti√ß√£o uma linha de c√≥digo de tal forma que apenas uma pequena parte previs√≠vel do c√≥digo muda entre uma repeti√ß√£o e outra. Por exemplo, digamos que voc√™ vai calcular uma soma de x.\nx \u0026lt;- runif(100, 0, 1000)\rx\r ## [1] 932.45060 854.73036 322.68529 473.32061 787.93718 737.81215 985.23288\r## [8] 556.12284 427.43083 202.31560 556.68959 471.12877 325.80404 864.23383\r## [15] 821.50368 217.90992 828.55693 208.16253 101.32865 497.02844 162.14640\r## [22] 705.92322 541.78227 878.39618 999.20586 779.41229 235.10385 716.48081\r## [29] 316.74047 600.86867 223.53952 776.60319 462.10780 883.16957 709.43722\r## [36] 389.57969 964.70028 376.61982 799.59570 144.71691 924.66184 588.25282\r## [43] 116.61194 608.07781 134.93851 350.80481 851.81603 712.44217 72.07885\r## [50] 921.23962 29.30420 803.04197 704.33304 529.43881 620.59352 68.71324\r## [57] 621.06605 369.86052 978.34026 71.94507 954.05547 933.73772 747.56437\r## [64] 467.99461 708.76668 68.69263 904.94534 444.09781 274.69749 977.41118\r## [71] 251.36856 702.56858 40.30280 940.35432 117.62457 442.16959 15.79249\r## [78] 102.77577 99.87290 712.89847 962.80337 46.97794 930.34112 326.48483\r## [85] 439.90790 965.39917 322.10377 970.62833 663.42152 263.12762 759.84708\r## [92] 5.94325 431.82749 460.66645 458.93459 74.09223 315.73897 686.44889\r## [99] 861.14429 498.09425\r Esque√ßa, por um instante, a fun√ß√£o sum. O c√°lculo da soma se d√° pela soma de todos os elementos do vetor x. Ent√£o, √© necess√°rio repetir a opera√ß√£o de soma atrav√©s da acumula√ß√£o dos valores. Veja que √© tudo totalmente previs√≠vel, cada nova repeti√ß√£o simplesmente adiciona mais um valor ao vetor original e esse valor pode ser encontrado na pr√≥xima posi√ß√£o de x. Esse √© o t√≠pico caso de itera√ß√£o. No R, a melhor pr√°tica √© inicializar uma vari√°vel antes e salvar os resultados da itera√ß√£o nela.\n# Inicializa√ß√£o\rresult \u0026lt;- x[[1]]\r# Sequ√™ncia\rfor (i in 2:length(x)) {\r# Corpo\rresult \u0026lt;- result + x[[i]]\r}\r# Comparando os dois resultados\rresult\r ## [1] 53267.7\r sum(x)\r ## [1] 53267.7\r Outro exemplo de mesmo tipo √© repeti√ß√£o de uma mesma opera√ß√£o em v√°rios vetores/colunas/vari√°veis comuns. Por exemplo, se eu tenho um data.frame com tr√™s colunas num√©ricas e eu gostaria de calcular a soma de cada uma.\n# Data.frame\rdf \u0026lt;- tibble(x = rnorm(100, 50, 25),\ry = rnorm(100, 100, 25),\rz = rnorm(100, 200, 25))\r# Inicializa√ß√£o\rresult \u0026lt;- vector(mode = \u0026quot;double\u0026quot;, length = length(df))\r# Sequ√™ncia\rfor (i in seq_along(df)) {\rresult[[i]] \u0026lt;- sum(df[[i]])\r}\r# Resultado\rresult\r ## [1] 4763.273 10257.077 20251.471\r Essa √© a minha revis√£o de 5 minutos de itera√ß√£o em R usando for loops. Como j√° √© de costume, tem muito mais. Por exemplo, existe um outro tipo de iterador no R b√°sico chamado while, que tem um funcionamento diferente do for. Ao inv√©s de voc√™ ter um resultado de tamanho previs√≠vel, voc√™ pode ter um resultado de tamanho desconhecido. Vou deixar o while para voc√™s pesquisarem porque o bom e velho for costuma cobrir a maioria dos casos de uso do cientista de dados.\nPrograma√ß√£o funcional Beleza, agora que j√° dominamos (ou n√£o) o for loop, encontramos v√°rias situa√ß√µes em que a gente gostaria de realizar a mesma opera√ß√£o v√°rias vezes, mas, o for loop √© como uma feijoada: √© gostoso, mas √© pesado. For loops em geral s√£o \u0026ldquo;verbosos\u0026rdquo;, voc√™ precisa escrever bastante para chegar em um determinado resultado e, depois de escrever alguns, voc√™ cansa de ter que repetir todos os peda√ßos dele. E se voc√™ pudesse abstrair o loop para uma fun√ß√£o? A√≠ voc√™ n√£o precisaria escrever toda aquela parafernalha.\nsoma \u0026lt;- function(x) {\rresult \u0026lt;- 0\rfor (i in 1:length(x)) {\rresult \u0026lt;- result + x[[i]]\r}\rresult\r}\rsoma(x)\r ## [1] 53267.7\r Ao fazer isso, eu ganho duas vantagens:\n  Manuten√ß√£o: sempre que eu precisar repetir a opera√ß√£o, eu consigo simplificar muito meu c√≥digo. N√£o preciso escrever um for loop para cada soma que eu precisar fazer. Se meus requerimentos mudarem no futuro, eu s√≥ preciso mudar um peda√ßo de c√≥digo.\n  Leitura: o humano que l√™ um for loop vai precisar de um minuto para se familiarizar com a opera√ß√£o e entender o que est√° sendo iterado, calculado, etc. O humano que l√™ \u0026ldquo;soma\u0026rdquo; sabe que ocorrer√° uma soma. Voc√™ alinha a expectativa com a execu√ß√£o.\n  Outro exemplo.\nsoma_xyz \u0026lt;- function(x) {\rsoma_xyz \u0026lt;- vector(mode = \u0026quot;double\u0026quot;, length = nrow(x))\rfor (i in seq_along(x[[1]])) {\rsoma_xyz[[i]] \u0026lt;- x[[1]][[i]] + x[[2]][[i]] + x[[3]][i]\r}\rsoma_xyz\r}\rdf$soma_xyz2 \u0026lt;- soma_xyz(df)\rdf\r ## # A tibble: 100 x 4\r## x y z soma_xyz2\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 20.2 139. 193. 352.\r## 2 56.3 91.9 199. 347.\r## 3 28.2 125. 221. 375.\r## 4 77.4 68.6 213. 359.\r## 5 76.9 48.6 169. 294.\r## 6 26.1 95.7 236. 358.\r## 7 55.3 68.5 198. 322.\r## 8 81.9 98.0 265. 445.\r## 9 58.5 71.3 111. 240.\r## 10 31.5 108. 231. 371.\r## # ... with 90 more rows\r Outra vantagem de ter na m√£o uma fun√ß√£o, √© que eu posso me apropriar das ferramentas de programa√ß√£o funcional do R. S√£o as fun√ß√µes da fam√≠lia apply, que recebem uma lista de objetos e aplicam uma fun√ß√£o em cada um. Basicamente, aquela abstra√ß√£o do for loop que estavamos buscando.\nVejam como eu posso recriar o exemplo das somas das colunas do data.frame usando a fun√ß√£o soma.\nsapply(df, soma)\r ## x y z soma_xyz2 ## 4763.273 10257.077 20251.471 35271.821\r Eu sei, o exemplo √© muito simples pra ter uma aplica√ß√£o real. At√© porque j√° vimos como fazer esse tipo de opera√ß√£o com summarize l√° atr√°s. Mas talvez, na hora que voc√™ estiver realizando alguma opera√ß√£o de repeti√ß√£o, voc√™ se lembre dessa possibilidade e ela lhe seja √∫til.\no pacote purrr At√© o momento, nos limitamos a utilizar fun√ß√µes presentes no base, mas o verdadeiro intuito dessa aula √© introduzir as facilidade trazidas pelas fun√ß√µes do tidyverse. No pacote purrr, s√£o importadas fun√ß√µes com diversas funcionalidades que facilitam o trabalho com objetos mais complexos, como listas (pense sa√≠da de modelo), itera√ß√µes envolvendo mais de um argumento (pense escrever diversos objetos em diversos arquivos distintos) e assim sucessivamente. Abaixo, segue uma lista das fun√ß√µes do pacote com uma descri√ß√£o curta.\n  a fam√≠lia map_(): similar a fam√≠lia apply do R base. Recebe uma lista de objetos de entrada e uma fun√ß√£o e devolve uma lista com os resultados.\n  map2_(): mesma coisa, s√≥ que voc√™ pode passar duas listas de objetos e uma fun√ß√£o que requer dois argumentos vari√°veis. pmap() √© a generaliza√ß√£o, em que voc√™ passa p listas e uma fun√ß√£o que pede p argumentos.\n  imap(): aplica uma fun√ß√£o tanto ao vetor, como a seu nome/√≠ndice. √â meio louco, mas √© muito √∫til para alguns casos de uso.\n  modify_(): permite aplicar altera√ß√µes no objeto estilo o que voc√™ faria com uma pipeline de filter %\u0026gt;% mutate\n  safely(): e suas irm√£s possibly() e quietly() ajudam a obter resultados mesmo quando h√° ocorre um erro na itera√ß√£o.\n  transpose(), flatten_: manipulam e reformatam listas.\n  invoke_map(): aplica uma lista de fun√ß√µes a uma (opcional) segunda lista de par√¢metros.\n  reduce() e accumulate(): generalizam as opera√ß√µes de sumariza√ß√£o (pense soma acumulada, m√©dia, limite, fatorial)\n  pluck(): pesca elementos de uma lista com uma sintaxe linear e bonitinha.\n  E muito mais coisas\n  No interesse de ir direto ao ponto e n√£o tentar ser exaustivo, vamos ver algumas delas em mais detalhe.\nA fun√ß√£o map Essa fun√ß√£o √© praticamente uma c√≥pia de lapply.\ndf %\u0026gt;% lapply(sum)\r ## $x\r## [1] 4763.273\r## ## $y\r## [1] 10257.08\r## ## $z\r## [1] 20251.47\r## ## $soma_xyz2\r## [1] 35271.82\r df %\u0026gt;% map(sum)\r ## $x\r## [1] 4763.273\r## ## $y\r## [1] 10257.08\r## ## $z\r## [1] 20251.47\r## ## $soma_xyz2\r## [1] 35271.82\r Embora existam pequenas diferen√ßas t√©cnicas entre elas, a principal vantagem de map √© a possibilidade de criar fun√ß√µes an√¥nimas com uma s√≠ntaxe enxuta. Pense, por exemplo, em elevar ao quadrado.\ndf %\u0026gt;% lapply(function(x) x ^ 2)\r ## $x\r## [1] 4.098851e+02 3.166900e+03 7.965187e+02 5.990114e+03 5.919986e+03\r## [6] 6.806833e+02 3.058849e+03 6.710794e+03 3.418073e+03 9.911043e+02\r## [11] 7.262557e+03 1.229650e+03 4.614959e+03 1.334587e+03 4.376548e+03\r## [16] 1.683557e+00 3.678986e+03 7.303855e+02 2.281344e+03 6.020090e+03\r## [21] 1.616306e+03 1.022110e+03 2.669522e+03 6.254209e+02 2.947705e+03\r## [26] 1.228063e+03 2.983676e+03 5.213567e+03 9.712738e+02 1.091035e+03\r## [31] 9.744005e+03 3.788507e+03 1.518321e+03 3.973071e+00 4.709316e+03\r## [36] 8.881056e+03 4.026554e+03 6.044031e+03 4.619299e+03 3.993292e+03\r## [41] 1.099183e+03 3.245529e+03 2.409330e+03 6.679147e+03 3.316934e+03\r## [46] 6.501946e+03 1.978189e+03 4.707893e+03 9.689042e+02 1.957993e+03\r## [51] 2.873459e+03 2.794197e+03 5.046830e+03 1.074281e+03 2.117916e+03\r## [56] 3.384339e+03 2.103909e+03 4.102475e+02 9.532060e+02 6.740582e+03\r## [61] 7.270433e+02 3.579561e+03 7.520174e+03 2.640835e+03 1.262544e+03\r## [66] 2.075985e+03 1.424682e+03 2.603697e+02 8.431157e+02 1.063360e+03\r## [71] 3.582397e+02 3.114648e+02 9.796727e+02 2.202274e+03 5.074693e+03\r## [76] 4.770465e+03 3.896971e+03 3.910142e+03 5.819862e+01 3.020810e+03\r## [81] 7.376594e+03 1.009338e+03 1.488763e+03 1.447512e-03 2.358162e+03\r## [86] 1.749782e+03 6.096146e+02 2.326065e-01 7.560180e+02 4.230610e+03\r## [91] 3.870858e+03 7.034365e+03 2.282774e+00 2.048389e+03 1.783539e+03\r## [96] 3.326398e+02 3.721681e+03 3.599671e+03 9.388893e+02 1.781901e+02\r## ## $y\r## [1] 19262.498 8440.949 15706.307 4699.395 2365.636 9158.381 4692.247\r## [8] 9608.843 5090.449 11770.936 18153.544 17477.696 5395.348 10194.023\r## [15] 16405.544 7442.935 6077.889 11838.011 1518.600 14098.638 8195.648\r## [22] 20491.093 16726.949 1902.552 16036.617 3346.542 7980.461 17444.534\r## [29] 10690.553 15542.924 19621.167 8133.165 17494.853 16943.489 9692.481\r## [36] 18518.499 8078.944 8584.160 8936.495 2016.352 16465.394 7015.704\r## [43] 15703.783 28859.615 14385.671 12426.197 22442.690 4366.540 7877.715\r## [50] 15996.190 13474.364 6688.742 7970.944 8001.087 9704.368 8127.663\r## [57] 12784.580 15311.353 13045.664 5888.471 4923.967 13759.427 10456.918\r## [64] 17088.958 7803.571 4756.058 7695.688 15125.565 18005.310 13821.906\r## [71] 12273.549 3906.617 15237.079 9925.422 14122.162 8628.404 15950.013\r## [78] 20258.130 13275.272 10398.823 14999.890 5641.321 5964.132 17029.926\r## [85] 12111.979 10285.968 9533.723 18723.109 12764.953 18973.842 13175.134\r## [92] 2003.455 11236.108 3245.825 9936.697 7681.693 3721.840 6701.296\r## [99] 13070.664 7377.707\r## ## $z\r## [1] 37183.52 39628.72 49034.03 45434.22 28479.23 55896.08 39203.50 70104.90\r## [9] 12246.82 53206.94 37583.26 38015.74 48362.58 52578.69 30413.38 48118.08\r## [17] 35491.71 49080.87 28324.10 25013.11 62625.54 36067.94 33375.13 30367.84\r## [25] 43104.49 47884.11 51146.67 33091.00 45992.31 37133.20 33173.89 39156.23\r## [33] 51787.03 43173.31 38775.45 31521.51 50210.34 47023.23 27656.30 36609.76\r## [41] 35897.11 41197.37 28894.09 52887.36 32805.70 37407.91 52157.29 41996.41\r## [49] 34322.69 33124.52 31077.55 21019.93 46411.13 32895.26 55085.26 47956.83\r## [57] 73376.10 31954.32 29485.71 49999.43 52964.14 37318.59 38305.11 44738.32\r## [65] 38052.40 51223.73 43747.69 55565.40 57276.59 63332.76 42843.69 56657.40\r## [73] 38516.17 43591.16 59826.20 46073.10 47388.84 43874.46 43295.12 37138.21\r## [81] 55577.27 33570.50 44585.57 39053.49 27161.43 29699.13 39081.64 30360.08\r## [89] 33522.29 49180.78 49246.60 39041.14 38814.45 35312.49 38863.55 31376.48\r## [97] 32465.36 38521.36 52356.80 34374.93\r## ## $soma_xyz2\r## [1] 123809.19 120561.38 140612.83 128953.53 86634.35 128316.46 103558.83\r## [8] 197773.60 57829.20 137375.52 171246.79 131222.06 130538.74 134540.69\r## [15] 135890.98 94204.98 106934.16 127713.53 65040.45 125657.67 145148.87\r## [22] 133249.22 132269.50 58995.74 150967.02 97167.74 136983.45 149144.35\r## [29] 121813.96 122781.46 177177.27 122230.11 159042.55 112866.29 132488.50\r## [36] 166353.87 142441.87 149956.75 108109.63 89660.17 123156.64 118130.16\r## [43] 118599.15 231919.06 128634.52 148624.71 178646.03 115344.55 93115.03\r## [50] 124416.11 119696.66 78191.49 141190.79 92170.25 143818.48 134923.31\r## [57] 184743.12 104168.42 100365.85 146262.60 107108.34 137129.66 147990.19\r## [64] 154943.12 101722.96 116181.28 111976.92 140508.90 162042.95 161472.01\r## [71] 113367.20 101238.16 123196.54 126266.34 188935.87 141830.72 165168.16\r## [78] 171664.79 109509.35 122254.62 197233.20 84158.80 106906.26 107636.66\r## [85] 104602.18 99593.59 102414.04 96467.13 104696.77 180247.90 159133.14\r## [92] 106419.09 90904.34 84185.55 114957.18 80099.05 91321.16 114330.07\r## [99] 139714.77 81024.00\r df %\u0026gt;% map(~ .x ^ 2)\r ## $x\r## [1] 4.098851e+02 3.166900e+03 7.965187e+02 5.990114e+03 5.919986e+03\r## [6] 6.806833e+02 3.058849e+03 6.710794e+03 3.418073e+03 9.911043e+02\r## [11] 7.262557e+03 1.229650e+03 4.614959e+03 1.334587e+03 4.376548e+03\r## [16] 1.683557e+00 3.678986e+03 7.303855e+02 2.281344e+03 6.020090e+03\r## [21] 1.616306e+03 1.022110e+03 2.669522e+03 6.254209e+02 2.947705e+03\r## [26] 1.228063e+03 2.983676e+03 5.213567e+03 9.712738e+02 1.091035e+03\r## [31] 9.744005e+03 3.788507e+03 1.518321e+03 3.973071e+00 4.709316e+03\r## [36] 8.881056e+03 4.026554e+03 6.044031e+03 4.619299e+03 3.993292e+03\r## [41] 1.099183e+03 3.245529e+03 2.409330e+03 6.679147e+03 3.316934e+03\r## [46] 6.501946e+03 1.978189e+03 4.707893e+03 9.689042e+02 1.957993e+03\r## [51] 2.873459e+03 2.794197e+03 5.046830e+03 1.074281e+03 2.117916e+03\r## [56] 3.384339e+03 2.103909e+03 4.102475e+02 9.532060e+02 6.740582e+03\r## [61] 7.270433e+02 3.579561e+03 7.520174e+03 2.640835e+03 1.262544e+03\r## [66] 2.075985e+03 1.424682e+03 2.603697e+02 8.431157e+02 1.063360e+03\r## [71] 3.582397e+02 3.114648e+02 9.796727e+02 2.202274e+03 5.074693e+03\r## [76] 4.770465e+03 3.896971e+03 3.910142e+03 5.819862e+01 3.020810e+03\r## [81] 7.376594e+03 1.009338e+03 1.488763e+03 1.447512e-03 2.358162e+03\r## [86] 1.749782e+03 6.096146e+02 2.326065e-01 7.560180e+02 4.230610e+03\r## [91] 3.870858e+03 7.034365e+03 2.282774e+00 2.048389e+03 1.783539e+03\r## [96] 3.326398e+02 3.721681e+03 3.599671e+03 9.388893e+02 1.781901e+02\r## ## $y\r## [1] 19262.498 8440.949 15706.307 4699.395 2365.636 9158.381 4692.247\r## [8] 9608.843 5090.449 11770.936 18153.544 17477.696 5395.348 10194.023\r## [15] 16405.544 7442.935 6077.889 11838.011 1518.600 14098.638 8195.648\r## [22] 20491.093 16726.949 1902.552 16036.617 3346.542 7980.461 17444.534\r## [29] 10690.553 15542.924 19621.167 8133.165 17494.853 16943.489 9692.481\r## [36] 18518.499 8078.944 8584.160 8936.495 2016.352 16465.394 7015.704\r## [43] 15703.783 28859.615 14385.671 12426.197 22442.690 4366.540 7877.715\r## [50] 15996.190 13474.364 6688.742 7970.944 8001.087 9704.368 8127.663\r## [57] 12784.580 15311.353 13045.664 5888.471 4923.967 13759.427 10456.918\r## [64] 17088.958 7803.571 4756.058 7695.688 15125.565 18005.310 13821.906\r## [71] 12273.549 3906.617 15237.079 9925.422 14122.162 8628.404 15950.013\r## [78] 20258.130 13275.272 10398.823 14999.890 5641.321 5964.132 17029.926\r## [85] 12111.979 10285.968 9533.723 18723.109 12764.953 18973.842 13175.134\r## [92] 2003.455 11236.108 3245.825 9936.697 7681.693 3721.840 6701.296\r## [99] 13070.664 7377.707\r## ## $z\r## [1] 37183.52 39628.72 49034.03 45434.22 28479.23 55896.08 39203.50 70104.90\r## [9] 12246.82 53206.94 37583.26 38015.74 48362.58 52578.69 30413.38 48118.08\r## [17] 35491.71 49080.87 28324.10 25013.11 62625.54 36067.94 33375.13 30367.84\r## [25] 43104.49 47884.11 51146.67 33091.00 45992.31 37133.20 33173.89 39156.23\r## [33] 51787.03 43173.31 38775.45 31521.51 50210.34 47023.23 27656.30 36609.76\r## [41] 35897.11 41197.37 28894.09 52887.36 32805.70 37407.91 52157.29 41996.41\r## [49] 34322.69 33124.52 31077.55 21019.93 46411.13 32895.26 55085.26 47956.83\r## [57] 73376.10 31954.32 29485.71 49999.43 52964.14 37318.59 38305.11 44738.32\r## [65] 38052.40 51223.73 43747.69 55565.40 57276.59 63332.76 42843.69 56657.40\r## [73] 38516.17 43591.16 59826.20 46073.10 47388.84 43874.46 43295.12 37138.21\r## [81] 55577.27 33570.50 44585.57 39053.49 27161.43 29699.13 39081.64 30360.08\r## [89] 33522.29 49180.78 49246.60 39041.14 38814.45 35312.49 38863.55 31376.48\r## [97] 32465.36 38521.36 52356.80 34374.93\r## ## $soma_xyz2\r## [1] 123809.19 120561.38 140612.83 128953.53 86634.35 128316.46 103558.83\r## [8] 197773.60 57829.20 137375.52 171246.79 131222.06 130538.74 134540.69\r## [15] 135890.98 94204.98 106934.16 127713.53 65040.45 125657.67 145148.87\r## [22] 133249.22 132269.50 58995.74 150967.02 97167.74 136983.45 149144.35\r## [29] 121813.96 122781.46 177177.27 122230.11 159042.55 112866.29 132488.50\r## [36] 166353.87 142441.87 149956.75 108109.63 89660.17 123156.64 118130.16\r## [43] 118599.15 231919.06 128634.52 148624.71 178646.03 115344.55 93115.03\r## [50] 124416.11 119696.66 78191.49 141190.79 92170.25 143818.48 134923.31\r## [57] 184743.12 104168.42 100365.85 146262.60 107108.34 137129.66 147990.19\r## [64] 154943.12 101722.96 116181.28 111976.92 140508.90 162042.95 161472.01\r## [71] 113367.20 101238.16 123196.54 126266.34 188935.87 141830.72 165168.16\r## [78] 171664.79 109509.35 122254.62 197233.20 84158.80 106906.26 107636.66\r## [85] 104602.18 99593.59 102414.04 96467.13 104696.77 180247.90 159133.14\r## [92] 106419.09 90904.34 84185.55 114957.18 80099.05 91321.16 114330.07\r## [99] 139714.77 81024.00\r Atrav√©s do uso de f√≥rmulas ~ √© poss√≠vel especificar fun√ß√µes an√¥nimas simples economizando caracteres e utilizando o autocompletar.\nQue tal esta pipeline?\nlibrary(nycflights13)\r# M√©dias de todas as vari√°veis num√©ricas usando where()\rflights %\u0026gt;% select(where(is.numeric)) %\u0026gt;% map(mean)\r ## $year\r## [1] 2013\r## ## $month\r## [1] 6.54851\r## ## $day\r## [1] 15.71079\r## ## $dep_time\r## [1] NA\r## ## $sched_dep_time\r## [1] 1344.255\r## ## $dep_delay\r## [1] NA\r## ## $arr_time\r## [1] NA\r## ## $sched_arr_time\r## [1] 1536.38\r## ## $arr_delay\r## [1] NA\r## ## $flight\r## [1] 1971.924\r## ## $air_time\r## [1] NA\r## ## $distance\r## [1] 1039.913\r## ## $hour\r## [1] 13.18025\r## ## $minute\r## [1] 26.2301\r Ou esta\n# Propor√ß√£o de missings em todas as vari√°veis\rflights %\u0026gt;% map(is.na) %\u0026gt;% map(mean)\r ## $year\r## [1] 0\r## ## $month\r## [1] 0\r## ## $day\r## [1] 0\r## ## $dep_time\r## [1] 0.02451184\r## ## $sched_dep_time\r## [1] 0\r## ## $dep_delay\r## [1] 0.02451184\r## ## $arr_time\r## [1] 0.0258718\r## ## $sched_arr_time\r## [1] 0\r## ## $arr_delay\r## [1] 0.02800081\r## ## $carrier\r## [1] 0\r## ## $flight\r## [1] 0\r## ## $tailnum\r## [1] 0.007458964\r## ## $origin\r## [1] 0\r## ## $dest\r## [1] 0\r## ## $air_time\r## [1] 0.02800081\r## ## $distance\r## [1] 0\r## ## $hour\r## [1] 0\r## ## $minute\r## [1] 0\r## ## $time_hour\r## [1] 0\r # Contagem de missings em todas as vari√°veis\rflights %\u0026gt;% map(is.na) %\u0026gt;% map(sum)\r ## $year\r## [1] 0\r## ## $month\r## [1] 0\r## ## $day\r## [1] 0\r## ## $dep_time\r## [1] 8255\r## ## $sched_dep_time\r## [1] 0\r## ## $dep_delay\r## [1] 8255\r## ## $arr_time\r## [1] 8713\r## ## $sched_arr_time\r## [1] 0\r## ## $arr_delay\r## [1] 9430\r## ## $carrier\r## [1] 0\r## ## $flight\r## [1] 0\r## ## $tailnum\r## [1] 2512\r## ## $origin\r## [1] 0\r## ## $dest\r## [1] 0\r## ## $air_time\r## [1] 9430\r## ## $distance\r## [1] 0\r## ## $hour\r## [1] 0\r## ## $minute\r## [1] 0\r## ## $time_hour\r## [1] 0\r A outra grande vantagem do map √© ter acesso f√°cil ao controle do tipo de sa√≠da.\n# Vetor num√©rico\rflights %\u0026gt;% map(is.na) %\u0026gt;% map_dbl(mean)\r ## year month day dep_time sched_dep_time ## 0.000000000 0.000000000 0.000000000 0.024511842 0.000000000 ## dep_delay arr_time sched_arr_time arr_delay carrier ## 0.024511842 0.025871796 0.000000000 0.028000808 0.000000000 ## flight tailnum origin dest air_time ## 0.000000000 0.007458964 0.000000000 0.000000000 0.028000808 ## distance hour minute time_hour ## 0.000000000 0.000000000 0.000000000 0.000000000\r # Vetor de caracteres\rflights %\u0026gt;% map(is.na) %\u0026gt;% map_chr(mean)\r ## year month day dep_time sched_dep_time ## \u0026quot;0.000000\u0026quot; \u0026quot;0.000000\u0026quot; \u0026quot;0.000000\u0026quot; \u0026quot;0.024512\u0026quot; \u0026quot;0.000000\u0026quot; ## dep_delay arr_time sched_arr_time arr_delay carrier ## \u0026quot;0.024512\u0026quot; \u0026quot;0.025872\u0026quot; \u0026quot;0.000000\u0026quot; \u0026quot;0.028001\u0026quot; \u0026quot;0.000000\u0026quot; ## flight tailnum origin dest air_time ## \u0026quot;0.000000\u0026quot; \u0026quot;0.007459\u0026quot; \u0026quot;0.000000\u0026quot; \u0026quot;0.000000\u0026quot; \u0026quot;0.028001\u0026quot; ## distance hour minute time_hour ## \u0026quot;0.000000\u0026quot; \u0026quot;0.000000\u0026quot; \u0026quot;0.000000\u0026quot; \u0026quot;0.000000\u0026quot;\r Um exemplo um pouco mais elaborado: avalia√ß√£o inicial de vari√°veis em um modelo. Em geral, √© comum rodar um modelo para cada vari√°vel num√©rica para ver como elas se comportam.\nrespvar \u0026lt;- \u0026quot;hwy\u0026quot;\rpredvars \u0026lt;- names(select(mpg, where(is.numeric), -hwy))\rtibble(\rnames = predvars,\rfit = map(names, ~lm(paste0(respvar, \u0026quot;~\u0026quot;, .x), data = mpg)),\rsummary = map(fit, summary),\rr2 = map_dbl(summary, \u0026quot;r.squared\u0026quot;),\rFStat = map_df(summary, \u0026quot;fstatistic\u0026quot;),\rcoefs = map_df(fit, coef),\r)\r ## # A tibble: 4 x 6\r## names fit summary r2 FStat$value $numdf $dendf coefs$`(Interce~ $displ\r## \u0026lt;chr\u0026gt; \u0026lt;list\u0026gt; \u0026lt;list\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 displ \u0026lt;lm\u0026gt; \u0026lt;smmry~ 5.87e-1 329. 1 232 35.7 -3.53\r## 2 year \u0026lt;lm\u0026gt; \u0026lt;smmry~ 4.66e-6 0.00108 1 232 17.7 NA ## 3 cyl \u0026lt;lm\u0026gt; \u0026lt;smmry~ 5.81e-1 321. 1 232 40.0 NA ## 4 cty \u0026lt;lm\u0026gt; \u0026lt;smmry~ 9.14e-1 2459. 1 232 0.892 NA\r Ok, a sa√≠da n√£o est√° muito bonitinha! Mas com um pouco mais de trabalho, programadores melhores que eu fizeram isso:\nmodels \u0026lt;- tibble(\rnames = predvars,\rfit = map(names, ~lm(paste0(respvar, \u0026quot;~\u0026quot;, .x), data = mpg)),\rtidied = fit %\u0026gt;% map(broom::tidy),\rglanced = fit %\u0026gt;% map(broom::glance),\raugmented = fit %\u0026gt;% map(broom::augment)\r)\rmodels\r ## # A tibble: 4 x 5\r## names fit tidied glanced augmented ## \u0026lt;chr\u0026gt; \u0026lt;list\u0026gt; \u0026lt;list\u0026gt; \u0026lt;list\u0026gt; \u0026lt;list\u0026gt; ## 1 displ \u0026lt;lm\u0026gt; \u0026lt;tibble [2 x 5]\u0026gt; \u0026lt;tibble [1 x 12]\u0026gt; \u0026lt;tibble [234 x 8]\u0026gt;\r## 2 year \u0026lt;lm\u0026gt; \u0026lt;tibble [2 x 5]\u0026gt; \u0026lt;tibble [1 x 12]\u0026gt; \u0026lt;tibble [234 x 8]\u0026gt;\r## 3 cyl \u0026lt;lm\u0026gt; \u0026lt;tibble [2 x 5]\u0026gt; \u0026lt;tibble [1 x 12]\u0026gt; \u0026lt;tibble [234 x 8]\u0026gt;\r## 4 cty \u0026lt;lm\u0026gt; \u0026lt;tibble [2 x 5]\u0026gt; \u0026lt;tibble [1 x 12]\u0026gt; \u0026lt;tibble [234 x 8]\u0026gt;\r Grande coisa, Vin√≠cius, o output √© ileg√≠vel! Calma! Lembram da primeira aula em que eu comentei que havia mais fun√ß√µes no tidyr?\n# Coeficientes\rmodels %\u0026gt;% select(tidied) %\u0026gt;%\rtidyr::unnest(tidied) %\u0026gt;% filter(term != \u0026quot;(Intercept)\u0026quot;)\r ## # A tibble: 4 x 5\r## term estimate std.error statistic p.value\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 displ -3.53 0.195 -18.2 2.04e- 46\r## 2 year 0.00285 0.0867 0.0329 9.74e- 1\r## 3 cyl -2.82 0.157 -17.9 1.18e- 45\r## 4 cty 1.34 0.0270 49.6 1.87e-125\r # Estat√≠sticas do modelo\rmodels %\u0026gt;% select(names, glanced) %\u0026gt;% unnest(glanced)\r ## # A tibble: 4 x 13\r## names r.squared adj.r.squared sigma statistic p.value df logLik AIC\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 displ 0.587 0.585 3.84 329. 2.04e- 46 1 -646. 1297.\r## 2 year 0.00000466 -0.00431 5.97 0.00108 9.74e- 1 1 -749. 1504.\r## 3 cyl 0.581 0.579 3.87 321. 1.18e- 45 1 -647. 1301.\r## 4 cty 0.914 0.913 1.75 2459. 1.87e-125 1 -462. 931.\r## # ... with 4 more variables: BIC \u0026lt;dbl\u0026gt;, deviance \u0026lt;dbl\u0026gt;, df.residual \u0026lt;int\u0026gt;,\r## # nobs \u0026lt;int\u0026gt;\r # Bancos \u0026quot;aumentados\u0026quot; com valores ajustados, res√≠duos, dist√¢ncias de cook, etc.\rmodels %\u0026gt;% filter(names == \u0026quot;displ\u0026quot;) %\u0026gt;% select(names, augmented) %\u0026gt;% unnest(augmented)\r ## # A tibble: 234 x 9\r## names hwy displ .fitted .resid .hat .sigma .cooksd .std.resid\r## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 displ 29 1.8 29.3 -0.343 0.0115 3.84 0.0000468 -0.0898\r## 2 displ 29 1.8 29.3 -0.343 0.0115 3.84 0.0000468 -0.0898\r## 3 displ 31 2 28.6 2.36 0.00984 3.84 0.00191 0.619 ## 4 displ 30 2 28.6 1.36 0.00984 3.84 0.000634 0.357 ## 5 displ 26 2.8 25.8 0.188 0.00543 3.84 0.00000660 0.0491\r## 6 displ 26 2.8 25.8 0.188 0.00543 3.84 0.00000660 0.0491\r## 7 displ 27 3.1 24.8 2.25 0.00463 3.84 0.000802 0.587 ## 8 displ 26 1.8 29.3 -3.34 0.0115 3.84 0.00445 -0.876 ## 9 displ 25 1.8 29.3 -4.34 0.0115 3.83 0.00751 -1.14 ## 10 displ 28 2 28.6 -0.636 0.00984 3.84 0.000138 -0.167 ## # ... with 224 more rows\r Isso aqui √© s√≥ uma palhinha de modelagem com o tidyverse, mas acho que √© uma demonstra√ß√£o muito convincente da aplicabilidade dos exemplos que vimos usando programa√ß√£o funcional.\nOutro exemplo mais simples com map2: salvar v√°rios arquivos de uma vez s√≥.\ndf1 \u0026lt;- tibble(x = rnorm(100), y = rnorm(100), z = rnorm(100))\rdf2 \u0026lt;- tibble(x = rnorm(100), y = rnorm(100), z = rnorm(100))\rdf3 \u0026lt;- tibble(x = rnorm(100), y = rnorm(100), z = rnorm(100))\rdf4 \u0026lt;- tibble(x = rnorm(100), y = rnorm(100), z = rnorm(100))\rdfs \u0026lt;- list(df1, df2, df3, df4)\rdfs\r ## [[1]]\r## # A tibble: 100 x 3\r## x y z\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 -1.59 0.296 0.738 ## 2 -0.430 -0.0696 0.554 ## 3 -1.66 -0.0623 -1.25 ## 4 -0.595 0.353 -0.704 ## 5 0.669 -0.510 0.399 ## 6 0.829 1.08 -0.0918\r## 7 -0.372 0.0488 -0.225 ## 8 -0.777 1.47 0.698 ## 9 0.510 -1.02 0.970 ## 10 -0.511 1.29 0.374 ## # ... with 90 more rows\r## ## [[2]]\r## # A tibble: 100 x 3\r## x y z\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 0.0224 0.746 -1.29 ## 2 1.51 -0.462 0.743 ## 3 -0.0367 0.502 1.01 ## 4 -0.575 0.653 1.47 ## 5 -0.879 -0.591 -1.54 ## 6 0.168 -0.173 -0.0793\r## 7 -0.747 1.75 0.962 ## 8 -0.748 2.08 -0.282 ## 9 -0.526 -1.08 0.486 ## 10 1.56 1.72 0.706 ## # ... with 90 more rows\r## ## [[3]]\r## # A tibble: 100 x 3\r## x y z\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 -0.694 -0.633 0.469 ## 2 0.669 0.956 1.88 ## 3 -0.874 0.997 -0.415 ## 4 -1.99 0.517 -0.0228\r## 5 0.308 -2.41 0.601 ## 6 -0.273 -1.70 -0.891 ## 7 -0.769 -0.531 -1.12 ## 8 -1.67 -0.520 0.0485\r## 9 -0.837 0.254 0.675 ## 10 -0.627 -0.734 -0.830 ## # ... with 90 more rows\r## ## [[4]]\r## # A tibble: 100 x 3\r## x y z\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 0.376 -0.0913 -0.312\r## 2 -0.109 1.05 -0.229\r## 3 0.181 -0.826 -0.658\r## 4 -0.534 -0.498 -1.53 ## 5 -0.0549 2.03 0.809\r## 6 0.677 1.04 0.750\r## 7 0.0816 -1.15 1.80 ## 8 -0.710 1.26 -0.769\r## 9 0.165 -0.375 -0.788\r## 10 0.456 0.759 0.163\r## # ... with 90 more rows\r paths \u0026lt;- sprintf(\u0026quot;arquivo%s.csv\u0026quot;, 1:4)\rpaths\r ## [1] \u0026quot;arquivo1.csv\u0026quot; \u0026quot;arquivo2.csv\u0026quot; \u0026quot;arquivo3.csv\u0026quot; \u0026quot;arquivo4.csv\u0026quot;\r map2(dfs, paths, ~write_csv(x = .x, file = .y))\r ## [[1]]\r## # A tibble: 100 x 3\r## x y z\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 -1.59 0.296 0.738 ## 2 -0.430 -0.0696 0.554 ## 3 -1.66 -0.0623 -1.25 ## 4 -0.595 0.353 -0.704 ## 5 0.669 -0.510 0.399 ## 6 0.829 1.08 -0.0918\r## 7 -0.372 0.0488 -0.225 ## 8 -0.777 1.47 0.698 ## 9 0.510 -1.02 0.970 ## 10 -0.511 1.29 0.374 ## # ... with 90 more rows\r## ## [[2]]\r## # A tibble: 100 x 3\r## x y z\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 0.0224 0.746 -1.29 ## 2 1.51 -0.462 0.743 ## 3 -0.0367 0.502 1.01 ## 4 -0.575 0.653 1.47 ## 5 -0.879 -0.591 -1.54 ## 6 0.168 -0.173 -0.0793\r## 7 -0.747 1.75 0.962 ## 8 -0.748 2.08 -0.282 ## 9 -0.526 -1.08 0.486 ## 10 1.56 1.72 0.706 ## # ... with 90 more rows\r## ## [[3]]\r## # A tibble: 100 x 3\r## x y z\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 -0.694 -0.633 0.469 ## 2 0.669 0.956 1.88 ## 3 -0.874 0.997 -0.415 ## 4 -1.99 0.517 -0.0228\r## 5 0.308 -2.41 0.601 ## 6 -0.273 -1.70 -0.891 ## 7 -0.769 -0.531 -1.12 ## 8 -1.67 -0.520 0.0485\r## 9 -0.837 0.254 0.675 ## 10 -0.627 -0.734 -0.830 ## # ... with 90 more rows\r## ## [[4]]\r## # A tibble: 100 x 3\r## x y z\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 0.376 -0.0913 -0.312\r## 2 -0.109 1.05 -0.229\r## 3 0.181 -0.826 -0.658\r## 4 -0.534 -0.498 -1.53 ## 5 -0.0549 2.03 0.809\r## 6 0.677 1.04 0.750\r## 7 0.0816 -1.15 1.80 ## 8 -0.710 1.26 -0.769\r## 9 0.165 -0.375 -0.788\r## 10 0.456 0.759 0.163\r## # ... with 90 more rows\r E se eu quiser ler um banco de dados que est√° em v√°rios arquivos diferentes? Vamos usar os que acabamos de criar\n# Bum! Uma linha\rpaths %\u0026gt;% map_dfr(read_csv, .id = \u0026quot;arquivo\u0026quot;)\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## x = col_double(),\r## y = col_double(),\r## z = col_double()\r## )\r## ## ## -- Column specification --------------------------------------------------------\r## cols(\r## x = col_double(),\r## y = col_double(),\r## z = col_double()\r## )\r## ## ## -- Column specification --------------------------------------------------------\r## cols(\r## x = col_double(),\r## y = col_double(),\r## z = col_double()\r## )\r## ## ## -- Column specification --------------------------------------------------------\r## cols(\r## x = col_double(),\r## y = col_double(),\r## z = col_double()\r## )\r ## # A tibble: 400 x 4\r## arquivo x y z\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 -1.59 0.296 0.738 ## 2 1 -0.430 -0.0696 0.554 ## 3 1 -1.66 -0.0623 -1.25 ## 4 1 -0.595 0.353 -0.704 ## 5 1 0.669 -0.510 0.399 ## 6 1 0.829 1.08 -0.0918\r## 7 1 -0.372 0.0488 -0.225 ## 8 1 -0.777 1.47 0.698 ## 9 1 0.510 -1.02 0.970 ## 10 1 -0.511 1.29 0.374 ## # ... with 390 more rows\r As possibilidades s√£o in√∫meras. A regra √© a seguinte: viu uma tarefa que precisa ser repetida muitas vezes? Pense com carinho em usar uma fun√ß√£o vetorizada atrav√©s de map_.\nPredicados O objetivo de um fun√ß√£o predicado √© selecionar elementos de uma lista com base em uma fun√ß√£o. Em geral, s√£o fun√ß√µes simples que retornam um valor TRUE ou FALSE com base em alguma caracter√≠stica do objeto, como o tipo.\nl \u0026lt;- list(c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), c(1, 2, 3))\rl %\u0026gt;% str()\r ## List of 2\r## $ : chr [1:3] \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; \u0026quot;c\u0026quot;\r## $ : num [1:3] 1 2 3\r l %\u0026gt;% keep(is.numeric) %\u0026gt;% str()\r ## List of 1\r## $ : num [1:3] 1 2 3\r l %\u0026gt;% keep(is.character) %\u0026gt;% str()\r ## List of 1\r## $ : chr [1:3] \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; \u0026quot;c\u0026quot;\r O uso mais frequente que vejo de keep e discard √© como uma esp√©cie de atalho para select. Como data.frames s√£o secretamente listas, voc√™ pode rapidamente selecionar todas as vari√°veis do banco que tenham o mesmo tipo.\nflights %\u0026gt;% keep(is.numeric)\r ## # A tibble: 336,776 x 14\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830 819\r## 2 2013 1 1 533 529 4 850 830\r## 3 2013 1 1 542 540 2 923 850\r## 4 2013 1 1 544 545 -1 1004 1022\r## 5 2013 1 1 554 600 -6 812 837\r## 6 2013 1 1 554 558 -4 740 728\r## 7 2013 1 1 555 600 -5 913 854\r## 8 2013 1 1 557 600 -3 709 723\r## 9 2013 1 1 557 600 -3 838 846\r## 10 2013 1 1 558 600 -2 753 745\r## # ... with 336,766 more rows, and 6 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # flight \u0026lt;int\u0026gt;, air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;\r flights %\u0026gt;% discard(is.character)\r ## # A tibble: 336,776 x 15\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830 819\r## 2 2013 1 1 533 529 4 850 830\r## 3 2013 1 1 542 540 2 923 850\r## 4 2013 1 1 544 545 -1 1004 1022\r## 5 2013 1 1 554 600 -6 812 837\r## 6 2013 1 1 554 558 -4 740 728\r## 7 2013 1 1 555 600 -5 913 854\r## 8 2013 1 1 557 600 -3 709 723\r## 9 2013 1 1 557 600 -3 838 846\r## 10 2013 1 1 558 600 -2 753 745\r## # ... with 336,766 more rows, and 7 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # flight \u0026lt;int\u0026gt;, air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;,\r## # time_hour \u0026lt;dttm\u0026gt;\r Como outros aspectos do purrr, a grande vantagem aqui √© a generalidade. Essas fun√ß√µes funcionam em qualquer lista de objetos e n√£o apenas em data.frames.\nLidando com a presen√ßa de erros A pr√≥xima dica forte √© utilizar os adv√©rbios (chique) safely() e companhia para lidar com erros.\nx \u0026lt;- list(a = c(1,2,3), b = c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;), c = c(99, 88, 77))\rx %\u0026gt;% map(sum)\r ## Error in .Primitive(\u0026quot;sum\u0026quot;)(..., na.rm = na.rm): 'type' inv√°lido (character) do argumento\r N√£o conseguimos nada! A mensagem de erro nem nos informa onde o problema ocorreu. E agora?\nx %\u0026gt;% map(safely(sum)) %\u0026gt;% str()\r ## List of 3\r## $ a:List of 2\r## ..$ result: num 6\r## ..$ error : NULL\r## $ b:List of 2\r## ..$ result: NULL\r## ..$ error :List of 2\r## .. ..$ message: chr \u0026quot;'type' inv√°lido (character) do argumento\u0026quot;\r## .. ..$ call : language .Primitive(\u0026quot;sum\u0026quot;)(..., na.rm = na.rm)\r## .. ..- attr(*, \u0026quot;class\u0026quot;)= chr [1:3] \u0026quot;simpleError\u0026quot; \u0026quot;error\u0026quot; \u0026quot;condition\u0026quot;\r## $ c:List of 2\r## ..$ result: num 264\r## ..$ error : NULL\r x %\u0026gt;% map(possibly(sum, otherwise = NA_real_)) %\u0026gt;% str()\r ## List of 3\r## $ a: num 6\r## $ b: num NA\r## $ c: num 264\r Essas fun√ß√µes permitem alterar a sa√≠da de uma fun√ß√£o quando ocorrer um erro. quietly √© parecido, mas ela captura mais a sa√≠da do R, o texto em si.\nx \u0026lt;- list(1, -1)\rx %\u0026gt;% map(quietly(log)) %\u0026gt;% str()\r ## List of 2\r## $ :List of 4\r## ..$ result : num 0\r## ..$ output : chr \u0026quot;\u0026quot;\r## ..$ warnings: chr(0) ## ..$ messages: chr(0) ## $ :List of 4\r## ..$ result : num NaN\r## ..$ output : chr \u0026quot;\u0026quot;\r## ..$ warnings: chr \u0026quot;NaNs produzidos\u0026quot;\r## ..$ messages: chr(0)\r Chamando listas de fun√ß√µes Vamos supor que voc√™ tem um vetor de n√∫meros e voc√™ quer aplicar um monte de fun√ß√µes diferentes nele, mas voc√™ n√£o quer ter que ficar copiando e colando tudo.\nnumeros \u0026lt;- rnorm(25, 50, 10)\rnumeros\r ## [1] 44.79172 47.60495 48.61908 46.47576 33.53751 53.53056 59.71062 45.06651\r## [9] 87.43203 42.82188 42.27556 51.03986 46.29749 48.02671 68.12173 63.99874\r## [17] 54.37657 47.13603 50.91887 50.39004 70.29964 33.01856 55.71406 61.57012\r## [25] 53.94121\r Nessas situa√ß√µes, voc√™ gostaria de chamar v√°rias fun√ß√µes no mesmo objeto ou grupo de objetos, mas voc√™ n√£o sabe bem como fazer isso\u0026hellip; Ent√£o, invoke_map vem ao resgate.\nfuncs \u0026lt;- list(\u0026quot;mean\u0026quot;, \u0026quot;sd\u0026quot;, \u0026quot;IQR\u0026quot;, \u0026quot;sum\u0026quot;, \u0026quot;length\u0026quot;, \u0026quot;range\u0026quot;, \u0026quot;min\u0026quot;, \u0026quot;max\u0026quot;)\rargs \u0026lt;- list(list(na.rm = T, trim = 0.05),\rlist(na.rm=T), list(type = 2),\rlist(na.rm = T), list(),\rlist(na.rm = T), list(na.rm = T), list(na.rm = T))\rfuncs %\u0026gt;% str()\r ## List of 8\r## $ : chr \u0026quot;mean\u0026quot;\r## $ : chr \u0026quot;sd\u0026quot;\r## $ : chr \u0026quot;IQR\u0026quot;\r## $ : chr \u0026quot;sum\u0026quot;\r## $ : chr \u0026quot;length\u0026quot;\r## $ : chr \u0026quot;range\u0026quot;\r## $ : chr \u0026quot;min\u0026quot;\r## $ : chr \u0026quot;max\u0026quot;\r args %\u0026gt;% str()\r ## List of 8\r## $ :List of 2\r## ..$ na.rm: logi TRUE\r## ..$ trim : num 0.05\r## $ :List of 1\r## ..$ na.rm: logi TRUE\r## $ :List of 1\r## ..$ type: num 2\r## $ :List of 1\r## ..$ na.rm: logi TRUE\r## $ : list()\r## $ :List of 1\r## ..$ na.rm: logi TRUE\r## $ :List of 1\r## ..$ na.rm: logi TRUE\r## $ :List of 1\r## ..$ na.rm: logi TRUE\r invoke_map(funcs, args, x = numeros) %\u0026gt;% glimpse()\r ## List of 8\r## $ : num 51.6\r## $ : num 11.7\r## $ : num 9.42\r## $ : num 1307\r## $ : int 25\r## $ : num [1:2] 33 87.4\r## $ : num 33\r## $ : num 87.4\r Fica mais bonito se voc√™ nomear os argumentos, ai o output fica melhorzinho.\nnames(funcs) \u0026lt;- unlist(funcs)\rinvoke_map(funcs, args, x = numeros) %\u0026gt;% glimpse()\r ## List of 8\r## $ mean : num 51.6\r## $ sd : num 11.7\r## $ IQR : num 9.42\r## $ sum : num 1307\r## $ length: int 25\r## $ range : num [1:2] 33 87.4\r## $ min : num 33\r## $ max : num 87.4\r Claro que esse exemplo aqui talvez n√£o seja √∫til para voc√™s, mas espero que quando voc√™s encontrarem uma situa√ß√£o em que voc√™ gostaria de aplicar uma bateria de fun√ß√µes no mesmo objeto ou grupo de objetos, voc√™s se lembrem dessa possibilidade.\nreduce e accumulate Essas duas fun√ß√µes s√£o desenhadas para fazer aplica√ß√µes recursivas de fun√ß√µes que recebem dois argumentos (operadores matem√°ticos, _joins, etc. Recursividade em linhas gerais, √© voc√™ repetir uma opera√ß√£o com o resultado da repeti√ß√£o anterior. Pense em somas ou produtos acumulados, em que o pr√≥ximo valor √© determinado pela aplica√ß√£o de uma regra sobre o anterior.\naccumulate(1:10, `+`)\r ## [1] 1 3 6 10 15 21 28 36 45 55\r accumulate(1:10, `*`)\r ## [1] 1 2 6 24 120 720 5040 40320 362880\r## [10] 3628800\r A principal diferen√ßa entre accumulate e reduce √© que a primeira guarda os resultados intermedi√°rios, enquanto a segunda retorna apenas o √∫ltimo.\nreduce(1:10, `+`)\r ## [1] 55\r reduce(1:10, `*`)\r ## [1] 3628800\r Uma aplica√ß√£o bastante pr√°tica dessas fun√ß√µes √© a produ√ß√£o de um √∫nico banco de dados a partir de v√°rios arquivos separados.\n# Lembra dos nossos arquivos l√° em cima?\rpaths\r ## [1] \u0026quot;arquivo1.csv\u0026quot; \u0026quot;arquivo2.csv\u0026quot; \u0026quot;arquivo3.csv\u0026quot; \u0026quot;arquivo4.csv\u0026quot;\r Vamos fingir que n√£o temos acesso a map_dfr e precisamos importar esses objetos e todos comp√µem um √∫nico banco. Imaginaem que tratam-se de dados por ano.\ndfs \u0026lt;- map(paths, read_csv)\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## x = col_double(),\r## y = col_double(),\r## z = col_double()\r## )\r## ## ## -- Column specification --------------------------------------------------------\r## cols(\r## x = col_double(),\r## y = col_double(),\r## z = col_double()\r## )\r## ## ## -- Column specification --------------------------------------------------------\r## cols(\r## x = col_double(),\r## y = col_double(),\r## z = col_double()\r## )\r## ## ## -- Column specification --------------------------------------------------------\r## cols(\r## x = col_double(),\r## y = col_double(),\r## z = col_double()\r## )\r glimpse(dfs)\r ## List of 4\r## $ : spec_tbl_df [100 x 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\r## ..$ x: num [1:100] -1.594 -0.43 -1.66 -0.595 0.669 ...\r## ..$ y: num [1:100] 0.2958 -0.0696 -0.0623 0.3526 -0.51 ...\r## ..$ z: num [1:100] 0.738 0.554 -1.252 -0.704 0.399 ...\r## ..- attr(*, \u0026quot;spec\u0026quot;)=\r## .. .. cols(\r## .. .. x = col_double(),\r## .. .. y = col_double(),\r## .. .. z = col_double()\r## .. .. )\r## $ : spec_tbl_df [100 x 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\r## ..$ x: num [1:100] 0.0224 1.5069 -0.0367 -0.575 -0.8793 ...\r## ..$ y: num [1:100] 0.746 -0.462 0.502 0.653 -0.591 ...\r## ..$ z: num [1:100] -1.287 0.743 1.006 1.47 -1.536 ...\r## ..- attr(*, \u0026quot;spec\u0026quot;)=\r## .. .. cols(\r## .. .. x = col_double(),\r## .. .. y = col_double(),\r## .. .. z = col_double()\r## .. .. )\r## $ : spec_tbl_df [100 x 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\r## ..$ x: num [1:100] -0.694 0.669 -0.874 -1.991 0.308 ...\r## ..$ y: num [1:100] -0.633 0.956 0.997 0.517 -2.412 ...\r## ..$ z: num [1:100] 0.4692 1.879 -0.4147 -0.0228 0.6012 ...\r## ..- attr(*, \u0026quot;spec\u0026quot;)=\r## .. .. cols(\r## .. .. x = col_double(),\r## .. .. y = col_double(),\r## .. .. z = col_double()\r## .. .. )\r## $ : spec_tbl_df [100 x 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\r## ..$ x: num [1:100] 0.3761 -0.1088 0.1815 -0.5345 -0.0549 ...\r## ..$ y: num [1:100] -0.0913 1.0474 -0.8255 -0.4983 2.0343 ...\r## ..$ z: num [1:100] -0.312 -0.229 -0.658 -1.526 0.809 ...\r## ..- attr(*, \u0026quot;spec\u0026quot;)=\r## .. .. cols(\r## .. .. x = col_double(),\r## .. .. y = col_double(),\r## .. .. z = col_double()\r## .. .. )\r new_df \u0026lt;- reduce(dfs, bind_rows)\rnew_df\r ## # A tibble: 400 x 3\r## x y z\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 -1.59 0.296 0.738 ## 2 -0.430 -0.0696 0.554 ## 3 -1.66 -0.0623 -1.25 ## 4 -0.595 0.353 -0.704 ## 5 0.669 -0.510 0.399 ## 6 0.829 1.08 -0.0918\r## 7 -0.372 0.0488 -0.225 ## 8 -0.777 1.47 0.698 ## 9 0.510 -1.02 0.970 ## 10 -0.511 1.29 0.374 ## # ... with 390 more rows\r O resultado √© o mesmo observado em map_dfr, mas essa abordagem √© gen√©rica, ou seja, ela se aplica para qualquer grupo de objetos e para qualquer fun√ß√£o que recebe dois argumentos e precisa ser repetida de maneira recursiva.\n# Apaga os arquivos pra eles n√£o ficarem ai gastando mem√≥ria a toa\rfile.remove(paths)\r ## [1] TRUE TRUE TRUE TRUE\r pluck Esta fun√ß√£o √© um atalho para as tesouras duplas do r [[. Seu objeto √© facilitar a leitura de c√≥digos que pescam elementos profundos de uma lista aninhada.\nl \u0026lt;- list(\rlist(-1, x = 1, y = c(2), z = \u0026quot;a\u0026quot;),\rlist(-2, x = 4, y = c(5, 6), z = \u0026quot;b\u0026quot;),\rlist(-3, x = 8, y = c(9, 10, 11))\r)\rglimpse(l)\r ## List of 3\r## $ :List of 4\r## ..$ : num -1\r## ..$ x: num 1\r## ..$ y: num 2\r## ..$ z: chr \u0026quot;a\u0026quot;\r## $ :List of 4\r## ..$ : num -2\r## ..$ x: num 4\r## ..$ y: num [1:2] 5 6\r## ..$ z: chr \u0026quot;b\u0026quot;\r## $ :List of 3\r## ..$ : num -3\r## ..$ x: num 8\r## ..$ y: num [1:3] 9 10 11\r Se voc√™ chamar map_ nessa lista, voc√™ pode extrair os elementos delas pelo nome.\nmap_dbl(l, \u0026quot;x\u0026quot;)\r ## [1] 1 4 8\r map(l, \u0026quot;y\u0026quot;)\r ## [[1]]\r## [1] 2\r## ## [[2]]\r## [1] 5 6\r## ## [[3]]\r## [1] 9 10 11\r map(l, \u0026quot;z\u0026quot;)\r ## [[1]]\r## [1] \u0026quot;a\u0026quot;\r## ## [[2]]\r## [1] \u0026quot;b\u0026quot;\r## ## [[3]]\r## NULL\r Ou pela posi√ß√£o na lista\nmap_dbl(l, 1)\r ## [1] -1 -2 -3\r map_dbl(l, 2)\r ## [1] 1 4 8\r map(l, 3)\r ## [[1]]\r## [1] 2\r## ## [[2]]\r## [1] 5 6\r## ## [[3]]\r## [1] 9 10 11\r Ou os dois\nmap_dbl(l, list(\u0026quot;x\u0026quot;, 1))\r ## [1] 1 4 8\r map(l, list(\u0026quot;z\u0026quot;, 1))\r ## [[1]]\r## [1] \u0026quot;a\u0026quot;\r## ## [[2]]\r## [1] \u0026quot;b\u0026quot;\r## ## [[3]]\r## NULL\r map(l, list(\u0026quot;y\u0026quot;, 3))\r ## [[1]]\r## NULL\r## ## [[2]]\r## NULL\r## ## [[3]]\r## [1] 11\r Se um componente n√£o existir, voc√™ recebe um erro\nmap_chr(l, \u0026quot;z\u0026quot;)\r ## Error: Result 3 must be a single string, not NULL of length 0\r Mas voc√™ pode resolver isso passando um valor padr√£o\nmap_chr(l, \u0026quot;z\u0026quot;, .default = NA_character_)\r ## [1] \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; NA\r Tudo isso funciona com base na fun√ß√£o pluck\npluck(l, 1)\r ## [[1]]\r## [1] -1\r## ## $x\r## [1] 1\r## ## $y\r## [1] 2\r## ## $z\r## [1] \u0026quot;a\u0026quot;\r pluck(l, 1, 2)\r ## [1] 1\r pluck(l, 2, 3)\r ## [1] 5 6\r pluck(l, 1, \u0026quot;x\u0026quot;)\r ## [1] 1\r pluck(l, 2, \u0026quot;z\u0026quot;)\r ## [1] \u0026quot;b\u0026quot;\r pluck(l, 3, \u0026quot;y\u0026quot;)\r ## [1] 9 10 11\r Exerc√≠cios   Utilize uma das fun√ß√µes map_ para:\n  Calcular a m√©dia de cada coluna em mtcars.\n  Determinar o tipo de cada coluna em flights.\n  Computar o n√∫mero de valores √∫nicos em cada coluna de iris.\n  Gere 10 distribui√ß√µes aleat√≥rias (rnorm) com m√©dias -10, 0, 10 e 100.\n  Como voc√™ pode criar um vetor indicando se cada coluna em um data.frame √© um fator?\n  Usando as fun√ß√µes predicado keep e discard:\n  Selecione todas as colunas caractere no banco flights.\n  Descarte os caracteres em mpg.\n  Selecione os fatores ordenados em diamonds.\n  Descarte as vari√°veis n√£o-num√©ricas em iris\n  Imagine que voc√™ tem um diret√≥rio cheio de arquivos .csv que correspondem a um √∫nico banco de dados. Voc√™ tem os caminhos de todos eles num vetor com a forma c(arquivo_1.csv, ..., arquivo_n.csv). Como voc√™ importaria esses arquivos? Tente fazer duas solu√ß√µes diferentes.\n  Escreva um c√≥digo sucinto que implemente v√°rios modelos lineares especificados por voc√™. Salve os resultados numa tibble com colunas-lista. Depois, extraia os resultados com unnest(). Use o exemplo como guia.\n  mtcars\r ## mpg cyl disp hp drat wt qsec vs am gear carb\r## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4\r## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4\r## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1\r## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1\r## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2\r## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1\r## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4\r## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2\r## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2\r## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4\r## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4\r## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3\r## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3\r## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3\r## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4\r## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4\r## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4\r## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1\r## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2\r## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1\r## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1\r## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2\r## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2\r## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4\r## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2\r## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1\r## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2\r## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2\r## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4\r## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6\r## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8\r## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2\r modelos \u0026lt;- c(\u0026quot;mpg ~ wt\u0026quot;,\r\u0026quot;mpg ~ wt + cyl\u0026quot;,\r\u0026quot;mpg ~ wt + cyl + drat\u0026quot;,\r\u0026quot;mpg ~ wt + cyl + drat + am\u0026quot;)\r ","date":1621728000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621728000,"objectID":"8fc2c9a43ba39b58554f36d137f8df4b","permalink":"https://laddem.github.io/courses/tidyverse/dia4/","publishdate":"2021-05-23T00:00:00Z","relpermalink":"/courses/tidyverse/dia4/","section":"courses","summary":"O autor dos pacotes do tidyverse core √© completamente fascinado por gatos, por isso, tantas refer√™ncias ao bicho nos nomes dos pacotes. \u0026ldquo;Purr\u0026rdquo; (em ingl√™s) √© o som que os gatos fazem quando sentem prazer.","tags":null,"title":"purrr","type":"book"},{"authors":[],"categories":[],"content":"Solu√ß√µes para os exerc√≠cios feitos em sala e os exerc√≠cios de revis√£o do final das aulas.\nAula 1: B√°sico Fundamentos Fun√ß√µes round(3.1415)\r ## [1] 3\r factorial(3)\r ## [1] 6\r S√≥ de olhar para as fun√ß√µes e seus resultados, voc√™ consegu√≠ria dizer:\n O que cada fun√ß√£o faz? Quais entradas (inputs) ela pede? Qual sa√≠da ela produz (output)? Que op√ß√µes alternativas (argumentos) elas poderiam conter?  A fun√ß√£o round() arredonda valores decimais, enquanto factorial() calcula o fatorial de um n√∫mero. Ambas recebem inputs num√©ricos, e emitem outputs num√©ricos tamb√©m. round() tem um argumento extra digits, que permite determina para quantas casas decimais o n√∫mero dever√° ser arredondado.\nArgumentos dado \u0026lt;- 1:6\r# dado limpo\rsample(dado, size = 1)\r ## [1] 5\r # dado viciado\rsample(dado, size = 1, prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))\r ## [1] 2\r Repita a opera√ß√£o de sample acima com o dado ‚Äúviciado‚Äù e com o dado ‚Äúlimpo‚Äù e verifique se voc√™ consegue perceber empiricamente que meu dado est√° ‚Äúviciado‚Äù.\nEsse exerc√≠cio era para repetir o c√≥digo v√°rias vezes e verificar se o resultado 6 aparecia mais no dado viciado que no limpo.\nQue outros argumentos existem na fun√ß√£o sample? Qual o papel do argumento replace?\nSample tem os argumento opcionais size, replace e prob. O primeiro define quantas amostram devem ser retiradas, o segundo define se a amostra tem reposi√ß√£o, ou seja, se um valor sorteado √© retirado da amostra ou n√£o e o terceiro define com que probabilidades devem ser feitos os sorteios, o padr√£o √© com probabilidades iguais para todos os valores do vetor x.\nSua primeira fun√ß√£o Escreva uma fun√ß√£o que role 2 dados de 10 faces e some seus resultados.\nrole10 \u0026lt;- function() {\rx \u0026lt;- sample(x = 1:10, size = 1)\ry \u0026lt;- sample(x = 1:10, size = 1)\rx + y\r}\rrole10()\r ## [1] 10\r Ajuda Consulte a ajuda das fun√ß√µes sum, mean, min, max, range. Porque todas elas tem o argumento na.rm? O que argumento o trim em mean faz? Qual a melhor maneira de rapidamente entender o que uma fun√ß√£o faz atrav√©s da p√°gina de ajuda?\n?sum\r?mean\r?min\r?max\r?range\r O argumento na.rm permite que os c√°lculos das medidas sejam feitos mesmo na presen√ßa de valores nulos/desconhecidos, registrados no R como NA. Voc√™ pode ler o argumento na.rm como \u0026ldquo;Remova os NAs\u0026rdquo;. A melhor maneira de entender o funcionamento de uma fun√ß√£o rapidamente √© ler as se√ß√µes \u0026ldquo;Description\u0026rdquo; e \u0026ldquo;Examples\u0026rdquo;, que voc√™ pode utilizar para rapidamente entender como a fun√ß√£o funciona na pr√°tica.\nObjetos em R Vetores Teste se vetor2, criado anteriormente √© um vetor. Crie um vetor com os nomes de cinco pessoas da sala.\nvetor2 \u0026lt;- c(1, 2, 3, 4, 5)\ris.vector(vetor2)\r ## [1] TRUE\r nomes \u0026lt;- c(\u0026quot;Pessoa 1\u0026quot;, \u0026quot;Pessoa 2\u0026quot;, \u0026quot;Pessoa 3\u0026quot;, \u0026quot;Pessoa 4\u0026quot;, \u0026quot;Pessoa 5\u0026quot;)\rnomes\r ## [1] \u0026quot;Pessoa 1\u0026quot; \u0026quot;Pessoa 2\u0026quot; \u0026quot;Pessoa 3\u0026quot; \u0026quot;Pessoa 4\u0026quot; \u0026quot;Pessoa 5\u0026quot;\r A fun√ß√£o is.vector testa se um objeto √© do tipo vetor. Existem outras fun√ß√µes da fam√≠lia is.____ para todos os objetos R. Voc√™ pode criar um vetor de nomes usando aspas ao redor dos valores das informa√ß√µes em cada posi√ß√£o do vetor e atribuir isso \u0026lt;- para um objeto com um nome da sua prefer√™ncia.\n Considerando os dois vetores abaixo, calcule as suas m√©dias. Porque n√£o √© poss√≠vel calcular a m√©dia do segundo vetor.\nidade1 \u0026lt;- c(20, 25, 30, 35, 40, 45, 50)\ridade2 \u0026lt;- c(\u0026quot;20\u0026quot;, \u0026quot;25\u0026quot;, \u0026quot;30\u0026quot;, \u0026quot;35\u0026quot;, \u0026quot;40\u0026quot;, \u0026quot;45\u0026quot;, \u0026quot;50\u0026quot;)\rmean(idade1)\r ## [1] 35\r mean(idade2)\r ## Warning in mean.default(idade2): argumento n√£o √© num√©rico nem l√≥gico: retornando\r## NA\r ## [1] NA\r O primeiro vetor retorna normalmente porque idade1 √© um vetor de n√∫meros. Apesar da sua apar√™ncia, idade2 √© um vetor de texto. Podemos verificar o tipo do vetor da seguinte forma:\ntypeof(idade1)\r ## [1] \u0026quot;double\u0026quot;\r typeof(idade2)\r ## [1] \u0026quot;character\u0026quot;\r  Qual a diferen√ßa entre: 1, ‚Äú1‚Äù, ‚Äúone‚Äù no R? Quais s√£o n√∫meros e quais s√£o caracteres?\nAo inv√©s de responder essa pergunta, podemos usar o R para satisfazer nossa curiosidade:\ntypeof(1)\r ## [1] \u0026quot;double\u0026quot;\r typeof(\u0026quot;1\u0026quot;)\r ## [1] \u0026quot;character\u0026quot;\r typeof(\u0026quot;one\u0026quot;)\r ## [1] \u0026quot;character\u0026quot;\r O primeiro √© um n√∫mero, os outros s√£o caracteres de texto.\nAtributos Usando seus conhecimentos sobre atributos, construa uma pequena matriz com o nome de 5 pessoas da turma e seu sexo.\ninfo \u0026lt;- c(\u0026quot;Pessoa 1\u0026quot;, \u0026quot;Pessoa 2\u0026quot;, \u0026quot;Pessoa 3\u0026quot;, \u0026quot;Pessoa 4\u0026quot;, \u0026quot;Pessoa 5\u0026quot;, \u0026quot;Masculino\u0026quot;, \u0026quot;Masculino\u0026quot;, \u0026quot;Masculino\u0026quot;, \u0026quot;Feminino\u0026quot;, \u0026quot;Feminino\u0026quot;)\rdim(info) \u0026lt;- c(5, 2)\rinfo\r ## [,1] [,2] ## [1,] \u0026quot;Pessoa 1\u0026quot; \u0026quot;Masculino\u0026quot;\r## [2,] \u0026quot;Pessoa 2\u0026quot; \u0026quot;Masculino\u0026quot;\r## [3,] \u0026quot;Pessoa 3\u0026quot; \u0026quot;Masculino\u0026quot;\r## [4,] \u0026quot;Pessoa 4\u0026quot; \u0026quot;Feminino\u0026quot; ## [5,] \u0026quot;Pessoa 5\u0026quot; \u0026quot;Feminino\u0026quot;\r Matrizes Reconstrua a sua matriz original usando a fun√ß√£o matrix ao inv√©s de alterar os atributos. E os nomes das colunas?\ninfo_matrix \u0026lt;- matrix(info, nrow = 5, dimnames = list(1:5, c(\u0026quot;Nome\u0026quot;, \u0026quot;Sexo\u0026quot;)))\rinfo_matrix\r ## Nome Sexo ## 1 \u0026quot;Pessoa 1\u0026quot; \u0026quot;Masculino\u0026quot;\r## 2 \u0026quot;Pessoa 2\u0026quot; \u0026quot;Masculino\u0026quot;\r## 3 \u0026quot;Pessoa 3\u0026quot; \u0026quot;Masculino\u0026quot;\r## 4 \u0026quot;Pessoa 4\u0026quot; \u0026quot;Feminino\u0026quot; ## 5 \u0026quot;Pessoa 5\u0026quot; \u0026quot;Feminino\u0026quot;\r Classe Experimente brincar com o valor de objeto e ver\n Qual √© a data de refer√™ncia do R para calcular tempos? O que acontece se o valor for negativo?  objeto \u0026lt;- 0\rclass(objeto) \u0026lt;- c(\u0026quot;POSIXct\u0026quot;, \u0026quot;POSIXt\u0026quot;)\robjeto\r ## [1] \u0026quot;1969-12-31 21:00:00 -03\u0026quot;\r objeto \u0026lt;- -100000000\rclass(objeto) \u0026lt;- c(\u0026quot;POSIXct\u0026quot;, \u0026quot;POSIXt\u0026quot;)\robjeto\r ## [1] \u0026quot;1966-10-31 11:13:20 -03\u0026quot;\r Este exerc√≠cio parte do princ√≠pio de que voc√™s compreenderam como o R entende tempos: eles s√£o armazenadas como o n√∫mero de segundos entre a data de refer√™ncia do sistema e o tempo que ele pretendem medir. Assim, para descobrir a data de refer√™ncia basta criar um objeto com o tempo 0 e passar a classe adequada para seus atributos e ver o resultado na tela. Da mesma forma, os n√∫meros negativos representam tempos ocorridos antes dessa data de refer√™ncia.\n Construa um fator a partir do vetor a seguir que registre os meses do ano. Dica: utilize o argumento levels da fun√ß√£o factor.\nf \u0026lt;- c(1, 3, 9, 4, 11, 2, 6, 6, 3, 2, 9, 11, 12, 12, 1, 8)\rfactor(f, levels = 1:12, labels = c(\u0026quot;Jan\u0026quot;, \u0026quot;Fev\u0026quot;, \u0026quot;Mar\u0026quot;, \u0026quot;Abr\u0026quot;, \u0026quot;Mai\u0026quot;, \u0026quot;Jun\u0026quot;,\r\u0026quot;Jul\u0026quot;, \u0026quot;Ago\u0026quot;, \u0026quot;Set\u0026quot;, \u0026quot;Out\u0026quot;, \u0026quot;Nov\u0026quot;, \u0026quot;Dez\u0026quot;))\r ## [1] Jan Mar Set Abr Nov Fev Jun Jun Mar Fev Set Nov Dez Dez Jan Ago\r## Levels: Jan Fev Mar Abr Mai Jun Jul Ago Set Out Nov Dez\r Coer√ß√£o Porque o R prefere coagir vetores l√≥gicos mistos para n√∫meros e vetores num√©ricos e l√≥gicos para caractere?\nA resposta √© mais conceitual que pr√°tica, mas o objetivo √© usar o tipo de dado mais gen√©rico poss√≠vel de tal forma que a gente n√£o perca as informa√ß√µes. Veja alguns exemplos abaixo:\n# N√∫meros misturados com valores l√≥gicos\rv \u0026lt;- c(32, 64, 128, 256, TRUE, FALSE)\rv\r ## [1] 32 64 128 256 1 0\r # Posso \u0026quot;recuperar\u0026quot; meus valores l√≥gicos depois\ras.logical(v[5:6])\r ## [1] TRUE FALSE\r # Texto misturado com n√∫meros\rv \u0026lt;- c(15, 21, 19, 80, \u0026quot;Ab√≥bora\u0026quot;, \u0026quot;Caqui\u0026quot;)\rv\r ## [1] \u0026quot;15\u0026quot; \u0026quot;21\u0026quot; \u0026quot;19\u0026quot; \u0026quot;80\u0026quot; \u0026quot;Ab√≥bora\u0026quot; \u0026quot;Caqui\u0026quot;\r # Posso \u0026quot;recuperar\u0026quot; meus n√∫meros depois\ras.numeric(v[1:4])\r ## [1] 15 21 19 80\r Listas Crie uma lista de compras em que cada elemento da lista seja um vetor at√¥mico de itens que voc√™ vai comprar de cada se√ß√£o do supermercado. Para simplificar, utilize as se√ß√µes: ‚Äúlimpeza‚Äù, ‚Äúmercearia‚Äù e ‚Äúhortifruti‚Äù.\nlista_de_compras \u0026lt;- list(\rlimpeza = c(\u0026quot;Creme dental\u0026quot;, \u0026quot;Sabonete\u0026quot;, \u0026quot;Xamp√∫\u0026quot;, \u0026quot;Condicionador\u0026quot;, \u0026quot;Tira-limo\u0026quot;),\rmercearia = c(\u0026quot;P√£o\u0026quot;, \u0026quot;Leite\u0026quot;, \u0026quot;Ovos\u0026quot;, \u0026quot;Queijo\u0026quot;, \u0026quot;Presunto\u0026quot;, \u0026quot;Manteiga\u0026quot;, \u0026quot;Biscoito\u0026quot;),\rhortifruti = c(\u0026quot;Cebola\u0026quot;, \u0026quot;Tomate\u0026quot;, \u0026quot;Alho\u0026quot;, \u0026quot;Banana\u0026quot;, \u0026quot;Mam√£o\u0026quot;, \u0026quot;Abacate\u0026quot;, \u0026quot;Batata\u0026quot;, \u0026quot;Pimenta dedo-de-mo√ßa\u0026quot;)\r)\rlista_de_compras\r ## $limpeza\r## [1] \u0026quot;Creme dental\u0026quot; \u0026quot;Sabonete\u0026quot; \u0026quot;Xamp√∫\u0026quot; \u0026quot;Condicionador\u0026quot;\r## [5] \u0026quot;Tira-limo\u0026quot; ## ## $mercearia\r## [1] \u0026quot;P√£o\u0026quot; \u0026quot;Leite\u0026quot; \u0026quot;Ovos\u0026quot; \u0026quot;Queijo\u0026quot; \u0026quot;Presunto\u0026quot; \u0026quot;Manteiga\u0026quot; \u0026quot;Biscoito\u0026quot;\r## ## $hortifruti\r## [1] \u0026quot;Cebola\u0026quot; \u0026quot;Tomate\u0026quot; \u0026quot;Alho\u0026quot; ## [4] \u0026quot;Banana\u0026quot; \u0026quot;Mam√£o\u0026quot; \u0026quot;Abacate\u0026quot; ## [7] \u0026quot;Batata\u0026quot; \u0026quot;Pimenta dedo-de-mo√ßa\u0026quot;\r A principal caracter√≠stica da lista que eu queria ressaltar aqui √© que podemos armazenar v√°rias informa√ß√µes de tipos e tamanhos diferentes numa lista. √â a estrutura de dados mais flex√≠vel no R.\nData Frames Crie um data frame contendo informa√ß√µes de cinco colegas de turma: registre o nome, a idade presumida, o sexo, a profiss√£o e a renda presumida. N√£o precisa perguntar, basta chutar um valor que voc√™ ache.\ndf \u0026lt;- data.frame(nome = c(\u0026quot;Colega 1\u0026quot;, \u0026quot;Colega 2\u0026quot;, \u0026quot;Colega 3\u0026quot;, \u0026quot;Colega 4\u0026quot;, \u0026quot;Colega 5\u0026quot;),\ridade = c(20, 30, 40, 25, 35),\rsexo = c(\u0026quot;M\u0026quot;, \u0026quot;F\u0026quot;, \u0026quot;F\u0026quot;, \u0026quot;F\u0026quot;, \u0026quot;M\u0026quot;), profissao = c(\u0026quot;Professor\u0026quot;, \u0026quot;Pesquisador\u0026quot;, \u0026quot;Programador\u0026quot;, \u0026quot;Jornalista\u0026quot;, \u0026quot;Analista de dados\u0026quot;),\rrenda = c(2000, 3000, 1500, 2000, 4000))\rdf\r ## nome idade sexo profissao renda\r## 1 Colega 1 20 M Professor 2000\r## 2 Colega 2 30 F Pesquisador 3000\r## 3 Colega 3 40 F Programador 1500\r## 4 Colega 4 25 F Jornalista 2000\r## 5 Colega 5 35 M Analista de dados 4000\r Revis√£o   Como voc√™ poderia identificar o tipo de um objeto? Como voc√™ poderia identificar a classe dele? Qual a diferen√ßa entre essas duas coisas? Porque isso √© relevante?\nSupondo que voc√™ tenha um objeto desconhecido, voc√™ pode usar as fun√ß√µes descritas na aula para identificar seu tipo:\nv \u0026lt;- c(1, 2, 3, 4, NA)\rtypeof(v)\r ## [1] \u0026quot;double\u0026quot;\r class(v)\r ## [1] \u0026quot;numeric\u0026quot;\r is.vector(v)\r ## [1] TRUE\r is.list(v)\r ## [1] FALSE\r O tipo de um objeto define quais informa√ß√µes est√£o guardadas nele:\n double guardam n√∫meros reais, que cont√©m casas decimais integer guardam n√∫meros inteiros character guardam strings de caracteres em formato texto listas guardam objetos R, como vetores, fun√ß√µes, outras listas  A classe de um objeto define como o R vai trat√°-lo:\n fatores ser√£o armazenados como n√∫meros inteiros, mas ser√£o representados por r√≥tulos de texto sempre que o usu√°rio desejar ver seu conte√∫do. datas ser√£o armazenadas como n√∫meros de segundos, mas ser√£o representadas em formato de data/hora leg√≠vel por pessoas. matrizes codificam opera√ß√µes como transposi√ß√£o e multiplica√ß√£o de matrizes que n√£o funcionam em outros tipos de dado  Esses s√£o apenas alguns exemplos de classe, mas acho que deu pra pegar a ideia.\n  Digamos que voc√™ quer armazenar algumas informa√ß√µes na mem√≥ria do computador. Que tipo de objeto voc√™ utilizaria para armanzenar:\n Os nomes dos colegas da sua turma Seus n√∫meros de telefone Uma vari√°vel que indica se esta pessoa nasceu antes de 1989 A idade de um grupo de pessoas Informa√ß√µes de cadastro de uma pessoa: nome completo, afilia√ß√µes, telefones para contato, endere√ßos, etc. Uma cole√ß√£o de fun√ß√µes que voc√™ utiliza frequentemente    Voc√™ pode armazenar valores em vetores at√¥micos, ent√£o nomes de colegas poderiam ficar num vetor de caracteres, n√∫meros de telefone num vetor de n√∫meros inteiros, uma vari√°vel que indica se algu√©m nasceu antes de 1989 ou depois √© perfeita para um vetor l√≥gico.\nA idade de um grupo de pessoas j√° parece conter mais de uma informa√ß√£o por observa√ß√£o, ent√£o ela pode ser armazenada em um data.frame, contendo a identifica√ß√£o da pessoa e a sua idade.\nUm caso parecido, mas levemente diferente s√£o as informa√ß√µes de cadastro de uma pessoa, que deveriam ser armazenadas numa lista, pois o cadastro pode conter informa√ß√µes de diferentes formatos e tamanhos e n√£o necessariamente teria o formato retangular do data.frame.\nUma cole√ß√£o de fun√ß√µes deve ser armazenadas numa lista, pois este √© objeto R adequado para armazenar tudo que n√£o for uma cole√ß√£o de informa√ß√µes como num vetor at√¥mico.\nPorque no resumo eu disse que as fun√ß√µes s√£o verbos? Que tipo de a√ß√µes as fun√ß√µes que vimos na aula fazem nos nossos objetos? Se as fun√ß√µes s√£o verbos, que classe de palavras a gente poderia dizer que s√£o os nossos objetos? E n√≥s, que usamos o software, o que somos?  Se voc√™ parar para pensar, programa√ß√£o de computadores √© uma forma de comunica√ß√£o envolvendo pelo menos 3 interlocutores: voc√™, a m√°quina e outros programadores. Na sintaxe do portugu√™s, as frases s√£o divididas em sujeito e predicado, sendo que o predicado geralmente tem um verbo e alguns complementos opcionais. O sujeito de uma frase na programa√ß√£o geralmente est√° oculto, pois ele √© implicitamente voc√™, que pede que a m√°quina execute tarefas. O verbo s√£o as fun√ß√µes, que indicam √† m√°quina que a√ß√µes dever√£o ser executadas, e os complementos s√£o os argumentos da fun√ß√£o, em geral, objetos contendo informa√ß√µes, bem como op√ß√µes (adjetivos, adv√©rbios) que descrevem n√£o apenas EM QUEM as tarefas ser√£o executadas, mas tamb√©m COMO.\nDigamos que eu quero armazenar as informa√ß√µes de cadastro dos membros da turma. Que estrutura de dados eu deveria utilizar? Como voc√™ implementaria esta estrutura no R? Desenvolva um pequeno exemplo.  Voc√™ deveria utilizar um data frame para guardar as v√°rias informa√ß√µes de cadastro da turma. Note que √© um pouco diferente do exemplo acima, em que eu tenho o cadastro de uma pessoa. Em geral, parte do processo de tabula√ß√£o de um banco de dados √© coletar informa√ß√µes que est√£o em formatos d√≠spares e transform√°-las em algo que pode ser analisado com facilidade, ou seja, um data frame.\ndf \u0026lt;- data.frame(nome = c(\u0026quot;Fulano\u0026quot;, \u0026quot;Beltrano\u0026quot;),\rtelefone = c(123456, 456321),\rendereco = c(\u0026quot;Onde Judas perdeu as botas\u0026quot;, \u0026quot;Duas ruas pra baixo\u0026quot;),\rsexo = c(\u0026quot;M\u0026quot;, \u0026quot;F\u0026quot;),\remail = c(\u0026quot;fulano@email.com\u0026quot;, \u0026quot;beltrano@nomail.com\u0026quot;), uf = c(\u0026quot;SP\u0026quot;, \u0026quot;RN\u0026quot;), cidade = c(\u0026quot;Bor√°\u0026quot;, \u0026quot;S√£o Miguel do Gostoso\u0026quot;))\rdf\r ## nome telefone endereco sexo email uf\r## 1 Fulano 123456 Onde Judas perdeu as botas M fulano@email.com SP\r## 2 Beltrano 456321 Duas ruas pra baixo F beltrano@nomail.com RN\r## cidade\r## 1 Bor√°\r## 2 S√£o Miguel do Gostoso\r Em geral, n√£o √© comum construir bancos de dados no R, existem softwares com facilidades melhores para a digita√ß√£o de informa√ß√µes. O exemplo acima apenas demonstra minimamente o resultado do que, provavelmente, seria uma importa√ß√£o de um cadastro j√° salvo.\nQuais s√£o os atributos de um data frame? Como voc√™ poderia descobr√≠-los e alter√°-los? Em que situa√ß√µes isso seria proveitoso?  Usando o data frame constru√≠do no exerc√≠cio anterior, podemos verificar seus atributos:\nattributes(df)\r ## $names\r## [1] \u0026quot;nome\u0026quot; \u0026quot;telefone\u0026quot; \u0026quot;endereco\u0026quot; \u0026quot;sexo\u0026quot; \u0026quot;email\u0026quot; \u0026quot;uf\u0026quot; \u0026quot;cidade\u0026quot; ## ## $class\r## [1] \u0026quot;data.frame\u0026quot;\r## ## $row.names\r## [1] 1 2\r Podemos alterar esses atributos usando a forma \u0026lt;- da mesma fun√ß√£o:\nattributes(df) \u0026lt;- list(row.names = c(\u0026quot;Oi\u0026quot;, \u0026quot;Td bem?\u0026quot;),\rnames = c(\u0026quot;Nome\u0026quot;, \u0026quot;Telefone\u0026quot;, \u0026quot;Endere√ßo\u0026quot;, \u0026quot;Sexo\u0026quot;, \u0026quot;Email\u0026quot;, \u0026quot;Uf\u0026quot;, \u0026quot;Cidade\u0026quot;),\rclass = \u0026quot;data.frame\u0026quot;)\rdf\r ## Nome Telefone Endere√ßo Sexo Email\r## Oi Fulano 123456 Onde Judas perdeu as botas M fulano@email.com\r## Td bem? Beltrano 456321 Duas ruas pra baixo F beltrano@nomail.com\r## Uf Cidade\r## Oi SP Bor√°\r## Td bem? RN S√£o Miguel do Gostoso\r Em geral, no entanto, evitamos usar essa √∫ltima forma e usamos as fun√ß√µes acess√≥rias para modificar os atributos sem bagun√ßar nosso objeto! Se voc√™ n√£o especificar TODOS os atributos na lista, ele vai desmanchar sua festa\u0026hellip; Por isso, preferimos alterar cada um individualmente:\nrow.names(df) \u0026lt;- c(1, 2)\rdf\r ## Nome Telefone Endere√ßo Sexo Email Uf\r## 1 Fulano 123456 Onde Judas perdeu as botas M fulano@email.com SP\r## 2 Beltrano 456321 Duas ruas pra baixo F beltrano@nomail.com RN\r## Cidade\r## 1 Bor√°\r## 2 S√£o Miguel do Gostoso\r Em geral, √© proveitoso alterar atributos de um objeto como seus nomes para facilitar a legibilidade do c√≥digo e a digita√ß√£o. Outros atributos mais consequentes como a classe, em geral, n√£o √© proveitoso alterar diretamente. As fun√ß√µes que criam e manipulam objetos costumam modificar a classe de um objeto automaticamente e da forma correta, e n√£o precisamos nos preocupar com isso. No entanto, √© √∫til saber a classe de um objeto pois isto pode nos ajudar a identificar a origem de um erro. H√° um exemplo na aula 2 em que tentamos tirar a m√©dia de um valor que est√° salvo num data frame incorretamente.\ndf \u0026lt;- data.frame(idade = c(20, 30, 40, 50))\rmean(df[\u0026quot;idade\u0026quot;])\r ## Warning in mean.default(df[\u0026quot;idade\u0026quot;]): argumento n√£o √© num√©rico nem l√≥gico:\r## retornando NA\r ## [1] NA\r O c√≥digo n√£o funciona, pois estamos tentando tirar a m√©dia de uma lista:\ntypeof(df[\u0026quot;idade\u0026quot;])\r ## [1] \u0026quot;list\u0026quot;\r Para tirar uma m√©dia, precisamos acessar os valores que est√£o no vetor at√¥mico guardado dentro da lista:\ndf[[\u0026quot;idade\u0026quot;]]\r ## [1] 20 30 40 50\r typeof(df[[\u0026quot;idade\u0026quot;]])\r ## [1] \u0026quot;double\u0026quot;\r # ou\rdf$idade\r ## [1] 20 30 40 50\r typeof(df$idade)\r ## [1] \u0026quot;double\u0026quot;\r Agora sim:\nmean(df$idade)\r ## [1] 35\r mean(df[[\u0026quot;idade\u0026quot;]])\r ## [1] 35\r Suponha que voc√™ t√™m o vetor at√¥mico abaixo:  v \u0026lt;- c(1, 1, TRUE, FALSE)\r O que acontecer√° com as informa√ß√µes desse vetor ao ser armazenado no R? Como voc√™ poderia alterar esse resultado? Porque o R se comporta dessa maneira?\nComo j√° discutido anteriormente, os valores TRUE/FALSE ser√£o coagidos a 1/0, e voc√™ pode usar as fun√ß√µes as._____ para converter para o formato desejado.\nas.logical(v)\r ## [1] TRUE TRUE TRUE FALSE\r O R se comporta dessa maneira pois ele visa preservar as informa√ß√µes no formato mais gen√©rico poss√≠vel.\nConsidere a opera√ß√£o matem√°tica abaixo:  v1 \u0026lt;- c(1, 2, 3)\rv2 \u0026lt;- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\rv1 * v2\r O que voc√™ espera encontrar na sa√≠da do R ao rodar essa se√ß√£o? Rode o c√≥digo e responda: voc√™ se surpreendeu? O que aconteceu e porqu√™? Qual o significado da mensagem de aviso?\nAntes de rodar, voc√™ j√° deve ter notado que estamos fazendo uma multiplica√ß√£o de cada elemento do vetor 1 por cada elemento do vetor 2, por√©m, eles tem tamanhos distintos. N√£o nos deve surpreender ent√£o que o R recicle os argumentos do vetor menor at√© dar o tamanho do vetor maior. Como o comprimento do v2 n√£o √© m√∫ltiplo de v1, recebemos um aviso, mas mesmo que n√£o recebamos esse aviso, precisamos estar atentos a reciclagens que n√£o fizemos intencionalmente!\nConsidere o banco de dados abaixo:  sala \u0026lt;- data.frame(\rid = c(1, 2, 3),\ridade = c(20, 25, 30, 35, 40, 45),\rnome = c(\u0026quot;Fulano\u0026quot;, \u0026quot;Cicrano\u0026quot;, \u0026quot;Beltrano\u0026quot;, \u0026quot;Herculano\u0026quot;, \u0026quot;Mariano\u0026quot;, \u0026quot;Carrano\u0026quot;),\rsexo = \u0026quot;Masculino\u0026quot;,\rorigem = c(\u0026quot;Campinas\u0026quot;, \u0026quot;Barueri\u0026quot;, \u0026quot;Monte Verde\u0026quot;, \u0026quot;Rio de Janeiro\u0026quot;, \u0026quot;Natal\u0026quot;, \u0026quot;Belo Horizonte\u0026quot;)\r)\r Verifique as vari√°veis id e sexo. Os valores dessas vari√°veis fazem sentido? Elas n√£o impedem a constru√ß√£o do data frame, por qu√™? Que caracter√≠stica do R est√° operando nessas vari√°veis?\nO valor da vari√°vel id est√° incorreto, pois temos ids repetidas para pessoas diferentes. O valor da vari√°vel sexo est√° correto, aparentemente, de acordo com a vari√°vel nome. Em ambos os casos, R est√° reciclando os vetores mais curtos para preencher os espa√ßos vazios e criar um data frame completo. A vari√°vel id precisa ser corrigida, pois a reciclagem aqui est√° prejudicando a consist√™ncia da informa√ß√£o, mas no caso de sexo, √© um uso v√°lido da regra da reciclagem para evitar repeti√ß√£o.\nAula 2: Manipula√ß√£o de dados Leitura/Importa√ß√£o Visualize os dados que voc√™ acabou de importar em formato de planilha atrav√©s do Environment e usando a fun√ß√£o View(). √â poss√≠vel tamb√©m visualizar as 6 primeiras linhas do data.frame ou as 6 √∫ltimas linhas. Para isso, use as fun√ß√µes head() e tail().\nObs: se voc√™ quiser ver mais que 6 linhas, coloque o segundo argumento na fun√ß√£o head(df, 10). Quantas linhas v√£o ser mostradas neste caso?\nurl \u0026lt;- \u0026quot;https://raw.githubusercontent.com/laddem/site/master/amostra_pnad.csv\u0026quot;\rdf \u0026lt;- read.csv(url)\r View(df)\r head(df, 10)\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 1 2021 1 Cear√° Urbana Homem 80 Branca 2\r## 2 2021 1 Distrito Federal Urbana Mulher 19 Parda 4\r## 3 2021 1 Pernambuco Urbana Mulher 36 Preta 2\r## 4 2021 1 Santa Catarina Urbana Homem 50 Parda 2\r## 5 2021 1 S√£o Paulo Urbana Mulher 43 Parda 3\r## 6 2021 1 Goi√°s Urbana Homem 35 Parda 3\r## 7 2021 1 Amap√° Urbana Homem 72 Parda 3\r## 8 2021 1 S√£o Paulo Urbana Mulher 23 Amarela 8\r## 9 2021 1 Distrito Federal Urbana Homem 23 Parda 5\r## 10 2021 1 Maranh√£o Rural Homem 47 Parda 9\r## VD3005 VD4016\r## 1 16 anos ou mais de estudo NA\r## 2 11 anos de estudo NA\r## 3 12 anos de estudo 1045\r## 4 5 anos de estudo 1500\r## 5 9 anos de estudo 1600\r## 6 14 anos de estudo 3000\r## 7 16 anos ou mais de estudo NA\r## 8 12 anos de estudo 1200\r## 9 14 anos de estudo 1200\r## 10 5 anos de estudo 2000\r tail(df)\r ## Ano Trimestre UF V1022 V2007 V2009 V2010 VD2003\r## 995 2021 1 Bahia Rural Mulher 15 Preta 3\r## 996 2021 1 Amazonas Rural Mulher 32 Parda 3\r## 997 2021 1 Maranh√£o Urbana Homem 69 Parda 3\r## 998 2021 1 Cear√° Urbana Homem 33 Branca 6\r## 999 2021 1 Goi√°s Urbana Homem 58 Parda 3\r## 1000 2021 1 Santa Catarina Rural Homem 66 Branca 2\r## VD3005 VD4016\r## 995 8 anos de estudo NA\r## 996 12 anos de estudo NA\r## 997 3 anos de estudo NA\r## 998 12 anos de estudo 1000\r## 999 16 anos ou mais de estudo 7000\r## 1000 5 anos de estudo 1000\r Exerc√≠cio apenas para voc√™s se familiarizem com as formas de ver o conte√∫do de bancos de dados em R. A fun√ß√£o View() √© √∫til para bancos pequenos, mas tem performance ruim para bancos com muitas informa√ß√µes. head() e tail() s√£o √≥timas formas de verificar a forma geral do banco de dados sem precisar sobrecarregar seu computador.\nSelecionando valores Retorne a informa√ß√£o da observa√ß√£o 800, e as colunas Ano, VD3005, V2009, V2010 do nosso data frame da amostra da pnad. O que o R retornar√°? Fa√ßa a mesma indexa√ß√£o usando inteiros positivos ou inteiros negativos.\ndf[800, c(1, 8, 6, 7)]\r ## Ano VD2003 V2009 V2010\r## 800 2021 3 45 Branca\r df[-c(1:799, 801:1000), -c(2:5, 9, 10)]\r ## Ano V2009 V2010 VD2003\r## 800 2021 45 Branca 3\r Aqui, o objetivo era praticar a sele√ß√£o de linhas e colunas usando inteiros positivos e negativos. √â meio trabalhoso e nem sempre √© a forma mais eficiente, mas √© ocasionalmente √∫til. Note o uso de vetores tanto no caso de sele√ß√µes positivas quanto de negativas e de sequ√™ncias com : para facilitar a digita√ß√£o.\nDiferentes sele√ß√µes: [[ e $ Assim como na lista, √© poss√≠vel usar os colchetes [[ ]] em data frame. Tente us√°-los no data frame da pnad. Quais s√£o as diferen√ßas encontradas?\ndf[[1]]\r ## [1] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [15] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [29] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [43] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [57] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [71] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [85] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [99] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [113] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [127] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r....\rSa√≠da truncada para visualiza√ß√£o\r df[[6]]\r ## [1] 80 19 36 50 43 35 72 23 23 47 71 16 48 13 25 3 27 83\r## [19] 55 79 14 80 20 21 22 69 57 27 63 35 28 41 39 71 7 45\r## [37] 11 9 48 14 48 47 5 36 25 55 8 64 7 58 30 1 18 44\r## [55] 45 17 9 24 11 11 71 75 49 20 55 31 60 2 7 81 68 15\r## [73] 31 2 44 40 49 55 9 40 55 0 35 32 7 63 62 54 48 5\r## [91] 46 49 20 90 16 0 41 15 67 26 22 18 58 63 0 31 14 39\r## [109] 34 44 61 48 47 29 43 65 10 36 20 7 28 18 23 75 37 49\r## [127] 45 3 61 54 38 50 41 47 39 44 32 27 66 55 70 69 41 31\r## [145] 38 91 62 30 21 59 4 29 5 24 83 6 15 38 20 89 85 44\r## [163] 73 7 49 22 33 5 18 4 27 22 0 21 74 26 58 52 77 36\r....\rSa√≠da truncada para visualiza√ß√£o\r df[[\u0026quot;Ano\u0026quot;]]\r ## [1] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [15] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [29] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [43] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [57] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [71] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [85] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [99] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [113] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [127] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r....\rSa√≠da truncada para visualiza√ß√£o\r df[[\u0026quot;V2009\u0026quot;]]\r ## [1] 80 19 36 50 43 35 72 23 23 47 71 16 48 13 25 3 27 83\r## [19] 55 79 14 80 20 21 22 69 57 27 63 35 28 41 39 71 7 45\r## [37] 11 9 48 14 48 47 5 36 25 55 8 64 7 58 30 1 18 44\r## [55] 45 17 9 24 11 11 71 75 49 20 55 31 60 2 7 81 68 15\r## [73] 31 2 44 40 49 55 9 40 55 0 35 32 7 63 62 54 48 5\r## [91] 46 49 20 90 16 0 41 15 67 26 22 18 58 63 0 31 14 39\r## [109] 34 44 61 48 47 29 43 65 10 36 20 7 28 18 23 75 37 49\r## [127] 45 3 61 54 38 50 41 47 39 44 32 27 66 55 70 69 41 31\r## [145] 38 91 62 30 21 59 4 29 5 24 83 6 15 38 20 89 85 44\r## [163] 73 7 49 22 33 5 18 4 27 22 0 21 74 26 58 52 77 36\r....\rSa√≠da truncada para visualiza√ß√£o\r Os colchetes duplos [[ funcionam no data frame porque ele √©, por debaixo do cap√¥, uma lista. Eles retornam os vetores que comp√µem o nosso data frame e permitem a realiza√ß√£o de opera√ß√µes com vetores. S√£o diferentes dos colchetes simples [, que retornar√£o listas/data frames menores, contendo apenas as partes que voc√™ selecionar. Lembrem-se da met√°fora do trem!\nModificando valores Modificando os valores diretamente Considere o vetor abaixo. Atribua um novo valor na posi√ß√£o 3 deste vetor. √â poss√≠vel atribuir uma string no lugar de um n√∫mero?\nvetor_x\u0026lt;- c(10,30,50,10)\rvetor_x[3] \u0026lt;- 70\rvetor_x\r ## [1] 10 30 70 10\r A atribui√ß√£o em si √© um processo relativamente simples. Vamos ver o que acontece se atribu√≠mos um texto.\nvetor_x[3] \u0026lt;- \u0026quot;Texto\u0026quot;\rvetor_x\r ## [1] \u0026quot;10\u0026quot; \u0026quot;30\u0026quot; \u0026quot;Texto\u0026quot; \u0026quot;10\u0026quot;\r R usa suas regras de coer√ß√£o para preservar as informa√ß√µes e transforma os valores num√©ricos em texto.\nModificando com testes l√≥gicos Extraia a coluna V2010 do df2 e teste os valores igual a \u0026lsquo;Branca\u0026rsquo;. Al√©m disso conte quantas linhas s√£o iguais a \u0026lsquo;Branca\u0026rsquo;. Dica: use a fun√ß√£o sum() para fazer a contagem.\n# C√≥pia de df\rdf2 \u0026lt;- df\rsum(df2$V2010 == \u0026quot;Branca\u0026quot;)\r ## [1] 407\r Usamos um teste l√≥gico no vetor df2$V2010 para criar um vetor de valores l√≥gicos TRUE/FALSE e as regras de coer√ß√£o do R para fazer a soma dos valores verdadeiros 1 e descobrimos que 407 pessoas da amostra s√£o brancas.\nValores desconhecidos Conte o n√∫mero de NAs na coluna VD4016 do data frame df2.\nsum(is.na(df2$VD4016))\r ## [1] 613\r Usando a mesma l√≥gica do exerc√≠cio anterior, por√©m, usando a fun√ß√£o is.na() no lugar de == por causa do comportamento especial de valores NA em R.\nRevis√£o Para os pr√≥ximos exerc√≠cios considere o data frame da pnad que estamos usando nas aulas.\n Como voc√™ selecionaria o mesmo valor abaixo, mas usando inteiros negativos na sele√ß√£o?  df2[1,5]\r ## [1] \u0026quot;Homem\u0026quot;\r df2[-(2:1000), -c(1:4, 6:20)]\r ## [1] \u0026quot;Homem\u0026quot;\r Exerc√≠cio maroto, apenas para voc√™s botarem a cabe√ßa para trabalhar e lembrarem de usar : ao inv√©s de digitar milhares de n√∫meros.\nQual a diferen√ßa em usar em selecionar determinada informa√ß√£o em um data frame usando colchetes duplos [[]] e usando colchetes simples? Observe o exemplo abaixo para responder:  df2[['Ano']]\r ## [1] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [15] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [29] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [43] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [57] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [71] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [85] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [99] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [113] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r## [127] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021\r....\rSa√≠da truncada para visualiza√ß√£o\r df['Ano']\r ## Ano\r## 1 2021\r## 2 2021\r## 3 2021\r## 4 2021\r## 5 2021\r## 6 2021\r## 7 2021\r## 8 2021\r## 9 2021\r....\rSa√≠da truncada para visualiza√ß√£o\r A diferen√ßa √© o tipo da sa√≠da do R e o que voc√™ pode fazer com ela:\n# Vetor!\rtypeof(df2[['Ano']])\r ## [1] \u0026quot;integer\u0026quot;\r class(df2[['Ano']])\r ## [1] \u0026quot;integer\u0026quot;\r # Lista/data.frame!\rtypeof(df2['Ano'])\r ## [1] \u0026quot;list\u0026quot;\r class(df2['Ano'])\r ## [1] \u0026quot;data.frame\u0026quot;\r # Funciona!\rmean(df2[['Ano']])\r ## [1] 2021\r # Erro!\rmean(df2['Ano'])\r ## Warning in mean.default(df2[\u0026quot;Ano\u0026quot;]): argumento n√£o √© num√©rico nem l√≥gico:\r## retornando NA\r ## [1] NA\r Considere o data frame abaixo:  sala \u0026lt;- data.frame(\rid = c(1, 2, 3, 4, 5, 6),\ridade = c(20, 25, 30, 35, 40, 45),\rnome = c(\u0026quot;Fulano\u0026quot;, \u0026quot;Cicrano\u0026quot;, \u0026quot;Beltrano\u0026quot;, \u0026quot;Herculano\u0026quot;, \u0026quot;Mariano\u0026quot;, \u0026quot;Carrano\u0026quot;),\rsexo = \u0026quot;Masculino\u0026quot;,\rorigem = c(\u0026quot;Campinas\u0026quot;, \u0026quot;Barueri\u0026quot;, \u0026quot;Monte Verde\u0026quot;, \u0026quot;Rio de Janeiro\u0026quot;, \u0026quot;Natal\u0026quot;, \u0026quot;Belo Horizonte\u0026quot;)\r)\r Modifique o nome de \u0026lsquo;Mariano\u0026rsquo; por \u0026lsquo;Mariana\u0026rsquo;. E altere a vari√°vel sexo para que seja um vetor que altere o valor para \u0026lsquo;Feminino\u0026rsquo; na posi√ß√£o em que o nome foi trocado para Mariana.\n# Ver a informa√ß√£o\rsala[sala$nome == \u0026quot;Mariano\u0026quot;, \u0026quot;nome\u0026quot;]\r ## [1] \u0026quot;Mariano\u0026quot;\r sala[sala$nome == \u0026quot;Mariana\u0026quot;, \u0026quot;sexo\u0026quot;]\r ## character(0)\r # Modificar a informa√ß√£o\rsala[sala$nome == \u0026quot;Mariano\u0026quot;, \u0026quot;nome\u0026quot;] \u0026lt;- \u0026quot;Mariana\u0026quot;\rsala[sala$nome == \u0026quot;Mariana\u0026quot;, \u0026quot;sexo\u0026quot;] \u0026lt;- \u0026quot;Feminino\u0026quot;\r# Checar o resultado\rsala\r ## id idade nome sexo origem\r## 1 1 20 Fulano Masculino Campinas\r## 2 2 25 Cicrano Masculino Barueri\r## 3 3 30 Beltrano Masculino Monte Verde\r## 4 4 35 Herculano Masculino Rio de Janeiro\r## 5 5 40 Mariana Feminino Natal\r## 6 6 45 Carrano Masculino Belo Horizonte\r Voc√™s podiam utilizar uma sele√ß√£o por n√∫meros inteiros, porque o banco √© pequeno, mas optei por fazer o exerc√≠cio usando testes l√≥gicos, porque √© um caso mais geral e serve para mais de uma posi√ß√£o.\n Considere o mesmo data frame sala constru√≠do no exerc√≠cio anterior. Usando testes l√≥gicos e operadores Booleanos. Verifique:\na. se existe algum aluno que seja do sexo Masculino e seja de S√£o Paulo.\nb. se existe algum aluno que tem idade maior ou igual a 20 anos ou que seja de Campinas. c. se existe algu√©m com o nome Beltrano.\n  # a. se existe algum aluno que seja do sexo Masculino e seja de S√£o Paulo.\rsala[sala$origem == \u0026quot;S√£o Paulo\u0026quot;, ]\r ## [1] id idade nome sexo origem\r## \u0026lt;0 linhas\u0026gt; (ou row.names de comprimento 0)\r # b. se existe algum aluno que tem idade maior ou igual a 20 anos ou que seja de Campinas. sala[sala$idade \u0026gt;= 20 \u0026amp; sala$origem == \u0026quot;Campinas\u0026quot;, ]\r ## id idade nome sexo origem\r## 1 1 20 Fulano Masculino Campinas\r # c. se existe algu√©m com o nome Beltrano.\rsala[sala$nome == \u0026quot;Beltrano\u0026quot;, ]\r ## id idade nome sexo origem\r## 3 3 30 Beltrano Masculino Monte Verde\r Exerc√≠cio para exercitar os m√∫sculos de testes l√≥gicos dentro de bancos de dados!\nAgora considere o seguinte data frame e, usando as fun√ß√µes apropriadas ensinadas na aula de hoje, responda:  cadastro \u0026lt;- data.frame(\rid = c(10, 105, 299, 645, 7907, 8660, 4992, 630),\ridade = c(20, 25, 30, 35, 40, 45, 60, 53),\rnome = c(\u0026quot;Thais\u0026quot;, NA, \u0026quot;Guilherme\u0026quot;, \u0026quot;Bet√¢nia\u0026quot;, \u0026quot;Ana Lucia\u0026quot;, NA, NA, \u0026quot;P√¢mela\u0026quot;),\rsexo = c(\u0026quot;Feminino\u0026quot;, \u0026quot;Masculino\u0026quot;,\u0026quot;Masculino\u0026quot;, NA ,NA, \u0026quot;Feminino\u0026quot;, \u0026quot;Masculino\u0026quot;, \u0026quot;Feminino\u0026quot;),\rorigem = c(\u0026quot;Campinas\u0026quot;, NA, \u0026quot;Monte Verde\u0026quot;, \u0026quot;Rio de Janeiro\u0026quot;,\rNA, \u0026quot;Belo Horizonte\u0026quot;,\u0026quot;S√£o Paulo\u0026quot;, \u0026quot;Rio de Janeiro\u0026quot;)\r)\r  Quantos NAs existe na coluna nome? Quantos NAs existe na coluna sexo? Quantos NAs existe na coluna origem? Substitua os NAs na coluna sexo pelo valor \u0026lsquo;Feminino\u0026rsquo;  # 1. Quantos NAs existem na coluna nome?\rsum(is.na(cadastro$nome))\r ## [1] 3\r # 2. Quantos NAs existem na coluna sexo?\rsum(is.na(cadastro$sexo))\r ## [1] 2\r # 3. Quantos NAs existem na coluna origem?\rsum(is.na(cadastro$origem))\r ## [1] 2\r # 4. Substitua os NAs na coluna sexo pelo valor 'Feminino'\r# Ver os dados\rcadastro[is.na(cadastro$sexo), ]\r ## id idade nome sexo origem\r## 4 645 35 Bet√¢nia \u0026lt;NA\u0026gt; Rio de Janeiro\r## 5 7907 40 Ana Lucia \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt;\r # Modificar\rcadastro[is.na(cadastro$origem), \u0026quot;sexo\u0026quot;] \u0026lt;- \u0026quot;Feminino\u0026quot;\r# Ver o resultado\rcadastro\r ## id idade nome sexo origem\r## 1 10 20 Thais Feminino Campinas\r## 2 105 25 \u0026lt;NA\u0026gt; Feminino \u0026lt;NA\u0026gt;\r## 3 299 30 Guilherme Masculino Monte Verde\r## 4 645 35 Bet√¢nia \u0026lt;NA\u0026gt; Rio de Janeiro\r## 5 7907 40 Ana Lucia Feminino \u0026lt;NA\u0026gt;\r## 6 8660 45 \u0026lt;NA\u0026gt; Feminino Belo Horizonte\r## 7 4992 60 \u0026lt;NA\u0026gt; Masculino S√£o Paulo\r## 8 630 53 P√¢mela Feminino Rio de Janeiro\r Salve o data frame \u0026lsquo;cadastro\u0026rsquo; do exercicio anterior em um arquivo .csv. Como voc√™ faria isso? Quais os argumentos que devem ser usados?  write.csv(cadastro, \u0026quot;cadastro.csv\u0026quot;, row.names = FALSE)\r S√≥ para relembrar o uso da fun√ß√£o write.csv. N√£o deixem de consultar tamb√©m as fun√ß√µes ?read.table, ?write.table, ?read.csv2, ?write.csv2, ?read.fwf e ?write.fwf. Essas fun√ß√µes permitem ler a maior parte dos dados em formato texto que voc√™s encontrar√£o nas suas vidas como analistas ou pesquisadores, que utilizam conven√ß√µes como separadores de colunas (;, ,, \\t, \u0026quot; \u0026quot;), separadores de casas decimais (,, .), caracteres de escape (\\, \u0026quot;), codifica√ß√£o de caracteres acentuados (\u0026ldquo;UTF-8\u0026rdquo;, \u0026ldquo;Windows-1252\u0026rdquo;, etc.) e outras quest√µes similares.\n ","date":1623798297,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623798297,"objectID":"3d1a76ac770e4f1e7d0664b1828c01eb","permalink":"https://laddem.github.io/courses/rbase/solucoes/","publishdate":"2021-06-15T20:04:57-03:00","relpermalink":"/courses/rbase/solucoes/","section":"courses","summary":"Solu√ß√µes para os exerc√≠cios feitos em sala e os exerc√≠cios de revis√£o do final das aulas.","tags":[],"title":"Solu√ß√µes","type":"book"},{"authors":null,"categories":null,"content":"Solu√ß√µes dos exerc√≠cios.\nreadr, tibble, tidyr # N√£o esque√ßa dos pacotes!\rlibrary(tidyverse)\r ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 --\r ## v ggplot2 3.3.3 v purrr 0.3.4\r## v tibble 3.1.2 v dplyr 1.0.6\r## v tidyr 1.1.3 v stringr 1.4.0\r## v readr 1.4.0 v forcats 0.5.1\r ## -- Conflicts ------------------------------------------ tidyverse_conflicts() --\r## x dplyr::filter() masks stats::filter()\r## x dplyr::lag() masks stats::lag()\r  Como voc√™ importaria o banco \u0026ldquo;epa78.csv\u0026rdquo;  file \u0026lt;- readr_example(\u0026quot;epa78.txt\u0026quot;)\r Primeiro, √© bom verificar como est√£o dispostas as informa√ß√µes no arquivo texto\nread_lines(file, n_max = 10)\r ## [1] \u0026quot;ALFA ROMEO ALFA ROMEO 78010003\u0026quot;\r## [2] \u0026quot;ALFETTA 03 81 8 74 7 89 9 ALFETTA 78010053\u0026quot;\r## [3] \u0026quot;SPIDER 2000 01 SPIDER 2000 78010103\u0026quot;\r## [4] \u0026quot;AMC AMC 78020002\u0026quot;\r## [5] \u0026quot;GREMLIN 03 79 9 79 9 GREMLIN 78020053\u0026quot;\r## [6] \u0026quot;PACER 04 89 11 89 11 PACER 78020103\u0026quot;\r## [7] \u0026quot;PACER WAGON 07 90 26 91 26 PACER WAGON 78020153\u0026quot;\r## [8] \u0026quot;CONCORD 04 88 12 90 11 90 11 83 16 CONCORD 78020203\u0026quot;\r## [9] \u0026quot;CONCORD WAGON 07 91 30 91 30 CONCORD WAGON 78020253\u0026quot;\r## [10] \u0026quot;MATADOR COUPE 05 97 14 97 14 MATADOR COUPE 78020303\u0026quot;\r Ao identificar que se trata de um arquivo colunado, mas que as colunas s√£o separadas por espa√ßos, escolho o read_fwf com o fwf_empty.\ndic \u0026lt;- fwf_empty(file)\rdf \u0026lt;- read_fwf(file, col_positions = dic)\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## X1 = col_character(),\r## X2 = col_character(),\r## X3 = col_double(),\r## X4 = col_double(),\r## X5 = col_double(),\r## X6 = col_double(),\r## X7 = col_double(),\r## X8 = col_double(),\r## X9 = col_double(),\r## X10 = col_double(),\r## X11 = col_character(),\r## X12 = col_double()\r## )\r df\r ## # A tibble: 20 x 12\r## X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 ALFA RO~ \u0026lt;NA\u0026gt; NA NA NA NA NA NA NA NA ALFA R~ 7.80e7\r## 2 ALFETTA 03 81 8 74 7 89 9 NA NA ALFETTA 7.80e7\r## 3 SPIDER ~ 01 NA NA NA NA NA NA NA NA SPIDER~ 7.80e7\r## 4 AMC \u0026lt;NA\u0026gt; NA NA NA NA NA NA NA NA AMC 7.80e7\r## 5 GREMLIN 03 79 9 NA NA NA NA 79 9 GREMLIN 7.80e7\r## 6 PACER 04 89 11 NA NA NA NA 89 11 PACER 7.80e7\r## 7 PACER W~ 07 90 26 91 26 NA NA NA NA PACER ~ 7.80e7\r## 8 CONCORD 04 88 12 90 11 90 11 83 16 CONCORD 7.80e7\r## 9 CONCORD~ 07 91 30 NA NA 91 30 NA NA CONCOR~ 7.80e7\r## 10 MATADOR~ 05 97 14 97 14 NA NA NA NA MATADO~ 7.80e7\r## 11 MATADOR~ 06 110 20 NA NA 110 20 NA NA MATADO~ 7.80e7\r## 12 MATADOR~ 09 112 50 NA NA 112 50 NA NA MATADO~ 7.80e7\r## 13 ASTON M~ \u0026lt;NA\u0026gt; NA NA NA NA NA NA NA NA ASTON ~ 7.80e7\r## 14 ASTON M~ \u0026lt;NA\u0026gt; NA NA NA NA NA NA NA NA ASTON ~ 7.80e7\r## 15 AUDI \u0026lt;NA\u0026gt; NA NA NA NA NA NA NA NA AUDI 7.81e7\r## 16 FOX 03 84 11 84 11 84 11 NA NA FOX 7.81e7\r## 17 FOX WAG~ 07 83 40 NA NA 83 40 NA NA FOX WA~ 7.81e7\r## 18 5000 04 90 15 NA NA 90 15 NA NA 5000 7.81e7\r## 19 AVANTI \u0026lt;NA\u0026gt; NA NA NA NA NA NA NA NA AVANTI 7.81e7\r## 20 AVANTI ~ 02 75 8 75 8 NA NA NA NA AVANTI~ 7.81e7\r Importe o banco \u0026ldquo;challenge.csv\u0026rdquo; e resolva os problemas com o tipo da coluna.  Ao verificar as primeiras 10 linhas do banco, podemos notar algo estranho\nfile \u0026lt;- readr_example(\u0026quot;challenge.csv\u0026quot;)\rread_lines(file, n_max = 10)\r ## [1] \u0026quot;x,y\u0026quot; \u0026quot;404,NA\u0026quot; \u0026quot;4172,NA\u0026quot; \u0026quot;3004,NA\u0026quot; \u0026quot;787,NA\u0026quot; \u0026quot;37,NA\u0026quot; \u0026quot;2332,NA\u0026quot;\r## [8] \u0026quot;2489,NA\u0026quot; \u0026quot;1449,NA\u0026quot; \u0026quot;3665,NA\u0026quot;\r Parece ser um arquivo csv comum, com duas colunas, mas uma delas parece ter apenas NAs. Se a gente proceder com a importa√ß√£o padr√£o, chegaremos em\ndf \u0026lt;- read_csv(file)\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## x = col_double(),\r## y = col_logical()\r## )\r ## Warning: 1000 parsing failures.\r## row col expected actual file\r## 1001 y 1/0/T/F/TRUE/FALSE 2015-01-16 'C:/Users/vinic/Documents/R/win-library/4.1/readr/extdata/challenge.csv'\r## 1002 y 1/0/T/F/TRUE/FALSE 2018-05-18 'C:/Users/vinic/Documents/R/win-library/4.1/readr/extdata/challenge.csv'\r## 1003 y 1/0/T/F/TRUE/FALSE 2015-09-05 'C:/Users/vinic/Documents/R/win-library/4.1/readr/extdata/challenge.csv'\r## 1004 y 1/0/T/F/TRUE/FALSE 2012-11-28 'C:/Users/vinic/Documents/R/win-library/4.1/readr/extdata/challenge.csv'\r## 1005 y 1/0/T/F/TRUE/FALSE 2020-01-13 'C:/Users/vinic/Documents/R/win-library/4.1/readr/extdata/challenge.csv'\r## .... ... .................. .......... ........................................................................\r## See problems(...) for more details.\r df\r ## # A tibble: 2,000 x 2\r## x y ## \u0026lt;dbl\u0026gt; \u0026lt;lgl\u0026gt;\r## 1 404 NA ## 2 4172 NA ## 3 3004 NA ## 4 787 NA ## 5 37 NA ## 6 2332 NA ## 7 2489 NA ## 8 1449 NA ## 9 3665 NA ## 10 3863 NA ## # ... with 1,990 more rows\r No console de voc√™s, deve aparecer que foram importadas as colunas x como double e y como logical. Mas uma chuva de \u0026ldquo;parsing failures\u0026rdquo;, indicando que expected = 1/0/T/F/TRUE/FALSE, actual = 2015-01-16.\nNa verdade, ao tentar adivinhar o tipo de colunas, o readr l√™ as primeiras 1000 observa√ß√µes em busca de um padr√£o. Voc√™ pode resolver esse problema:\n# 1. Aumentando o n√∫mero de observa√ß√µes utilizadas para adivinhar as colunas\rdf \u0026lt;- read_csv(file, guess_max = 1001)\r ## ## -- Column specification --------------------------------------------------------\r## cols(\r## x = col_double(),\r## y = col_date(format = \u0026quot;\u0026quot;)\r## )\r # A espec√≠fica√ß√£o da coluna Y agora √© \u0026lt;date\u0026gt;\rdf\r ## # A tibble: 2,000 x 2\r## x y ## \u0026lt;dbl\u0026gt; \u0026lt;date\u0026gt; ## 1 404 NA ## 2 4172 NA ## 3 3004 NA ## 4 787 NA ## 5 37 NA ## 6 2332 NA ## 7 2489 NA ## 8 1449 NA ## 9 3665 NA ## 10 3863 NA ## # ... with 1,990 more rows\r # 2. escolhendo diretamente o tipo de coluna antes da importa√ß√£o\rtipos \u0026lt;- cols(\ry = col_date()\r)\rdf \u0026lt;- read_csv(file, col_types = tipos)\r# Mesmo resultado\rdf\r ## # A tibble: 2,000 x 2\r## x y ## \u0026lt;dbl\u0026gt; \u0026lt;date\u0026gt; ## 1 404 NA ## 2 4172 NA ## 3 3004 NA ## 4 787 NA ## 5 37 NA ## 6 2332 NA ## 7 2489 NA ## 8 1449 NA ## 9 3665 NA ## 10 3863 NA ## # ... with 1,990 more rows\r Com o banco sala_aula dado a seguir, transforme-o para que ele contenha as vari√°veis nome, avalia√ß√£o e nota.  sala_aula \u0026lt;- tribble(\r~name, ~teste1, ~teste2, ~prova1,\r\u0026quot;Billy\u0026quot;, \u0026quot;\u0026lt;NA\u0026gt;\u0026quot;, \u0026quot;D\u0026quot; , \u0026quot;C\u0026quot;,\r\u0026quot;Suzy\u0026quot;, \u0026quot;F\u0026quot;, \u0026quot;\u0026lt;NA\u0026gt;\u0026quot;, \u0026quot;\u0026lt;NA\u0026gt;\u0026quot;,\r\u0026quot;Lionel\u0026quot;, \u0026quot;B\u0026quot;, \u0026quot;C\u0026quot; , \u0026quot;B\u0026quot;,\r\u0026quot;Jenny\u0026quot;, \u0026quot;A\u0026quot;, \u0026quot;A\u0026quot; , \u0026quot;B\u0026quot;\r)\r √â sempre bom come√ßar planejando o banco que queremos construir. Queremos um banco que tenha 3 vari√°veis: o nome, o tipo de prova aplicada e a nota de cada aluno. Para isso, precisamos colocar os nomes das colunas teste1, teste2 e prova1 numa vari√°vel e os valores das c√©lulas em outra. Vamos chamar essas colunas de \u0026ldquo;avalia√ß√£o\u0026rdquo; e \u0026ldquo;nota\u0026rdquo;, elas formam um par.\nAgora vamos chamar pivot_wider e especificar esses argumentos.\nsala_aula %\u0026gt;% pivot_longer(\r# Primeiro, identificamos as colunas que ser√£o modificadas\rcols = c(teste1, teste2, prova1),\r# Agora, indicamos os nomes das colunas que receber√£o\r# os nomes das colunas transformadas\rnames_to = \u0026quot;avaliacao\u0026quot;,\r# os valores das c√©lulas\rvalues_to = \u0026quot;nota\u0026quot;\r)\r ## # A tibble: 12 x 3\r## name avaliacao nota ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 Billy teste1 \u0026lt;NA\u0026gt; ## 2 Billy teste2 D ## 3 Billy prova1 C ## 4 Suzy teste1 F ## 5 Suzy teste2 \u0026lt;NA\u0026gt; ## 6 Suzy prova1 \u0026lt;NA\u0026gt; ## 7 Lionel teste1 B ## 8 Lionel teste2 C ## 9 Lionel prova1 B ## 10 Jenny teste1 A ## 11 Jenny teste2 A ## 12 Jenny prova1 B\r Transforme o banco relig_income para que ele contenha as colunas religi√£o, renda e frequ√™ncia.  relig_income\r ## # A tibble: 18 x 11\r## religion `\u0026lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Agnostic 27 34 60 81 76 137 122\r## 2 Atheist 12 27 37 52 35 70 73\r## 3 Buddhist 27 21 30 34 33 58 62\r## 4 Catholic 418 617 732 670 638 1116 949\r## 5 Don‚Äôt k~ 15 14 15 11 10 35 21\r## 6 Evangel~ 575 869 1064 982 881 1486 949\r## 7 Hindu 1 9 7 9 11 34 47\r## 8 Histori~ 228 244 236 238 197 223 131\r## 9 Jehovah~ 20 27 24 24 21 30 15\r## 10 Jewish 19 19 25 25 30 95 69\r## 11 Mainlin~ 289 495 619 655 651 1107 939\r## 12 Mormon 29 40 48 51 56 112 85\r## 13 Muslim 6 7 9 10 9 23 16\r## 14 Orthodox 13 17 23 32 32 47 38\r## 15 Other C~ 9 7 11 13 13 14 18\r## 16 Other F~ 20 33 40 46 49 63 46\r## 17 Other W~ 5 2 3 4 2 7 3\r## 18 Unaffil~ 217 299 374 365 341 528 407\r## # ... with 3 more variables: $100-150k \u0026lt;dbl\u0026gt;, \u0026gt;150k \u0026lt;dbl\u0026gt;,\r## # Don't know/refused \u0026lt;dbl\u0026gt;\r O banco relig_income parece ter uma organiza√ß√£o em que temos 2 vari√°veis, mas uma delas est√° numa coluna \u0026ldquo;religion\u0026rdquo; e a outra est√° em 10 colunas, \u0026ldquo;income\u0026rdquo;. Queremos um banco que tenha 3 colunas: a religi√£o, o n√≠vel de renda, e o n√∫mero de pessoas em cada combina√ß√£o das duas primeiras.\nComo no exer√≠cio anterior, vamos chamar pivot_longer e especificar\nrelig_income %\u0026gt;% pivot_longer(\r# As colunas a serem modificadas, notem o uso de ':' para selecionar v√°rias\r# colunas em sequ√™ncia\rcols = `\u0026lt;$10k`:`Don't know/refused`,\r# Vari√°vel recebe os nomes da antiga coluna\rnames_to = \u0026quot;nivel_renda\u0026quot;,\r# Vari√°vel recebe os valores das c√©lulas\rvalues_to = \u0026quot;contagem\u0026quot;\r)\r ## # A tibble: 180 x 3\r## religion nivel_renda contagem\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Agnostic \u0026lt;$10k 27\r## 2 Agnostic $10-20k 34\r## 3 Agnostic $20-30k 60\r## 4 Agnostic $30-40k 81\r## 5 Agnostic $40-50k 76\r## 6 Agnostic $50-75k 137\r## 7 Agnostic $75-100k 122\r## 8 Agnostic $100-150k 109\r## 9 Agnostic \u0026gt;150k 84\r## 10 Agnostic Don't know/refused 96\r## # ... with 170 more rows\r Transforme o banco billboard para que ele contenha apenas uma coluna \u0026ldquo;semana\u0026rdquo; e uma coluna com a posi√ß√£o da m√∫sica no ranking.   Dica, voc√™ pode selecionar v√°rias colunas usando o atalho wk1:wk76\n billboard\r ## # A tibble: 317 x 79\r## artist track date.entered wk1 wk2 wk3 wk4 wk5 wk6 wk7 wk8\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2 Pac Baby D~ 2000-02-26 87 82 72 77 87 94 99 NA\r## 2 2Ge+her The Ha~ 2000-09-02 91 87 92 NA NA NA NA NA\r## 3 3 Doors~ Krypto~ 2000-04-08 81 70 68 67 66 57 54 53\r## 4 3 Doors~ Loser 2000-10-21 76 76 72 69 67 65 55 59\r## 5 504 Boyz Wobble~ 2000-04-15 57 34 25 17 17 31 36 49\r## 6 98^0 Give M~ 2000-08-19 51 39 34 26 26 19 2 2\r## 7 A*Teens Dancin~ 2000-07-08 97 97 96 95 100 NA NA NA\r## 8 Aaliyah I Don'~ 2000-01-29 84 62 51 41 38 35 35 38\r## 9 Aaliyah Try Ag~ 2000-03-18 59 53 38 28 21 18 16 14\r## 10 Adams, ~ Open M~ 2000-08-26 76 76 74 69 68 67 61 58\r## # ... with 307 more rows, and 68 more variables: wk9 \u0026lt;dbl\u0026gt;, wk10 \u0026lt;dbl\u0026gt;,\r## # wk11 \u0026lt;dbl\u0026gt;, wk12 \u0026lt;dbl\u0026gt;, wk13 \u0026lt;dbl\u0026gt;, wk14 \u0026lt;dbl\u0026gt;, wk15 \u0026lt;dbl\u0026gt;, wk16 \u0026lt;dbl\u0026gt;,\r## # wk17 \u0026lt;dbl\u0026gt;, wk18 \u0026lt;dbl\u0026gt;, wk19 \u0026lt;dbl\u0026gt;, wk20 \u0026lt;dbl\u0026gt;, wk21 \u0026lt;dbl\u0026gt;, wk22 \u0026lt;dbl\u0026gt;,\r## # wk23 \u0026lt;dbl\u0026gt;, wk24 \u0026lt;dbl\u0026gt;, wk25 \u0026lt;dbl\u0026gt;, wk26 \u0026lt;dbl\u0026gt;, wk27 \u0026lt;dbl\u0026gt;, wk28 \u0026lt;dbl\u0026gt;,\r## # wk29 \u0026lt;dbl\u0026gt;, wk30 \u0026lt;dbl\u0026gt;, wk31 \u0026lt;dbl\u0026gt;, wk32 \u0026lt;dbl\u0026gt;, wk33 \u0026lt;dbl\u0026gt;, wk34 \u0026lt;dbl\u0026gt;,\r## # wk35 \u0026lt;dbl\u0026gt;, wk36 \u0026lt;dbl\u0026gt;, wk37 \u0026lt;dbl\u0026gt;, wk38 \u0026lt;dbl\u0026gt;, wk39 \u0026lt;dbl\u0026gt;, wk40 \u0026lt;dbl\u0026gt;,\r## # wk41 \u0026lt;dbl\u0026gt;, wk42 \u0026lt;dbl\u0026gt;, wk43 \u0026lt;dbl\u0026gt;, wk44 \u0026lt;dbl\u0026gt;, wk45 \u0026lt;dbl\u0026gt;, wk46 \u0026lt;dbl\u0026gt;,\r## # wk47 \u0026lt;dbl\u0026gt;, wk48 \u0026lt;dbl\u0026gt;, wk49 \u0026lt;dbl\u0026gt;, wk50 \u0026lt;dbl\u0026gt;, wk51 \u0026lt;dbl\u0026gt;, wk52 \u0026lt;dbl\u0026gt;,\r## # wk53 \u0026lt;dbl\u0026gt;, wk54 \u0026lt;dbl\u0026gt;, wk55 \u0026lt;dbl\u0026gt;, wk56 \u0026lt;dbl\u0026gt;, wk57 \u0026lt;dbl\u0026gt;, wk58 \u0026lt;dbl\u0026gt;,\r## # wk59 \u0026lt;dbl\u0026gt;, wk60 \u0026lt;dbl\u0026gt;, wk61 \u0026lt;dbl\u0026gt;, wk62 \u0026lt;dbl\u0026gt;, wk63 \u0026lt;dbl\u0026gt;, wk64 \u0026lt;dbl\u0026gt;,\r## # wk65 \u0026lt;dbl\u0026gt;, wk66 \u0026lt;lgl\u0026gt;, wk67 \u0026lt;lgl\u0026gt;, wk68 \u0026lt;lgl\u0026gt;, wk69 \u0026lt;lgl\u0026gt;, wk70 \u0026lt;lgl\u0026gt;,\r## # wk71 \u0026lt;lgl\u0026gt;, wk72 \u0026lt;lgl\u0026gt;, wk73 \u0026lt;lgl\u0026gt;, wk74 \u0026lt;lgl\u0026gt;, wk75 \u0026lt;lgl\u0026gt;, wk76 \u0026lt;lgl\u0026gt;\r Da mesma forma como fizemos nos anteriores, queremos transformar as v√°rias wk1:wk76 em um par de colunas, uma que me diga a semana e a outra que me diga em que posi√ß√£o no ranking a m√∫sica estava.\nbillboard %\u0026gt;% pivot_longer(\r# Colunas que ser√£o transformadas\rcols = wk1:wk76,\r# Nome da vari√°vel que receber√° os nomes das colunas\rnames_to = \u0026quot;semana\u0026quot;,\r# Nome da vari√°vel que receber√° os valores das c√©lulas\rvalues_to = \u0026quot;posicao_rank\u0026quot;,\r# Nesse caso, uso o argumento opcional para eliminar os NAs\rvalues_drop_na = TRUE\r# Experimente mudar este argumento para FALSE e veja o resultado\r# Quando uma m√∫sica n√£o est√° mais nas paradas, ela recebe NA. Acho\r# justificado excluir os NAs nesse caso.\r)\r ## # A tibble: 5,307 x 5\r## artist track date.entered semana posicao_rank\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk1 87\r## 2 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk2 82\r## 3 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk3 72\r## 4 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk4 77\r## 5 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk5 87\r## 6 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk6 94\r## 7 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk7 99\r## 8 2Ge+her The Hardest Part Of ... 2000-09-02 wk1 91\r## 9 2Ge+her The Hardest Part Of ... 2000-09-02 wk2 87\r## 10 2Ge+her The Hardest Part Of ... 2000-09-02 wk3 92\r## # ... with 5,297 more rows\r Experimente fazer o caminho inverso dos exerc√≠cios 3 a 5, devolvendo os datasets ao seu formato original. O que voc√™ observou?  Vou come√ßar enxugando os c√≥digos anteriores para criar os resultados que produzimos e salv√°-los em objetos.\nsala_aula_long \u0026lt;- sala_aula %\u0026gt;% pivot_longer(\rcols = c(teste1, teste2, prova1),\rnames_to = \u0026quot;avaliacao\u0026quot;,\rvalues_to = \u0026quot;nota\u0026quot;\r)\rrelig_income_long \u0026lt;- relig_income %\u0026gt;% pivot_longer(\rcols = `\u0026lt;$10k`:`Don't know/refused`,\rnames_to = \u0026quot;nivel_renda\u0026quot;,\rvalues_to = \u0026quot;contagem\u0026quot;\r)\rbillboard_long \u0026lt;- billboard %\u0026gt;% pivot_longer(\rcols = wk1:wk76,\rnames_to = \u0026quot;semana\u0026quot;,\rvalues_to = \u0026quot;posicao_rank\u0026quot;,\rvalues_drop_na = TRUE\r)\rsala_aula_long\r ## # A tibble: 12 x 3\r## name avaliacao nota ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 Billy teste1 \u0026lt;NA\u0026gt; ## 2 Billy teste2 D ## 3 Billy prova1 C ## 4 Suzy teste1 F ## 5 Suzy teste2 \u0026lt;NA\u0026gt; ## 6 Suzy prova1 \u0026lt;NA\u0026gt; ## 7 Lionel teste1 B ## 8 Lionel teste2 C ## 9 Lionel prova1 B ## 10 Jenny teste1 A ## 11 Jenny teste2 A ## 12 Jenny prova1 B\r relig_income_long\r ## # A tibble: 180 x 3\r## religion nivel_renda contagem\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Agnostic \u0026lt;$10k 27\r## 2 Agnostic $10-20k 34\r## 3 Agnostic $20-30k 60\r## 4 Agnostic $30-40k 81\r## 5 Agnostic $40-50k 76\r## 6 Agnostic $50-75k 137\r## 7 Agnostic $75-100k 122\r## 8 Agnostic $100-150k 109\r## 9 Agnostic \u0026gt;150k 84\r## 10 Agnostic Don't know/refused 96\r## # ... with 170 more rows\r billboard_long\r ## # A tibble: 5,307 x 5\r## artist track date.entered semana posicao_rank\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk1 87\r## 2 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk2 82\r## 3 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk3 72\r## 4 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk4 77\r## 5 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk5 87\r## 6 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk6 94\r## 7 2 Pac Baby Don't Cry (Keep... 2000-02-26 wk7 99\r## 8 2Ge+her The Hardest Part Of ... 2000-09-02 wk1 91\r## 9 2Ge+her The Hardest Part Of ... 2000-09-02 wk2 87\r## 10 2Ge+her The Hardest Part Of ... 2000-09-02 wk3 92\r## # ... with 5,297 more rows\r O caminho inverso desses bancos de dados, √© utilizar pivot_wider. Aqui, vamos escolher um par de colunas que cont√©m:\n O nome das colunas que queremos criar O valor que queremos passar para as c√©lulas dessas novas colunas  Vamos ver exemplos comentados como no anterior\nsala_aula_long %\u0026gt;% pivot_wider(\r# Aqui, identificamos colunas que N√ÉO SER√ÉO MODIFICADAS\r# √â o contr√°rio de pivot_longer. Por padr√£o, s√£o todas as que n√£o s√£o\r# mencionadas na transforma√ß√£o, mas para deixar bem claro, # vou deixar expl√≠cito.\rid_cols = name,\r# Vari√°vel com os nomes para as novas colunas\rnames_from = avaliacao,\r# Vari√°vel com os valores para as c√©lulas\rvalues_from = nota\r)\r ## # A tibble: 4 x 4\r## name teste1 teste2 prova1\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 Billy \u0026lt;NA\u0026gt; D C ## 2 Suzy F \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; ## 3 Lionel B C B ## 4 Jenny A A B\r relig_income_long %\u0026gt;% pivot_wider(\r# Colunas n√£o modificadas\rid_cols = religion,\r# Vari√°vel com os nomes para as novas colunas\rnames_from = nivel_renda,\r# Vari√°vel com os valores para as c√©lulas\rvalues_from = contagem\r)\r ## # A tibble: 18 x 11\r## religion `\u0026lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Agnostic 27 34 60 81 76 137 122\r## 2 Atheist 12 27 37 52 35 70 73\r## 3 Buddhist 27 21 30 34 33 58 62\r## 4 Catholic 418 617 732 670 638 1116 949\r## 5 Don‚Äôt k~ 15 14 15 11 10 35 21\r## 6 Evangel~ 575 869 1064 982 881 1486 949\r## 7 Hindu 1 9 7 9 11 34 47\r## 8 Histori~ 228 244 236 238 197 223 131\r## 9 Jehovah~ 20 27 24 24 21 30 15\r## 10 Jewish 19 19 25 25 30 95 69\r## 11 Mainlin~ 289 495 619 655 651 1107 939\r## 12 Mormon 29 40 48 51 56 112 85\r## 13 Muslim 6 7 9 10 9 23 16\r## 14 Orthodox 13 17 23 32 32 47 38\r## 15 Other C~ 9 7 11 13 13 14 18\r## 16 Other F~ 20 33 40 46 49 63 46\r## 17 Other W~ 5 2 3 4 2 7 3\r## 18 Unaffil~ 217 299 374 365 341 528 407\r## # ... with 3 more variables: $100-150k \u0026lt;dbl\u0026gt;, \u0026gt;150k \u0026lt;dbl\u0026gt;,\r## # Don't know/refused \u0026lt;dbl\u0026gt;\r billboard_long %\u0026gt;% pivot_wider(\r# Colunas n√£o modificadas\rid_cols = c(artist, track, date.entered),\r# Vari√°vel com os nomes para as novas colunas\rnames_from = semana,\r# Vari√°vel com os valores para as c√©lulas\rvalues_from = posicao_rank\r)\r ## # A tibble: 317 x 68\r## artist track date.entered wk1 wk2 wk3 wk4 wk5 wk6 wk7 wk8\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;date\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2 Pac Baby D~ 2000-02-26 87 82 72 77 87 94 99 NA\r## 2 2Ge+her The Ha~ 2000-09-02 91 87 92 NA NA NA NA NA\r## 3 3 Doors~ Krypto~ 2000-04-08 81 70 68 67 66 57 54 53\r## 4 3 Doors~ Loser 2000-10-21 76 76 72 69 67 65 55 59\r## 5 504 Boyz Wobble~ 2000-04-15 57 34 25 17 17 31 36 49\r## 6 98^0 Give M~ 2000-08-19 51 39 34 26 26 19 2 2\r## 7 A*Teens Dancin~ 2000-07-08 97 97 96 95 100 NA NA NA\r## 8 Aaliyah I Don'~ 2000-01-29 84 62 51 41 38 35 35 38\r## 9 Aaliyah Try Ag~ 2000-03-18 59 53 38 28 21 18 16 14\r## 10 Adams, ~ Open M~ 2000-08-26 76 76 74 69 68 67 61 58\r## # ... with 307 more rows, and 57 more variables: wk9 \u0026lt;dbl\u0026gt;, wk10 \u0026lt;dbl\u0026gt;,\r## # wk11 \u0026lt;dbl\u0026gt;, wk12 \u0026lt;dbl\u0026gt;, wk13 \u0026lt;dbl\u0026gt;, wk14 \u0026lt;dbl\u0026gt;, wk15 \u0026lt;dbl\u0026gt;, wk16 \u0026lt;dbl\u0026gt;,\r## # wk17 \u0026lt;dbl\u0026gt;, wk18 \u0026lt;dbl\u0026gt;, wk19 \u0026lt;dbl\u0026gt;, wk20 \u0026lt;dbl\u0026gt;, wk21 \u0026lt;dbl\u0026gt;, wk22 \u0026lt;dbl\u0026gt;,\r## # wk23 \u0026lt;dbl\u0026gt;, wk24 \u0026lt;dbl\u0026gt;, wk25 \u0026lt;dbl\u0026gt;, wk26 \u0026lt;dbl\u0026gt;, wk27 \u0026lt;dbl\u0026gt;, wk28 \u0026lt;dbl\u0026gt;,\r## # wk29 \u0026lt;dbl\u0026gt;, wk30 \u0026lt;dbl\u0026gt;, wk31 \u0026lt;dbl\u0026gt;, wk32 \u0026lt;dbl\u0026gt;, wk33 \u0026lt;dbl\u0026gt;, wk34 \u0026lt;dbl\u0026gt;,\r## # wk35 \u0026lt;dbl\u0026gt;, wk36 \u0026lt;dbl\u0026gt;, wk37 \u0026lt;dbl\u0026gt;, wk38 \u0026lt;dbl\u0026gt;, wk39 \u0026lt;dbl\u0026gt;, wk40 \u0026lt;dbl\u0026gt;,\r## # wk41 \u0026lt;dbl\u0026gt;, wk42 \u0026lt;dbl\u0026gt;, wk43 \u0026lt;dbl\u0026gt;, wk44 \u0026lt;dbl\u0026gt;, wk45 \u0026lt;dbl\u0026gt;, wk46 \u0026lt;dbl\u0026gt;,\r## # wk47 \u0026lt;dbl\u0026gt;, wk48 \u0026lt;dbl\u0026gt;, wk49 \u0026lt;dbl\u0026gt;, wk50 \u0026lt;dbl\u0026gt;, wk51 \u0026lt;dbl\u0026gt;, wk52 \u0026lt;dbl\u0026gt;,\r## # wk53 \u0026lt;dbl\u0026gt;, wk54 \u0026lt;dbl\u0026gt;, wk55 \u0026lt;dbl\u0026gt;, wk56 \u0026lt;dbl\u0026gt;, wk57 \u0026lt;dbl\u0026gt;, wk58 \u0026lt;dbl\u0026gt;,\r## # wk59 \u0026lt;dbl\u0026gt;, wk60 \u0026lt;dbl\u0026gt;, wk61 \u0026lt;dbl\u0026gt;, wk62 \u0026lt;dbl\u0026gt;, wk63 \u0026lt;dbl\u0026gt;, wk64 \u0026lt;dbl\u0026gt;,\r## # wk65 \u0026lt;dbl\u0026gt;\r Tanto pivot_longer quanto pivot_wider tem mais argumentos para lidar com situa√ß√µes complexas, como quando voc√™ precisa aplicar transforma√ß√µes em vari√°veis antes de reformatar o banco ou precisa utilizar m√∫ltiplas colunas, mas eu deixo isso para voc√™s descobrirem por conta pr√≥pria quando estiverem confort√°veis com a sintaxe b√°sica.\nO que os argumentos extra e fill em separate fazem? Utilize o exemplo a seguir como guia.  tibble(x = c(\u0026quot;a,b,c\u0026quot;, \u0026quot;d,e,f,g\u0026quot;, \u0026quot;h,i,j\u0026quot;)) %\u0026gt;% separate(x, c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;, \u0026quot;tres\u0026quot;))\r ## Warning: Expected 3 pieces. Additional pieces discarded in 1 rows [2].\r ## # A tibble: 3 x 3\r## um dois tres ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 a b c ## 2 d e f ## 3 h i j\r tibble(x = c(\u0026quot;a,b,c\u0026quot;, \u0026quot;d,e\u0026quot;, \u0026quot;f,g,i\u0026quot;)) %\u0026gt;% separate(x, c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;, \u0026quot;tres\u0026quot;))\r ## Warning: Expected 3 pieces. Missing pieces filled with `NA` in 1 rows [2].\r ## # A tibble: 3 x 3\r## um dois tres ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 a b c ## 2 d e \u0026lt;NA\u0026gt; ## 3 f g i\r Por padr√£o, separate espera que todas as colunas sendo separadas tenham o mesmo comprimento. Por exemplo, no primeiro caso, indicamos que vamos criar tr√™s novas colunas, chamadas de \u0026ldquo;um\u0026rdquo;, \u0026ldquo;dois\u0026rdquo; e \u0026ldquo;tres\u0026rdquo;. Mas os vetores tem tamanhos diferentes. Um deles tem 4 letras ao inv√©s de 3. No segundo exemplo, um deles tem duas letras ao inv√©s de tr√™s. Esse tipo de situa√ß√£o √© bastante comum quando lidamos com erros de digita√ß√£o. Ent√£o, o que fazer com o elemento que est√° sobrando ou faltando?\n# Sobrando\rtibble(x = c(\u0026quot;a,b,c\u0026quot;, \u0026quot;d,e,f,g\u0026quot;, \u0026quot;h,i,j\u0026quot;)) %\u0026gt;% separate(x, c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;, \u0026quot;tres\u0026quot;), extra = \u0026quot;warn\u0026quot;) # avise que ocorreu (padr√£o)\r ## Warning: Expected 3 pieces. Additional pieces discarded in 1 rows [2].\r ## # A tibble: 3 x 3\r## um dois tres ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 a b c ## 2 d e f ## 3 h i j\r tibble(x = c(\u0026quot;a,b,c\u0026quot;, \u0026quot;d,e,f,g\u0026quot;, \u0026quot;h,i,j\u0026quot;)) %\u0026gt;% separate(x, c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;, \u0026quot;tres\u0026quot;), extra = \u0026quot;drop\u0026quot;) # descarte o que sobrou\r ## # A tibble: 3 x 3\r## um dois tres ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 a b c ## 2 d e f ## 3 h i j\r tibble(x = c(\u0026quot;a,b,c\u0026quot;, \u0026quot;d,e,f,g\u0026quot;, \u0026quot;h,i,j\u0026quot;)) %\u0026gt;% separate(x, c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;, \u0026quot;tres\u0026quot;), extra = \u0026quot;merge\u0026quot;) # junte com o √∫ltimo\r ## # A tibble: 3 x 3\r## um dois tres ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 a b c ## 2 d e f,g ## 3 h i j\r # Note especialmente no √∫ltimo caso o que ocorreu com as colunas.\r# Faltando\rtibble(x = c(\u0026quot;a,b,c\u0026quot;, \u0026quot;d,e\u0026quot;, \u0026quot;f,g,i\u0026quot;)) %\u0026gt;% separate(x, c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;, \u0026quot;tres\u0026quot;), fill = \u0026quot;warn\u0026quot;) # avise e preencha a direita\r ## Warning: Expected 3 pieces. Missing pieces filled with `NA` in 1 rows [2].\r ## # A tibble: 3 x 3\r## um dois tres ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 a b c ## 2 d e \u0026lt;NA\u0026gt; ## 3 f g i\r tibble(x = c(\u0026quot;a,b,c\u0026quot;, \u0026quot;d,e\u0026quot;, \u0026quot;f,g,i\u0026quot;)) %\u0026gt;% separate(x, c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;, \u0026quot;tres\u0026quot;), fill = \u0026quot;left\u0026quot;) # preencha a esquerda\r ## # A tibble: 3 x 3\r## um dois tres ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 a b c ## 2 \u0026lt;NA\u0026gt; d e ## 3 f g i\r tibble(x = c(\u0026quot;a,b,c\u0026quot;, \u0026quot;d,e\u0026quot;, \u0026quot;f,g,i\u0026quot;)) %\u0026gt;% separate(x, c(\u0026quot;um\u0026quot;, \u0026quot;dois\u0026quot;, \u0026quot;tres\u0026quot;), fill = \u0026quot;right\u0026quot;) # preencha a direta\r ## # A tibble: 3 x 3\r## um dois tres ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 a b c ## 2 d e \u0026lt;NA\u0026gt; ## 3 f g i\r # Note na sua sa√≠da do R como ficou a tibble e onde foram colocados NAs\r# em cada caso\r Tanto unite como separate possuem um argumento remove. Pra que ele serve e quando voc√™ o utilizaria no valor FALSE?  Acho que a melhor forma de compreender isso √© utilizar um banco de dados. Vamos pegar aquele da popula√ß√£o retirado da Wikip√©dia.\npopulacao \u0026lt;- tribble(\r~Rank, ~Country, ~Population,\t~'% of world', ~Day, ~Month, ~Year, ~Source,\r1L, \u0026quot;China\u0026quot;, 1411778724, \u0026quot;17.9%\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;Nov\u0026quot;, \u0026quot;2020\u0026quot;, \u0026quot;Seventh Census on 2020\u0026quot;,\r2L, \u0026quot;India\u0026quot;, 1377123716, \u0026quot;17.5%\u0026quot;, \u0026quot;19\u0026quot;, \u0026quot;May\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;National population clock[3]\u0026quot;,\r3L, \u0026quot;United States\u0026quot;, 331695937, \u0026quot;4.22%\u0026quot;, \u0026quot;19\u0026quot;, \u0026quot;May\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;National population clock[4]\u0026quot;,\r4L, \u0026quot;Indonesia\u0026quot;, 271350000, \u0026quot;3.45%\u0026quot;, \u0026quot;31\u0026quot;, \u0026quot;Dec\u0026quot;, \u0026quot;2020\u0026quot;, \u0026quot;National annual estimate[5]\u0026quot;,\r5L, \u0026quot;Pakistan\u0026quot;, 225200000, \u0026quot;2.86%\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;Jul\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;UN projection[2]\u0026quot;,\r6L, \u0026quot;Brazil\u0026quot;, 213154869, \u0026quot;2.71%\u0026quot;, \u0026quot;19\u0026quot;, \u0026quot;May\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;National population clock[6]\u0026quot;,\r7L, \u0026quot;Nigeria\u0026quot;, 211401000, \u0026quot;2.69%\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;Jul\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;UN projection[2]\u0026quot;,\r8L, \u0026quot;Bangladesh\u0026quot;, 170689832, \u0026quot;2.17%\u0026quot;, \u0026quot;19\u0026quot;, \u0026quot;May\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;National population clock[7]\u0026quot;,\r9L, \u0026quot;Russia\u0026quot;, 146171015, \u0026quot;1.86%\u0026quot;, \u0026quot;1\u0026quot;, \u0026quot;Jan\u0026quot;, \u0026quot;2021\u0026quot;, \u0026quot;National annual estimate[8]\u0026quot;,\r10L, \u0026quot;Mexico\u0026quot;, 126014024, \u0026quot;1.60%\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;Mar\u0026quot;, \u0026quot;2020\u0026quot;, \u0026quot;2020 census result[9]\u0026quot;\r)\rpopulacao\r ## # A tibble: 10 x 8\r## Rank Country Population `% of world` Day Month Year Source ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 1 China 1411778724 17.9% 1 Nov 2020 Seventh Census o~\r## 2 2 India 1377123716 17.5% 19 May 2021 National populat~\r## 3 3 United Sta~ 331695937 4.22% 19 May 2021 National populat~\r## 4 4 Indonesia 271350000 3.45% 31 Dec 2020 National annual ~\r## 5 5 Pakistan 225200000 2.86% 1 Jul 2021 UN projection[2] ## 6 6 Brazil 213154869 2.71% 19 May 2021 National populat~\r## 7 7 Nigeria 211401000 2.69% 1 Jul 2021 UN projection[2] ## 8 8 Bangladesh 170689832 2.17% 19 May 2021 National populat~\r## 9 9 Russia 146171015 1.86% 1 Jan 2021 National annual ~\r## 10 10 Mexico 126014024 1.60% 2 Mar 2020 2020 census resu~\r Vamos ver dois exemplos, um com unite e outro com separate para exemplificar o que remove faz.\n# Unir as colunas Day, Month, Year, remove = TRUE\rpopulacao %\u0026gt;% unite(Data, Day, Month, Year, remove = TRUE) # padr√£o\r ## # A tibble: 10 x 6\r## Rank Country Population `% of world` Data Source ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 1 China 1411778724 17.9% 1_Nov_2020 Seventh Census on 2020 ## 2 2 India 1377123716 17.5% 19_May_20~ National population cl~\r## 3 3 United Stat~ 331695937 4.22% 19_May_20~ National population cl~\r## 4 4 Indonesia 271350000 3.45% 31_Dec_20~ National annual estima~\r## 5 5 Pakistan 225200000 2.86% 1_Jul_2021 UN projection[2] ## 6 6 Brazil 213154869 2.71% 19_May_20~ National population cl~\r## 7 7 Nigeria 211401000 2.69% 1_Jul_2021 UN projection[2] ## 8 8 Bangladesh 170689832 2.17% 19_May_20~ National population cl~\r## 9 9 Russia 146171015 1.86% 1_Jan_2021 National annual estima~\r## 10 10 Mexico 126014024 1.60% 2_Mar_2020 2020 census result[9]\r # Unir as colunas Day, Month, Year, remove = FALSE\rpopulacao %\u0026gt;% unite(Data, Day, Month, Year, remove = FALSE)\r ## # A tibble: 10 x 9\r## Rank Country Population `% of world` Data Day Month Year Source ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 1 China 1411778724 17.9% 1_Nov_~ 1 Nov 2020 Seventh Ce~\r## 2 2 India 1377123716 17.5% 19_May~ 19 May 2021 National p~\r## 3 3 United S~ 331695937 4.22% 19_May~ 19 May 2021 National p~\r## 4 4 Indonesia 271350000 3.45% 31_Dec~ 31 Dec 2020 National a~\r## 5 5 Pakistan 225200000 2.86% 1_Jul_~ 1 Jul 2021 UN project~\r## 6 6 Brazil 213154869 2.71% 19_May~ 19 May 2021 National p~\r## 7 7 Nigeria 211401000 2.69% 1_Jul_~ 1 Jul 2021 UN project~\r## 8 8 Banglade~ 170689832 2.17% 19_May~ 19 May 2021 National p~\r## 9 9 Russia 146171015 1.86% 1_Jan_~ 1 Jan 2021 National a~\r## 10 10 Mexico 126014024 1.60% 2_Mar_~ 2 Mar 2020 2020 censu~\r # Vejam o que aconteceu com as colunas nos dois bancos.\r Agora com separate: Separar a coluna year em s√©culo e ano, apenas como exemplo\n# remove = TRUE, padr√£o\rpopulacao %\u0026gt;% separate(Year, c(\u0026quot;seculo\u0026quot;, \u0026quot;ano\u0026quot;), sep = 2, remove = TRUE)\r ## # A tibble: 10 x 9\r## Rank Country Population `% of world` Day Month seculo ano Source ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 1 China 1411778724 17.9% 1 Nov 20 20 Seventh Cen~\r## 2 2 India 1377123716 17.5% 19 May 20 21 National po~\r## 3 3 United S~ 331695937 4.22% 19 May 20 21 National po~\r## 4 4 Indonesia 271350000 3.45% 31 Dec 20 20 National an~\r## 5 5 Pakistan 225200000 2.86% 1 Jul 20 21 UN projecti~\r## 6 6 Brazil 213154869 2.71% 19 May 20 21 National po~\r## 7 7 Nigeria 211401000 2.69% 1 Jul 20 21 UN projecti~\r## 8 8 Banglade~ 170689832 2.17% 19 May 20 21 National po~\r## 9 9 Russia 146171015 1.86% 1 Jan 20 21 National an~\r## 10 10 Mexico 126014024 1.60% 2 Mar 20 20 2020 census~\r # remove = FALSE\rpopulacao %\u0026gt;% separate(Year, c(\u0026quot;seculo\u0026quot;, \u0026quot;ano\u0026quot;), sep = 2, remove = FALSE)\r ## # A tibble: 10 x 10\r## Rank Country Population `% of world` Day Month Year seculo ano Source ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 1 China 1411778724 17.9% 1 Nov 2020 20 20 Sevent~\r## 2 2 India 1377123716 17.5% 19 May 2021 20 21 Nation~\r## 3 3 United ~ 331695937 4.22% 19 May 2021 20 21 Nation~\r## 4 4 Indones~ 271350000 3.45% 31 Dec 2020 20 20 Nation~\r## 5 5 Pakistan 225200000 2.86% 1 Jul 2021 20 21 UN pro~\r## 6 6 Brazil 213154869 2.71% 19 May 2021 20 21 Nation~\r## 7 7 Nigeria 211401000 2.69% 1 Jul 2021 20 21 UN pro~\r## 8 8 Banglad~ 170689832 2.17% 19 May 2021 20 21 Nation~\r## 9 9 Russia 146171015 1.86% 1 Jan 2021 20 21 Nation~\r## 10 10 Mexico 126014024 1.60% 2 Mar 2020 20 20 2020 c~\r # Vejam o que aconteceu com as colunas nos dois bancos.\r Eu gosto de utilizar esse argumento quando eu tenho d√∫vida sobre o resultado e quero fazer inspe√ß√£o visual para detectar eventuais problemas na separa√ß√£o ou jun√ß√£o. Uma vez que estou satisfeito com o resultado, em geral eu uso o remove=TRUE. Voc√™s tem que decidir se precisam manter as colunas originais ou se a coluna transformada √© o suficiente.\nCompare o argumento values_fill em pivot_wider e fill em complete. Qual √© a diferen√ßa?  A resposta curta √© simples: em pivot_wider, podemos ter aqueles missings \u0026ldquo;impl√≠citos\u0026rdquo; que n√£o apareciam no nosso banco longo e, durante a transforma√ß√£o, eles viram NAs nas colunas. √ì argumento values_fill indica um valor para ser preenchido no lugar de NA.\nEm complete, temos uma situa√ß√£o similar. O que fazer quando for encontrada uma combina√ß√£o de valores no banco longo que √© um \u0026ldquo;missing impl√≠cito\u0026rdquo;? Voc√™ pode especificar um valor padr√£o para preench√™-lo.\nS√£o fun√ß√µes similares, mas uma funciona sem reformatar o banco e a outra durante o processo de reformata√ß√£o. Veja um exemplo abaixo com aquela tibble das a√ß√µes.\nacoes \u0026lt;- tibble(\rano = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),\rqdr = c( 1, 2, 3, 4, 2, 3, 4),\rlucro = c(1.88, 0.59, 0.35, NA, 0.92, 0.17, 2.66)\r)\racoes\r ## # A tibble: 7 x 3\r## ano qdr lucro\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2015 1 1.88\r## 2 2015 2 0.59\r## 3 2015 3 0.35\r## 4 2015 4 NA ## 5 2016 2 0.92\r## 6 2016 3 0.17\r## 7 2016 4 2.66\r # Vamos supor que o NA impl√≠cito significa que a empresa teve # lucro = 0 naquele quadrimestre.\r# pivot_wider, values_fill\racoes %\u0026gt;% pivot_wider(\rid_cols = ano,\rnames_from = qdr,\rvalues_from = lucro,\rvalues_fill = 0\r)\r ## # A tibble: 2 x 5\r## ano `1` `2` `3` `4`\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2015 1.88 0.59 0.35 NA ## 2 2016 0 0.92 0.17 2.66\r # complete, fill\racoes %\u0026gt;% complete(ano, qdr, fill = list(lucro = 0))\r ## # A tibble: 8 x 3\r## ano qdr lucro\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2015 1 1.88\r## 2 2015 2 0.59\r## 3 2015 3 0.35\r## 4 2015 4 0 ## 5 2016 1 0 ## 6 2016 2 0.92\r## 7 2016 3 0.17\r## 8 2016 4 2.66\r Note o resultado. E note tamb√©m que values_fill em pivot_wider √© um pouco mais criterioso na hora de fazer as transforma√ß√µes.\nstringr, forcats e dplyr library(nycflights13)\r   Encontre os v√¥os que:\n  Atrasaram mais de duas horas\n  flights %\u0026gt;% filter(dep_delay \u0026gt; 120)\r ## # A tibble: 9,723 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 848 1835 853 1001 1950\r## 2 2013 1 1 957 733 144 1056 853\r## 3 2013 1 1 1114 900 134 1447 1222\r## 4 2013 1 1 1540 1338 122 2020 1825\r## 5 2013 1 1 1815 1325 290 2120 1542\r## 6 2013 1 1 1842 1422 260 1958 1535\r## 7 2013 1 1 1856 1645 131 2212 2005\r## 8 2013 1 1 1934 1725 129 2126 1855\r## 9 2013 1 1 1938 1703 155 2109 1823\r## 10 2013 1 1 1942 1705 157 2124 1830\r## # ... with 9,713 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r Com destino a Houston (IAH ou HOU)  flights %\u0026gt;% filter(dest %in% c(\u0026quot;IAH\u0026quot;, \u0026quot;HOU\u0026quot;))\r ## # A tibble: 9,313 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830 819\r## 2 2013 1 1 533 529 4 850 830\r## 3 2013 1 1 623 627 -4 933 932\r## 4 2013 1 1 728 732 -4 1041 1038\r## 5 2013 1 1 739 739 0 1104 1038\r## 6 2013 1 1 908 908 0 1228 1219\r## 7 2013 1 1 1028 1026 2 1350 1339\r## 8 2013 1 1 1044 1045 -1 1352 1351\r## 9 2013 1 1 1114 900 134 1447 1222\r## 10 2013 1 1 1205 1200 5 1503 1505\r## # ... with 9,303 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r Operados pela United, American ou Delta  unique(flights$carrier)\r ## [1] \u0026quot;UA\u0026quot; \u0026quot;AA\u0026quot; \u0026quot;B6\u0026quot; \u0026quot;DL\u0026quot; \u0026quot;EV\u0026quot; \u0026quot;MQ\u0026quot; \u0026quot;US\u0026quot; \u0026quot;WN\u0026quot; \u0026quot;VX\u0026quot; \u0026quot;FL\u0026quot; \u0026quot;AS\u0026quot; \u0026quot;9E\u0026quot; \u0026quot;F9\u0026quot; \u0026quot;HA\u0026quot; \u0026quot;YV\u0026quot;\r## [16] \u0026quot;OO\u0026quot;\r flights %\u0026gt;% filter(carrier %in% c(\u0026quot;UA\u0026quot;, \u0026quot;AA\u0026quot;, \u0026quot;DL\u0026quot;))\r ## # A tibble: 139,504 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830 819\r## 2 2013 1 1 533 529 4 850 830\r## 3 2013 1 1 542 540 2 923 850\r## 4 2013 1 1 554 600 -6 812 837\r## 5 2013 1 1 554 558 -4 740 728\r## 6 2013 1 1 558 600 -2 753 745\r## 7 2013 1 1 558 600 -2 924 917\r## 8 2013 1 1 558 600 -2 923 937\r## 9 2013 1 1 559 600 -1 941 910\r## 10 2013 1 1 559 600 -1 854 902\r## # ... with 139,494 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r Decolaram entre julho e setembro  flights %\u0026gt;% filter(between(month, 7, 9))\r ## # A tibble: 86,326 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 7 1 1 2029 212 236 2359\r## 2 2013 7 1 2 2359 3 344 344\r## 3 2013 7 1 29 2245 104 151 1\r## 4 2013 7 1 43 2130 193 322 14\r## 5 2013 7 1 44 2150 174 300 100\r## 6 2013 7 1 46 2051 235 304 2358\r## 7 2013 7 1 48 2001 287 308 2305\r## 8 2013 7 1 58 2155 183 335 43\r## 9 2013 7 1 100 2146 194 327 30\r## 10 2013 7 1 100 2245 135 337 135\r## # ... with 86,316 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r Chegaram com mais de duas horas de atraso, mas n√£o decolaram com atraso  flights %\u0026gt;% filter(arr_delay \u0026gt; 120, dep_delay \u0026lt;= 0)\r ## # A tibble: 29 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 27 1419 1420 -1 1754 1550\r## 2 2013 10 7 1350 1350 0 1736 1526\r## 3 2013 10 7 1357 1359 -2 1858 1654\r## 4 2013 10 16 657 700 -3 1258 1056\r## 5 2013 11 1 658 700 -2 1329 1015\r## 6 2013 3 18 1844 1847 -3 39 2219\r## 7 2013 4 17 1635 1640 -5 2049 1845\r## 8 2013 4 18 558 600 -2 1149 850\r## 9 2013 4 18 655 700 -5 1213 950\r## 10 2013 5 22 1827 1830 -3 2217 2010\r## # ... with 19 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;, carrier \u0026lt;chr\u0026gt;,\r## # flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;, air_time \u0026lt;dbl\u0026gt;,\r## # distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r Atrasaram mais de uma hora para decolar, mas recuperaram mais de 30 minutos durante o voo  flights %\u0026gt;% filter(dep_delay \u0026gt; 60, dep_delay - arr_delay \u0026gt;= 30)\r ## # A tibble: 2,046 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 1716 1545 91 2140 2039\r## 2 2013 1 1 2205 1720 285 46 2040\r## 3 2013 1 1 2326 2130 116 131 18\r## 4 2013 1 3 1503 1221 162 1803 1555\r## 5 2013 1 3 1821 1530 171 2131 1910\r## 6 2013 1 3 1839 1700 99 2056 1950\r## 7 2013 1 3 1850 1745 65 2148 2120\r## 8 2013 1 3 1923 1815 68 2036 1958\r## 9 2013 1 3 1941 1759 102 2246 2139\r## 10 2013 1 3 1950 1845 65 2228 2227\r## # ... with 2,036 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r Decolaram entre a meia-noite e 6 da manh√£ (inclusive)  flights %\u0026gt;% filter(between(hour, 0, 5) | (hour == 6 \u0026amp; minute == 0))\r ## # A tibble: 8,970 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830 819\r## 2 2013 1 1 533 529 4 850 830\r## 3 2013 1 1 542 540 2 923 850\r## 4 2013 1 1 544 545 -1 1004 1022\r## 5 2013 1 1 554 600 -6 812 837\r## 6 2013 1 1 554 558 -4 740 728\r## 7 2013 1 1 555 600 -5 913 854\r## 8 2013 1 1 557 600 -3 709 723\r## 9 2013 1 1 557 600 -3 838 846\r## 10 2013 1 1 558 600 -2 753 745\r## # ... with 8,960 more rows, and 11 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r Reordene suas colunas para encontrar os voos mais r√°pidos (maior velocidade de voo).  flights %\u0026gt;% select(air_time, distance) %\u0026gt;% mutate(speed = distance/air_time) %\u0026gt;% arrange(desc(speed))\r ## # A tibble: 336,776 x 3\r## air_time distance speed\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 65 762 11.7 ## 2 93 1008 10.8 ## 3 55 594 10.8 ## 4 70 748 10.7 ## 5 105 1035 9.86\r## 6 170 1598 9.4 ## 7 172 1598 9.29\r## 8 175 1623 9.27\r## 9 173 1598 9.24\r## 10 173 1598 9.24\r## # ... with 336,766 more rows\r Teste v√°rias maneiras diferentes de selecionar as vari√°veis dep_time, dep_delay, arr_time e arr_delay usando as v√°rias helper functions de select.  flights %\u0026gt;% select(dep_time, dep_delay, arr_time, arr_delay)\r ## # A tibble: 336,776 x 4\r## dep_time dep_delay arr_time arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 517 2 830 11\r## 2 533 4 850 20\r## 3 542 2 923 33\r## 4 544 -1 1004 -18\r## 5 554 -6 812 -25\r## 6 554 -4 740 12\r## 7 555 -5 913 19\r## 8 557 -3 709 -14\r## 9 557 -3 838 -8\r## 10 558 -2 753 8\r## # ... with 336,766 more rows\r flights %\u0026gt;% select(starts_with(\u0026quot;dep\u0026quot;), starts_with(\u0026quot;arr\u0026quot;))\r ## # A tibble: 336,776 x 4\r## dep_time dep_delay arr_time arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 517 2 830 11\r## 2 533 4 850 20\r## 3 542 2 923 33\r## 4 544 -1 1004 -18\r## 5 554 -6 812 -25\r## 6 554 -4 740 12\r## 7 555 -5 913 19\r## 8 557 -3 709 -14\r## 9 557 -3 838 -8\r## 10 558 -2 753 8\r## # ... with 336,766 more rows\r flights %\u0026gt;% select(starts_with(c(\u0026quot;dep\u0026quot;, \u0026quot;arr\u0026quot;)))\r ## # A tibble: 336,776 x 4\r## dep_time dep_delay arr_time arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 517 2 830 11\r## 2 533 4 850 20\r## 3 542 2 923 33\r## 4 544 -1 1004 -18\r## 5 554 -6 812 -25\r## 6 554 -4 740 12\r## 7 555 -5 913 19\r## 8 557 -3 709 -14\r## 9 557 -3 838 -8\r## 10 558 -2 753 8\r## # ... with 336,766 more rows\r flights %\u0026gt;% select(matches(\u0026quot;^arr|^dep\u0026quot;))\r ## # A tibble: 336,776 x 4\r## dep_time dep_delay arr_time arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 517 2 830 11\r## 2 533 4 850 20\r## 3 542 2 923 33\r## 4 544 -1 1004 -18\r## 5 554 -6 812 -25\r## 6 554 -4 740 12\r## 7 555 -5 913 19\r## 8 557 -3 709 -14\r## 9 557 -3 838 -8\r## 10 558 -2 753 8\r## # ... with 336,766 more rows\r flights %\u0026gt;% select(!starts_with(c(\u0026quot;sched\u0026quot;, \u0026quot;car\u0026quot;)) \u0026amp; contains(c(\u0026quot;dep\u0026quot;, \u0026quot;arr\u0026quot;)))\r ## # A tibble: 336,776 x 4\r## dep_time dep_delay arr_time arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 517 2 830 11\r## 2 533 4 850 20\r## 3 542 2 923 33\r## 4 544 -1 1004 -18\r## 5 554 -6 812 -25\r## 6 554 -4 740 12\r## 7 555 -5 913 19\r## 8 557 -3 709 -14\r## 9 557 -3 838 -8\r## 10 558 -2 753 8\r## # ... with 336,766 more rows\r flights %\u0026gt;% select(ends_with(c(\u0026quot;time\u0026quot;, \u0026quot;delay\u0026quot;)) \u0026amp; !starts_with(c(\u0026quot;sched\u0026quot;, \u0026quot;air\u0026quot;)))\r ## # A tibble: 336,776 x 4\r## dep_time arr_time dep_delay arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 517 830 2 11\r## 2 533 850 4 20\r## 3 542 923 2 33\r## 4 544 1004 -1 -18\r## 5 554 812 -6 -25\r## 6 554 740 -4 12\r## 7 555 913 -5 19\r## 8 557 709 -3 -14\r## 9 557 838 -3 -8\r## 10 558 753 -2 8\r## # ... with 336,766 more rows\r As vari√°veis dep_time e sched_dep_time est√£o num formato incorreto (veja ?flights). Converta-as com mutate para um valor em minutos passados desde a meia-noite. Dica: utilize %/% e %%.  flights %\u0026gt;% mutate(\rdep_hour = dep_time %/% 100,\rdep_minute = dep_time %% 100,\rsched_dep_hour = sched_dep_time %/% 100,\rsched_arr_minute = sched_arr_time %% 100\r)\r ## # A tibble: 336,776 x 23\r## year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830 819\r## 2 2013 1 1 533 529 4 850 830\r## 3 2013 1 1 542 540 2 923 850\r## 4 2013 1 1 544 545 -1 1004 1022\r## 5 2013 1 1 554 600 -6 812 837\r## 6 2013 1 1 554 558 -4 740 728\r## 7 2013 1 1 555 600 -5 913 854\r## 8 2013 1 1 557 600 -3 709 723\r## 9 2013 1 1 557 600 -3 838 846\r## 10 2013 1 1 558 600 -2 753 745\r## # ... with 336,766 more rows, and 15 more variables: arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;,\r## # dep_hour \u0026lt;dbl\u0026gt;, dep_minute \u0026lt;dbl\u0026gt;, sched_dep_hour \u0026lt;dbl\u0026gt;,\r## # sched_arr_minute \u0026lt;dbl\u0026gt;\r # H√° uma outra solu√ß√£o com separate!\rflights %\u0026gt;% separate(\rcol = dep_time,\rinto = c(\u0026quot;dep_hour\u0026quot;, \u0026quot;dep_minute\u0026quot;),\rsep = 1,\r# Esse argumento √© importante! Teste com FALSE para ver a diferen√ßa\rconvert = TRUE) %\u0026gt;% separate(\rcol = sched_dep_time,\rinto = c(\u0026quot;sched_dep_hour\u0026quot;, \u0026quot;sched_dep_minute\u0026quot;),\rsep = 1,\rconvert = TRUE)\r ## # A tibble: 336,776 x 21\r## year month day dep_hour dep_minute sched_dep_hour sched_dep_minute\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 5 17 5 15\r## 2 2013 1 1 5 33 5 29\r## 3 2013 1 1 5 42 5 40\r## 4 2013 1 1 5 44 5 45\r## 5 2013 1 1 5 54 6 0\r## 6 2013 1 1 5 54 5 58\r## 7 2013 1 1 5 55 6 0\r## 8 2013 1 1 5 57 6 0\r## 9 2013 1 1 5 57 6 0\r## 10 2013 1 1 5 58 6 0\r## # ... with 336,766 more rows, and 14 more variables: dep_delay \u0026lt;dbl\u0026gt;,\r## # arr_time \u0026lt;int\u0026gt;, sched_arr_time \u0026lt;int\u0026gt;, arr_delay \u0026lt;dbl\u0026gt;, carrier \u0026lt;chr\u0026gt;,\r## # flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;, air_time \u0026lt;dbl\u0026gt;,\r## # distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r Existe uma outra solu√ß√£o poss√≠vel para essa quest√£o usando manipula√ß√£o de strings, com str_sub tamb√©m. Fica como desafio!\nPensando na legibilidade do c√≥digo e na flexibilidade da abordagem, qual das duas solu√ß√µes acima voc√™ implementaria? mutate ou duas separate? Reflita.\nO que o c√≥digo abaixo est√° fazendo? Porque mesmo ap√≥s o c√≥digo abaixo continuam existindo diferen√ßas entre os valores das vari√°veis air_time e travel_time?  flights %\u0026gt;% select(air_time, dep_time, arr_time, dep_delay, arr_delay) %\u0026gt;% mutate(dep_hour = dep_time %/% 100,\rdep_min = dep_time %% 100,\rdep_time2 = dep_hour * 60 + dep_min,\rarr_hour = arr_time %/% 100,\rarr_min = arr_time %% 100,\rarr_time2 = arr_hour * 60 + arr_min,\rtravel_time = arr_time2 - dep_time2) %\u0026gt;% select(-dep_hour, -dep_min, -arr_hour, -arr_min)\r ## # A tibble: 336,776 x 8\r## air_time dep_time arr_time dep_delay arr_delay dep_time2 arr_time2\r## \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 227 517 830 2 11 317 510\r## 2 227 533 850 4 20 333 530\r## 3 160 542 923 2 33 342 563\r## 4 183 544 1004 -1 -18 344 604\r## 5 116 554 812 -6 -25 354 492\r## 6 150 554 740 -4 12 354 460\r## 7 158 555 913 -5 19 355 553\r## 8 53 557 709 -3 -14 357 429\r## 9 140 557 838 -3 -8 357 518\r## 10 138 558 753 -2 8 358 473\r## # ... with 336,766 more rows, and 1 more variable: travel_time \u0026lt;dbl\u0026gt;\r Essa tem uma resposta mais qualitativa. A primeira parte √© parecida com a quest√£o anterior, mas estamos manualmente tentando calcular os tempos de viagem. Acontece que os valores n√£o batem com os tempos de v√¥o identificados no banco. Isso se deve a pelo menos tr√™s quest√µes distintas.\n Uma delas diz respeito ao registro dos tempos, a defini√ß√£o de air_time pode n√£o estar considerando tempos em que o avi√£o est√° manobrando ou em solo ou mesmo podem existir erros de preenchimento. A segunda diz respeito ao fuso hor√°rio distinto entre aeroportos de sa√≠da e chegada, que complica o c√°lculo dos tempos reais, ent√£o nosso c√°lculo est√° muito cru para identificar isso. A √∫ltima quest√£o s√£o os v√¥os longos, que come√ßam em um dia e terminam no dia seguinte, que podem prejudicar nosso m√©todo de c√°lculo. Para corrigir alguns desses problemas, voc√™ precisaria escrever um c√≥digo que minimamente levasse essas quest√µes em considera√ß√£o. Como esse n√£o √© o objetivo do curso, eu deixo para quem quiser tentar. H√° uma solu√ß√£o postada aqui.  Use o stringr para concatenar as seguintes strings em uma frase  x \u0026lt;- \u0026quot;.\u0026quot;\ry \u0026lt;- \u0026quot;feliz\u0026quot;\rw \u0026lt;- \u0026quot;acordei\u0026quot;\rz \u0026lt;- \u0026quot;hoje\u0026quot;\rstr_c(z, w, y, sep = \u0026quot; \u0026quot;) %\u0026gt;% str_c(x, sep = \u0026quot;\u0026quot;) %\u0026gt;% str_to_sentence()\r ## [1] \u0026quot;Hoje acordei feliz.\u0026quot;\r Corrija as inconsist√™ncias nas colunas pa√≠s, primeiro_nome, segundo_nome e crie uma nova coluna nomes contendo as duas anteriores. No final, ordene o banco em ordem alfab√©tica.  df \u0026lt;- tibble::tribble(\r~pais, ~primeiro_nome, ~segundo_nome,\r# -------|----------------|-------------|\r\u0026quot;BRASIL\u0026quot;, \u0026quot;ISABELA\u0026quot;, \u0026quot;MARTINS\u0026quot;,\r\u0026quot;Brasil\u0026quot;, \u0026quot;Eduardo\u0026quot;, \u0026quot;cabellos\u0026quot;,\r\u0026quot;brasil\u0026quot;, \u0026quot;m√°rcia\u0026quot;, \u0026quot;pinto\u0026quot;,\r\u0026quot;bRaSiL\u0026quot;, \u0026quot;rog√©rio\u0026quot;, \u0026quot;Marinho\u0026quot;,\r)\r# Sem dplyr\rdf$pais \u0026lt;- str_to_title(df$pais)\rdf$primeiro_nome \u0026lt;- str_to_title(df$primeiro_nome)\rdf$segundo_nome \u0026lt;- str_to_title(df$segundo_nome)\rdf \u0026lt;- df %\u0026gt;% tidyr::unite(nomes, primeiro_nome, segundo_nome, sep = \u0026quot; \u0026quot;)\rdf[ str_order(df$nomes), ]\r ## # A tibble: 4 x 2\r## pais nomes ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 Brasil Eduardo Cabellos\r## 2 Brasil Isabela Martins ## 3 Brasil M√°rcia Pinto ## 4 Brasil Rog√©rio Marinho\r # Com dplyr\rdf \u0026lt;- tibble::tribble(\r~pais, ~primeiro_nome, ~segundo_nome,\r# -------|----------------|-------------|\r\u0026quot;BRASIL\u0026quot;, \u0026quot;ISABELA\u0026quot;, \u0026quot;MARTINS\u0026quot;,\r\u0026quot;Brasil\u0026quot;, \u0026quot;Eduardo\u0026quot;, \u0026quot;cabellos\u0026quot;,\r\u0026quot;brasil\u0026quot;, \u0026quot;m√°rcia\u0026quot;, \u0026quot;pinto\u0026quot;,\r\u0026quot;bRaSiL\u0026quot;, \u0026quot;rog√©rio\u0026quot;, \u0026quot;Marinho\u0026quot;,\r)\rdf %\u0026gt;% mutate(pais = str_to_title(pais),\rprimeiro_nome = str_to_title(primeiro_nome),\rsegundo_nome = str_to_title(segundo_nome)) %\u0026gt;% unite(nomes, primeiro_nome, segundo_nome, sep = \u0026quot; \u0026quot;) %\u0026gt;% arrange(str_order(nomes))\r ## # A tibble: 4 x 2\r## pais nomes ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 Brasil Eduardo Cabellos\r## 2 Brasil Isabela Martins ## 3 Brasil M√°rcia Pinto ## 4 Brasil Rog√©rio Marinho\r Transforme a string c(\u0026quot;Seu nome\u0026quot;, \u0026quot;Seu sobrenome da m√£e\u0026quot;, \u0026quot;Seu sobrenome do pai\u0026quot;) na string \u0026quot;SEU SOBRENOME DO PAI, sua inicial do nome. sua inicial da m√£e.\u0026quot;, como numa cita√ß√£o. Veja o exemplo abaixo:  # Transforme\rc(\u0026quot;Vin√≠cius\u0026quot;, \u0026quot;de Souza\u0026quot;, \u0026quot;Maia\u0026quot;)\r ## [1] \u0026quot;Vin√≠cius\u0026quot; \u0026quot;de Souza\u0026quot; \u0026quot;Maia\u0026quot;\r # Resultado\r\u0026quot;MAIA, V. S.\u0026quot;\r ## [1] \u0026quot;MAIA, V. S.\u0026quot;\r x \u0026lt;- c(\u0026quot;Vin√≠cius\u0026quot;, \u0026quot;de Souza\u0026quot;, \u0026quot;Maia\u0026quot;)\rx[1] \u0026lt;- str_sub(x[1], 1, 1) %\u0026gt;% str_c(\u0026quot;.\u0026quot;)\rx[2] \u0026lt;- str_sub(x[2], 4, 4) %\u0026gt;% str_c(\u0026quot;.\u0026quot;)\rx[3] \u0026lt;- str_to_upper(x[3])\rstr_c(c(x[3], x[1], x[2]), collapse = \u0026quot; \u0026quot;)\r ## [1] \u0026quot;MAIA V. S.\u0026quot;\r DESAFIO: Nos microdados da √°rea de sa√∫de, √© comum que a vari√°vel idade esteja registrada da seguinte forma: \u0026ldquo;150\u0026rdquo;, \u0026ldquo;219\u0026rdquo;, \u0026ldquo;312\u0026rdquo;, \u0026ldquo;471\u0026rdquo;. Esses c√≥digos indicam primeiro qual a unidade de medida da idade e segundo o valor desta unidade, 1 = horas, 2 = dias, 3 = meses, 4 = anos. Proponha um c√≥digo usando stringr para transformar o vetor abaixo em um valor num√©rico.  # N√£o precisa se preocupar com essa parte\rx \u0026lt;- as.character(round(c(\rrunif(25, 100, 124),\rrunif(25, 201, 230),\rrunif(25, 301, 312),\rrunif(25, 401, 499)\r)))\r# Como voc√™ transformaria esse vetor em n√∫mero?\rx\r ## [1] \u0026quot;118\u0026quot; \u0026quot;114\u0026quot; \u0026quot;118\u0026quot; \u0026quot;120\u0026quot; \u0026quot;109\u0026quot; \u0026quot;104\u0026quot; \u0026quot;114\u0026quot; \u0026quot;117\u0026quot; \u0026quot;122\u0026quot; \u0026quot;109\u0026quot; \u0026quot;110\u0026quot; \u0026quot;113\u0026quot;\r## [13] \u0026quot;106\u0026quot; \u0026quot;100\u0026quot; \u0026quot;122\u0026quot; \u0026quot;121\u0026quot; \u0026quot;124\u0026quot; \u0026quot;124\u0026quot; \u0026quot;110\u0026quot; \u0026quot;100\u0026quot; \u0026quot;117\u0026quot; \u0026quot;119\u0026quot; \u0026quot;105\u0026quot; \u0026quot;118\u0026quot;\r## [25] \u0026quot;122\u0026quot; \u0026quot;201\u0026quot; \u0026quot;205\u0026quot; \u0026quot;212\u0026quot; \u0026quot;216\u0026quot; \u0026quot;228\u0026quot; \u0026quot;213\u0026quot; \u0026quot;227\u0026quot; \u0026quot;221\u0026quot; \u0026quot;214\u0026quot; \u0026quot;227\u0026quot; \u0026quot;206\u0026quot;\r## [37] \u0026quot;207\u0026quot; \u0026quot;215\u0026quot; \u0026quot;224\u0026quot; \u0026quot;223\u0026quot; \u0026quot;203\u0026quot; \u0026quot;221\u0026quot; \u0026quot;215\u0026quot; \u0026quot;225\u0026quot; \u0026quot;210\u0026quot; \u0026quot;208\u0026quot; \u0026quot;219\u0026quot; \u0026quot;207\u0026quot;\r## [49] \u0026quot;221\u0026quot; \u0026quot;227\u0026quot; \u0026quot;310\u0026quot; \u0026quot;305\u0026quot; \u0026quot;301\u0026quot; \u0026quot;304\u0026quot; \u0026quot;310\u0026quot; \u0026quot;307\u0026quot; \u0026quot;305\u0026quot; \u0026quot;309\u0026quot; \u0026quot;308\u0026quot; \u0026quot;306\u0026quot;\r## [61] \u0026quot;308\u0026quot; \u0026quot;305\u0026quot; \u0026quot;304\u0026quot; \u0026quot;303\u0026quot; \u0026quot;306\u0026quot; \u0026quot;302\u0026quot; \u0026quot;310\u0026quot; \u0026quot;306\u0026quot; \u0026quot;301\u0026quot; \u0026quot;310\u0026quot; \u0026quot;306\u0026quot; \u0026quot;304\u0026quot;\r## [73] \u0026quot;305\u0026quot; \u0026quot;304\u0026quot; \u0026quot;307\u0026quot; \u0026quot;401\u0026quot; \u0026quot;459\u0026quot; \u0026quot;429\u0026quot; \u0026quot;435\u0026quot; \u0026quot;435\u0026quot; \u0026quot;415\u0026quot; \u0026quot;475\u0026quot; \u0026quot;414\u0026quot; \u0026quot;419\u0026quot;\r## [85] \u0026quot;495\u0026quot; \u0026quot;475\u0026quot; \u0026quot;431\u0026quot; \u0026quot;460\u0026quot; \u0026quot;478\u0026quot; \u0026quot;447\u0026quot; \u0026quot;436\u0026quot; \u0026quot;412\u0026quot; \u0026quot;403\u0026quot; \u0026quot;423\u0026quot; \u0026quot;467\u0026quot; \u0026quot;438\u0026quot;\r## [97] \u0026quot;475\u0026quot; \u0026quot;467\u0026quot; \u0026quot;418\u0026quot; \u0026quot;476\u0026quot;\r # Esse exerc√≠cio √© um pouco mais dif√≠cil mesmo!\rx %\u0026gt;% str_extract(\u0026quot;\\\\d\u0026quot;)\r ## [1] \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot;\r## [19] \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;1\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot;\r## [37] \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;2\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot;\r## [55] \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot;\r## [73] \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;3\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot;\r## [91] \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot; \u0026quot;4\u0026quot;\r tibble(\rtipo_idade = str_sub(x, 1, 1),\ridade = str_sub(x, 2, 3),\ridade_anos =\rif_else(\rstr_detect(tipo_idade, \u0026quot;1\u0026quot;),\ras.numeric(idade) / (24 * 30 * 12),\rif_else(\rstr_detect(tipo_idade, \u0026quot;2\u0026quot;),\ras.numeric(idade) / (30 * 12),\rif_else(\rstr_detect(tipo_idade, \u0026quot;3\u0026quot;),\ras.numeric(idade) / 12,\ras.numeric(idade)\r)\r)\r)\r) %\u0026gt;% print(n = Inf)\r ## # A tibble: 100 x 3\r## tipo_idade idade idade_anos\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 18 0.00208 ## 2 1 14 0.00162 ## 3 1 18 0.00208 ## 4 1 20 0.00231 ## 5 1 09 0.00104 ## 6 1 04 0.000463\r## 7 1 14 0.00162 ## 8 1 17 0.00197 ## 9 1 22 0.00255 ## 10 1 09 0.00104 ## 11 1 10 0.00116 ## 12 1 13 0.00150 ## 13 1 06 0.000694\r## 14 1 00 0 ## 15 1 22 0.00255 ## 16 1 21 0.00243 ## 17 1 24 0.00278 ## 18 1 24 0.00278 ## 19 1 10 0.00116 ## 20 1 00 0 ## 21 1 17 0.00197 ## 22 1 19 0.00220 ## 23 1 05 0.000579\r## 24 1 18 0.00208 ## 25 1 22 0.00255 ## 26 2 01 0.00278 ## 27 2 05 0.0139 ## 28 2 12 0.0333 ## 29 2 16 0.0444 ## 30 2 28 0.0778 ## 31 2 13 0.0361 ## 32 2 27 0.075 ## 33 2 21 0.0583 ## 34 2 14 0.0389 ## 35 2 27 0.075 ## 36 2 06 0.0167 ## 37 2 07 0.0194 ## 38 2 15 0.0417 ## 39 2 24 0.0667 ## 40 2 23 0.0639 ## 41 2 03 0.00833 ## 42 2 21 0.0583 ## 43 2 15 0.0417 ## 44 2 25 0.0694 ## 45 2 10 0.0278 ## 46 2 08 0.0222 ## 47 2 19 0.0528 ## 48 2 07 0.0194 ## 49 2 21 0.0583 ## 50 2 27 0.075 ## 51 3 10 0.833 ## 52 3 05 0.417 ## 53 3 01 0.0833 ## 54 3 04 0.333 ## 55 3 10 0.833 ## 56 3 07 0.583 ## 57 3 05 0.417 ## 58 3 09 0.75 ## 59 3 08 0.667 ## 60 3 06 0.5 ## 61 3 08 0.667 ## 62 3 05 0.417 ## 63 3 04 0.333 ## 64 3 03 0.25 ## 65 3 06 0.5 ## 66 3 02 0.167 ## 67 3 10 0.833 ## 68 3 06 0.5 ## 69 3 01 0.0833 ## 70 3 10 0.833 ## 71 3 06 0.5 ## 72 3 04 0.333 ## 73 3 05 0.417 ## 74 3 04 0.333 ## 75 3 07 0.583 ## 76 4 01 1 ## 77 4 59 59 ## 78 4 29 29 ## 79 4 35 35 ## 80 4 35 35 ## 81 4 15 15 ## 82 4 75 75 ## 83 4 14 14 ## 84 4 19 19 ## 85 4 95 95 ## 86 4 75 75 ## 87 4 31 31 ## 88 4 60 60 ## 89 4 78 78 ## 90 4 47 47 ## 91 4 36 36 ## 92 4 12 12 ## 93 4 03 3 ## 94 4 23 23 ## 95 4 67 67 ## 96 4 38 38 ## 97 4 75 75 ## 98 4 67 67 ## 99 4 18 18 ## 100 4 76 76\r Ao inv√©s de utilizar essas chamadas recursivas de if_else, que s√£o muito ruins de ler, como voc√™ poderia reescrever a condi√ß√£o usando case_when?\nExplore as contagens da vari√°vel rincome em gss_cat, ela ficaria bem representada num gr√°fico? De qual tipo?  gss_cat %\u0026gt;% count(rincome)\r ## # A tibble: 16 x 2\r## rincome n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 No answer 183\r## 2 Don't know 267\r## 3 Refused 975\r## 4 $25000 or more 7363\r## 5 $20000 - 24999 1283\r## 6 $15000 - 19999 1048\r## 7 $10000 - 14999 1168\r## 8 $8000 to 9999 340\r## 9 $7000 to 7999 188\r## 10 $6000 to 6999 215\r## 11 $5000 to 5999 227\r## 12 $4000 to 4999 226\r## 13 $3000 to 3999 276\r## 14 $1000 to 2999 395\r## 15 Lt $1000 286\r## 16 Not applicable 7043\r Em geral, contagens de vari√°veis ficam bem em gr√°ficos de barras ou visualiza√ß√µes equivalentes, em que √© poss√≠vel comparar visualmente as contagens das diversas categorias. Mais sobre isso na aula do ggplot2.\nQual a religi√£o mais comum em gss_cat? Qual o partido (partyid) mais popular?  # Religi√£o\rgss_cat %\u0026gt;% count(relig) %\u0026gt;% arrange(desc(n))\r ## # A tibble: 15 x 2\r## relig n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 Protestant 10846\r## 2 Catholic 5124\r## 3 None 3523\r## 4 Christian 689\r## 5 Jewish 388\r## 6 Other 224\r## 7 Buddhism 147\r## 8 Inter-nondenominational 109\r## 9 Moslem/islam 104\r## 10 Orthodox-christian 95\r## 11 No answer 93\r## 12 Hinduism 71\r## 13 Other eastern 32\r## 14 Native american 23\r## 15 Don't know 15\r # Partido\rgss_cat %\u0026gt;% count(partyid) %\u0026gt;% arrange(desc(n))\r ## # A tibble: 10 x 2\r## partyid n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 Independent 4119\r## 2 Not str democrat 3690\r## 3 Strong democrat 3490\r## 4 Not str republican 3032\r## 5 Ind,near dem 2499\r## 6 Strong republican 2314\r## 7 Ind,near rep 1791\r## 8 Other party 393\r## 9 No answer 154\r## 10 Don't know 1\r A que religi√£o se refere a vari√°vel denom? Voc√™ pode descobrir isso fazendo uma tabela de contagens?  Voc√™ pode chamar count com v√°rias vari√°veis para fazer uma tabula√ß√£o cruzada.\ngss_cat %\u0026gt;% count(relig, denom) %\u0026gt;% print(n = Inf)\r ## # A tibble: 47 x 3\r## relig denom n\r## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 No answer No answer 93\r## 2 Don't know Not applicable 15\r## 3 Inter-nondenominational Not applicable 109\r## 4 Native american Not applicable 23\r## 5 Christian No answer 2\r## 6 Christian Don't know 11\r## 7 Christian No denomination 452\r## 8 Christian Not applicable 224\r## 9 Orthodox-christian Not applicable 95\r## 10 Moslem/islam Not applicable 104\r## 11 Other eastern Not applicable 32\r## 12 Hinduism Not applicable 71\r## 13 Buddhism Not applicable 147\r## 14 Other No denomination 7\r## 15 Other Not applicable 217\r## 16 None Not applicable 3523\r## 17 Jewish Not applicable 388\r## 18 Catholic Not applicable 5124\r## 19 Protestant No answer 22\r## 20 Protestant Don't know 41\r## 21 Protestant No denomination 1224\r## 22 Protestant Other 2534\r## 23 Protestant Episcopal 397\r## 24 Protestant Presbyterian-dk wh 244\r## 25 Protestant Presbyterian, merged 67\r## 26 Protestant Other presbyterian 47\r## 27 Protestant United pres ch in us 110\r## 28 Protestant Presbyterian c in us 104\r## 29 Protestant Lutheran-dk which 267\r## 30 Protestant Evangelical luth 122\r## 31 Protestant Other lutheran 30\r## 32 Protestant Wi evan luth synod 71\r## 33 Protestant Lutheran-mo synod 212\r## 34 Protestant Luth ch in america 71\r## 35 Protestant Am lutheran 146\r## 36 Protestant Methodist-dk which 239\r## 37 Protestant Other methodist 33\r## 38 Protestant United methodist 1067\r## 39 Protestant Afr meth ep zion 32\r## 40 Protestant Afr meth episcopal 77\r## 41 Protestant Baptist-dk which 1457\r## 42 Protestant Other baptists 213\r## 43 Protestant Southern baptist 1536\r## 44 Protestant Nat bapt conv usa 40\r## 45 Protestant Nat bapt conv of am 76\r## 46 Protestant Am bapt ch in usa 130\r## 47 Protestant Am baptist asso 237\r Como voc√™ poderia diminuir o n√∫mero de categorias da vari√°vel rincome do banco gss_cat?  A melhor fun√ß√£o para redu√ß√£o de fatores √© fct_collapse. Veja como ficam a coluna original e a transformada.\ngss_cat2 \u0026lt;- gss_cat %\u0026gt;% # Aqui vou salvar em \u0026quot;rincome2\u0026quot; para a gente poder ver as duas\rmutate(rincome2 = fct_collapse(\rrincome,\r\u0026quot;Non-response\u0026quot; = c(\u0026quot;No answer\u0026quot;, \u0026quot;Don't know\u0026quot;, \u0026quot;Refused\u0026quot;, \u0026quot;Not applicable\u0026quot;),\r\u0026quot;At√© 5k\u0026quot; = c(\u0026quot;$4000 to 4999\u0026quot;, \u0026quot;$3000 to 3999\u0026quot;, \u0026quot;$1000 to 2999\u0026quot;, \u0026quot;Lt $1000\u0026quot;),\r\u0026quot;5k-10k\u0026quot; = c( \u0026quot;$8000 to 9999\u0026quot;, \u0026quot;$7000 to 7999\u0026quot;, \u0026quot;$6000 to 6999\u0026quot;, \u0026quot;$5000 to 5999\u0026quot;),\r\u0026quot;10k-20k\u0026quot; = c(\u0026quot;$15000 - 19999\u0026quot;, \u0026quot;$10000 - 14999\u0026quot;),\r\u0026quot;20k+\u0026quot; = c(\u0026quot;$25000 or more\u0026quot;, \u0026quot;$20000 - 24999\u0026quot;))) %\u0026gt;% select(rincome, rincome2)\r# E veja as contagens\rgss_cat2 %\u0026gt;% count(rincome)\r ## # A tibble: 16 x 2\r## rincome n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 No answer 183\r## 2 Don't know 267\r## 3 Refused 975\r## 4 $25000 or more 7363\r## 5 $20000 - 24999 1283\r## 6 $15000 - 19999 1048\r## 7 $10000 - 14999 1168\r## 8 $8000 to 9999 340\r## 9 $7000 to 7999 188\r## 10 $6000 to 6999 215\r## 11 $5000 to 5999 227\r## 12 $4000 to 4999 226\r## 13 $3000 to 3999 276\r## 14 $1000 to 2999 395\r## 15 Lt $1000 286\r## 16 Not applicable 7043\r gss_cat2 %\u0026gt;% count(rincome2)\r ## # A tibble: 5 x 2\r## rincome2 n\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt;\r## 1 Non-response 8468\r## 2 20k+ 8646\r## 3 10k-20k 2216\r## 4 5k-10k 970\r## 5 At√© 5k 1183\r ggplot2  O que tem de errado no c√≥digo abaixo? Por que os pontos n√£o ficaram azuis?  ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = \u0026quot;blue\u0026quot;))\r Os pontos n√£o ficam azuis porque voc√™ n√£o est√° especificando cores! Dentro da fun√ß√£o aes() voc√™ est√° especificando vari√°veis para serem mapeadas a uma escala de cores. Portanto, o ggplot interpreta \u0026ldquo;blue\u0026rdquo; como uma vari√°vel sem nome que tem o valor \u0026ldquo;blue\u0026rdquo; e mapeia ela para a escala de cores padr√£o, que √© vermelha. Se voc√™ quer controlar apenas a \u0026ldquo;apar√™ncia\u0026rdquo; dos pontos e n√£o est√° preocupada em mapear nenhuma vari√°vel, voc√™ pode passar essa est√©tica fora da fun√ß√£o aes().\nggplot(data = mpg) + geom_point(\rmapping = aes(x = displ, y = hwy), # aqui acabam os mapeamentos est√©ticos\rcolor = \u0026quot;blue\u0026quot;, # altera√ß√£o apenas na apar√™ncia do geom\rsize = 2, # altera√ß√£o apenas na apar√™ncia do geom\rshape = 6 # altera√ß√£o apenas na apar√™ncia do geom\r)  Utilizando o banco mpg, fa√ßa o diagrama de dispers√£o de displ por hwy e mapeie a cor para class, o tamanho para cyl e a forma para manufacturer. Como esses atributos est√©ticos se comportam diferente para vari√°veis categ√≥ricas vs cont√≠nuas?  ggplot(mpg, aes(\rdispl, hwy, color = class, size = cyl,\rshape = manufacturer)) +\rgeom_point()\r ## Warning: The shape palette can deal with a maximum of 6 discrete values because\r## more than 6 becomes difficult to discriminate; you have 15. Consider\r## specifying shapes manually if you must have them.\r ## Warning: Removed 112 rows containing missing values (geom_point).\r Ao cumprir as instru√ß√µes como dadas, logo de cara voc√™ recebe um aviso do ggplot2. A paleta de \u0026ldquo;shapes\u0026rdquo; s√≥ recebe por padr√£o 6 shapes diferentes, porque de acordo com o autor, mais de 6 torna dif√≠cil de distinguir. Mas eu sou teimoso.\nggplot(mpg, aes(\rdispl, hwy, color = class, size = cyl,\rshape = manufacturer)) +\rgeom_point() +\rscale_shape_manual(values = 1:15, guide = \u0026quot;legend\u0026quot;)\r Esse gr√°fico √© mais um exemplo para voc√™s verem como diferentes escalas se comportam. A vari√°vel cyl √© num√©rica e ordenada, ent√£o faz sentido coloc√°-la num mapeamento como size, j√° que visualmente √© poss√≠vel indicar que a grandeza aumenta com o tamanho. Classe √© uma vari√°vel categ√≥rica, ent√£o ela fica melhor em mapeamentos que ressaltam diferen√ßas entre as categorias, como colors ou shapes. O pacote tamb√©m imp√µe algumas restri√ß√µes sobre o que √© poss√≠vel mapear. Por exemplo, ele retorna erro se voc√™ tenta mapear uma vari√°vel discreta para uma escala cont√≠nua.\nggplot(mpg, aes(displ, hwy, color = class)) +\rgeom_point() +\rscale_color_continuous()\r ## Error: Discrete value supplied to continuous scale\r Experimentem tentar mapear diferentes vari√°veis no banco mpg para as diferentes escalas e vejam os resultados. Em alguns casos, √© poss√≠vel, mas o gr√°fico √© pouco informativo, em outros, voc√™ ver√° mensagens de erro.\nUtilizando o diamonds, crie um diagrama de dispers√£o que relacione carat com price. Explore algumas outras vari√°veis utilizando escalas de cor para ver se voc√™ identifica algum padr√£o. Aplique transforma√ß√µes nas vari√°veis que voc√™ considerar justificadas.  Esse exerc√≠cio n√£o tem uma resposta correta. O objetivo era que voc√™s explorassem as transforma√ß√µes estat√≠sticas e as escalas de cores diferentes presentes no ggplot, atrav√©s do argumento trans, ou mesmo fazer outras transforma√ß√µes que interessassem voc√™s nas vari√°veis. Abaixo um exemplo de transforma√ß√£o de Yeo-Johnson, um tipo de transforma√ß√£o BoxCox que aceita valores negativos e uma das escalas de cor do pacote viridis.\nggplot(diamonds, aes(carat, price, color = clarity)) +\rgeom_point() +\rscale_x_continuous(trans = scales::yj_trans(p = 2)) +\rscale_color_viridis_d(option = \u0026quot;magma\u0026quot;)\r Ainda continuando o exemplo anterior, aplique um geom_smooth utilizando v√°rias op√ß√µes de method para as vari√°veis originais ou transformadas.  Segundo a mesma l√≥gica, o objetivo era explorar as op√ß√µes de visualiza√ß√£o de modelos simples atrav√©s do argumento method. Abaixo um exemplo de gam. Uma mudan√ßa que fiz foi usar a vari√°vel cut ao inv√©s de clarity, porque o gr√°fico n√£o-transformado de clarity estava muito polu√≠do.\nggplot(diamonds, aes(carat, price, color = cut)) +\rgeom_point(alpha = 0.1) + # pontos transl√∫cidos para reduzir a polui√ß√£o\rgeom_smooth(method = \u0026quot;gam\u0026quot;, se = FALSE) +\rscale_color_viridis_d(option = \u0026quot;plasma\u0026quot;)\r ## `geom_smooth()` using formula 'y ~ s(x, bs = \u0026quot;cs\u0026quot;)'\r No nosso gr√°fico de barras usando stat(prop) a gente precisou colocar group = 1, porque? Qual √© a diferen√ßa entre esses dois c√≥digos?  ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = after_stat(prop)))\r ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop)))\r Acabei explicando isso na aula, devido a uma pergunta, mas para quem perdeu, trata-se do comportamento padr√£o quando h√° propor√ß√µes: cada barra ter√° sua pr√≥pria propor√ß√£o e todas somar√£o a 100%. O uso de group = 1 indica √† fun√ß√£o que as propor√ß√µes que somam a 100% s√£o o total dos n√≠veis do fator e n√£o cada n√≠vel individualmente.\nggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = after_stat(prop), group = 1))\r # No caso em que h√° um \u0026quot;fill\u0026quot;, precisamos normalizar as alturas das barras\rggplot(data = diamonds) +\rgeom_bar(mapping = aes(\rx = cut,\ry = stat(prop),\rfill = clarity\r))\r ggplot(data = diamonds) +\rgeom_bar(mapping = aes(\rx = cut,\ry = stat(count)/sum(stat(count)),\rfill = clarity\r))\r stat_smooth √© muito parecido com geom_smooth, mas h√° uma diferen√ßa sutil. Compare os c√≥digos abaixo.  geom_smooth chama stat_smooth quando voc√™ utiliza a fun√ß√£o para calcular as \u0026ldquo;m√©dias condicionais\u0026rdquo; que correspondem a linha de tend√™ncia desenhada no gr√°fico. √â assim com todos os geoms no pacote. H√° uma conex√£o entre o objeto geom√©trico e uma transforma√ß√£o estat√≠stica. Mesmo que seja a transforma√ß√£o _identity, que mant√©m a vari√°vel exatamente como ela estava no dado. A grande vantagem de construir um gr√°fico com stat_smooth ao inv√©s de geom_smooth √© que voc√™ pode especificar outro objeto geom√©trico que n√£o seja o padr√£o (geom_line + geom_ribbon). √â isso que os gr√°ficos abaixo demonstram.\nggplot(mpg, aes(displ, hwy)) + geom_point() +\rgeom_smooth()\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r ggplot(mpg, aes(displ, hwy)) + geom_point() +\rstat_smooth(geom = \u0026quot;step\u0026quot;)\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r ggplot(mpg, aes(displ, hwy)) + geom_point() +\rstat_smooth(geom = \u0026quot;linerange\u0026quot;)\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r ggplot(mpg, aes(displ, hwy)) + geom_point() +\rstat_smooth(geom = \u0026quot;errorbar\u0026quot;)\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r ggplot(mpg, aes(displ, hwy)) + geom_point() +\rstat_smooth(geom = \u0026quot;crossbar\u0026quot;)\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r Usando o mpg e facet_grid, crie um scatterplot que contenha displ no eixo x, hwy no eixo y, class na cor, drv nas facetas-coluna e cyl nas facetas linha.  Esse aqui √© para demonstrar o uso de facet_grid, que permite especificar fatores de classifica√ß√£o diferentes nas linhas e colunas, diferente de facet_wrap mostrado na aula, que s√≥ permite especificar uma dimens√£o.\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\rgeom_point() +\rfacet_grid(cyl ~ drv)\r Voc√™ acha que os dois gr√°ficos abaixo ficar√£o diferentes um do outro? Porque? Tente responder antes de rodar o c√≥digo.  ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth()\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r ggplot() + geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))\r ## `geom_smooth()` using method = 'loess' and formula 'y ~ x'\r Mesmo antes de rodar o c√≥digo, o observador astuto notar√° que os mapeamentos locais no segundo gr√°fico s√£o id√™nticos entre si e aos mapeamentos globais, ent√£o os dois gr√°ficos s√£o iguais.\nTente recriar o seguinte gr√°fico  O objetivo dessa era fazer voc√™s fu√ßarem um pouco na ajuda para tentar recriar o mais fielmente poss√≠vel o gr√°fico final. N√£o precisava ter acertado, o objetivo era chegar o mais pr√≥ximo poss√≠vel.\nggplot(mpg, aes(displ, hwy, color = drv)) +\rgeom_point() +\rgeom_smooth(method = lm, se = FALSE) +\rlabs(x = \u0026quot;Rodovia\u0026quot;, y = \u0026quot;Toneladas\u0026quot;, color = \u0026quot;Tra√ß√£o\u0026quot;) +\rscale_color_brewer(palette = \u0026quot;Set1\u0026quot;)\r ## `geom_smooth()` using formula 'y ~ x'\r Transforme o gr√°fico seguir em um gr√°fico de pizza usando coord_polar.  ggplot(diamonds, aes(cut, fill = cut)) +\rgeom_bar()\r Depois de simplesmente especificar coord_polar, em geral o gr√°fico fica meio estranho, n√£o tem aquela cara bonita de pizza. √â preciso corrigir os seguintes problemas:\n A largura das barras deve ser igual a propor√ß√£o das contagens, mas a altura deve ser igual a 1! Portanto, eu inverto as coisas e passo as contagens/propor√ß√µes para \u0026ldquo;x\u0026rdquo; e \u0026ldquo;y\u0026rdquo; fica com o valor fixo = 1.  ggplot(diamonds, aes(\r# calculando as propor√ß√µes do total,\r# tamb√©m funciona com o padr√£o stat(count)\rx = stat(count)/sum(stat(count)),\ry = 1, # altura igual a 1\rfill = cut)) + # cores\rgeom_bar() +\rcoord_polar() + # coordenadas polares\r# opcional: remover aspectos do tema para um visual mais clean\rtheme_void()\r Como desafio, tentem adicionar elementos textuais das propor√ß√µes no gr√°fico. O problema a ser resolvido √© como posicionar o texto num sistema de coordenadas polares. Boa sorte!\nGr√°ficos de pizza s√£o pol√™micos na an√°lise de dados porque nossos olhos n√£o captam bem diferen√ßas entre formatos curvos e complexos, ent√£o a compara√ß√£o entre as categorias fica prejudicada se houverem mais de 2 ou 3. Eu sempre dou prefer√™ncia para barras. H√° um tipo de gr√°fico de pizza melhorzinho chamado \u0026ldquo;donut plot\u0026rdquo;, em que o meio do c√≠rculo √© oco, mas eu ainda prefiro as barras.\npurrr  Utilize uma das fun√ß√µes map_ para:  Nos exemplos abaixo, eu utilizo sempre str() no final para facilitar a visualiza√ß√£o das listas, mas n√£o √© obrigat√≥rio utilizar esse comando.\n1. Calcular a m√©dia de cada coluna em `mtcars`.\r map(mtcars, mean) %\u0026gt;% str()\r ## List of 11\r## $ mpg : num 20.1\r## $ cyl : num 6.19\r## $ disp: num 231\r## $ hp : num 147\r## $ drat: num 3.6\r## $ wt : num 3.22\r## $ qsec: num 17.8\r## $ vs : num 0.438\r## $ am : num 0.406\r## $ gear: num 3.69\r## $ carb: num 2.81\r 2. Determinar o tipo de cada coluna em `flights`.\r flights %\u0026gt;% map(class) %\u0026gt;% str()\r ## List of 19\r## $ year : chr \u0026quot;integer\u0026quot;\r## $ month : chr \u0026quot;integer\u0026quot;\r## $ day : chr \u0026quot;integer\u0026quot;\r## $ dep_time : chr \u0026quot;integer\u0026quot;\r## $ sched_dep_time: chr \u0026quot;integer\u0026quot;\r## $ dep_delay : chr \u0026quot;numeric\u0026quot;\r## $ arr_time : chr \u0026quot;integer\u0026quot;\r## $ sched_arr_time: chr \u0026quot;integer\u0026quot;\r## $ arr_delay : chr \u0026quot;numeric\u0026quot;\r## $ carrier : chr \u0026quot;character\u0026quot;\r## $ flight : chr \u0026quot;integer\u0026quot;\r## $ tailnum : chr \u0026quot;character\u0026quot;\r## $ origin : chr \u0026quot;character\u0026quot;\r## $ dest : chr \u0026quot;character\u0026quot;\r## $ air_time : chr \u0026quot;numeric\u0026quot;\r## $ distance : chr \u0026quot;numeric\u0026quot;\r## $ hour : chr \u0026quot;numeric\u0026quot;\r## $ minute : chr \u0026quot;numeric\u0026quot;\r## $ time_hour : chr [1:2] \u0026quot;POSIXct\u0026quot; \u0026quot;POSIXt\u0026quot;\r 3. Computar o n√∫mero de valores √∫nicos em cada coluna de `iris`.\r flights %\u0026gt;% map(unique) %\u0026gt;% map(length) %\u0026gt;% str()\r ## List of 19\r## $ year : int 1\r## $ month : int 12\r## $ day : int 31\r## $ dep_time : int 1319\r## $ sched_dep_time: int 1021\r## $ dep_delay : int 528\r## $ arr_time : int 1412\r## $ sched_arr_time: int 1163\r## $ arr_delay : int 578\r## $ carrier : int 16\r## $ flight : int 3844\r## $ tailnum : int 4044\r## $ origin : int 3\r## $ dest : int 105\r## $ air_time : int 510\r## $ distance : int 214\r## $ hour : int 20\r## $ minute : int 60\r## $ time_hour : int 6936\r # Sugest√£o do Pedro Gomes\rflights %\u0026gt;% map(n_distinct) %\u0026gt;% str()\r ## List of 19\r## $ year : int 1\r## $ month : int 12\r## $ day : int 31\r## $ dep_time : int 1319\r## $ sched_dep_time: int 1021\r## $ dep_delay : int 528\r## $ arr_time : int 1412\r## $ sched_arr_time: int 1163\r## $ arr_delay : int 578\r## $ carrier : int 16\r## $ flight : int 3844\r## $ tailnum : int 4044\r## $ origin : int 3\r## $ dest : int 105\r## $ air_time : int 510\r## $ distance : int 214\r## $ hour : int 20\r## $ minute : int 60\r## $ time_hour : int 6936\r 4. Gere 10 distribui√ß√µes aleat√≥rias (`rnorm`) com m√©dias -10, 0, 10 e 100.\r x \u0026lt;- rep(100, 40)\rmedias \u0026lt;- rep(c(-10, 0, 10, 100), each = 10)\rmap2(x, medias, ~rnorm(.x, mean = .y)) %\u0026gt;% str()\r ## List of 40\r## $ : num [1:100] -9.96 -9.53 -9.12 -9.64 -10.36 ...\r## $ : num [1:100] -11.71 -10.76 -9.41 -9.22 -10.53 ...\r## $ : num [1:100] -11.33 -9.51 -8.98 -10.91 -9.52 ...\r## $ : num [1:100] -11.4 -10.9 -10.7 -12.1 -9.8 ...\r## $ : num [1:100] -11.06 -10.66 -10.33 -9.13 -9.13 ...\r## $ : num [1:100] -10.22 -9.59 -9.81 -10.71 -10.24 ...\r## $ : num [1:100] -11 -9.14 -10.91 -9.38 -9.63 ...\r## $ : num [1:100] -9.83 -9.61 -11.23 -9.68 -10.47 ...\r## $ : num [1:100] -9.11 -10.03 -10.62 -9.65 -10.2 ...\r## $ : num [1:100] -9.06 -10.41 -10.84 -9.16 -9.41 ...\r## $ : num [1:100] -0.8378 0.1102 0.7519 -0.2477 0.0342 ...\r## $ : num [1:100] 0.607 -0.902 -2.185 -0.397 -1.019 ...\r## $ : num [1:100] -0.452 2.067 1.45 -1.184 0.893 ...\r## $ : num [1:100] -0.604 -0.783 1.767 -0.632 1.322 ...\r## $ : num [1:100] -2.515 0.43 0.694 1.239 1.091 ...\r## $ : num [1:100] -1.462 1.177 -0.376 0.037 0.387 ...\r## $ : num [1:100] -0.0803 -0.0421 2.4765 0.0509 -0.1479 ...\r## $ : num [1:100] 1.118 0.662 -1.439 -1.074 0.493 ...\r## $ : num [1:100] -0.3136 0.4455 -0.947 2.0658 -0.0188 ...\r## $ : num [1:100] 0.193 0.625 2.281 0.297 -0.629 ...\r## $ : num [1:100] 9.29 9.1 9.54 9.99 10.2 ...\r## $ : num [1:100] 7.96 7.32 10.7 9.13 10.3 ...\r## $ : num [1:100] 9.96 10.24 10.31 10.54 11.65 ...\r## $ : num [1:100] 10.88 10.41 8.19 10.37 10.28 ...\r## $ : num [1:100] 11.27 9.74 11.75 11.7 9.31 ...\r## $ : num [1:100] 9.62 11.35 10.78 10.79 9.7 ...\r## $ : num [1:100] 9.04 10.24 11.85 9.82 10.66 ...\r## $ : num [1:100] 10.48 6.97 8.97 9.69 11.03 ...\r## $ : num [1:100] 8.48 10.12 9.09 8.18 10.11 ...\r## $ : num [1:100] 9.97 9.27 10.19 10.93 11.07 ...\r## $ : num [1:100] 100 99.2 99.6 100.3 99.2 ...\r## $ : num [1:100] 99 99.9 100.7 98.7 99.7 ...\r## $ : num [1:100] 99.6 99.2 100.1 100 99.9 ...\r## $ : num [1:100] 100.5 100.4 100.2 98.4 98.9 ...\r## $ : num [1:100] 99.8 99.8 100 99.1 101.1 ...\r## $ : num [1:100] 100.7 100 100.1 98.6 100 ...\r## $ : num [1:100] 99 99.4 100.5 100.1 99.3 ...\r## $ : num [1:100] 99.2 98.6 99.2 100.9 97.4 ...\r## $ : num [1:100] 99.7 99.8 100.9 100.5 99.9 ...\r## $ : num [1:100] 99.5 100.9 98.5 99.7 100 ...\r Como voc√™ pode criar um vetor indicando se cada coluna em um data.frame √© um fator?  # Flights por exemplo\rflights %\u0026gt;% # Lembrem-se que a pergunta pedia para criar um vetor!\rmap_lgl(is.factor)\r ## year month day dep_time sched_dep_time ## FALSE FALSE FALSE FALSE FALSE ## dep_delay arr_time sched_arr_time arr_delay carrier ## FALSE FALSE FALSE FALSE FALSE ## flight tailnum origin dest air_time ## FALSE FALSE FALSE FALSE FALSE ## distance hour minute time_hour ## FALSE FALSE FALSE FALSE\r  Usando as fun√ß√µes predicado keep e discard:\n Selecione todas as colunas caractere no banco flights.    flights %\u0026gt;% keep(is.character)\r ## # A tibble: 336,776 x 4\r## carrier tailnum origin dest ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 UA N14228 EWR IAH ## 2 UA N24211 LGA IAH ## 3 AA N619AA JFK MIA ## 4 B6 N804JB JFK BQN ## 5 DL N668DN LGA ATL ## 6 UA N39463 EWR ORD ## 7 B6 N516JB EWR FLL ## 8 EV N829AS LGA IAD ## 9 B6 N593JB JFK MCO ## 10 AA N3ALAA LGA ORD ## # ... with 336,766 more rows\r 2. Descarte os caracteres em `mpg`.\r mpg %\u0026gt;% discard(is.character)\r ## # A tibble: 234 x 5\r## displ year cyl cty hwy\r## \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 1.8 1999 4 18 29\r## 2 1.8 1999 4 21 29\r## 3 2 2008 4 20 31\r## 4 2 2008 4 21 30\r## 5 2.8 1999 6 16 26\r## 6 2.8 1999 6 18 26\r## 7 3.1 2008 6 18 27\r## 8 1.8 1999 4 18 26\r## 9 1.8 1999 4 16 25\r## 10 2 2008 4 20 28\r## # ... with 224 more rows\r 3. Selecione os fatores ordenados em `diamonds`.\r diamonds %\u0026gt;% keep(is.ordered)\r ## # A tibble: 53,940 x 3\r## cut color clarity\r## \u0026lt;ord\u0026gt; \u0026lt;ord\u0026gt; \u0026lt;ord\u0026gt; ## 1 Ideal E SI2 ## 2 Premium E SI1 ## 3 Good E VS1 ## 4 Premium I VS2 ## 5 Good J SI2 ## 6 Very Good J VVS2 ## 7 Very Good I VVS1 ## 8 Very Good H SI1 ## 9 Fair E VS2 ## 10 Very Good H VS1 ## # ... with 53,930 more rows\r 4. Descarte as vari√°veis n√£o-num√©ricas em `iris`\r iris %\u0026gt;% discard(negate(is.numeric))\r ## Sepal.Length Sepal.Width Petal.Length Petal.Width\r## 1 5.1 3.5 1.4 0.2\r## 2 4.9 3.0 1.4 0.2\r## 3 4.7 3.2 1.3 0.2\r## 4 4.6 3.1 1.5 0.2\r## 5 5.0 3.6 1.4 0.2\r## 6 5.4 3.9 1.7 0.4\r## 7 4.6 3.4 1.4 0.3\r## 8 5.0 3.4 1.5 0.2\r## 9 4.4 2.9 1.4 0.2\r## 10 4.9 3.1 1.5 0.1\r## 11 5.4 3.7 1.5 0.2\r## 12 4.8 3.4 1.6 0.2\r## 13 4.8 3.0 1.4 0.1\r## 14 4.3 3.0 1.1 0.1\r## 15 5.8 4.0 1.2 0.2\r## 16 5.7 4.4 1.5 0.4\r## 17 5.4 3.9 1.3 0.4\r## 18 5.1 3.5 1.4 0.3\r## 19 5.7 3.8 1.7 0.3\r## 20 5.1 3.8 1.5 0.3\r## 21 5.4 3.4 1.7 0.2\r## 22 5.1 3.7 1.5 0.4\r## 23 4.6 3.6 1.0 0.2\r## 24 5.1 3.3 1.7 0.5\r## 25 4.8 3.4 1.9 0.2\r## 26 5.0 3.0 1.6 0.2\r## 27 5.0 3.4 1.6 0.4\r## 28 5.2 3.5 1.5 0.2\r## 29 5.2 3.4 1.4 0.2\r## 30 4.7 3.2 1.6 0.2\r## 31 4.8 3.1 1.6 0.2\r## 32 5.4 3.4 1.5 0.4\r## 33 5.2 4.1 1.5 0.1\r## 34 5.5 4.2 1.4 0.2\r## 35 4.9 3.1 1.5 0.2\r## 36 5.0 3.2 1.2 0.2\r## 37 5.5 3.5 1.3 0.2\r## 38 4.9 3.6 1.4 0.1\r## 39 4.4 3.0 1.3 0.2\r## 40 5.1 3.4 1.5 0.2\r## 41 5.0 3.5 1.3 0.3\r## 42 4.5 2.3 1.3 0.3\r## 43 4.4 3.2 1.3 0.2\r## 44 5.0 3.5 1.6 0.6\r## 45 5.1 3.8 1.9 0.4\r## 46 4.8 3.0 1.4 0.3\r## 47 5.1 3.8 1.6 0.2\r## 48 4.6 3.2 1.4 0.2\r## 49 5.3 3.7 1.5 0.2\r## 50 5.0 3.3 1.4 0.2\r## 51 7.0 3.2 4.7 1.4\r## 52 6.4 3.2 4.5 1.5\r## 53 6.9 3.1 4.9 1.5\r## 54 5.5 2.3 4.0 1.3\r## 55 6.5 2.8 4.6 1.5\r## 56 5.7 2.8 4.5 1.3\r## 57 6.3 3.3 4.7 1.6\r## 58 4.9 2.4 3.3 1.0\r## 59 6.6 2.9 4.6 1.3\r## 60 5.2 2.7 3.9 1.4\r## 61 5.0 2.0 3.5 1.0\r## 62 5.9 3.0 4.2 1.5\r## 63 6.0 2.2 4.0 1.0\r## 64 6.1 2.9 4.7 1.4\r## 65 5.6 2.9 3.6 1.3\r## 66 6.7 3.1 4.4 1.4\r## 67 5.6 3.0 4.5 1.5\r## 68 5.8 2.7 4.1 1.0\r## 69 6.2 2.2 4.5 1.5\r## 70 5.6 2.5 3.9 1.1\r## 71 5.9 3.2 4.8 1.8\r## 72 6.1 2.8 4.0 1.3\r## 73 6.3 2.5 4.9 1.5\r## 74 6.1 2.8 4.7 1.2\r## 75 6.4 2.9 4.3 1.3\r## 76 6.6 3.0 4.4 1.4\r## 77 6.8 2.8 4.8 1.4\r## 78 6.7 3.0 5.0 1.7\r## 79 6.0 2.9 4.5 1.5\r## 80 5.7 2.6 3.5 1.0\r## 81 5.5 2.4 3.8 1.1\r## 82 5.5 2.4 3.7 1.0\r## 83 5.8 2.7 3.9 1.2\r## 84 6.0 2.7 5.1 1.6\r## 85 5.4 3.0 4.5 1.5\r## 86 6.0 3.4 4.5 1.6\r## 87 6.7 3.1 4.7 1.5\r## 88 6.3 2.3 4.4 1.3\r## 89 5.6 3.0 4.1 1.3\r## 90 5.5 2.5 4.0 1.3\r## 91 5.5 2.6 4.4 1.2\r## 92 6.1 3.0 4.6 1.4\r## 93 5.8 2.6 4.0 1.2\r## 94 5.0 2.3 3.3 1.0\r## 95 5.6 2.7 4.2 1.3\r## 96 5.7 3.0 4.2 1.2\r## 97 5.7 2.9 4.2 1.3\r## 98 6.2 2.9 4.3 1.3\r## 99 5.1 2.5 3.0 1.1\r## 100 5.7 2.8 4.1 1.3\r## 101 6.3 3.3 6.0 2.5\r## 102 5.8 2.7 5.1 1.9\r## 103 7.1 3.0 5.9 2.1\r## 104 6.3 2.9 5.6 1.8\r## 105 6.5 3.0 5.8 2.2\r## 106 7.6 3.0 6.6 2.1\r## 107 4.9 2.5 4.5 1.7\r## 108 7.3 2.9 6.3 1.8\r## 109 6.7 2.5 5.8 1.8\r## 110 7.2 3.6 6.1 2.5\r## 111 6.5 3.2 5.1 2.0\r## 112 6.4 2.7 5.3 1.9\r## 113 6.8 3.0 5.5 2.1\r## 114 5.7 2.5 5.0 2.0\r## 115 5.8 2.8 5.1 2.4\r## 116 6.4 3.2 5.3 2.3\r## 117 6.5 3.0 5.5 1.8\r## 118 7.7 3.8 6.7 2.2\r## 119 7.7 2.6 6.9 2.3\r## 120 6.0 2.2 5.0 1.5\r## 121 6.9 3.2 5.7 2.3\r## 122 5.6 2.8 4.9 2.0\r## 123 7.7 2.8 6.7 2.0\r## 124 6.3 2.7 4.9 1.8\r## 125 6.7 3.3 5.7 2.1\r## 126 7.2 3.2 6.0 1.8\r## 127 6.2 2.8 4.8 1.8\r## 128 6.1 3.0 4.9 1.8\r## 129 6.4 2.8 5.6 2.1\r## 130 7.2 3.0 5.8 1.6\r## 131 7.4 2.8 6.1 1.9\r## 132 7.9 3.8 6.4 2.0\r## 133 6.4 2.8 5.6 2.2\r## 134 6.3 2.8 5.1 1.5\r## 135 6.1 2.6 5.6 1.4\r## 136 7.7 3.0 6.1 2.3\r## 137 6.3 3.4 5.6 2.4\r## 138 6.4 3.1 5.5 1.8\r## 139 6.0 3.0 4.8 1.8\r## 140 6.9 3.1 5.4 2.1\r## 141 6.7 3.1 5.6 2.4\r## 142 6.9 3.1 5.1 2.3\r## 143 5.8 2.7 5.1 1.9\r## 144 6.8 3.2 5.9 2.3\r## 145 6.7 3.3 5.7 2.5\r## 146 6.7 3.0 5.2 2.3\r## 147 6.3 2.5 5.0 1.9\r## 148 6.5 3.0 5.2 2.0\r## 149 6.2 3.4 5.4 2.3\r## 150 5.9 3.0 5.1 1.8\r Imagine que voc√™ tem um diret√≥rio cheio de arquivos .csv que correspondem a um √∫nico banco de dados. Voc√™ tem os caminhos de todos eles num vetor com a forma c(arquivo_1.csv, ..., arquivo_n.csv). Como voc√™ importaria esses arquivos? Tente fazer duas solu√ß√µes diferentes.  # Vamos usar um diret√≥rio tempor√°rio que vamos preencher com v√°rios tibbles\rpasta \u0026lt;- tempdir()\r# Criamos 100 tibbles e guardamos em 100 arquivos csv.\rx \u0026lt;- rep(10, 100)\rarqs \u0026lt;- sprintf(\u0026quot;arquivo%s.csv\u0026quot;, 1:100)\rmap(x, ~tibble(var1 = rnorm(.x), var2 = rnorm(.x))) %\u0026gt;% map2(arqs, ~write_csv(.x, file.path(pasta, .y))) %\u0026gt;% str()\r # Nossos arquivos est√£o salvos no diret√≥rio tempor√°rio:\rdir(pasta)\r ## [1] \u0026quot;arquivo1.csv\u0026quot; \u0026quot;arquivo10.csv\u0026quot; \u0026quot;arquivo100.csv\u0026quot; \u0026quot;arquivo11.csv\u0026quot; ## [5] \u0026quot;arquivo12.csv\u0026quot; \u0026quot;arquivo13.csv\u0026quot; \u0026quot;arquivo14.csv\u0026quot; \u0026quot;arquivo15.csv\u0026quot; ## [9] \u0026quot;arquivo16.csv\u0026quot; \u0026quot;arquivo17.csv\u0026quot; \u0026quot;arquivo18.csv\u0026quot; \u0026quot;arquivo19.csv\u0026quot; ## [13] \u0026quot;arquivo2.csv\u0026quot; \u0026quot;arquivo20.csv\u0026quot; \u0026quot;arquivo21.csv\u0026quot; \u0026quot;arquivo22.csv\u0026quot; ## [17] \u0026quot;arquivo23.csv\u0026quot; \u0026quot;arquivo24.csv\u0026quot; \u0026quot;arquivo25.csv\u0026quot; \u0026quot;arquivo26.csv\u0026quot; ## [21] \u0026quot;arquivo27.csv\u0026quot; \u0026quot;arquivo28.csv\u0026quot; \u0026quot;arquivo29.csv\u0026quot; \u0026quot;arquivo3.csv\u0026quot; ## [25] \u0026quot;arquivo30.csv\u0026quot; \u0026quot;arquivo31.csv\u0026quot; \u0026quot;arquivo32.csv\u0026quot; \u0026quot;arquivo33.csv\u0026quot; ## [29] \u0026quot;arquivo34.csv\u0026quot; \u0026quot;arquivo35.csv\u0026quot; \u0026quot;arquivo36.csv\u0026quot; \u0026quot;arquivo37.csv\u0026quot; ## [33] \u0026quot;arquivo38.csv\u0026quot; \u0026quot;arquivo39.csv\u0026quot; \u0026quot;arquivo4.csv\u0026quot; \u0026quot;arquivo40.csv\u0026quot; ## [37] \u0026quot;arquivo41.csv\u0026quot; \u0026quot;arquivo42.csv\u0026quot; \u0026quot;arquivo43.csv\u0026quot; \u0026quot;arquivo44.csv\u0026quot; ## [41] \u0026quot;arquivo45.csv\u0026quot; \u0026quot;arquivo46.csv\u0026quot; \u0026quot;arquivo47.csv\u0026quot; \u0026quot;arquivo48.csv\u0026quot; ## [45] \u0026quot;arquivo49.csv\u0026quot; \u0026quot;arquivo5.csv\u0026quot; \u0026quot;arquivo50.csv\u0026quot; \u0026quot;arquivo51.csv\u0026quot; ## [49] \u0026quot;arquivo52.csv\u0026quot; \u0026quot;arquivo53.csv\u0026quot; \u0026quot;arquivo54.csv\u0026quot; \u0026quot;arquivo55.csv\u0026quot; ## [53] \u0026quot;arquivo56.csv\u0026quot; \u0026quot;arquivo57.csv\u0026quot; \u0026quot;arquivo58.csv\u0026quot; \u0026quot;arquivo59.csv\u0026quot; ## [57] \u0026quot;arquivo6.csv\u0026quot; \u0026quot;arquivo60.csv\u0026quot; \u0026quot;arquivo61.csv\u0026quot; \u0026quot;arquivo62.csv\u0026quot; ## [61] \u0026quot;arquivo63.csv\u0026quot; \u0026quot;arquivo64.csv\u0026quot; \u0026quot;arquivo65.csv\u0026quot; \u0026quot;arquivo66.csv\u0026quot; ## [65] \u0026quot;arquivo67.csv\u0026quot; \u0026quot;arquivo68.csv\u0026quot; \u0026quot;arquivo69.csv\u0026quot; \u0026quot;arquivo7.csv\u0026quot; ## [69] \u0026quot;arquivo70.csv\u0026quot; \u0026quot;arquivo71.csv\u0026quot; \u0026quot;arquivo72.csv\u0026quot; \u0026quot;arquivo73.csv\u0026quot; ## [73] \u0026quot;arquivo74.csv\u0026quot; \u0026quot;arquivo75.csv\u0026quot; \u0026quot;arquivo76.csv\u0026quot; \u0026quot;arquivo77.csv\u0026quot; ## [77] \u0026quot;arquivo78.csv\u0026quot; \u0026quot;arquivo79.csv\u0026quot; \u0026quot;arquivo8.csv\u0026quot; \u0026quot;arquivo80.csv\u0026quot; ## [81] \u0026quot;arquivo81.csv\u0026quot; \u0026quot;arquivo82.csv\u0026quot; \u0026quot;arquivo83.csv\u0026quot; \u0026quot;arquivo84.csv\u0026quot; ## [85] \u0026quot;arquivo85.csv\u0026quot; \u0026quot;arquivo86.csv\u0026quot; \u0026quot;arquivo87.csv\u0026quot; \u0026quot;arquivo88.csv\u0026quot; ## [89] \u0026quot;arquivo89.csv\u0026quot; \u0026quot;arquivo9.csv\u0026quot; \u0026quot;arquivo90.csv\u0026quot; \u0026quot;arquivo91.csv\u0026quot; ## [93] \u0026quot;arquivo92.csv\u0026quot; \u0026quot;arquivo93.csv\u0026quot; \u0026quot;arquivo94.csv\u0026quot; \u0026quot;arquivo95.csv\u0026quot; ## [97] \u0026quot;arquivo96.csv\u0026quot; \u0026quot;arquivo97.csv\u0026quot; \u0026quot;arquivo98.csv\u0026quot; \u0026quot;arquivo99.csv\u0026quot; ## [101] \u0026quot;filecf810bd36a5\u0026quot; \u0026quot;filecf81149221d\u0026quot; \u0026quot;filecf81164e23\u0026quot; \u0026quot;filecf8161f65f7\u0026quot;\r## [105] \u0026quot;filecf8171030fd\u0026quot; \u0026quot;filecf819e43f49\u0026quot; \u0026quot;filecf81ad26a9f\u0026quot; \u0026quot;filecf81bed9f1\u0026quot; ## [109] \u0026quot;filecf81e7a7e68\u0026quot; \u0026quot;filecf81ef03542\u0026quot; \u0026quot;filecf81fa64a3e\u0026quot; \u0026quot;filecf8239d75ab\u0026quot;\r## [113] \u0026quot;filecf8261936\u0026quot; \u0026quot;filecf826d55378\u0026quot; \u0026quot;filecf8291061a0\u0026quot; \u0026quot;filecf82b985019\u0026quot;\r## [117] \u0026quot;filecf82c00737b\u0026quot; \u0026quot;filecf8339f5\u0026quot; \u0026quot;filecf8341e67d6\u0026quot; \u0026quot;filecf8344158ac\u0026quot;\r## [121] \u0026quot;filecf837a47cc7\u0026quot; \u0026quot;filecf837f15510\u0026quot; \u0026quot;filecf8387a3d29\u0026quot; \u0026quot;filecf83a71232b\u0026quot;\r## [125] \u0026quot;filecf83ac3253a\u0026quot; \u0026quot;filecf83af94598\u0026quot; \u0026quot;filecf83f794f64\u0026quot; \u0026quot;filecf8402156c1\u0026quot;\r## [129] \u0026quot;filecf840c15566\u0026quot; \u0026quot;filecf84163761c\u0026quot; \u0026quot;filecf841d3b53\u0026quot; \u0026quot;filecf844d5642\u0026quot; ## [133] \u0026quot;filecf845e73bac\u0026quot; \u0026quot;filecf8462819d6\u0026quot; \u0026quot;filecf84b8b3144\u0026quot; \u0026quot;filecf84ddc73a0\u0026quot;\r## [137] \u0026quot;filecf84fe515d4\u0026quot; \u0026quot;filecf8500a5a10\u0026quot; \u0026quot;filecf8512766ea\u0026quot; \u0026quot;filecf852fe119b\u0026quot;\r## [141] \u0026quot;filecf8550a39d\u0026quot; \u0026quot;filecf85b14fec\u0026quot; \u0026quot;filecf85e053c83\u0026quot; \u0026quot;filecf85e6a12f4\u0026quot;\r## [145] \u0026quot;filecf8639c6053\u0026quot; \u0026quot;filecf863dc5f3b\u0026quot; \u0026quot;filecf8646e477f\u0026quot; \u0026quot;filecf865645c5d\u0026quot;\r## [149] \u0026quot;filecf868634c0d\u0026quot; \u0026quot;filecf869137c8a\u0026quot; \u0026quot;filecf86a7852d4\u0026quot; \u0026quot;filecf86b5b250\u0026quot; ## [153] \u0026quot;filecf86b9e3bb7\u0026quot; \u0026quot;filecf86d216ac\u0026quot; \u0026quot;filecf86e894a16\u0026quot; \u0026quot;filecf86ea916d3\u0026quot;\r## [157] \u0026quot;filecf86f22266\u0026quot; \u0026quot;filecf86f975377\u0026quot; \u0026quot;filecf8757a72be\u0026quot; \u0026quot;filecf876956e82\u0026quot;\r## [161] \u0026quot;filecf876967b1\u0026quot; \u0026quot;filecf8787a1370\u0026quot; \u0026quot;filecf879037c39\u0026quot; \u0026quot;filecf87964711\u0026quot; ## [165] \u0026quot;filecf87afe7046\u0026quot; \u0026quot;filecf88456ae0\u0026quot; \u0026quot;filecf898344ab\u0026quot;\r # Agora vamos ler todos de volta para uma tibble s√≥.\rarqs \u0026lt;- dir(pasta, pattern = \u0026quot;.csv\u0026quot;, full.names = T)\r # Juntando linhas\rdf \u0026lt;- map_dfr(arqs, read_csv)\rdf\r ## # A tibble: 1,000 x 2\r## var1 var2\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 0.837 -0.554\r## 2 -1.12 1.08 ## 3 -0.821 1.21 ## 4 0.384 0.465\r## 5 0.885 0.477\r## 6 -0.194 0.517\r## 7 0.710 0.128\r## 8 -1.04 -0.947\r## 9 0.782 1.58 ## 10 0.571 0.990\r## # ... with 990 more rows\r # Juntando colunas\rdf \u0026lt;- map_dfc(arqs, read_csv)\rdf\r ## # A tibble: 10 x 200\r## var1...1 var2...2 var1...3 var2...4 var1...5 var2...6 var1...7 var2...8\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 0.837 -0.554 -1.35 0.522 1.49 0.648 -0.567 -0.868\r## 2 -1.12 1.08 0.876 2.11 0.0449 0.0737 -0.808 0.177\r## 3 -0.821 1.21 1.77 -1.31 1.51 1.35 0.559 -0.119\r## 4 0.384 0.465 -0.496 1.10 1.13 -0.331 0.427 0.131\r## 5 0.885 0.477 -0.514 -0.573 -0.0704 0.581 0.751 0.629\r## 6 -0.194 0.517 0.362 -1.62 -0.725 -2.37 0.710 -0.293\r## 7 0.710 0.128 1.11 0.144 0.00462 1.66 1.32 -0.414\r## 8 -1.04 -0.947 0.00775 -1.27 0.0365 0.0813 -1.10 0.757\r## 9 0.782 1.58 0.695 -0.375 -0.342 0.341 -0.325 0.834\r## 10 0.571 0.990 -0.475 -0.356 -1.17 -0.827 -0.148 -1.29 ## # ... with 192 more variables: var1...9 \u0026lt;dbl\u0026gt;, var2...10 \u0026lt;dbl\u0026gt;,\r## # var1...11 \u0026lt;dbl\u0026gt;, var2...12 \u0026lt;dbl\u0026gt;, var1...13 \u0026lt;dbl\u0026gt;, var2...14 \u0026lt;dbl\u0026gt;,\r## # var1...15 \u0026lt;dbl\u0026gt;, var2...16 \u0026lt;dbl\u0026gt;, var1...17 \u0026lt;dbl\u0026gt;, var2...18 \u0026lt;dbl\u0026gt;,\r## # var1...19 \u0026lt;dbl\u0026gt;, var2...20 \u0026lt;dbl\u0026gt;, var1...21 \u0026lt;dbl\u0026gt;, var2...22 \u0026lt;dbl\u0026gt;,\r## # var1...23 \u0026lt;dbl\u0026gt;, var2...24 \u0026lt;dbl\u0026gt;, var1...25 \u0026lt;dbl\u0026gt;, var2...26 \u0026lt;dbl\u0026gt;,\r## # var1...27 \u0026lt;dbl\u0026gt;, var2...28 \u0026lt;dbl\u0026gt;, var1...29 \u0026lt;dbl\u0026gt;, var2...30 \u0026lt;dbl\u0026gt;,\r## # var1...31 \u0026lt;dbl\u0026gt;, var2...32 \u0026lt;dbl\u0026gt;, var1...33 \u0026lt;dbl\u0026gt;, var2...34 \u0026lt;dbl\u0026gt;,\r## # var1...35 \u0026lt;dbl\u0026gt;, var2...36 \u0026lt;dbl\u0026gt;, var1...37 \u0026lt;dbl\u0026gt;, var2...38 \u0026lt;dbl\u0026gt;,\r## # var1...39 \u0026lt;dbl\u0026gt;, var2...40 \u0026lt;dbl\u0026gt;, var1...41 \u0026lt;dbl\u0026gt;, var2...42 \u0026lt;dbl\u0026gt;,\r## # var1...43 \u0026lt;dbl\u0026gt;, var2...44 \u0026lt;dbl\u0026gt;, var1...45 \u0026lt;dbl\u0026gt;, var2...46 \u0026lt;dbl\u0026gt;,\r## # var1...47 \u0026lt;dbl\u0026gt;, var2...48 \u0026lt;dbl\u0026gt;, var1...49 \u0026lt;dbl\u0026gt;, var2...50 \u0026lt;dbl\u0026gt;,\r## # var1...51 \u0026lt;dbl\u0026gt;, var2...52 \u0026lt;dbl\u0026gt;, var1...53 \u0026lt;dbl\u0026gt;, var2...54 \u0026lt;dbl\u0026gt;,\r## # var1...55 \u0026lt;dbl\u0026gt;, var2...56 \u0026lt;dbl\u0026gt;, var1...57 \u0026lt;dbl\u0026gt;, var2...58 \u0026lt;dbl\u0026gt;,\r## # var1...59 \u0026lt;dbl\u0026gt;, var2...60 \u0026lt;dbl\u0026gt;, var1...61 \u0026lt;dbl\u0026gt;, var2...62 \u0026lt;dbl\u0026gt;,\r## # var1...63 \u0026lt;dbl\u0026gt;, var2...64 \u0026lt;dbl\u0026gt;, var1...65 \u0026lt;dbl\u0026gt;, var2...66 \u0026lt;dbl\u0026gt;,\r## # var1...67 \u0026lt;dbl\u0026gt;, var2...68 \u0026lt;dbl\u0026gt;, var1...69 \u0026lt;dbl\u0026gt;, var2...70 \u0026lt;dbl\u0026gt;,\r## # var1...71 \u0026lt;dbl\u0026gt;, var2...72 \u0026lt;dbl\u0026gt;, var1...73 \u0026lt;dbl\u0026gt;, var2...74 \u0026lt;dbl\u0026gt;,\r## # var1...75 \u0026lt;dbl\u0026gt;, var2...76 \u0026lt;dbl\u0026gt;, var1...77 \u0026lt;dbl\u0026gt;, var2...78 \u0026lt;dbl\u0026gt;,\r## # var1...79 \u0026lt;dbl\u0026gt;, var2...80 \u0026lt;dbl\u0026gt;, var1...81 \u0026lt;dbl\u0026gt;, var2...82 \u0026lt;dbl\u0026gt;,\r## # var1...83 \u0026lt;dbl\u0026gt;, var2...84 \u0026lt;dbl\u0026gt;, var1...85 \u0026lt;dbl\u0026gt;, var2...86 \u0026lt;dbl\u0026gt;,\r## # var1...87 \u0026lt;dbl\u0026gt;, var2...88 \u0026lt;dbl\u0026gt;, var1...89 \u0026lt;dbl\u0026gt;, var2...90 \u0026lt;dbl\u0026gt;,\r## # var1...91 \u0026lt;dbl\u0026gt;, var2...92 \u0026lt;dbl\u0026gt;, var1...93 \u0026lt;dbl\u0026gt;, var2...94 \u0026lt;dbl\u0026gt;,\r## # var1...95 \u0026lt;dbl\u0026gt;, var2...96 \u0026lt;dbl\u0026gt;, var1...97 \u0026lt;dbl\u0026gt;, var2...98 \u0026lt;dbl\u0026gt;,\r## # var1...99 \u0026lt;dbl\u0026gt;, var2...100 \u0026lt;dbl\u0026gt;, var1...101 \u0026lt;dbl\u0026gt;, var2...102 \u0026lt;dbl\u0026gt;,\r## # var1...103 \u0026lt;dbl\u0026gt;, var2...104 \u0026lt;dbl\u0026gt;, var1...105 \u0026lt;dbl\u0026gt;, var2...106 \u0026lt;dbl\u0026gt;,\r## # var1...107 \u0026lt;dbl\u0026gt;, var2...108 \u0026lt;dbl\u0026gt;, ...\r # Usando reduce\r# linhas\rdf \u0026lt;- map(arqs, read_csv) %\u0026gt;% reduce(bind_rows)\rdf\r ## # A tibble: 1,000 x 2\r## var1 var2\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 0.837 -0.554\r## 2 -1.12 1.08 ## 3 -0.821 1.21 ## 4 0.384 0.465\r## 5 0.885 0.477\r## 6 -0.194 0.517\r## 7 0.710 0.128\r## 8 -1.04 -0.947\r## 9 0.782 1.58 ## 10 0.571 0.990\r## # ... with 990 more rows\r # colunas\rdf \u0026lt;- map(arqs, read_csv) %\u0026gt;% reduce(bind_cols)\rdf\r ## # A tibble: 10 x 200\r## var1...1 var2...2 var1...3 var2...4 var1...5 var2...6 var1...7 var2...8\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 0.837 -0.554 -1.35 0.522 1.49 0.648 -0.567 -0.868\r## 2 -1.12 1.08 0.876 2.11 0.0449 0.0737 -0.808 0.177\r## 3 -0.821 1.21 1.77 -1.31 1.51 1.35 0.559 -0.119\r## 4 0.384 0.465 -0.496 1.10 1.13 -0.331 0.427 0.131\r## 5 0.885 0.477 -0.514 -0.573 -0.0704 0.581 0.751 0.629\r## 6 -0.194 0.517 0.362 -1.62 -0.725 -2.37 0.710 -0.293\r## 7 0.710 0.128 1.11 0.144 0.00462 1.66 1.32 -0.414\r## 8 -1.04 -0.947 0.00775 -1.27 0.0365 0.0813 -1.10 0.757\r## 9 0.782 1.58 0.695 -0.375 -0.342 0.341 -0.325 0.834\r## 10 0.571 0.990 -0.475 -0.356 -1.17 -0.827 -0.148 -1.29 ## # ... with 192 more variables: var1...9 \u0026lt;dbl\u0026gt;, var2...10 \u0026lt;dbl\u0026gt;,\r## # var1...11 \u0026lt;dbl\u0026gt;, var2...12 \u0026lt;dbl\u0026gt;, var1...13 \u0026lt;dbl\u0026gt;, var2...14 \u0026lt;dbl\u0026gt;,\r## # var1...15 \u0026lt;dbl\u0026gt;, var2...16 \u0026lt;dbl\u0026gt;, var1...17 \u0026lt;dbl\u0026gt;, var2...18 \u0026lt;dbl\u0026gt;,\r## # var1...19 \u0026lt;dbl\u0026gt;, var2...20 \u0026lt;dbl\u0026gt;, var1...21 \u0026lt;dbl\u0026gt;, var2...22 \u0026lt;dbl\u0026gt;,\r## # var1...23 \u0026lt;dbl\u0026gt;, var2...24 \u0026lt;dbl\u0026gt;, var1...25 \u0026lt;dbl\u0026gt;, var2...26 \u0026lt;dbl\u0026gt;,\r## # var1...27 \u0026lt;dbl\u0026gt;, var2...28 \u0026lt;dbl\u0026gt;, var1...29 \u0026lt;dbl\u0026gt;, var2...30 \u0026lt;dbl\u0026gt;,\r## # var1...31 \u0026lt;dbl\u0026gt;, var2...32 \u0026lt;dbl\u0026gt;, var1...33 \u0026lt;dbl\u0026gt;, var2...34 \u0026lt;dbl\u0026gt;,\r## # var1...35 \u0026lt;dbl\u0026gt;, var2...36 \u0026lt;dbl\u0026gt;, var1...37 \u0026lt;dbl\u0026gt;, var2...38 \u0026lt;dbl\u0026gt;,\r## # var1...39 \u0026lt;dbl\u0026gt;, var2...40 \u0026lt;dbl\u0026gt;, var1...41 \u0026lt;dbl\u0026gt;, var2...42 \u0026lt;dbl\u0026gt;,\r## # var1...43 \u0026lt;dbl\u0026gt;, var2...44 \u0026lt;dbl\u0026gt;, var1...45 \u0026lt;dbl\u0026gt;, var2...46 \u0026lt;dbl\u0026gt;,\r## # var1...47 \u0026lt;dbl\u0026gt;, var2...48 \u0026lt;dbl\u0026gt;, var1...49 \u0026lt;dbl\u0026gt;, var2...50 \u0026lt;dbl\u0026gt;,\r## # var1...51 \u0026lt;dbl\u0026gt;, var2...52 \u0026lt;dbl\u0026gt;, var1...53 \u0026lt;dbl\u0026gt;, var2...54 \u0026lt;dbl\u0026gt;,\r## # var1...55 \u0026lt;dbl\u0026gt;, var2...56 \u0026lt;dbl\u0026gt;, var1...57 \u0026lt;dbl\u0026gt;, var2...58 \u0026lt;dbl\u0026gt;,\r## # var1...59 \u0026lt;dbl\u0026gt;, var2...60 \u0026lt;dbl\u0026gt;, var1...61 \u0026lt;dbl\u0026gt;, var2...62 \u0026lt;dbl\u0026gt;,\r## # var1...63 \u0026lt;dbl\u0026gt;, var2...64 \u0026lt;dbl\u0026gt;, var1...65 \u0026lt;dbl\u0026gt;, var2...66 \u0026lt;dbl\u0026gt;,\r## # var1...67 \u0026lt;dbl\u0026gt;, var2...68 \u0026lt;dbl\u0026gt;, var1...69 \u0026lt;dbl\u0026gt;, var2...70 \u0026lt;dbl\u0026gt;,\r## # var1...71 \u0026lt;dbl\u0026gt;, var2...72 \u0026lt;dbl\u0026gt;, var1...73 \u0026lt;dbl\u0026gt;, var2...74 \u0026lt;dbl\u0026gt;,\r## # var1...75 \u0026lt;dbl\u0026gt;, var2...76 \u0026lt;dbl\u0026gt;, var1...77 \u0026lt;dbl\u0026gt;, var2...78 \u0026lt;dbl\u0026gt;,\r## # var1...79 \u0026lt;dbl\u0026gt;, var2...80 \u0026lt;dbl\u0026gt;, var1...81 \u0026lt;dbl\u0026gt;, var2...82 \u0026lt;dbl\u0026gt;,\r## # var1...83 \u0026lt;dbl\u0026gt;, var2...84 \u0026lt;dbl\u0026gt;, var1...85 \u0026lt;dbl\u0026gt;, var2...86 \u0026lt;dbl\u0026gt;,\r## # var1...87 \u0026lt;dbl\u0026gt;, var2...88 \u0026lt;dbl\u0026gt;, var1...89 \u0026lt;dbl\u0026gt;, var2...90 \u0026lt;dbl\u0026gt;,\r## # var1...91 \u0026lt;dbl\u0026gt;, var2...92 \u0026lt;dbl\u0026gt;, var1...93 \u0026lt;dbl\u0026gt;, var2...94 \u0026lt;dbl\u0026gt;,\r## # var1...95 \u0026lt;dbl\u0026gt;, var2...96 \u0026lt;dbl\u0026gt;, var1...97 \u0026lt;dbl\u0026gt;, var2...98 \u0026lt;dbl\u0026gt;,\r## # var1...99 \u0026lt;dbl\u0026gt;, var2...100 \u0026lt;dbl\u0026gt;, var1...101 \u0026lt;dbl\u0026gt;, var2...102 \u0026lt;dbl\u0026gt;,\r## # var1...103 \u0026lt;dbl\u0026gt;, var2...104 \u0026lt;dbl\u0026gt;, var1...105 \u0026lt;dbl\u0026gt;, var2...106 \u0026lt;dbl\u0026gt;,\r## # var1...107 \u0026lt;dbl\u0026gt;, var2...108 \u0026lt;dbl\u0026gt;, ...\r Escreva um c√≥digo sucinto que implemente v√°rios modelos lineares especificados por voc√™. Salve os resultados numa tibble com colunas-lista. Depois, extraia os resultados com unnest(). Use o exemplo como guia.  mtcars\r ## mpg cyl disp hp drat wt qsec vs am gear carb\r## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4\r## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4\r## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1\r## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1\r## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2\r## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1\r## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4\r## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2\r## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2\r## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4\r## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4\r## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3\r## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3\r## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3\r## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4\r## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4\r## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4\r## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1\r## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2\r## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1\r## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1\r## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2\r## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2\r## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4\r## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2\r## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1\r## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2\r## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2\r## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4\r## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6\r## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8\r## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2\r modelos \u0026lt;- c(\u0026quot;mpg ~ wt\u0026quot;,\r\u0026quot;mpg ~ wt + cyl\u0026quot;,\r\u0026quot;mpg ~ wt + cyl + drat\u0026quot;,\r\u0026quot;mpg ~ wt + cyl + drat + am\u0026quot;)\r# Estou usando fun√ß√µes do pacote broom, mas voc√™ n√£o era obrigado a apresentar\r# os resultados bonitinho. O objetivo era treinar esse tipo de workflow.\rmodelos_saida \u0026lt;- tibble(\respecificacao = modelos,\rajuste = map(especificacao, lm, data = mtcars),\rcoefs = map(ajuste, broom::tidy),\rstats = map(ajuste, broom::glance),\raums = map(ajuste, broom::augment)\r)\rmodelos_saida %\u0026gt;% select(especificacao, coefs) %\u0026gt;% unnest(coefs) %\u0026gt;% filter(term != \u0026quot;(Intercept)\u0026quot;)  ## # A tibble: 10 x 6\r## especificacao term estimate std.error statistic p.value\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 mpg ~ wt wt -5.34 0.559 -9.56 1.29e-10\r## 2 mpg ~ wt + cyl wt -3.19 0.757 -4.22 2.22e- 4\r## 3 mpg ~ wt + cyl cyl -1.51 0.415 -3.64 1.06e- 3\r## 4 mpg ~ wt + cyl + drat wt -3.19 0.829 -3.85 6.24e- 4\r## 5 mpg ~ wt + cyl + drat cyl -1.51 0.446 -3.38 2.14e- 3\r## 6 mpg ~ wt + cyl + drat drat -0.0162 1.32 -0.0122 9.90e- 1\r## 7 mpg ~ wt + cyl + drat + am wt -3.13 0.932 -3.36 2.32e- 3\r## 8 mpg ~ wt + cyl + drat + am cyl -1.53 0.465 -3.28 2.88e- 3\r## 9 mpg ~ wt + cyl + drat + am drat -0.130 1.53 -0.0851 9.33e- 1\r## 10 mpg ~ wt + cyl + drat + am am 0.237 1.51 0.157 8.76e- 1\r modelos_saida %\u0026gt;% select(especificacao, stats) %\u0026gt;% unnest(stats)\r ## # A tibble: 4 x 13\r## especificacao r.squared adj.r.squared sigma statistic p.value df logLik\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 mpg ~ wt 0.753 0.745 3.05 91.4 1.29e-10 1 -80.0\r## 2 mpg ~ wt + cyl 0.830 0.819 2.57 70.9 6.81e-12 2 -74.0\r## 3 mpg ~ wt + cyl ~ 0.830 0.812 2.61 45.6 6.57e-11 3 -74.0\r## 4 mpg ~ wt + cyl ~ 0.830 0.805 2.66 33.0 4.84e-10 4 -74.0\r## # ... with 5 more variables: AIC \u0026lt;dbl\u0026gt;, BIC \u0026lt;dbl\u0026gt;, deviance \u0026lt;dbl\u0026gt;,\r## # df.residual \u0026lt;int\u0026gt;, nobs \u0026lt;int\u0026gt;\r modelos_saida %\u0026gt;% select(especificacao, aums) %\u0026gt;% filter(especificacao == \u0026quot;mpg ~ wt + cyl + drat + am\u0026quot;) %\u0026gt;% unnest(aums)\r ## # A tibble: 32 x 13\r## especificacao .rownames mpg wt cyl drat am .fitted .resid .hat\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 mpg ~ wt + cyl~ Mazda RX4 21 2.62 6 3.9 1 22.3 -1.35 0.0899\r## 2 mpg ~ wt + cyl~ Mazda RX~ 21 2.88 6 3.9 1 21.6 -0.550 0.0924\r## 3 mpg ~ wt + cyl~ Datsun 7~ 22.8 2.32 4 3.85 1 26.3 -3.55 0.137 ## 4 mpg ~ wt + cyl~ Hornet 4~ 21.4 3.22 6 3.08 0 20.4 1.05 0.113 ## 5 mpg ~ wt + cyl~ Hornet S~ 18.7 3.44 8 3.15 0 16.6 2.11 0.122 ## 6 mpg ~ wt + cyl~ Valiant 18.1 3.46 6 2.76 0 19.6 -1.53 0.207 ## 7 mpg ~ wt + cyl~ Duster 3~ 14.3 3.57 8 3.21 0 16.2 -1.87 0.103 ## 8 mpg ~ wt + cyl~ Merc 240D 24.4 3.19 4 3.69 0 23.4 0.996 0.189 ## 9 mpg ~ wt + cyl~ Merc 230 22.8 3.15 4 3.92 0 23.5 -0.700 0.207 ## 10 mpg ~ wt + cyl~ Merc 280 19.2 3.44 6 3.92 0 19.5 -0.340 0.149 ## # ... with 22 more rows, and 3 more variables: .sigma \u0026lt;dbl\u0026gt;, .cooksd \u0026lt;dbl\u0026gt;,\r## # .std.resid \u0026lt;dbl\u0026gt;\r ","date":1621900800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621900800,"objectID":"c1c74f268683837301969e7167daf1ed","permalink":"https://laddem.github.io/courses/tidyverse/solucoes/","publishdate":"2021-05-25T00:00:00Z","relpermalink":"/courses/tidyverse/solucoes/","section":"courses","summary":"Solu√ß√µes dos exerc√≠cios","tags":null,"title":"Solu√ß√µes","type":"book"},{"authors":["LADDEM"],"categories":null,"content":"\rCreate your slides in Markdown - click the Slides button to check out the example.\r\r\rSupplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://laddem.github.io/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot;\rif porridge == \u0026quot;blueberry\u0026quot;:\rprint(\u0026quot;Eating...\u0026quot;)\r  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}}\r{{% fragment %}} **Two** {{% /fragment %}}\r{{% fragment %}} Three {{% /fragment %}}\r Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}}\r- Only the speaker can read these notes\r- Press `S` key to view\r{{% /speaker_note %}}\r Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}}\r{{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}}\r{{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}\r  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1,\r.reveal section h2,\r.reveal section h3 {\rcolor: navy;\r}\r  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://laddem.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["LADDEM","Robert Ford"],"categories":null,"content":"\rClick the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.\r\r\r\rCreate your slides in Markdown - click the Slides button to check out the example.\r\r\rSupplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://laddem.github.io/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["LADDEM","Robert Ford"],"categories":null,"content":"\rClick the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.\r\r\r\rCreate your slides in Markdown - click the Slides button to check out the example.\r\r\rSupplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://laddem.github.io/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://laddem.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]