<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LADDEM</title>
    <link>https://laddem.github.io/</link>
      <atom:link href="https://laddem.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>LADDEM</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>pt</language><copyright>© 2021 LADDEM</copyright><lastBuildDate>Tue, 15 Jun 2021 20:04:57 -0300</lastBuildDate>
    <image>
      <url>https://laddem.github.io/media/logo_hu21999b1509efcb95cf9a1f4a62aafaa3_109704_300x300_fit_lanczos_2.png</url>
      <title>LADDEM</title>
      <link>https://laddem.github.io/</link>
    </image>
    
    <item>
      <title>A base da linguagem R</title>
      <link>https://laddem.github.io/courses/rbase/dia1/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/courses/rbase/dia1/</guid>
      <description>&lt;h2 id=&#34;fundamentos&#34;&gt;Fundamentos&lt;/h2&gt;
&lt;h3 id=&#34;a-interface-do-r-e-do-rstudio&#34;&gt;A interface do R e do RStudio&lt;/h3&gt;
&lt;p&gt;O RStudio oferece uma maneira de falar com seu computador. O R te fornece um idioma para falar. 
Para começar, abra o RStudio da mesma forma que você abriria qualquer outro aplicativo em seu computador.&lt;/p&gt;
&lt;p&gt;Você digita o código R na linha superior do painel do console RStudio e, em seguida, clica em Enter para executá-lo. O código que você digita é chamado de comando, porque ele comandará seu computador para fazer algo por você. A linha em que você digita é chamada de linha de comando.&lt;/p&gt;
&lt;p&gt;A interface do RStudio é simples. Para  criar um script novo é necessário ir em &lt;code&gt;File &amp;gt; New File &amp;gt; R &amp;gt; script&lt;/code&gt; no menu no canto esquerdo. É recomendado fortemente que você escreva e edite todo o seu código R em um script antes de executá-lo no console. Por quê? Esse hábito cria um registro reproduzível de seu trabalho. Ao terminar o dia, você pode salvar seu script e usá-lo para executar novamente toda a sua análise no dia seguinte, além disso os scripts são muito úteis para editar e revisar seu código e são uma ótima cópia de seu trabalho para compartilhar com outras pessoas. Para salvar é só clicar no disquete no painel do script e depois ir em &lt;code&gt;File &amp;gt; Save&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Quando você digita um comando no script e pressiona Ctrl + Enter ou Run, o computador executa o comando e mostra os resultados no console logo abaixo. Por exemplo, se você digitar 1 + 1 e pressionar Ctrl + Enter, o RStudio exibirá:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;objetos&#34;&gt;Objetos&lt;/h3&gt;
&lt;p&gt;Agora que você já sabe como o R funciona, vamos ver alguns operadores e objetos que podem ser criados. Se você quer que o R crie um vetor, use o operador &lt;code&gt;:&lt;/code&gt;, esse operador vai retornar um conjunto unidimensional de números:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1:6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas quando você roda assim dessa forma, o R gera o vetor que você poderá ver o resultado no console, porém esse vetor não vai ficar salvo em lugar nenhum, é basicamente uma pegada de seis números que existiram naquela execução pontual. Se você quiser usar novamente essa sequência de número, você precisa pedir para o R guardar ele em algum lugar. Você pode fazer isso criando um &lt;code&gt;objeto&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O R permite salvar dados armazenando-os dentro de um objeto R. O que é um objeto? Apenas um nome que você pode usar para acessar os dados armazenados. Por exemplo, você pode salvar dados em um objeto como &lt;code&gt;a&lt;/code&gt; ou &lt;code&gt;b&lt;/code&gt; ou qualquer nome que faça sentido para o que você está fazendo. Sempre que o R encontrar o objeto, ele irá substituí-lo pelos dados salvos nele, da seguinte forma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a &amp;lt;- 1

a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a + 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou seja, para você criar um objeto no R, você escolhe um nome e depois usa o símbolo &lt;code&gt;&amp;lt;-&lt;/code&gt; para salvar o dado naquele objeto no qual você deu um nome. No caso do exemplo acima, o R criou um objeto, deu a ele seu nome e armazenou nele tudo o que vier após a seta. Portanto, &lt;code&gt;a &amp;lt;- 1&lt;/code&gt; armazena 1 em um objeto denominado a.&lt;/p&gt;
&lt;p&gt;Você também pode usar seu objeto em novos comandos R. Já que armazenou anteriormente o valor de 1, agora você está adicionando 1 ao a armazenando no objeto &lt;code&gt;a + 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Então, como você faria para armazenar esse vetor de seis números &lt;code&gt;1:6&lt;/code&gt;, que a gente criou anteriormente, em um objeto?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor &amp;lt;- 1:6

vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quando você cria um objeto no R, esse objeto vai aparecer armazenado na seção &lt;code&gt;Environment&lt;/code&gt; no lado direito, do lado da seção script (essa que você digita os comandos para usá-los depois).&lt;/p&gt;
&lt;p&gt;Você pode nomear um objeto no R de praticamente qualquer nome, só tem algumas regras: não pode começar com número, e também não pode ter alguns símbolos, como por exemplo:  &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Além disso, o R é &lt;em&gt;case-sensitive&lt;/em&gt;, portanto se eu colocar um nome de objeto como &lt;code&gt;Name&lt;/code&gt; e outro como &lt;code&gt;name&lt;/code&gt; eles vão se referir a objetos diferentes, ou seja, ele considera se a letra é maíuscula ou minúscula.&lt;/p&gt;
&lt;p&gt;E se você criar um objeto, salvar uma informação neste objeto e logo em seguida salvar outra, ele subscreve o que estava anteriormente, então tome cuidado para não perder informações. O exemplo abaixo mostra exatamente isso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;meu_numero &amp;lt;- 1

meu_numero
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;meu_numero &amp;lt;- 999
meu_numero
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 999
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com a função &lt;code&gt;ls()&lt;/code&gt; você consegue listar no console todos os objetos criados.&lt;/p&gt;
&lt;p&gt;O que é possível fazer com esses objetos no R que você criou? Muita coisa! Por exemplo: é possível usar o objeto vetor e fazer uma operação de divisão&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor/2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.5 1.0 1.5 2.0 2.5 3.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor - 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0 1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R dividiu por 2 todos os números dentro daquele vetor. Se você subtrair 1 desse objeto, o R vai subtrair 1 de cada elemento dentro deste objeto.&lt;/p&gt;
&lt;p&gt;Quando você usa dois ou mais vetores em uma operação, o R alinhará os vetores e executará uma sequência de operações individuais. Por exemplo, quando você executa vetor * vetor, o R alinha os dois vetores de dados e, em seguida, multiplica o primeiro elemento do vetor 1 pelo primeiro elemento do vetor 2, então multiplica o segundo elemento do vetor 1 pelo segundo elemento do vetor 2, e assim por diante, até que cada elemento tenha sido multiplicado. O resultado será um novo vetor com o mesmo comprimento dos dois primeiros:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor * vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  9 16 25 36
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se você der ao R uma operação com dois vetores de comprimentos diferentes, o R repetirá o vetor mais curto até que seja do mesmo tamanho do vetor maior e, em seguida, fará as contas. Esta não é uma mudança permanente - o vetor mais curto terá seu tamanho original depois que o R fizer as contas. Se o comprimento do vetor curto não se dividir igualmente no comprimento do vetor longo, o R retornará uma mensagem de aviso. Esse comportamento é conhecido como &lt;strong&gt;reciclagem&lt;/strong&gt; de vetor e ajuda o R a fazer operações em elementos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor * 1:4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in vetor * 1:4: comprimento do objeto maior não é múltiplo do
## comprimento do objeto menor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  9 16  5 12
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor * 1:2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  3  8  5 12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Porém, é preciso cuidado pois se você não estava querendo &lt;strong&gt;reciclar&lt;/strong&gt;, é possível cometer erros. No exemplo abaixo, eu crio um segundo vetor com os valores para multiplicação, mas ele tem tamanho menor que o primeiro. Por isso, é bom ficar atento aos &lt;code&gt;Warning message:&lt;/code&gt;s:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor2 &amp;lt;- c(1, 2, 3, 4, 5)

vetor * vetor2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in vetor * vetor2: comprimento do objeto maior não é múltiplo do
## comprimento do objeto menor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  9 16 25  6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;funções&#34;&gt;Funções&lt;/h3&gt;
&lt;p&gt;O R vem com muitas funções instaladas. Praticamente tudo que você vê que não são &lt;code&gt;objetos&lt;/code&gt; que você criou são funções e seus componentes. Por isso, dizemos que, no seu núcleo, o R é uma linguagem &amp;ldquo;funcional&amp;rdquo;. Vejamos alguns exemplos de funções:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;round(3.1415)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;factorial(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercício&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Só de olhar para as funções e seus resultados, você conseguíria dizer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O que cada função faz?&lt;/li&gt;
&lt;li&gt;Quais entradas (inputs) ela pede?&lt;/li&gt;
&lt;li&gt;Qual saída ela produz (output)?&lt;/li&gt;
&lt;li&gt;Que opções alternativas (argumentos) elas poderiam conter?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;argumentos&#34;&gt;Argumentos&lt;/h3&gt;
&lt;p&gt;As informações que são colocadas dentro dos &lt;code&gt;()&lt;/code&gt; depois do nome de uma função são chamados de &lt;strong&gt;argumentos&lt;/strong&gt;. Em geral, uma função tem alguns argumentos obrigatórios (o valor a ser arrendodado, o número para calcular o fatorial) e argumentos opcionais (arredondar para cima ou para baixo? descartar valores nulos?).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(1:6)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor_com_nulo &amp;lt;- c(1, 2, 3, 4, 5, 6, NA)

mean(vetor_com_nulo)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(vetor_com_nulo, na.rm = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Argumentos obrigatórios e opcionais tornam as nossas funções mais flexíveis. Essa flexibilidade é crucial para muitas operações, pois podemos passar funções como argumentos de outras funções. Por exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;round(mean(vetor))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quando você reúne as funções dessa forma, o R vai avaliar a função de dentro para fora, como uma boneca matrioshka:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resultado &amp;lt;- vetor
resultado
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resultado &amp;lt;- mean(resultado)
resultado
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resultado &amp;lt;- round(resultado)
resultado
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Outro exemplo de argumentos opcionais é a função &lt;code&gt;sample&lt;/code&gt;, que produz amostras aleatórias:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com os argumentos opcionais, podemos mudar detalhes do processo de amostragem&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1, prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E ao mudar as probabilidades de como cada amostra vai ser selecionada, eu criei um dado viciado!&lt;/p&gt;
&lt;p&gt;Você pode verificar os argumentos de uma função com:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;args(sample)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (x, size, replace = FALSE, prob = NULL) 
## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercício-1&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Repita a operação de &lt;code&gt;sample&lt;/code&gt; acima com o dado &amp;ldquo;viciado&amp;rdquo; e com o dado &amp;ldquo;limpo&amp;rdquo; e verifique se você consegue perceber empiricamente que meu dado está &amp;ldquo;viciado&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Que outros argumentos existem na função &lt;code&gt;sample&lt;/code&gt;? Qual o papel do argumento &lt;code&gt;replace&lt;/code&gt;?&lt;/p&gt;
&lt;h3 id=&#34;sua-primeira-função&#34;&gt;Sua primeira função&lt;/h3&gt;
&lt;p&gt;Ok, mas suponha que você esteja cansado de repetir as coisas no seu programa. Existe uma operação que você realiza de novo e novo, e ela é relativamente simples, mas é um tédio ficar copiando e colando a mesma coisa. Por exemplo, se você tem o vetor que criamos com seis números, e precisa sortear dois valores e somar seu resultado, como se estivesse jogando dois dados de 6 faces e somando os resultados?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- sample(vetor, size = 1)
y &amp;lt;- sample(vetor, size = 1)
x + y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seu código funciona bem, mas você quer simplificar isso para uma função que faça tudo de uma vez, podemos chamar ela de &lt;code&gt;role&lt;/code&gt;, como se fosse &amp;ldquo;role dois dados&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A função &lt;code&gt;role&lt;/code&gt; não existe no R base, mas você mesmo pode construí-la:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role &amp;lt;- function() {
  x &amp;lt;- sample(vetor, size = 1)
  y &amp;lt;- sample(vetor, size = 1)
  x + y
}

role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pause para contemplar os diferentes elementos do construtor de funções do R:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;role&lt;/code&gt; é o nome da função, e ele deve ser atribuído &lt;code&gt;&amp;lt;-&lt;/code&gt; para que você possa chamar sua função&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt; é uma função que constrói funções, e os argumentos dela que vão nos parenteses são aqueles que o usuário deverá digitar. Nesse caso, nenhum argumento é necessário.&lt;/li&gt;
&lt;li&gt;Os &lt;code&gt;{}&lt;/code&gt; indicam o início e o fim do &lt;code&gt;corpo&lt;/code&gt; da função, onde a magia acontece.&lt;/li&gt;
&lt;li&gt;Ao rodar o construtor da função, nada acontece. A função só entra em funcionamento na hora que o usuário a utiliza posteriormente &lt;code&gt;role()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;exercício-2&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Escreva uma função que role 2 dados de 10 faces e some seus resultados.&lt;/p&gt;
&lt;h3 id=&#34;programas-scripts&#34;&gt;Programas (scripts)&lt;/h3&gt;
&lt;!-- 

N: Eu coloquei o script direto lá em cima, pra mim não faz muito sentido passar pelo console primeiro, mas não sei, o que você acha?

V: Olha, pra mim depende muito do aluno. Acho que as vezes gente que começa a estudar o R nunca para pra pensar na distinção entre as duas coisas. Pessoalmente acho útil porque eu uso o console o tempo todo para testar coisas que eu não quero que poluam o script, mas muita gente faz isso no script e depois apaga. Meu ponto aqui é outra coisa, é só introduzir pra eles o conceito de programa/script. O que é, o que tem num programa, talvez um ou outro exemplo de um programa. Tipo um programa de importação e tratamento de dados. Um programa que produz uma visualização. Um programa que gera um modelo estatístico. Um programa que faz uma tabela, etc.

--&gt;
&lt;p&gt;Na maioria das situações, esses conceitos soltos que introduzimos não são muito úteis isoladamente. Afinal de contas, objetos, funções e números individuais não servem para muita coisa. Esses conceitos ganham corpo quando os utilizamos juntos para produzir nossos programas. O que são programas? A metáfora mais comumemente utilizada é a culinária. Um programa é uma sequência de instruções, uma receita para produzir alguma coisa. A diferença é que ao invés de produtos culinários, os ingredientes são informações na memória de um computador, e ao invés de um prato, estamos tentando produzir resultados que podem ser analisados: estatísticas descritivas, representações gráficas, modelos matemáticos, tabelas, etc.&lt;/p&gt;
&lt;p&gt;Falaremos mais sobre programas e estratégias de construção de programas (se der tempo), em outra aula. Por aqui, seria interessante que vocês levassem adiante a noção de que o programa é o conjunto da obra. É comum desenvolvermos ou encontrarmos programas para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;importar e corrigir quaisquer problemas nos meus dados&lt;/li&gt;
&lt;li&gt;produzir estatísticas descritivas a partir de meus dados&lt;/li&gt;
&lt;li&gt;produzir diversos gráficos que descrevem meus dados&lt;/li&gt;
&lt;li&gt;produzir tabulações e exportá-las para outros softwares&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como vários aspectos do R, a flexibilidade aqui é imensa, e vocês são livres para definir o &lt;strong&gt;escopo&lt;/strong&gt; dos seus programas. Você vai preferir colocar tudo num programa só, ou talvez dividí-lo em diversos programas e tarefas menores? Cada abordagem carrega consigo vantagens e desvantagens que vocês terão que decidir se valem ou não a pena.&lt;/p&gt;
&lt;h3 id=&#34;pacotes&#34;&gt;Pacotes&lt;/h3&gt;
&lt;p&gt;Você não é a única pessoa que escreve suas próprias funções com R. Muitos professores, programadores e estatísticos usam R para projetar ferramentas que podem ajudar as pessoas a analisar dados. Eles então tornam essas ferramentas gratuitas para qualquer pessoa usar. Para usar essas ferramentas, basta baixá-las. Eles reúnem coleções pré-montadas de funções e objetos chamados pacotes. Veremos o básico aqui.&lt;/p&gt;
&lt;!-- Acho melhor evitar qplot. Vamos usar as funções do graphics mesmo para fazer uns gráficos simples. Pode deixar o exemplo de baixar o ggplot2, sem problema, mas é melhor a gente produzir os gráficos no base mesmo para o pessoal ter uma ideia quando eles encontrarem base graphics por aí. --&gt;
&lt;p&gt;Vamos usar a função qplot para fazer alguns gráficos rápidos. qplot vem no pacote ggplot2, o pacote popular para fazer gráficos. Antes de usar o qplot, ou qualquer outra coisa no pacote ggplot2, você precisa fazer o download e instalá-lo.&lt;/p&gt;
&lt;p&gt;Os pacotes do R em geral estão hospedados em &lt;a href=&#34;http://cran.r-project.org&#34;&gt;http://cran.r-project.org&lt;/a&gt;, o mesmo site de onde você baixou sua versão do R. No entanto, você não precisa visitar o site para baixar um pacote R; você pode baixar pacotes direto da linha de comando do R.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;ggplot2&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É isso. O R fará com que seu computador visite o site, baixe ggplot2 e instale o pacote em seu disco rígido exatamente onde o R deseja encontrá-lo. Agora você tem o pacote ggplot2. Se você gostaria de instalar outro pacote, substitua ggplot2 pelo nome do seu pacote no código.&lt;/p&gt;
&lt;h3 id=&#34;ajuda&#34;&gt;Ajuda&lt;/h3&gt;
&lt;h4 id=&#34;no-r&#34;&gt;No R&lt;/h4&gt;
&lt;p&gt;Existem mais de 1.000 funções no núcleo do R e novas funções são criadas o tempo todo. Isso pode ser muito material para memorizar e aprender! Felizmente, cada função R vem com sua própria página de ajuda, que você pode acessar digitando o nome da função após um ponto de interrogação. Por exemplo, cada um desses comandos abrirá uma página de ajuda. Procure as páginas que aparecem na guia Ajuda do painel inferior direito do RStudio:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?sqrt
?log10
?sample
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As páginas de ajuda contem informações úteis sobre o que cada função faz. Essas páginas de ajuda também servem como documentação de código, portanto, pode ser algo um pouco chato. Muitas vezes parecem ter sido escritas para pessoas que já entendem a função e não precisam de ajuda. Não deixe que isso te faça desistir de entender uma função que você queira usar - você pode ganhar muito com uma página de ajuda examinando-a em busca de informações que façam sentido e ignorando o resto. Essa técnica inevitavelmente o levará à parte mais útil de cada página de ajuda: a parte inferior. Aqui, quase todas as páginas de ajuda incluem algum código de exemplo que coloca a função em ação. Executar esse código é uma ótima maneira de aprender com o exemplo dado.&lt;/p&gt;
&lt;p&gt;Se você gostaria de consultar a página de ajuda de uma função, mas esqueceu o nome da função, você pode pesquisar por palavra-chave. Para fazer isso, digite dois pontos de interrogação seguidos por uma palavra-chave na linha de comando de R, o R exibirá uma lista de links para páginas de ajuda relacionadas à palavra-chave. Você pode pensar nisso como a página de ajuda para a página de ajuda:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;??log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Muitos pacotes também incluem &lt;strong&gt;vinhetas&lt;/strong&gt;, que são pequenas aulinhas que resumem as principais funções de um pacote através de explicações de uso detalhados. Você pode ver as vinhetas disponíveis num pacote instalado assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vignette(package = &amp;quot;ggplot2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E a vinheta em si é acessada assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vignette(&amp;quot;ggplot2-specs&amp;quot;, package = &amp;quot;ggplot2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Que deve abrir a vinheta na sua seção &amp;ldquo;Help&amp;rdquo; do RStudio. A maioria dessas vinhetas também está disponível online numa consulta rápida ao Google.&lt;/p&gt;
&lt;h4 id=&#34;online&#34;&gt;Online&lt;/h4&gt;
&lt;p&gt;Em geral, após uma consulta a página de ajuda, pode ser que você não esteja satisfeito. Você pode complementar sua página de ajuda com diversos recursos online. Vamos deixar alguns links abaixo que utilizamos cotidianamente.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google&lt;/a&gt;: em geral, uma pesquisa com &amp;ldquo;r &amp;lt;função&amp;gt;&amp;rdquo; ou &amp;ldquo;r &amp;lt;pacote&amp;gt;&amp;rdquo; te leva para onde você quer ir.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stack Overflow&lt;/a&gt;: similar, mas no stackoverflow se usam &lt;code&gt;[tags]&lt;/code&gt;, então seria algo como &lt;code&gt;[r][pacote] sua pergunta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.rstudio.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Community&lt;/a&gt;: mais pra perguntas relacionadas ao RStudio&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-br.2285057.n4.nabble.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lista R-Br&lt;/a&gt;: lista ativa e em português, em geral, o pessoal é prestativo.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/rstudiotips&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Tips - Twitter&lt;/a&gt;: dicas no twitter para ir melhorando no cotidiano.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;exercício-3&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Consulte a ajuda das funções &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt;. Porque todas elas tem o argumento &lt;code&gt;na.rm&lt;/code&gt;? O que argumento o &lt;code&gt;trim&lt;/code&gt; em &lt;code&gt;mean&lt;/code&gt; faz? Qual a melhor maneira de rapidamente entender o que uma função faz através da página de ajuda?&lt;/p&gt;
&lt;h2 id=&#34;objetos-em-r&#34;&gt;Objetos em R&lt;/h2&gt;
&lt;h3 id=&#34;vetores&#34;&gt;Vetores&lt;/h3&gt;
&lt;p&gt;Já trabalhamos com alguns vetores lá em cima, é inevitável. Pensou em salvar um objeto na memória do computador no R, pensou em vetor. Pra ser preciso, estamos usando &lt;strong&gt;vetores atômicos&lt;/strong&gt;. Os vetores atômicos são em geral o objeto mais frequentemente usado em R. Para construir um, você utiliza a função &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor &amp;lt;- c(1, 2, 3, 4, 5, 6)
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E você pode verificar se ele é um vetor mesmo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.vector(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;is.vector&lt;/code&gt; testa se o objeto é um vetor, e retorna &lt;code&gt;TRUE&lt;/code&gt; se sim, e &lt;code&gt;FALSE&lt;/code&gt; se não.&lt;/p&gt;
&lt;h4 id=&#34;exercício-4&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Teste se &lt;code&gt;vetor2&lt;/code&gt;, criado anteriormente é um vetor. Crie um vetor com os nomes de cinco pessoas da sala.&lt;/p&gt;
&lt;h4 id=&#34;tamanho&#34;&gt;Tamanho&lt;/h4&gt;
&lt;p&gt;Ao contrário de outras linguagens, o R não diferencia entre escalares e vetores. Se você salvar só 1 valor, ele salva num vetor atômico de tamanho 1.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- 1
is.vector(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vetores atômicos guardam suas informações em uma única dimensão (como se fosse uma caixinha de pílulas semanal), cada compartimento guarda um valor. E todos os valores tem que ser do mesmo tipo! Números com números, caracteres com caracteres. Não pode misturar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiro &amp;lt;- 1L
double &amp;lt;- 1
texto &amp;lt;- &amp;quot;um&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou com mais de um valor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros &amp;lt;- c(1L, 2L)
doubles &amp;lt;- c(1, 2)
textos &amp;lt;- c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esses tipos de vetores são importantes pois eles interagem com as funções de maneira lógica:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(doubles)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(textos)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in sum(textos): &#39;type&#39; inválido (character) do argumento
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja a mensagem de erro ao tentar somar os textos.&lt;/p&gt;
&lt;h4 id=&#34;exercício-5&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Considerando os dois vetores abaixo, calcule as suas médias. Porque não é possível calcular a média do segundo vetor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;idade1 &amp;lt;- c(20, 25, 30, 35, 40, 45, 50)
idade2 &amp;lt;- c(&amp;quot;20&amp;quot;, &amp;quot;25&amp;quot;, &amp;quot;30&amp;quot;, &amp;quot;35&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;45&amp;quot;, &amp;quot;50&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;tipos&#34;&gt;Tipos&lt;/h4&gt;
&lt;p&gt;Vetores atômicos podem ser de 6 tipos, dois são mais utilizados.&lt;/p&gt;
&lt;h4 id=&#34;números-reais&#34;&gt;Números reais&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A função &lt;code&gt;typeof&lt;/code&gt; me diz qual o tipo de um vetor atômico.&lt;/p&gt;
&lt;h4 id=&#34;números-inteiros&#34;&gt;Números inteiros&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O padrão do R é aceitar números reais, se você não especificar. Para forçar números inteiros, é precisar utilizar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros &amp;lt;- c(1, 2)

typeof(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros &amp;lt;- c(1L, 2L)

typeof(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essas diferenças em geral são inconsequentes, mas existem alguns casos, como resultados de divisão e raíz quadrada, em que podemos encontrar resultados curiosos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sqrt(2)^2 - 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.440892e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em teoria, a operação acima deveria ser 0, mas como o computador tem uma quantidade limitada de memória para armazenar as casas decimais, ele acaba gerando uma &amp;ldquo;sobrinha&amp;rdquo; infinitesimal da raíz quadrada de dois.&lt;/p&gt;
&lt;h5 id=&#34;caracteres&#34;&gt;Caracteres&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;texto &amp;lt;- c(&amp;quot;Bem&amp;quot;, &amp;quot;Vindos&amp;quot;)

texto
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Bem&amp;quot;    &amp;quot;Vindos&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(texto)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;exercício-6&#34;&gt;Exercício&lt;/h6&gt;
&lt;p&gt;Qual a diferença entre: 1, &amp;ldquo;1&amp;rdquo;, &amp;ldquo;one&amp;rdquo; no R? Quais são números e quais são caracteres?&lt;/p&gt;
&lt;h5 id=&#34;lógicos&#34;&gt;Lógicos&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3 &amp;lt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3 &amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;logico &amp;lt;- c(TRUE, FALSE)

logico
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(logico)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;logical&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vetores lógicos são a base de várias operações úteis no R e vamos voltar a eles em diversos momentos.&lt;/p&gt;
&lt;p&gt;Complexos e crus:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;comp &amp;lt;- c(1 + 1i, 1 + 2i, 1 + 3i)
comp
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1+1i 1+2i 1+3i
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(comp)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;complex&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;raw(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 00 00 00
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(raw(3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;raw&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vetores complexos servem para armazenar número complexos, enquanto vetores crus servem para armazenar os valores em bits de uma informação. Ambos são menos utilizados na análise de dados e eu os introduzo apenas para vocês saberem que eles existem.&lt;/p&gt;
&lt;h3 id=&#34;atributos&#34;&gt;Atributos&lt;/h3&gt;
&lt;p&gt;Atributos são informações adicionais que podemos colocar em um objeto para cumprir uma série de tarefas auxiliares. Pense, por exemplo, em dar nomes para os meses do ano, ou classificar um objeto de acordo com seu tipo. Atributos são &lt;strong&gt;metadados&lt;/strong&gt; ou dados sobre os dados, e eles nos interessam porque o R pode aproveitar os atributos de um objeto para realizar tarefas específicas.&lt;/p&gt;
&lt;p&gt;Você pode ver os atributos de um objeto assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O nosso vetor não tem nenhum atributo ainda, por isso &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O atributo mais comum que os objetos podem ter em R são nomes. Podemos ver o atributo nomes assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Novamente, &lt;code&gt;NULL&lt;/code&gt; indica que o vetor não tem nomes.&lt;/p&gt;
&lt;p&gt;A maioria das funções que trabalham com atributos vai ter esses &amp;ldquo;dois empregos&amp;rdquo;. De um lado, você pode utilizá-las para obter (get) os atributos, de outro, você pode utilizá-las para modificar (set) os atributos, veja:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor) &amp;lt;- c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;, &amp;quot;five&amp;quot;, &amp;quot;six&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora, veja como ficaram os resultados das duas funções anteriores.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $names
## [1] &amp;quot;one&amp;quot;   &amp;quot;two&amp;quot;   &amp;quot;three&amp;quot; &amp;quot;four&amp;quot;  &amp;quot;five&amp;quot;  &amp;quot;six&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;one&amp;quot;   &amp;quot;two&amp;quot;   &amp;quot;three&amp;quot; &amp;quot;four&amp;quot;  &amp;quot;five&amp;quot;  &amp;quot;six&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R também vai mostrar o atributo nomes quando você chamar o vetor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   one   two three  four  five   six 
##     1     2     3     4     5     6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Da mesma forma que você modificou os atributos antes, você pode modificá-los ou removê-los:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor) &amp;lt;- c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;três&amp;quot;, &amp;quot;quatro&amp;quot;, &amp;quot;cinco&amp;quot;, &amp;quot;seis&amp;quot;)
names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;um&amp;quot;     &amp;quot;dois&amp;quot;   &amp;quot;três&amp;quot;   &amp;quot;quatro&amp;quot; &amp;quot;cinco&amp;quot;  &amp;quot;seis&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor) &amp;lt;- NULL
names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O outro atributo importante para muitas tarefas são as dimensões de um objeto. Lembre que os nossos vetores atômicos são limitados pela exigência de só ter uma dimensão, mas e se quisermos organizar nossos dados em várias dimensões? Um jeito possível é alterar as dimensões:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# 2 linhas e 3 colunas
dim(vetor) &amp;lt;- c(2, 3)

vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    3    5
## [2,]    2    4    6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# 3 linhas e 2 colunas

dim(vetor) &amp;lt;- c(3, 2)

vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    4
## [2,]    2    5
## [3,]    3    6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E não precisa se limitar a objetos bidimensionais. Você pode passar n dimensões para o objeto e o R distribuirá os valores do seu vetor no número de dimensões necessários. O único detalhe importante é você reparar que o R tem uma certa preferência de ir preenchendo os valores da coluna antes dos valores da linha e se você quiser fazer isso de forma diferente, é melhor utilizar as funções &lt;code&gt;matrix&lt;/code&gt; ou &lt;code&gt;array&lt;/code&gt;, que veremos adiante.&lt;/p&gt;
&lt;h4 id=&#34;exercício-7&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Usando seus conhecimentos sobre atributos, construa uma pequena matriz com o nome de 5 pessoas da turma e seu sexo.&lt;/p&gt;
&lt;h3 id=&#34;matrizes&#34;&gt;Matrizes&lt;/h3&gt;
&lt;p&gt;Matrizes são muito parecidas com o que acabamos de construir: elas guardam informações em um &lt;code&gt;array&lt;/code&gt; de duas dimensões. A grande diferença é que as matrizes são programadas para executar as operações matemáticas com matrizes de acordo com os princípios e convenções da álgebra linear. Portanto, o R vem com funções para transpor, inverter, solucionar, etc. matrizes. Você pode construir matrizes no R com:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- matrix(vetor, nrow = 2)
m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    3    5
## [2,]    2    4    6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou, se você quiser mudar a ordem de preenchimento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m2 &amp;lt;- matrix(vetor, nrow = 2, byrow = TRUE)
m2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para mais informações, consulte &lt;code&gt;?matrix&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;exercício-8&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Reconstrua a sua matriz original usando a função &lt;code&gt;matrix&lt;/code&gt; ao invés de alterar os atributos. E os nomes das colunas?&lt;/p&gt;
&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;
&lt;p&gt;O array é uma extensão da ideia de matriz para quantas dimensões você quiser, ou n-dimensões. 3, 4, 5, 10 dimensões, isso é com você. Na prática os arrays não são muito frequentes na análise de dados, mas eles existem se você precisar deles um dia:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a &amp;lt;- array(c(11:14, 21:24, 31:34), dim = c(2, 2, 3))
a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## , , 1
## 
##      [,1] [,2]
## [1,]   11   13
## [2,]   12   14
## 
## , , 2
## 
##      [,1] [,2]
## [1,]   21   23
## [2,]   22   24
## 
## , , 3
## 
##      [,1] [,2]
## [1,]   31   33
## [2,]   32   34
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O display de um array multidimensional é meio confuso, porque o R vai te mostrar as &amp;ldquo;fatias&amp;rdquo; do array. Quanto mais dimensões, mais fatias. Boa sorte se você precisar deles um dia!&lt;/p&gt;
&lt;h3 id=&#34;classe&#34;&gt;Classe&lt;/h3&gt;
&lt;p&gt;A classe de um objeto é um atributo importante para seu funcionamento no R, porque diferentes classes estão associadas a diferentes métodos! Pense, por exemplo, que você deseja organizar uma sequência de valores em um vetor. Se esses valores são números, a ordem crescente ou decrescente é bastante intuitiva. Se são textos, podemos usar a ordem alfabética. Mas e se forem meses do ano? Grupos etários? Categorias educacionais?&lt;/p&gt;
&lt;p&gt;Problemas dessa natureza são resolvidos no R através da atribuição de classes aos objetos. Transposição e solução de matrizes utilizarão o atributo classe para saber se aquele objeto é uma matriz, para citar apenas um exemplo. Podemos descobrir a classe de um objeto assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;matrix&amp;quot; &amp;quot;array&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas esse é o nosso vetor modificado. Vejamos o que acontece se retiramos o atributo &lt;code&gt;dim&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(vetor) &amp;lt;- NULL
class(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que não mudamos o tipo do vetor, ele continua sendo &amp;ldquo;double&amp;rdquo;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas sua classe mudou. Podemos mudar a classe de um objeto de maneira arbitrária, mas em geral a gente evita fazer isso, porque esse atributo está muito relacionado com as propriedades desse objeto. Veja dois exemplos do que ocorre ao alterar manualmente a classe de um objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;agora &amp;lt;- Sys.time()
agora
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2021-06-14 12:51:59 -03&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(agora)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(agora)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;POSIXct&amp;quot; &amp;quot;POSIXt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nesse primeiro exemplo, usando &lt;code&gt;Sys.time&lt;/code&gt; para obter o horário local. O tipo dessa informação é &amp;ldquo;double&amp;rdquo;, pois o R armazena variáveis tempo como o número de segundos passados entre uma data de início arbitrária e o momento que o seu tempo representa. Mas a classe desse objeto é POSIXct e POSIXt, que são as classes do R para lidar com objetos que registram data e tempo.&lt;/p&gt;
&lt;p&gt;Veja o que acontece se eu temporariamente remover a classe desse objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unclass(agora)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1623685919
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R transformou meu objeto data/tempo em um número. O que ocorre é que quando meu objeto tem as classes adequadas, isso alerta o R para que ele trate esse objeto de forma diferente. As funções do R utilizarão métodos de &lt;code&gt;print&lt;/code&gt; para facilitar a visualização de objetos data/tempo, mas, por debaixo do capô, preservarão suas características computacionais numéricas. Você pode, por exemplo, somar 24h ao seu objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;agora + (24 * 60 * 60)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2021-06-15 12:51:59 -03&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você também pode, se assim desejar, transformar um valor numérico arbitrário numa data (só demonstração, não vale a pena fazer isso) atribuindo uma classe para ele:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;objeto &amp;lt;- 1000000000
class(objeto) &amp;lt;- c(&amp;quot;POSIXct&amp;quot;, &amp;quot;POSIXt&amp;quot;)

objeto
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2001-09-08 22:46:40 -03&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercício-9&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Experimente brincar com o valor de objeto e ver&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qual é a data de referência do R para calcular tempos?&lt;/li&gt;
&lt;li&gt;O que acontece se o valor for negativo?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O segundo exemplo relevante são os fatores. Fatores são a classe utilizada pelo R para trabalhar com variáveis categóricas, ou informação qualitativa. Um fator só pode ter alguns valores pré-definidos pelo usuário. Pense, por exemplo, nas categorias de sexo ou raça que o IBGE utiliza em suas pesquisas amostrais. Há um pequeno número pré-definido de categorias. Para construir um fator, você pode fazer o seguinte:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;genero &amp;lt;- factor(c(&amp;quot;homem&amp;quot;, &amp;quot;mulher&amp;quot;, &amp;quot;mulher&amp;quot;, &amp;quot;homem&amp;quot;))

typeof(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $levels
## [1] &amp;quot;homem&amp;quot;  &amp;quot;mulher&amp;quot;
## 
## $class
## [1] &amp;quot;factor&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fatores seguem aquela linha que descrevemos para datas. R guarda os valores do seu fator utilizando números simples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unclass(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 2 1
## attr(,&amp;quot;levels&amp;quot;)
## [1] &amp;quot;homem&amp;quot;  &amp;quot;mulher&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas na hora que você utiliza esse fator, o software apresenta para você os rótulos das categorias.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;genero
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] homem  mulher mulher homem 
## Levels: homem mulher
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Através do atributo &lt;code&gt;levels&lt;/code&gt;, o R está associando cada valor numérico com um rótulo, e no momento em que você procurar construir uma tabela ou trabalhar com esses fatores de qualquer maneira, o software utilizará o atributo classe para dar-lhe o tratamento adequado. Por exemplo, se eu tentar transformar os vetores a seguir em caractere, o R saberá distinguir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;as.character(c(1, 2, 2, 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;as.character(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;homem&amp;quot;  &amp;quot;mulher&amp;quot; &amp;quot;mulher&amp;quot; &amp;quot;homem&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O uso da função &lt;code&gt;as.character&lt;/code&gt; é um gancho perfeito para o próximo assunto. Mas antes:&lt;/p&gt;
&lt;h4 id=&#34;exercício-10&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Construa um fator a partir do vetor a seguir que registre os meses do ano. Dica: utilize o argumento &lt;code&gt;levels&lt;/code&gt; da função &lt;code&gt;factor&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;f &amp;lt;- c(1, 3, 9, 4, 11, 2, 6, 6, 3, 2, 9, 11, 12, 12, 1, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;coerção&#34;&gt;Coerção&lt;/h3&gt;
&lt;p&gt;Coerção é o comportamento da linguagem R ao encontrar situações em que diferentes tipos de dados estão misturados em um mesmo vetor atômico. Lembrem que cada vetor atômico só pode armazenar 1 tipo de informação, portanto, ao tentar inserir uma informação de outro tipo, R devolverá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;um erro, indicando que a operação é impossível, OU&lt;/li&gt;
&lt;li&gt;a operação será realizada, porém, o tipo da informação será modificado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No segundo caso, o R aplica uma coerção na tentativa de preservar ao máximo as informações. Veja exemplos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 0, 1, TRUE, FALSE)
v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1 1 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 2, 3, &amp;quot;4&amp;quot;)
v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(TRUE, FALSE, &amp;quot;TRUE&amp;quot;)
v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;TRUE&amp;quot;  &amp;quot;FALSE&amp;quot; &amp;quot;TRUE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R vai tentar transformar o tipo de dados mais específico num tipo de dado mais geral, assim, evitando que a informação seja perdida.&lt;/p&gt;
&lt;p&gt;Em outros casos, o processo de coerção pode ser iniciado pelo próprio usuário, porque este deseja transformar um tipo de dado em outro:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 0, 1, TRUE, FALSE)
as.logical(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE  TRUE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 2, 3, &amp;quot;4&amp;quot;)
as.numeric(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(TRUE, FALSE, &amp;quot;TRUE&amp;quot;)
as.logical(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existem funções &lt;code&gt;as.____&lt;/code&gt; para todos os tipos de dados e classes mais comuns do R, e é praxe que autores de novos pacotes que trazem classes também incluam seus próprios métodos de coerção para suas novas classes.&lt;/p&gt;
&lt;h4 id=&#34;exercício-11&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Porque o R prefere coagir vetores lógicos mistos para números e vetores numéricos e lógicos para caractere?&lt;/p&gt;
&lt;h3 id=&#34;listas&#34;&gt;Listas&lt;/h3&gt;
&lt;p&gt;Até esse momento, trabalhamos com variações no vetor atômico. O vetor atômico tem uma limitação repetidamente discutida: ele só armazena um tipo de dado. Bancos de dados reais certamente armazenarão informações de vários tipos distintos, então precisamos de uma estrutura de dado que tenha a capacidade de guardar estas informações díspares. É aí que entram as listas.&lt;/p&gt;
&lt;p&gt;Listas são como vetores atômicos, mas elas não guardam valores! Listas guardam OBJETOS R. Qualquer um. Vetores atômicos? Sim. Funções? Sim. Outras listas? Pode também. Para criar listas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;list1 &amp;lt;- list(100:130, &amp;quot;R&amp;quot;, list(TRUE, FALSE))
list1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
##  [1] 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118
## [20] 119 120 121 122 123 124 125 126 127 128 129 130
## 
## [[2]]
## [1] &amp;quot;R&amp;quot;
## 
## [[3]]
## [[3]][[1]]
## [1] TRUE
## 
## [[3]][[2]]
## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note como cada elemento da lista é um objeto R diferente. A lista não julga, ela apenas armazena seus objetos. Um detalhe interessante e que será importante mais tarde: note como a saída do R diferencia [1] de [[1]] no índice dos elementos da lista. Isso é necessário porque a lista pode guardar muitas coisas dentro de si, e o usuário precisa ter a capacidade de recuperar essas informações que estão lá nas profundezas da lista. Falaremos um pouco mais sobre isso na aula de amanhã, quando discutirmos indexação.&lt;/p&gt;
&lt;h4 id=&#34;exercício-12&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Crie uma lista de compras em que cada elemento da lista seja um vetor atômico de itens que você vai comprar de cada seção do supermercado. Para simplificar, utilize as seções: &amp;ldquo;limpeza&amp;rdquo;, &amp;ldquo;mercearia&amp;rdquo; e &amp;ldquo;hortifruti&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;data-frames&#34;&gt;Data Frames&lt;/h3&gt;
&lt;p&gt;Data frames são o formato de dados mais popular em análise de dados, e por um bom motivo: eles combinam a flexibilidade necessária para armazenar diversos tipos de informações diferentes com a consistência das matrizes e dos vetores. Por trás da cortina, eles são listas com restrições: todos os elementos da lista devem ter o mesmo comprimento, isso garante a retangularidade da nossa informação.&lt;/p&gt;
&lt;p&gt;Essa retangularidade é importante do ponto de vista analítico: o data frame deve conter uma observação para cada unidade de análise e uma coluna para cada informação ou variável que foi coletada sobre essa unidade de análise. Se, de alguma forma esta informação não está disponível, isso deverá ficar &lt;strong&gt;explícito&lt;/strong&gt; por uma célula com valor desconhecido.&lt;/p&gt;
&lt;p&gt;No R, embora isso não seja tão comum, você pode construir data frames manualmente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(x = c(1, 2, 3, 4, 5),
                 y = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;),
                 z = c(TRUE, FALSE, TRUE, TRUE, FALSE))
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   x y     z
## 1 1 a  TRUE
## 2 2 b FALSE
## 3 3 c  TRUE
## 4 4 d  TRUE
## 5 5 e FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Logo de cara, vemos que o &lt;code&gt;data.frame&lt;/code&gt; do R tem aquela cara de tabela com a qual estamos acostumados. Podemos ver como o &lt;code&gt;data.frame&lt;/code&gt; é construído observado alguns de seus atributos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $names
## [1] &amp;quot;x&amp;quot; &amp;quot;y&amp;quot; &amp;quot;z&amp;quot;
## 
## $class
## [1] &amp;quot;data.frame&amp;quot;
## 
## $row.names
## [1] 1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Secretamente, o data.frame é uma lista, com nomes, um atributo menos importante, chamado &lt;code&gt;row.names&lt;/code&gt;, e algumas características como aquelas que mencionamos acima. O &lt;code&gt;data.frame&lt;/code&gt; e o &lt;code&gt;vetor&lt;/code&gt; são as principais ferramentas no cotidiano do analista e, portanto, são as que mais vamos utilizar daqui pra frente. Outra função útil é a e&lt;code&gt;str&lt;/code&gt;utura de uma lista ou data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:	5 obs. of  3 variables:
##  $ x: num  1 2 3 4 5
##  $ y: chr  &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot; &amp;quot;d&amp;quot; ...
##  $ z: logi  TRUE FALSE TRUE TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ela oferece uma visão geral do data.frame, e é especialmente útil quando seu data.frame é grande e contém muitas variáveis.&lt;/p&gt;
&lt;p&gt;Em geral, a digitação de data sets no R não é recomendada. A interface do programa não te ajuda a produzir dados no formato necessário. É provável que você cometa muitos erros no caminho e não há uma ferramenta muito completa dentro do software que facilite esse processo. Isso ocorre porque o R não é um software de produção ou tabulação de dados, como o Microsoft Excel, o OpenOffice Calc ou o IBM SPSS, mas sim um software de análise de dados. O mais comum é você importar um banco de dados pronto e previamente tabulado utilizando uma das funções do R, como no exemplo abaixo, em que importamos uma pequena amostra da PNAD Contínua do primeiro trimestre diretamente um link na internet.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;url &amp;lt;- &amp;quot;https://raw.githubusercontent.com/laddem/site/master/amostra_pnad.csv&amp;quot;
df &amp;lt;- read.csv(url)
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre               UF  V1022  V2007 V2009  V2010 VD2003
## 1 2021         1            Ceará Urbana  Homem    80 Branca      2
## 2 2021         1 Distrito Federal Urbana Mulher    19  Parda      4
## 3 2021         1       Pernambuco Urbana Mulher    36  Preta      2
## 4 2021         1   Santa Catarina Urbana  Homem    50  Parda      2
## 5 2021         1        São Paulo Urbana Mulher    43  Parda      3
## 6 2021         1            Goiás Urbana  Homem    35  Parda      3
##                      VD3005 VD4016
## 1 16 anos ou mais de estudo     NA
## 2         11 anos de estudo     NA
## 3         12 anos de estudo   1045
## 4          5 anos de estudo   1500
## 5          9 anos de estudo   1600
## 6         14 anos de estudo   3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veremos mais sobre importação na aula de amanhã!&lt;/p&gt;
&lt;h4 id=&#34;exercício-13&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Crie um data frame contendo informações de cinco colegas de turma: registre o nome, a idade presumida, o sexo, a profissão e a renda presumida. Não precisa perguntar, basta chutar um valor que você ache.&lt;/p&gt;
&lt;h3 id=&#34;fórmulas&#34;&gt;Fórmulas&lt;/h3&gt;
&lt;p&gt;Fórmulas são a maneira que os desenvolvedores do R encontraram para representar equações matemáticas. Porém, como tudo no software livre, elas foram apropriadas por desenvolvedores para muitas tarefas criativas e vocês irão encontrá-las por aí cumprindo diversos papéis. Vejamos alguns exemplos.&lt;/p&gt;
&lt;p&gt;Fórmulas são usadas para especificar as equações de modelos matemáticos no R:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modelo_linear &amp;lt;- lm(VD4016 ~ VD3005, data = df)
summary(modelo_linear)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = VD4016 ~ VD3005, data = df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3786.1  -744.7  -345.1   382.7 15013.9 
## 
## Coefficients:
##                                                Estimate Std. Error t value
## (Intercept)                                       682.5      946.1   0.721
## VD300510 anos de estudo                           467.5     1221.4   0.383
## VD300511 anos de estudo                           434.8     1064.8   0.408
## VD300512 anos de estudo                           905.3      960.2   0.943
## VD300513 anos de estudo                          1584.8     1104.8   1.434
## VD300514 anos de estudo                          1497.5     1119.4   1.338
## VD300515 anos de estudo                          1525.8     1092.5   1.397
## VD300516 anos ou mais de estudo                  3303.6      970.1   3.406
## VD30052 anos de estudo                            217.5     1445.2   0.150
## VD30053 anos de estudo                            261.5     1269.3   0.206
## VD30054 anos de estudo                            727.8     1119.4   0.650
## VD30055 anos de estudo                            649.5     1019.0   0.637
## VD30056 anos de estudo                            610.5     1064.8   0.573
## VD30057 anos de estudo                           -163.7     1158.7  -0.141
## VD30058 anos de estudo                            990.8     1064.8   0.931
## VD30059 anos de estudo                            762.6     1007.2   0.757
## VD3005Sem instrução e menos de 1 ano de estudo    131.8     1186.0   0.111
##                                                Pr(&amp;gt;|t|)    
## (Intercept)                                    0.471128    
## VD300510 anos de estudo                        0.702120    
## VD300511 anos de estudo                        0.683236    
## VD300512 anos de estudo                        0.346404    
## VD300513 anos de estudo                        0.152291    
## VD300514 anos de estudo                        0.181807    
## VD300515 anos de estudo                        0.163341    
## VD300516 anos ou mais de estudo                0.000733 ***
## VD30052 anos de estudo                         0.880452    
## VD30053 anos de estudo                         0.836892    
## VD30054 anos de estudo                         0.515999    
## VD30055 anos de estudo                         0.524230    
## VD30056 anos de estudo                         0.566756    
## VD30057 anos de estudo                         0.887695    
## VD30058 anos de estudo                         0.352699    
## VD30059 anos de estudo                         0.449441    
## VD3005Sem instrução e menos de 1 ano de estudo 0.911583    
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1892 on 370 degrees of freedom
##   (613 observations deleted due to missingness)
## Multiple R-squared:  0.2427,	Adjusted R-squared:  0.2099 
## F-statistic: 7.409 on 16 and 370 DF,  p-value: 4.467e-15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Também são usadas para algumas funções que produzem tabulações cruzadas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xtabs(~ VD3005 + V2007, data = df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                           V2007
## VD3005                                     Homem Mulher
##   1 ano de estudo                             12     17
##   10 anos de estudo                            8     16
##   11 anos de estudo                           10     14
##   12 anos de estudo                          105    111
##   13 anos de estudo                           12      7
##   14 anos de estudo                            6     13
##   15 anos de estudo                            9      8
##   16 anos ou mais de estudo                   51     61
##   2 anos de estudo                            14     13
##   3 anos de estudo                            16     15
##   4 anos de estudo                            19     27
##   5 anos de estudo                            44     46
##   6 anos de estudo                            25     23
##   7 anos de estudo                            13     20
##   8 anos de estudo                            25     19
##   9 anos de estudo                            44     27
##   Sem instrução e menos de 1 ano de estudo    47     45
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algumas funções que produzem gráficos também utilizam fórmulas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(VD4016 ~ V2010, data = df)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/rbase/dia1_files/figure-html/unnamed-chunk-70-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Falaremos mais de fórmulas no futuro, a medida que elas forem aparecendo. Nos exemplos acima, é possível ver que a fórmula não tem apenas um significado. Dependendo do contexto da função, ela pode fazer coisas muito diferentes, usando seus lados esquerdo e direito para tarefas distintas. O que é importante vocês levarem com vocês é o formato das fórmulas, e uma intuição de que quando uma fórmula aparece, algo está sendo feito com uma lógica do tipo: &amp;ldquo;Para cada x, corresponde um y&amp;rdquo;, ou algo similar.&lt;/p&gt;
&lt;h4 id=&#34;exerício&#34;&gt;Exerício&lt;/h4&gt;
&lt;p&gt;Consulte o &lt;code&gt;?xtabs&lt;/code&gt;, qual o significado da fórmula e para que servem os lados esquerdo e direito?&lt;/p&gt;
&lt;h2 id=&#34;revisão&#34;&gt;Revisão&lt;/h2&gt;
&lt;p&gt;Cobrimos bastante coisa na aula de hoje, e não é nosso interesse que vocês saiam dessa aula decorando tudo. Vamos destacar alguns pontos mais importantes, que são a chave para vocês trabalharem no R.&lt;/p&gt;
&lt;p&gt;Objetos são formas de armazenar coisas na memória do computador, eles podem ser de uma variedade de tipos e classes, e ter vários formatos mais ou menos adequados as nossas necessidades. Os objetos mais comuns no nosso arsenal são as funções, os vetores e os data frames.&lt;/p&gt;
&lt;p&gt;As funções são os verbos de uma linguagem de programação, elas fazem coisas aos nossos objetos. Você provavelmente vai passar a maior parte do tempo usando funções pré-programadas, mas também pode escrever suas próprias.&lt;/p&gt;
&lt;p&gt;Os vetores são a forma mais simples de organizar dados, em geral, trabalharemos com vetores atômicos, que guardam sequências de informações do mesmo tipo e uma única dimensão. Vetores de 2 dimensões, ou matrizes, podem ser ocasionalmente importantes para vocês em algum momento.&lt;/p&gt;
&lt;p&gt;Os data frames são o feijão com arroz da análise de dados, eles são flexíveis para acomodar tipos de dados distintos e respeitam as convenções que são importantes para nós: consistência de operações, uma observação por linha, uma variável por coluna.&lt;/p&gt;
&lt;p&gt;Os objetos podem ter diversos atributos. Muito deles são apenas estéticos para facilitar a comunicação com o usuário, outros são mais substanciais, e alteram a forma como o R processa os dados guardados ali. Citamos exemplos de fatores e data/tempo como exemplos. Um dos atributos mais importantes de um objeto é sua classe, que discutimos um pouco.&lt;/p&gt;
&lt;p&gt;Por fim, falamos de dois comportamentos importantes do software: coerção e reciclagem. Eles podem facilitar ou complicar a nossa vida se não tomamos cuidado com esse comportamento. A coerção transforma o tipo dos vetores para um tipo mais genérico com o intuito de preservar informações. A reciclagem aumenta o tamanho de objetos menores para bater com o tamanho de objetos maiores numa mesma operação.&lt;/p&gt;
&lt;h3 id=&#34;exercícios&#34;&gt;Exercícios&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Como você poderia identificar o tipo de um objeto? Como você poderia identificar a classe dele? Qual a diferença entre essas duas coisas? Porque isso é relevante?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Digamos que você quer armazenar algumas informações na memória do computador. Que tipo de objeto você utilizaria para armanzenar:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Os nomes dos colegas da sua turma&lt;/li&gt;
&lt;li&gt;Seus números de telefone&lt;/li&gt;
&lt;li&gt;Uma variável que indica se esta pessoa nasceu antes de 1989&lt;/li&gt;
&lt;li&gt;A idade de um grupo de pessoas&lt;/li&gt;
&lt;li&gt;Informações de cadastro de uma pessoa: nome completo, afiliações, telefones para contato, endereços, etc.&lt;/li&gt;
&lt;li&gt;Uma coleção de funções que você utiliza frequentemente&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Porque no resumo eu disse que as funções são verbos? Que tipo de ações as funções que vimos na aula fazem nos nossos objetos? Se as funções são verbos, que classe de palavras a gente poderia dizer que são os nossos objetos? E nós, que usamos o software, o que somos?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Digamos que eu quero armazenar as informações de cadastro dos membros da turma. Que estrutura de dados eu deveria utilizar? Como você implementaria esta estrutura no R? Desenvolva um pequeno exemplo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quais são os atributos de um data frame? Como você poderia descobrí-los e alterá-los? Em que situações isso seria proveitoso?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Suponha que você têm o vetor atômico abaixo:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 1, TRUE, FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que acontecerá com as informações desse vetor ao ser armazenado no R? Como você poderia alterar esse resultado? Porque o R se comporta dessa maneira?&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Considere a operação matemática abaixo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v1 &amp;lt;- c(1, 2, 3)
v2 &amp;lt;- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)

v1 * v2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que você espera encontrar na saída do R ao rodar essa seção? Rode o código e responda: você se surpreendeu? O que aconteceu e porquê? Qual o significado da mensagem de aviso?&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Considere o banco de dados abaixo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sala &amp;lt;- data.frame(
  id = c(1, 2, 3),
  idade = c(20, 25, 30, 35, 40, 45),
  nome = c(&amp;quot;Fulano&amp;quot;, &amp;quot;Cicrano&amp;quot;, &amp;quot;Beltrano&amp;quot;, &amp;quot;Herculano&amp;quot;, &amp;quot;Mariano&amp;quot;, &amp;quot;Carrano&amp;quot;),
  sexo = &amp;quot;Masculino&amp;quot;,
  origem = c(&amp;quot;Campinas&amp;quot;, &amp;quot;Barueri&amp;quot;, &amp;quot;Monte Verde&amp;quot;, &amp;quot;Rio de Janeiro&amp;quot;, &amp;quot;Natal&amp;quot;, &amp;quot;Belo Horizonte&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Verifique as variáveis &lt;code&gt;id&lt;/code&gt; e &lt;code&gt;sexo&lt;/code&gt;. Os valores dessas variáveis fazem sentido? Elas não impedem a construção do data frame, por quê? Que característica do R está operando nessas variáveis?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manipulação de objetos em R</title>
      <link>https://laddem.github.io/courses/rbase/dia2/</link>
      <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/courses/rbase/dia2/</guid>
      <description>&lt;h2 id=&#34;manipulação-de-objetos&#34;&gt;Manipulação de objetos&lt;/h2&gt;
&lt;h3 id=&#34;leituraimportação&#34;&gt;Leitura/Importação&lt;/h3&gt;
&lt;p&gt;Você pode importar um data.frame para o R de duas formas. A primeira delas, é carregando através do &lt;code&gt;Environment&lt;/code&gt; no canto direito superior do RStudio. Clique em Import Dataset e selecione &amp;lsquo;From Text File&amp;rsquo;&lt;/p&gt;
&lt;p&gt;O RStudio solicitará que você selecione o arquivo que deseja importar e, em seguida, abrirá um assistente para ajudá-lo a importar os dados. Use o assistente para informar ao RStudio qual nome dar ao conjunto de dados. Você também pode usar o assistente para informar ao RStudio qual caractere o conjunto de dados usa como separador, qual caractere ele usa para representar decimais (geralmente um ponto nos Estados Unidos e uma vírgula na Europa/Brasil) e se o conjunto de dados vem ou não com uma linha de nomes de coluna (conhecida como cabeçalho). Para ajudá-lo, o assistente mostra a aparência do arquivo bruto, bem como a aparência dos dados carregados com base nas configurações de entrada.&lt;/p&gt;
&lt;p&gt;Você também pode desmarcar a caixa “Strings como fatores” no assistente. Eu recomendo fazer isso. Se você fizer isso, o R carregará todas as suas cadeias de caracteres como cadeias de caracteres. Caso contrário, R os converterá em fatores.&lt;/p&gt;
&lt;p&gt;A outra forma de importar um arquivo no R, é usando direto no script a função &amp;lsquo;read.csv&amp;rsquo;. Vamos trabalhar com os dados da pnad, no arquivo amostra_pnad.csv. Ele é um arquivo de valores separados por vírgula ou CSV para abreviar. CSVs são arquivos de texto simples, o que significa que você pode abri-los em um editor de texto (assim como em muitos outros programas). Se você abrir amostra_pnad.csv, verá que ele contém uma tabela de dados semelhante à seguinte. Cada linha da tabela é salva em sua própria linha e uma vírgula é usada para separar as células dentro de cada linha. Cada arquivo CSV compartilha este formato básico:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Ano&amp;rdquo;,&amp;ldquo;Trimestre&amp;rdquo;,&amp;ldquo;UF&amp;rdquo;,&amp;ldquo;V1022&amp;rdquo;,&amp;ldquo;V2007&amp;rdquo;,&amp;ldquo;V2009&amp;rdquo;,&amp;ldquo;V2010&amp;rdquo;,&amp;ldquo;VD2003&amp;rdquo;,&amp;ldquo;VD3005&amp;rdquo;,&amp;ldquo;VD4016&amp;rdquo;
&amp;ldquo;2021&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;Ceará&amp;rdquo;,&amp;ldquo;Urbana&amp;rdquo;,&amp;ldquo;Homem&amp;rdquo;,80,&amp;ldquo;Branca&amp;rdquo;,2,&amp;ldquo;16 anos ou mais de estudo&amp;rdquo;,NA
&amp;ldquo;2021&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;Distrito Federal&amp;rdquo;,&amp;ldquo;Urbana&amp;rdquo;,&amp;ldquo;Mulher&amp;rdquo;,19,&amp;ldquo;Parda&amp;rdquo;,4,&amp;ldquo;11 anos de estudo&amp;rdquo;,NA
&amp;hellip;e assim por diante&lt;/p&gt;
&lt;p&gt;Vamos carregar novamente os dados da pnad que foram mostrados na aula passada:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;url &amp;lt;- &amp;quot;https://raw.githubusercontent.com/laddem/site/master/amostra_pnad.csv&amp;quot;
df &amp;lt;- read.csv(url)
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre               UF  V1022  V2007 V2009  V2010 VD2003
## 1 2021         1            Ceará Urbana  Homem    80 Branca      2
## 2 2021         1 Distrito Federal Urbana Mulher    19  Parda      4
## 3 2021         1       Pernambuco Urbana Mulher    36  Preta      2
## 4 2021         1   Santa Catarina Urbana  Homem    50  Parda      2
## 5 2021         1        São Paulo Urbana Mulher    43  Parda      3
## 6 2021         1            Goiás Urbana  Homem    35  Parda      3
##                      VD3005 VD4016
## 1 16 anos ou mais de estudo     NA
## 2         11 anos de estudo     NA
## 3         12 anos de estudo   1045
## 4          5 anos de estudo   1500
## 5          9 anos de estudo   1600
## 6         14 anos de estudo   3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se a importação ocorrer corretamente, o data.frame irá aparecer no ambiente &lt;code&gt;Environment&lt;/code&gt; mostrando o número de observações e o número de variáveis (colunas).&lt;/p&gt;
&lt;p&gt;Quando você importa um conjunto de dados, o RStudio salva os dados em um data frame e, em seguida, exibe o data frame em uma guia Exibir. Você pode abrir qualquer data frame em uma guia Exibir a qualquer momento com a função View().&lt;/p&gt;
&lt;h4 id=&#34;exercícios&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Visualize os dados que você acabou de importar em formato de planilha através do Environment e usando a função View().
É possível também visualizar as 6 primeiras linhas do data.frame ou as 6 últimas linhas. Para isso, use as funções head() e tail().&lt;/p&gt;
&lt;p&gt;Obs: se você quiser ver mais que 6 linhas, coloque o segundo argumento na função head(df, 10). Quantas linhas vão ser mostradas neste caso?&lt;/p&gt;
&lt;h3 id=&#34;escritasalvar&#34;&gt;Escrita/Salvar&lt;/h3&gt;
&lt;p&gt;Você pode salvar e exportar um novo arquivo .csv para o seu computador. Assim, você pode enviá-lo por e-mail a um colega, armazená-lo em um pen drive ou abri-lo em um programa diferente. Você pode salvar quaisquer dados executados e alterados no R em um arquivo .csv com o comando write.csv.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;write.csv(df, file = &amp;quot;df_pnad.csv&amp;quot;, row.names = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R transformará seu data frame em um arquivo de texto simples com o formato de valores separados por vírgula e salvará o arquivo em seu diretório de trabalho. Para ver onde está seu diretório de trabalho, execute &lt;code&gt;getwd()&lt;/code&gt;. Para alterar a localização do seu diretório de trabalho, visite &lt;em&gt;Sessão &amp;gt; Definir Diretório de Trabalho &amp;gt; Escolher Diretório&lt;/em&gt; na barra de menus do RStudio.&lt;/p&gt;
&lt;p&gt;Você pode personalizar o processo de salvamento com o grande conjunto de argumentos opcionais de write.csv (consulte &lt;code&gt;?write.csv&lt;/code&gt; para obter detalhes). No entanto, existem três argumentos que você deve usar sempre que executar &lt;code&gt;write.csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Primeiro, você deve fornecer a função &lt;code&gt;write.csv&lt;/code&gt; o nome do data frame que deseja salvar. Em seguida, você deve fornecer um nome de arquivo para dar ao seu arquivo. R entenderá esse nome literalmente, portanto, certifique-se de fornecer uma extensão.&lt;/p&gt;
&lt;p&gt;Finalmente, você deve adicionar o argumento &lt;code&gt;row.names = FALSE&lt;/code&gt;. Isso impedirá R de adicionar uma coluna de números no início do seu data frame. Esses números identificarão suas linhas de 1 a 1000, mas é improvável que qualquer programa em que você abrir &lt;code&gt;df_pnad.csv&lt;/code&gt; compreenderá o sistema de nomes de linhas. Muito provavelmente, o programa assumirá que os nomes das linhas são a primeira coluna de dados em seu data frame. Na verdade, isso é exatamente o que R assumirá se você reabrir &lt;code&gt;df_pnad.csv&lt;/code&gt;. Se você salvar e abrir &lt;code&gt;df_pnad.csv&lt;/code&gt; várias vezes em R, notará colunas duplicadas de números de linha se formando no início de seu data frame. Não posso explicar por que R faz isso, mas posso explicar como evitá-lo: use &lt;code&gt;row.names = FALSE&lt;/code&gt; sempre que salvar dados com &lt;code&gt;write.csv&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;notação&#34;&gt;Notação&lt;/h2&gt;
&lt;p&gt;Para que você consiga trabalhar com valores individuais dentro do seu data frame, tarefa necessária em análise de dados, você pode selecionar valores dentro de um objeto R através do seu sistema de notação.&lt;/p&gt;
&lt;h3 id=&#34;selecionando-valores&#34;&gt;Selecionando valores&lt;/h3&gt;
&lt;p&gt;O R tem um sistema de notação que permite extrair valores de objetos R. Para extrair um valor ou conjunto de valores de um data frame, escreva o nome do data frame seguido por um par de colchetes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[ , ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Ano Trimestre                  UF  V1022  V2007 V2009    V2010 VD2003
## 1    2021         1               Ceará Urbana  Homem    80   Branca      2
## 2    2021         1    Distrito Federal Urbana Mulher    19    Parda      4
## 3    2021         1          Pernambuco Urbana Mulher    36    Preta      2
## 4    2021         1      Santa Catarina Urbana  Homem    50    Parda      2
## 5    2021         1           São Paulo Urbana Mulher    43    Parda      3
## 6    2021         1               Goiás Urbana  Homem    35    Parda      3
## 7    2021         1               Amapá Urbana  Homem    72    Parda      3
## 8    2021         1           São Paulo Urbana Mulher    23  Amarela      8
## 9    2021         1    Distrito Federal Urbana  Homem    23    Parda      5
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Entre os colchetes estarão dois índices separados por uma vírgula. Os índices dizem ao R quais valores retornar. O R usará o primeiro índice para o subconjunto das linhas do dataframe e o segundo índice para o subconjunto das colunas. Ou seja, df[linhas, colunas].&lt;/p&gt;
&lt;p&gt;Você pode pensar em um índice como um CEP ou o endereço de um valor ou um conjunto de valores, e a indexação como o processo que você utilizaria para encontrar um desses valores numa lista telefônica, no Google ou no Maps.&lt;/p&gt;
&lt;p&gt;Você tem uma escolha quando se trata de escrever índices. Existem seis maneiras diferentes de escrever um índice para o R e cada uma faz algo ligeiramente diferente. Eles são todos muito simples e muito úteis, então vamos dar uma olhada em cada um deles. Você pode criar índices com:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inteiros positivos&lt;/li&gt;
&lt;li&gt;Inteiros negativos&lt;/li&gt;
&lt;li&gt;Zero&lt;/li&gt;
&lt;li&gt;Espaços em branco&lt;/li&gt;
&lt;li&gt;Valores lógicos&lt;/li&gt;
&lt;li&gt;Nomes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O mais simples de usar são os inteiros positivos.&lt;/p&gt;
&lt;p&gt;Por exemplo, caso você queira extrair um valor que está na primeira linha e na quarta coluna do seu data frame, no caso, estamos usando o df, que é uma pequena amostra da pnad, lembra? Como podemos fazer isso?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[1, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Urbana&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para extrair mais de um valor, use um vetor com inteiros positivos. Por exemplo, se você quer retornar a primeira linha de &lt;em&gt;df&lt;/em&gt; com df[1, c(1,2,3)] ou df[1, 1:3]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[1,1:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre    UF
## 1 2021         1 Ceará
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[1, c(1,2,3)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre    UF
## 1 2021         1 Ceará
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essa notação não é limitada somente a objetos do tipo data frame. Você pode usar a mesma sintaxe para selecionar valores em qualquer objeto R, desde que você forneça um índice para cada dimensão do objeto. Então, por exemplo, você pode definir um subconjunto de um vetor (que tem uma dimensão) com um único índice:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vec &amp;lt;- c(10, 15, 31, 60, 10, 2)
vec[1:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10 15 31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bom, isso é a notação usando usando inteiros positivos. Como seria com inteiros negativos? Quais as diferenças?&lt;/p&gt;
&lt;p&gt;Vamos lá!&lt;/p&gt;
&lt;p&gt;Os inteiros negativos fazem exatamente o oposto dos inteiros positivos durante a indexação. O R retornará todos os elementos, exceto os elementos em um índice negativo. Por exemplo, df[-1, 1:10] retornará tudo, exceto a primeira linha do data frame. df[-(2:999), 1:10] retornará a primeira linha e a última linha (e excluirá todo o resto):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[-(2:999), 1:10]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Ano Trimestre             UF  V1022 V2007 V2009  V2010 VD2003
## 1    2021         1          Ceará Urbana Homem    80 Branca      2
## 1000 2021         1 Santa Catarina  Rural Homem    66 Branca      2
##                         VD3005 VD4016
## 1    16 anos ou mais de estudo     NA
## 1000          5 anos de estudo   1000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[-1, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;11 anos de estudo&amp;quot;                       
##   [2] &amp;quot;12 anos de estudo&amp;quot;                       
##   [3] &amp;quot;5 anos de estudo&amp;quot;                        
##   [4] &amp;quot;9 anos de estudo&amp;quot;                        
##   [5] &amp;quot;14 anos de estudo&amp;quot;                       
##   [6] &amp;quot;16 anos ou mais de estudo&amp;quot;               
##   [7] &amp;quot;12 anos de estudo&amp;quot;                       
##   [8] &amp;quot;14 anos de estudo&amp;quot;                       
##   [9] &amp;quot;5 anos de estudo&amp;quot;                        
##  [10] &amp;quot;9 anos de estudo&amp;quot;                        
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A vantagem de usar inteiros negativos ao invés de inteiros positivos na indexação, é que os inteiros negativos são uma maneira mais eficiente de criar um subconjunto do que os inteiros positivos, se você quiser incluir a maioria das linhas ou colunas de um data frame.&lt;/p&gt;
&lt;p&gt;Na notação &lt;code&gt;df[-2,2]&lt;/code&gt; o que irá ser mostrado pelo R?&lt;/p&gt;
&lt;p&gt;O que acontecerá se você usar o zero como um índice? Zero não é um inteiro positivo nem um inteiro negativo, mas ele ainda usará para fazer um tipo de subconjunto. O R, neste caso, não retornará nada de uma dimensão quando você usa zero como um índice:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[0, 0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## data frame with 0 columns and 0 rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pra ser sincera, indexar com 0 não ajuda em muita coisa.&lt;/p&gt;
&lt;p&gt;Além dos inteiros positivos, inteiros negativos, e zero, você pode também usar espaços em branco na indexação. O espaço em branco no R vai extrair todos os valores em uma dimensão. Isso permite subdividir um objeto em uma dimensão, mas não nas outras, o que é útil para extrair linhas ou colunas inteiras de um data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[1, ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre    UF  V1022 V2007 V2009  V2010 VD2003
## 1 2021         1 Ceará Urbana Homem    80 Branca      2
##                      VD3005 VD4016
## 1 16 anos ou mais de estudo     NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[, 5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1] &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot;
##    [9] &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot;
##   [17] &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot;
##   [25] &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot; 
##   [33] &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot;
##   [41] &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot; 
##   [49] &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot;
##   [57] &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot;
##   [65] &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot;
##   [73] &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot;
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estamos quase chegando no final dos tipos de indexação que são possíveis de serem feitas no R.
No caso de valores lógicos, se você fornecer um vetor de &lt;code&gt;TRUEs&lt;/code&gt; e &lt;code&gt;FALSEs&lt;/code&gt; como seu índice, o R combinará cada &lt;code&gt;TRUE&lt;/code&gt; e &lt;code&gt;FALSE&lt;/code&gt; com uma linha do data frame (ou uma coluna, dependendo de onde você colocar o índice). O R então retornará cada linha que corresponde a um &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pode ser útil imaginar R lendo o data frame e perguntando: &amp;ldquo;Devo retornar a enésima linha da estrutura de dados?&amp;rdquo; e depois consultar o enésimo valor do índice para obter sua resposta. Para que este sistema funcione, seu vetor deve ser tão longo quanto a dimensão que você está tentando subdividir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[1, c(TRUE, TRUE, FALSE)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre  V1022 V2007  V2010 VD2003 VD4016
## 1 2021         1 Urbana Homem Branca      2     NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rows &amp;lt;- c(F, TRUE, TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, 
  F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, 
  F, F, F, F, F, F, F, F, F, F, F, F, F, F)

df[rows, ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Ano Trimestre                 UF  V1022  V2007 V2009   V2010 VD2003
## 2   2021         1   Distrito Federal Urbana Mulher    19   Parda      4
## 3   2021         1         Pernambuco Urbana Mulher    36   Preta      2
## 54  2021         1           Rondônia Urbana  Homem    44  Branca      2
## 55  2021         1     Espírito Santo Urbana Mulher    45  Branca      4
## 106 2021         1       Minas Gerais  Rural  Homem    31   Parda      3
## 107 2021         1          São Paulo Urbana  Homem    14  Branca      4
## 158 2021         1            Alagoas Urbana  Homem    38   Parda      1
## 159 2021         1              Amapá Urbana Mulher    20   Parda      3
## 210 2021         1            Roraima Urbana  Homem    55   Parda      6
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esse sistema será de grande ajuda na parte de modificação de valores que veremos daqui a pouco.&lt;/p&gt;
&lt;p&gt;Finalmente, você pode pedir os elementos que deseja pelo nome - se o seu objeto tiver nomes (consulte Nomes). Essa é uma maneira comum de extrair as colunas de um data frame, já que as colunas quase sempre têm um nome:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Ano&amp;quot;       &amp;quot;Trimestre&amp;quot; &amp;quot;UF&amp;quot;        &amp;quot;V1022&amp;quot;     &amp;quot;V2007&amp;quot;     &amp;quot;V2009&amp;quot;    
##  [7] &amp;quot;V2010&amp;quot;     &amp;quot;VD2003&amp;quot;    &amp;quot;VD3005&amp;quot;    &amp;quot;VD4016&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[3, c(&amp;quot;UF&amp;quot;, &amp;quot;V2007&amp;quot;, &amp;quot;V2010&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           UF  V2007 V2010
## 3 Pernambuco Mulher Preta
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[ , &amp;quot;VD3005&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1] &amp;quot;16 anos ou mais de estudo&amp;quot;               
##    [2] &amp;quot;11 anos de estudo&amp;quot;                       
##    [3] &amp;quot;12 anos de estudo&amp;quot;                       
##    [4] &amp;quot;5 anos de estudo&amp;quot;                        
##    [5] &amp;quot;9 anos de estudo&amp;quot;                        
##    [6] &amp;quot;14 anos de estudo&amp;quot;                       
##    [7] &amp;quot;16 anos ou mais de estudo&amp;quot;               
##    [8] &amp;quot;12 anos de estudo&amp;quot;                       
##    [9] &amp;quot;14 anos de estudo&amp;quot;                       
##   [10] &amp;quot;5 anos de estudo&amp;quot;                        
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercícios-1&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Retorne a informação da observação 800, e as colunas Ano, VD3005, V2009, V2010 do nosso data frame da amostra da pnad. O que o R retornará? Faça a mesma indexação usando inteiros positivos ou inteiros negativos.&lt;/p&gt;
&lt;h3 id=&#34;diferentes-seleções--e-&#34;&gt;Diferentes seleções: &lt;code&gt;[[&lt;/code&gt; e &lt;code&gt;$&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Dois tipos de objeto em R obedecem a um segundo sistema opcional de notação. Você pode extrair valores de data frames e listas com a sintaxe &lt;code&gt;$&lt;/code&gt;. Você encontrará a sintaxe $ repetidamente no R, então vamos examinar como ela funciona.&lt;/p&gt;
&lt;p&gt;Para selecionar uma coluna de um data frame, escreva o nome do data frame, no caso df, e o nome da coluna separados por $. Observe que nenhuma aspa deve estar no nome da coluna:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df$V2009
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1]  80  19  36  50  43  35  72  23  23  47  71  16  48  13  25   3  27  83
##   [19]  55  79  14  80  20  21  22  69  57  27  63  35  28  41  39  71   7  45
##   [37]  11   9  48  14  48  47   5  36  25  55   8  64   7  58  30   1  18  44
##   [55]  45  17   9  24  11  11  71  75  49  20  55  31  60   2   7  81  68  15
##   [73]  31   2  44  40  49  55   9  40  55   0  35  32   7  63  62  54  48   5
##   [91]  46  49  20  90  16   0  41  15  67  26  22  18  58  63   0  31  14  39
##  [109]  34  44  61  48  47  29  43  65  10  36  20   7  28  18  23  75  37  49
##  [127]  45   3  61  54  38  50  41  47  39  44  32  27  66  55  70  69  41  31
##  [145]  38  91  62  30  21  59   4  29   5  24  83   6  15  38  20  89  85  44
##  [163]  73   7  49  22  33   5  18   4  27  22   0  21  74  26  58  52  77  36
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R retornará todos os valores da coluna como um vetor. Esta notação &lt;code&gt;$&lt;/code&gt; é muito útil e muito usada porque você freqüentemente armazenará as variáveis de seus conjuntos de dados como colunas em um data frame. De vez em quando, você desejará executar uma função como &lt;code&gt;mean()&lt;/code&gt; ou &lt;code&gt;median()&lt;/code&gt; nos valores de uma variável. Em R, essas funções esperam um vetor de valores como entrada, e o &lt;code&gt;df$V2009&lt;/code&gt; entrega seus dados no formato certo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(df$V2009)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 36.939
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode usar a mesma notação com &lt;code&gt;$&lt;/code&gt; com os elementos de uma lista, se eles tiverem nomes. Essa notação também tem uma vantagem com listas. Se você criar um subconjunto de uma lista da maneira usual, o R retornará uma nova lista que contém os elementos solicitados, mesmo se você solicitar apenas um único elemento.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lista &amp;lt;- list(numbers = c(1, 2), logical = TRUE, strings = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;))

lista
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $numbers
## [1] 1 2
## 
## $logical
## [1] TRUE
## 
## $strings
## [1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lista[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $numbers
## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O resultado é uma lista menor com um elemento. Esse elemento é o vetor c(1, 2). Isso pode ser irritante porque muitas funções R não funcionam com listas. Por exemplo, sum(lst[1]) retornará um erro. Para você conseguir fazer uma operação com lista, você precisará usar &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(lista$numbers)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se os elementos em sua lista não tiverem nomes (ou você não quiser usar os nomes), você pode usar dois colchetes &lt;code&gt;[[ ]]&lt;/code&gt;, em vez de um, para criar um subconjunto da lista. Essa notação fará a mesma coisa que a notação &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lista[[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em outras palavras, se você subdividir uma lista com a notação de colchete único, o R retornará uma lista menor. Se você subdividir uma lista com a notação de colchetes duplos, o R retornará apenas os valores que estavam dentro de um elemento da lista. Você pode combinar esse recurso com qualquer um dos métodos de indexação de R:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lista[&amp;quot;numbers&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $numbers
## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lista[[&amp;quot;numbers&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essa diferença é sutil, mas importante. Na comunidade R, há uma maneira popular e útil de pensar sobre isso. Imagine que cada lista é um trem e cada elemento é um vagão. Quando você usa colchetes simples, o R seleciona vagões de trem individuais e os retorna como um novo trem. Cada vagão mantém seu conteúdo, mas esse conteúdo ainda está dentro de um vagão de trem (ou seja, uma lista). Quando você usa colchetes duplos, o R realmente descarrega o carro e lhe devolve o conteúdo. Resumindo:&lt;/p&gt;
&lt;p&gt;Use colchetes simples para selecionar vagões de trem e colchetes duplos para selecionar o conteúdo dentro de um vagão.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/rbase/dia2_files/hopr_train.png&#34; alt=&#34;A metáfora do trem&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;exercícios-2&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Assim como na lista, é possível usar os colchetes &lt;code&gt;[[ ]]&lt;/code&gt; em data frame. Tente usá-los no data frame da pnad. Quais são as diferenças encontradas?&lt;/p&gt;
&lt;h2 id=&#34;modificando-valores&#34;&gt;Modificando valores&lt;/h2&gt;
&lt;p&gt;Para manipular os valores dentro do seu data frame, faça primeiro uma cópia que você pode manipular. Isso garantirá que você sempre tenha uma cópia original do data frame para usar (caso as coisas dêem errado):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2 &amp;lt;- df
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;modificando-os-valores-diretamente&#34;&gt;Modificando os valores diretamente&lt;/h3&gt;
&lt;p&gt;Você pode usar o sistema de notação de R para modificar valores dentro de um objeto. Primeiro, descreva o valor (ou valores) que você deseja modificar. Em seguida, use o operador de atribuição &lt;code&gt;&amp;lt;-&lt;/code&gt; para sobrescrever esses valores. O R irá atualizar os valores selecionados no objeto original. Em um exemplo real:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor &amp;lt;- c(0, 0, 0, 0, 0, 0)
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode selecionar um valor dentro desse vetor· Neste caso selecionamos o primeiro:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E aqui, podemos modificar o valor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor[1] &amp;lt;- 35
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35  0  0  0  0  0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode substituir vários valores de uma vez, desde que o número de novos valores seja igual ao número de valores selecionados:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor[c(3, 4, 5)] &amp;lt;- c(1, 1, 1)
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35  0  1  1  1  0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor[4:6] &amp;lt;- vetor[4:6] + 1
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35  0  1  2  2  1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você também pode criar valores que ainda não existem em seu objeto. O R irá expandir o objeto para acomodar os novos valores:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor[7] &amp;lt;- 20
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35  0  1  2  2  1 20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isto é uma ótima maneira de adicionar novas variáveis ao data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2$nova_coluna &amp;lt;- 1:1000

head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre               UF  V1022  V2007 V2009  V2010 VD2003
## 1 2021         1            Ceará Urbana  Homem    80 Branca      2
## 2 2021         1 Distrito Federal Urbana Mulher    19  Parda      4
## 3 2021         1       Pernambuco Urbana Mulher    36  Preta      2
## 4 2021         1   Santa Catarina Urbana  Homem    50  Parda      2
## 5 2021         1        São Paulo Urbana Mulher    43  Parda      3
## 6 2021         1            Goiás Urbana  Homem    35  Parda      3
##                      VD3005 VD4016 nova_coluna
## 1 16 anos ou mais de estudo     NA           1
## 2         11 anos de estudo     NA           2
## 3         12 anos de estudo   1045           3
## 4          5 anos de estudo   1500           4
## 5          9 anos de estudo   1600           5
## 6         14 anos de estudo   3000           6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Da mesma forma que você criou uma nova coluna, é possível removê-la atribuindo o valor &lt;code&gt;NULL&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2$nova_coluna &amp;lt;- NULL

head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre               UF  V1022  V2007 V2009  V2010 VD2003
## 1 2021         1            Ceará Urbana  Homem    80 Branca      2
## 2 2021         1 Distrito Federal Urbana Mulher    19  Parda      4
## 3 2021         1       Pernambuco Urbana Mulher    36  Preta      2
## 4 2021         1   Santa Catarina Urbana  Homem    50  Parda      2
## 5 2021         1        São Paulo Urbana Mulher    43  Parda      3
## 6 2021         1            Goiás Urbana  Homem    35  Parda      3
##                      VD3005 VD4016
## 1 16 anos ou mais de estudo     NA
## 2         11 anos de estudo     NA
## 3         12 anos de estudo   1045
## 4          5 anos de estudo   1500
## 5          9 anos de estudo   1600
## 6         14 anos de estudo   3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode selecionar um conjunto de linhas dentro de um data frame usando uma combinação dos sistemas de notação do R. Você pode destacar apenas os valores que você quer, definindo a dimensão das colunas do df2 com &lt;code&gt;[&lt;/code&gt;. Ou, você pode definir um subconjunto da coluna &lt;code&gt;df2$UF&lt;/code&gt;, misturando o &lt;code&gt;$&lt;/code&gt; com o &lt;code&gt;[&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2[c(5, 8, 39,44), ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Ano Trimestre        UF  V1022  V2007 V2009   V2010 VD2003
## 5  2021         1 São Paulo Urbana Mulher    43   Parda      3
## 8  2021         1 São Paulo Urbana Mulher    23 Amarela      8
## 39 2021         1 São Paulo Urbana Mulher    48  Branca      3
## 44 2021         1 São Paulo Urbana  Homem    36  Branca      2
##                       VD3005 VD4016
## 5           9 anos de estudo   1600
## 8          12 anos de estudo   1200
## 39         12 anos de estudo   1200
## 44 16 anos ou mais de estudo     NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## selecionando linhas especificas e a coluna V2010
df2[c(5, 8, 39,44), 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 43 23 48 36
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## podemos fazer o mesmo dessa forma
df2$V2009[c(5, 8, 39,44)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 43 23 48 36
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suponha que você sabe que os valores dessas linhas na coluna V2009 estão errados e você precisa arrumá-los atribuindo novos valores. O conjunto de novos valores terá que ser do mesmo tamanho que o conjunto de valores que você está substituindo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2$V2009[c(5, 8, 39,44)] &amp;lt;- c(23, 23, 23, 23)

# ou

df2$V2009[c(5, 8, 39,44)]&amp;lt;- 23

head(df2, 44)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Ano Trimestre                UF  V1022  V2007 V2009   V2010 VD2003
## 1  2021         1             Ceará Urbana  Homem    80  Branca      2
## 2  2021         1  Distrito Federal Urbana Mulher    19   Parda      4
## 3  2021         1        Pernambuco Urbana Mulher    36   Preta      2
## 4  2021         1    Santa Catarina Urbana  Homem    50   Parda      2
## 5  2021         1         São Paulo Urbana Mulher    23   Parda      3
## 6  2021         1             Goiás Urbana  Homem    35   Parda      3
## 7  2021         1             Amapá Urbana  Homem    72   Parda      3
## 8  2021         1         São Paulo Urbana Mulher    23 Amarela      8
## 9  2021         1  Distrito Federal Urbana  Homem    23   Parda      5
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe que você está mudando os valores dos objetos salvos em df2, nos livros em inglês, isso é chamado de &lt;em&gt;modify in place&lt;/em&gt;. Você não acaba com uma cópia modificada do df2; os novos valores aparecerão dentro do df2. É preciso fazer isso de forma consciente e segura, para não sobrescrever informações, por isso, recomendamos trabalhar com cópias do objeto original (df2 ao invés de df).&lt;/p&gt;
&lt;p&gt;A mesma técnica funcionará se você armazenar seus dados em um vetor, matriz, array, lista ou data frame. Basta descrever os valores que você deseja alterar com o sistema de notação de R e, em seguida, atribuir esses valores com o operador de atribuição de R &lt;code&gt;&amp;lt;-&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;exercícios-3&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Considere o vetor abaixo. Atribua um novo valor na posição 3 deste vetor. É possível atribuir uma string no lugar de um número?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor_x&amp;lt;- c(10,30,50,10)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;modificando-com-testes-lógicos&#34;&gt;Modificando com testes lógicos&lt;/h3&gt;
&lt;p&gt;E se você precisa saber um valor específico e precise que o R te retorne a linha em que este valor está? Por que no caso anterior você sabia as linhas que você queria mudar, mas e quando o seu objeto é grande e você não sabe exatamente onde a informação se encontra? Como fazer?&lt;/p&gt;
&lt;p&gt;Lembra do sistema de notação do R que permitia valores lógicos? Você pode deixar um teste lógico criar um vetor de TRUEs e FALSEs para você.&lt;/p&gt;
&lt;p&gt;Um teste lógico é uma comparação como “um é menor que dois?”, &lt;code&gt;1 &amp;lt; 2&lt;/code&gt; ou “três é maior que quatro?”, &lt;code&gt;3 &amp;gt; 4&lt;/code&gt;. O R fornece sete operadores lógicos que você pode usar para fazer comparações, e eles podem ser vistos na tabela abaixo.&lt;/p&gt;
&lt;p&gt;Cada operador retorna TRUE ou FALSE. Se você usar um operador para comparar vetores, o R fará comparações entre elementos - assim como faz com os operadores aritméticos:&lt;/p&gt;
&lt;p&gt;Table: Table 1: Operadores lógicos&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operador&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sintaxe&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Teste&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a &amp;gt; b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é maior que b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a &amp;gt;= b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é maior ou igual a b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a &amp;lt; b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é menor que b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a &amp;lt;= b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é menor ou igual a b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;==&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a == b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é igual a b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;!=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a != b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é diferente de b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%in%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a %in% c(a, b, c)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a está contido em algum dos elementos de b?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 &amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 &amp;gt; c(0, 1, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(1, 2, 3) == c(3, 2, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O operador &lt;code&gt;%in%&lt;/code&gt; é o único que não executa normalmente o elemento inteiro. &lt;code&gt;%in%&lt;/code&gt; testa se os valores do lado esquerdo estão no vetor do lado direito. Se você fornecer um vetor no lado esquerdo, este operador não irá emparelhar os valores à esquerda com os valores à direita e, em seguida, fará testes de elementos. Em vez disso, ele testará independentemente se cada valor à esquerda está em algum lugar do vetor à direita:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 %in% c(3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(1, 2) %in% c(3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(1, 2, 3) %in% c(3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(1, 2, 3, 4) %in% c(3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE  TRUE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe que você testa a igualdade com um sinal de igual duplo, &lt;code&gt;==&lt;/code&gt;, e não um único sinal de igual, &lt;code&gt;=&lt;/code&gt;, que é outra maneira de escrever &lt;code&gt;&amp;lt;-&lt;/code&gt;. É fácil esquecer e usar &lt;code&gt;a = b&lt;/code&gt; para testar se a é igual a b. Infelizmente, você terá uma surpresa desagradável. O R não retornará &lt;code&gt;TRUE&lt;/code&gt; ou &lt;code&gt;FALSE&lt;/code&gt;, porque não terá que: a será igual a b, porque você acabou de executar o equivalente a &lt;code&gt;a &amp;lt;- b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Você pode comparar quaisquer dois objetos no R com um operador lógico; no entanto, os operadores lógicos fazem mais sentido se você comparar dois objetos do mesmo tipo de dados. Se você comparar objetos de diferentes tipos de dados, o R usará suas regras de coerção para forçar os objetos ao mesmo tipo antes de fazer a comparação.&lt;/p&gt;
&lt;h4 id=&#34;exercícios-4&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Extraia a coluna &lt;code&gt;V2010&lt;/code&gt; do &lt;code&gt;df2&lt;/code&gt; e teste os valores igual a &amp;lsquo;Branca&amp;rsquo;. Além disso conte quantas linhas são iguais a &amp;lsquo;Branca&amp;rsquo;. Dica: use a função sum() para fazer a contagem.&lt;/p&gt;
&lt;p&gt;Para resumir, você pode usar um teste lógico para selecionar valores dentro de um objeto.&lt;/p&gt;
&lt;p&gt;O subconjunto lógico é uma técnica poderosa porque permite identificar, extrair e modificar rapidamente valores individuais em seu conjunto de dados. Ao trabalhar com subconjuntos lógicos, você não precisa saber onde existe um valor em seu conjunto de dados. Você só precisa saber como descrever o valor com um teste lógico.&lt;/p&gt;
&lt;p&gt;Além dos operadores lógicos, também temos os operadores booleanos, os operadores booleanos são como &lt;code&gt;&amp;amp;&lt;/code&gt; ou &lt;code&gt;|&lt;/code&gt;. Eles reduzem os resultados de vários testes lógicos em um único &lt;code&gt;TRUE&lt;/code&gt; ou &lt;code&gt;FALSE&lt;/code&gt;. Os operadores e seus testes podem ser vistos na tabela abaixo.&lt;/p&gt;
&lt;p&gt;Table: Table 2: Operadores booleanos&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operador&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sintaxe&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Teste&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cond1 &amp;amp; cond2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cond1 e cond2 são simultâneamente verdadeiros?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;|&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cond1 | cond2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cond1 ou cond2 é verdadeiro?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;xor&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;xor(cond1, cond2)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Apenas cond1 ou apenas cond2 é verdadeiro?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;!&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;!cond1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Inverta o resultado de cond1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;any&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;any(cond1, cond2, cond3, &amp;hellip;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Algum resultado em c(cond1, cond2, cond3, &amp;hellip;) é verdadeiro?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;all&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;all(cond1, cond2, cond3, &amp;hellip;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Todos os resultados em c(cond1, cond2, cond3, &amp;hellip;) são verdadeiros?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Para usar um operador booleano, coloque-o entre dois testes lógicos completos. O R irá executar cada teste lógico e, em seguida, usar o operador booleano para combinar os resultados em um único &lt;code&gt;TRUE&lt;/code&gt; ou &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Quando usados com vetores, os operadores booleanos seguirão a mesma execução elementar que os operadores aritméticos e lógicos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a &amp;lt;- c(1, 2, 3)
b &amp;lt;- c(1, 2, 3)
c &amp;lt;- c(1, 2, 4)

a == b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE TRUE TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b == c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a == b &amp;amp; b == c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode usar um operador booleano para localizar as pessoas de 40 anos e de escolaridade 9 anos de estudo no df2.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2$V2009 == 40 &amp;amp; df2$VD3005 == &amp;quot;8 anos de estudo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;valores-desconhecidos&#34;&gt;Valores desconhecidos&lt;/h3&gt;
&lt;p&gt;Problemas com informações desconhecidas acontecem com frequência na análise de dados. Normalmente, eles são mais simples: você não sabe um valor porque a medição foi perdida, corrompida ou nunca feita para começar. O R tem uma maneira de ajudá-lo a gerenciar esses valores ausentes.&lt;/p&gt;
&lt;p&gt;O caractere &lt;code&gt;NA&lt;/code&gt; é um símbolo especial em R. Ele significa “não disponível” e pode ser usado como um espaço reservado para informações ausentes. O R tratará &lt;code&gt;NA&lt;/code&gt; exatamente como você deseja que as informações ausentes sejam tratadas. Por exemplo, qual resultado você esperaria se adicionar 1 a uma informação ausente?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 + NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R retornará uma segunda informação faltante. Não seria correto dizer que 1 + NA = 1 porque há uma boa chance de que o valor ausente não seja zero. Você não tem informações suficientes para determinar o resultado.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;NA == 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Valores ausentes podem ajudá-lo a contornar lacunas em seus conjuntos de dados, mas também podem criar alguns problemas frustrantes. Suponha, por exemplo, que você coletou 1.000 observações e deseja tirar sua média com a função mean(). Se um dos valores for NA, seu resultado será NA:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(NA, 1:50)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] NA  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
## [26] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
## [51] 50
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(c(NA, 1:50))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A maioria das funções R vem com o argumento opcional, &lt;code&gt;na.rm&lt;/code&gt;, que significa &lt;code&gt;NA remove&lt;/code&gt;. o R irá ignorar NAs quando avaliar uma função se você adicionar o argumento &lt;code&gt;na.rm = TRUE&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(c(NA, 1:50), na.rm = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 25.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ocasionalmente, você pode querer identificar os NAs em seu conjunto de dados com um teste lógico, mas isso também cria um problema. Como você faria isso? Se algo for um valor ausente, qualquer teste lógico que o use retornará um valor ausente, até mesmo este teste:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;NA == NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que significa que testes como este não ajudarão você a encontrar valores ausentes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(1, 2, 3, NA) == NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA NA NA NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R fornece uma função especial que pode testar se um valor é um NA. A função é &lt;code&gt;is.na&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.na(NA)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vet &amp;lt;- c(1, 2, 3, NA)

is.na(vet)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercícios-5&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Conte o número de NAs na coluna &lt;code&gt;VD4016&lt;/code&gt; do data frame &lt;code&gt;df2&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;revisão&#34;&gt;Revisão&lt;/h2&gt;
&lt;p&gt;Na aula de hoje falamos sobre como importar dados, exportar dados, manipulação e diferentes notações para identificação de informações e modificação.&lt;/p&gt;
&lt;p&gt;Para selecionar os valores em um data frame, ou em outro objeto R, aprendemos a usar a notação &lt;code&gt;data.frame[ , ]&lt;/code&gt; e a partir dessa notação, selecionar diferentes linhas e colunas, usando números inteiros, números negativos, espaços em branco, valores lógicos e nomes.&lt;/p&gt;
&lt;p&gt;Aprendemos com listas e dataframes a seleção pela notação de colchetes duplos &lt;code&gt;[[&lt;/code&gt; e &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Em relação a modificação de valores, aprendemos a modificar os valores no local dentro de um objeto R ao combinar a sintaxe da notação de R com o operador de atribuição, &lt;code&gt;&amp;lt;-&lt;/code&gt;. Isso permite que você atualize seus dados e limpe seus conjuntos de dados.&lt;/p&gt;
&lt;p&gt;Aprendemos diferentes operadores lógicos: &lt;code&gt;&amp;gt;&lt;/code&gt;; &lt;code&gt;&amp;gt;=&lt;/code&gt;; &lt;code&gt;&amp;lt;&lt;/code&gt;; &lt;code&gt;&amp;lt;=&lt;/code&gt;; &lt;code&gt;==&lt;/code&gt;; &lt;code&gt;!=&lt;/code&gt;; &lt;code&gt;%in%&lt;/code&gt; e operadores booleanos: &lt;code&gt;&amp;amp;&lt;/code&gt;; &lt;code&gt;|&lt;/code&gt;; &lt;code&gt;xor&lt;/code&gt;; &lt;code&gt;!&lt;/code&gt;; &lt;code&gt;any&lt;/code&gt;; &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Quando você trabalha com grandes conjuntos de dados, modificar e recuperar valores cria um problema logístico próprio. Como você pode pesquisar os dados para encontrar os valores que deseja modificar ou recuperar? Como um usuário R, você pode fazer isso com subconjuntos lógicos. Crie um teste lógico com operadores lógicos e booleanos e, em seguida, use o teste como um índice na notação de colchetes de R. O R retornará os valores que você está procurando, mesmo se você não souber onde eles estão.&lt;/p&gt;
&lt;h3 id=&#34;exercícios-6&#34;&gt;Exercícios&lt;/h3&gt;
&lt;p&gt;Para os próximos exercícios considere o data frame da pnad que estamos usando nas aulas.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Como você selecionaria o mesmo valor abaixo, mas usando inteiros negativos na seleção?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2[1,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Homem&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qual a diferença em usar em selecionar determinada informação em um data frame usando colchetes duplos &lt;code&gt;[[]]&lt;/code&gt; e usando colchetes simples? Observe o exemplo abaixo para responder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2[[&#39;Ano&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [15] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [29] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [43] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [57] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [71] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [85] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [99] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##  [113] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##  [127] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[&#39;Ano&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Ano
## 1    2021
## 2    2021
## 3    2021
## 4    2021
## 5    2021
## 6    2021
## 7    2021
## 8    2021
## 9    2021
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Considere o data frame abaixo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sala &amp;lt;- data.frame(
  id = c(1, 2, 3, 4, 5, 6),
  idade = c(20, 25, 30, 35, 40, 45),
  nome = c(&amp;quot;Fulano&amp;quot;, &amp;quot;Cicrano&amp;quot;, &amp;quot;Beltrano&amp;quot;, &amp;quot;Herculano&amp;quot;, &amp;quot;Mariano&amp;quot;, &amp;quot;Carrano&amp;quot;),
  sexo = &amp;quot;Masculino&amp;quot;,
  origem = c(&amp;quot;Campinas&amp;quot;, &amp;quot;Barueri&amp;quot;, &amp;quot;Monte Verde&amp;quot;, &amp;quot;Rio de Janeiro&amp;quot;, &amp;quot;Natal&amp;quot;, &amp;quot;Belo Horizonte&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Modifique o nome de &amp;lsquo;Mariano&amp;rsquo; por &amp;lsquo;Mariana&amp;rsquo;. E altere a variável sexo para que seja um vetor que altere o valor para &amp;lsquo;Feminino&amp;rsquo; na posição em que o nome foi trocado para Mariana.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Considere o mesmo data frame sala construído no exercício anterior. Usando testes lógicos e operadores Booleanos. Verifique:&lt;/p&gt;
&lt;p&gt;a. se existe algum aluno que seja do sexo Masculino e seja de São Paulo.&lt;br&gt;
b. se existe algum aluno que tem idade maior ou igual a 20 anos ou que seja de Campinas.&lt;br&gt;
c. se existe alguém com o nome Beltrano.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agora considere o seguinte data frame e, usando as funções apropriadas ensinadas na aula de hoje, responda:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cadastro &amp;lt;- data.frame(
  id = c(10, 105, 299, 645, 7907, 8660, 4992, 630),
  idade = c(20, 25, 30, 35, 40, 45, 60, 53),
  nome = c(&amp;quot;Thais&amp;quot;, NA, &amp;quot;Guilherme&amp;quot;, &amp;quot;Betânia&amp;quot;, &amp;quot;Ana Lucia&amp;quot;, NA, NA, &amp;quot;Pâmela&amp;quot;),
  sexo = c(&amp;quot;Feminino&amp;quot;, &amp;quot;Masculino&amp;quot;,&amp;quot;Masculino&amp;quot;, NA ,NA, &amp;quot;Feminino&amp;quot;, &amp;quot;Masculino&amp;quot;, &amp;quot;Feminino&amp;quot;),
  origem = c(&amp;quot;Campinas&amp;quot;, NA, &amp;quot;Monte Verde&amp;quot;, &amp;quot;Rio de Janeiro&amp;quot;, NA, &amp;quot;Belo Horizonte&amp;quot;,&amp;quot;São Paulo&amp;quot;,
             &amp;quot;Rio de Janeiro&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Quantos NAs existe na coluna nome?&lt;/li&gt;
&lt;li&gt;Quantos NAs existe na coluna sexo?&lt;/li&gt;
&lt;li&gt;Quantos NAs existe na coluna origem?&lt;/li&gt;
&lt;li&gt;Substitua os NAs na coluna sexo pelo valor &amp;lsquo;Feminino&amp;rsquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Salve o data frame &amp;lsquo;cadastro&amp;rsquo; do exercicio anterior em um arquivo &lt;code&gt;.csv&lt;/code&gt;. Como você faria isso? Quais os argumentos que devem ser usados?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>readr, tibble e tidyr</title>
      <link>https://laddem.github.io/courses/tidyverse/dia1/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/courses/tidyverse/dia1/</guid>
      <description>&lt;h2 id=&#34;um-modelo-de-ciência-de-dados&#34;&gt;Um modelo de ciência de dados&lt;/h2&gt;
&lt;p&gt;Uma forma esquemática, mas útil de encarar o processo de análise de dados e de produção de conhecimento a partir de informações secundárias é esta figura:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia1_files/data-science-explore.png&#34; alt=&#34;Data Science Framework&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ela acaba sendo um ponto de partida interessante porque contextualiza a maioria dos pacotes que vamos utilizar. O &lt;code&gt;readr&lt;/code&gt; é uma maneira de facilitar e tornar mais rápida a importação de dados em formatos comuns, como o texto delimitado por separadores e o formato colunado com larguras-fixas utilizado pelo IBGE.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;tibble&lt;/code&gt; é uma proposta de modernização para o &lt;code&gt;data.frame&lt;/code&gt;, aproveitando a estrutura flexível e poderosa, mas mudando certas convenções, como a conversão de strings para fatores, permitindo a criação de colunas de listas, utilização de nomes mais complexos para colunas, etc.&lt;/p&gt;
&lt;p&gt;O &lt;code&gt;tidyr&lt;/code&gt; é uma forma de reformatar (&lt;em&gt;reshape&lt;/em&gt;) bancos de dados que vêm em formatos que dificultam seu processamento, permitindo que o analista facilmente reconfigure a informação para o formato mais adequado. Ele é o primeiro pacote que veremos sobre a parte de &amp;ldquo;cozinha&amp;rdquo; dos dados, no qual é preciso processar o dado bruto para torná-lo passível de análise.&lt;/p&gt;
&lt;p&gt;O mesmo pode ser dito para os outros pacotes que veremos nos próximos dias. Cada um deles foi pensado para resolver um problema ou facilitar uma rotina de trabalho relacionada com um dos passos descritos acima.&lt;/p&gt;
&lt;h3 id=&#34;programação-literária&#34;&gt;Programação literária&lt;/h3&gt;
&lt;p&gt;Vários dos conceitos que guiam o design do &lt;code&gt;tidyverse&lt;/code&gt; são orientados por uma certa filosofia. Esta filosofia dita que a principal preocupação por trás de um programa não é que ele funcione. Eventualmente e com um pouco de persistência, é quase sempre possível chegar a uma solução técnica adequada. A principal questão é que o programa é uma ferramenta de comunicação com outras pessoas que o lerão, seja seus colegas, colaboradores, alunos ou você mesmo, daqui a 2 anos, quando lembrar que você já escreveu um programa para aquela tarefa. Trago aqui alguns trechos de &lt;em&gt;Literate Programming&lt;/em&gt;, de Donald Knuth (1984), traduzidos livremente por este que vos fala:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Creio que chegou a hora de melhorar significativamente a documentação dos programas, e que podemos atingir este objetivo tratando programas como obras literárias. Por isso o título: &amp;ldquo;Programação Literária&amp;rdquo;. Abandonemos os velhos hábitos de construir programas: ao invés de imaginar que nossa tarefa principal é instruir um computador sobre o que deve ser feito, concentremo-nos em explicar aos seres humanos o que queremos que o computador faça. O praticante da programação literária pode ser visto como um ensaísta, cuja principal preocupação é com a clareza da exposição e a excelência no estilo. Tal autor, com um dicionário na mão, escolhe os nomes das variáveis com cuidado e explica claramente seu significado. Ele ou ela esmera por um programa que é compreensível porque seus conceitos foram introduzidos na melhor ordem possível para o entendimento humano, utilizando uma mistura de métodos formais e informais que se complementam.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Assim, várias das escolhas feitas na construção de &lt;code&gt;tidyverse&lt;/code&gt; procuram reforçar essa característica de interpretabilidade dos programas, como a ordem lógica das operações com o pipe (&lt;code&gt;%&amp;gt;%&lt;/code&gt;), funções com nomes mais longos e semânticos, a utilização de uma função específica para cada tarefa, ao invés da adaptação de funções genéricas para uma grande variedade de tarefas. O propósito de um código escrito como &lt;code&gt;tidyverse&lt;/code&gt; é que, no limite, a própria síntaxe do código funcione como parte da documentação do programa.&lt;/p&gt;
&lt;h3 id=&#34;o-mistério-do-pipe-&#34;&gt;O mistério do pipe: &lt;code&gt;%&amp;gt;%&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Usuários de longa data do R já podem ter encontrado no mato esse animal estranho e podem ter ficado confusos com seu significado. O pipe é de origem humilde e nasceu nos sistemas Unix há muitas décadas atrás. Seu objetivo é muito simples: e se você tiver uma sequência de computações em que cada uma recebe o resultado daquela feita anteriormente? Claro que você poderia fazer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- 1:10
y &amp;lt;- diff(x)
mean(y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas não seria interessante pular os objetos intermediários e ir direto ao ponto? O pipe vem do pacote &lt;code&gt;magrittr&lt;/code&gt;, mas ele vêm carregado em quase todos os pacotes do tidyverse. Vamos carregar logo o tibble.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Para ter acesso ao pipe, basta carregar um pacote do tidyverse, como tibble, dplyr, tidyr, etc.
# Vamos carregar o tibble agora
library(tibble)
x %&amp;gt;% diff() %&amp;gt;% mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vejamos um exemplo mais real, quantos artistas existem no dataset &lt;code&gt;billboard&lt;/code&gt;? Podemos usar &lt;code&gt;unique&lt;/code&gt; e &lt;code&gt;length&lt;/code&gt; para descobrir.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- unique(tidyr::billboard$artist)
length(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 228
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas com &lt;code&gt;%&amp;gt;%&lt;/code&gt; fica bem melhor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tidyr::billboard %&amp;gt;% .$artist %&amp;gt;% unique() %&amp;gt;% length()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 228
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, mas como ele funciona? É simples, o pipe carrega o objeto a sua esquerda num ponto &lt;code&gt;.&lt;/code&gt; invisível que é automaticamente passado como o primeiro argumento da função à direita.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- 1:10
mean(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x %&amp;gt;% mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, mas e se meu argumento não for o primeiro, ainda posso usar pipe? Pode! É só usar explicitamente um ponto no lugar onde você quer aproveitar o efeito:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris %&amp;gt;% boxplot(Sepal.Length ~ Species, data = .)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia1_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;O ponto &lt;code&gt;.&lt;/code&gt; depois de &lt;code&gt;data&lt;/code&gt; indica indica que ali deve ser colocado o &lt;code&gt;iris&lt;/code&gt;. O pipe é uma peça chave de muitas funções do &lt;code&gt;tidyverse&lt;/code&gt;, não porque ele seja obrigatório, mas sim porque ele permite expressar sequências de operações numa ordem mais lógica, do tipo: &amp;ldquo;Primeiro faça a, então b, então c, &amp;hellip; &amp;ldquo;, ao contrário da forma como isto é geralmente feito usando parênteses para precedência.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Compare
mean(diff(1:10))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1:10 %&amp;gt;% diff %&amp;gt;% mean
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E assim fica desmistificado o mistério do pipe! Um último pulo do gato: pelo amor de deus ninguém digita &lt;code&gt;Shift + %, &amp;gt;, Shift + %&lt;/code&gt;, basta usar o atalho: &lt;code&gt;Ctrl + Shift + M&lt;/code&gt; que ele põe um pipe separado por espaços &lt;code&gt;%&amp;gt;%&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;readr&#34;&gt;&lt;code&gt;readr&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Usuários do R provavelmente vão estar familiarizados com os nossos leitores de arquivos mais comuns: &lt;code&gt;read.table&lt;/code&gt; e &lt;code&gt;read.csv&lt;/code&gt;. Talvez muitos de vocês já até memorizaram alguns dos argumentos mais comuns. Não é o caso aqui de revisitar esta função, mas o &lt;code&gt;readr&lt;/code&gt; tem muitos paralelos com elas, porque é pensado como uma nova versão da mesma coisa.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Comecemos carregando o readr
library(readr)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;debaixo-do-capô&#34;&gt;Debaixo do capô&lt;/h3&gt;
&lt;p&gt;O readr, como as funções de leitura do &lt;code&gt;base&lt;/code&gt; é uma coleção de &lt;em&gt;parsers&lt;/em&gt;, que transformam texto em objetos R com o tipo desejado.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;parse_number(c(&amp;quot;1&amp;quot;, &amp;quot;20&amp;quot;, &amp;quot;38&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1 20 38
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;parse_character(c(&amp;quot;banana&amp;quot;, &amp;quot;maçã&amp;quot;, &amp;quot;pêra&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;banana&amp;quot;     &amp;quot;ma&amp;lt;e7&amp;gt;&amp;lt;e3&amp;gt;&amp;quot; &amp;quot;p&amp;lt;ea&amp;gt;ra&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Note os acentos e caracteres especiais
parse_character(c(&amp;quot;banana&amp;quot;, &amp;quot;maçã&amp;quot;, &amp;quot;pêra&amp;quot;), 
                locale = locale(encoding = &amp;quot;Windows-1252&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;banana&amp;quot; &amp;quot;maçã&amp;quot;   &amp;quot;pêra&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;parse_logical(c(&amp;quot;true&amp;quot;, &amp;quot;false&amp;quot;, &amp;quot;true&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em geral, a gente não precisa descer tanto o nível, a gente vai trabalhar mesmo é com os leitores de dados &amp;ldquo;retangulares&amp;rdquo;. Como os do &lt;code&gt;base&lt;/code&gt;, eles são &lt;code&gt;read_csv&lt;/code&gt;, &lt;code&gt;read_table&lt;/code&gt;, etc. Vamos trabalhar com bancos de dados que já vêm no pacote, para facilitar o processo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Lista os datasets que vem no pacote
readr_example()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;challenge.csv&amp;quot;     &amp;quot;epa78.txt&amp;quot;         &amp;quot;example.log&amp;quot;      
## [4] &amp;quot;fwf-sample.txt&amp;quot;    &amp;quot;massey-rating.txt&amp;quot; &amp;quot;mtcars.csv&amp;quot;       
## [7] &amp;quot;mtcars.csv.bz2&amp;quot;    &amp;quot;mtcars.csv.zip&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uma coisa que gosto de fazer é olhar como o arquivo está organizado antes de tentar abrí-lo. Muitos de vocês podem fazer isso com &lt;code&gt;readLines&lt;/code&gt;. Ela ganhou sua versão no pacote com &lt;code&gt;read_lines&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Vamos tentar abrir massey-rating.txt
read_lines(readr_example(&amp;quot;massey-rating.txt&amp;quot;), n_max = 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;UCC PAY LAZ KPK  RT   COF BIH DII ENG ACU Rank Team            Conf&amp;quot; 
##  [2] &amp;quot;  1   1   1   1   1     1   1   1   1   1    1 Ohio St          B10 &amp;quot;
##  [3] &amp;quot;  2   2   2   2   2     2   2   2   4   2    2 Oregon           P12 &amp;quot;
##  [4] &amp;quot;  3   4   3   4   3     4   3   4   2   3    3 Alabama          SEC &amp;quot;
##  [5] &amp;quot;  4   3   4   3   4     3   5   3   3   4    4 TCU              B12 &amp;quot;
##  [6] &amp;quot;  6   6   6   5   5     7   6   5   6  11    5 Michigan St      B10 &amp;quot;
##  [7] &amp;quot;  7   7   7   6   7     6  11   8   7   8    6 Georgia          SEC &amp;quot;
##  [8] &amp;quot;  5   5   5   7   6     8   4   6   5   5    7 Florida St       ACC &amp;quot;
##  [9] &amp;quot;  8   8   9   9  10     5   7   7  10   7    8 Baylor           B12 &amp;quot;
## [10] &amp;quot;  9  11   8  13  11    11  12   9  14   9    9 Georgia Tech     ACC &amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Identificando o separador, escolho a função adequada
read_table(readr_example(&amp;quot;massey-rating.txt&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   UCC = col_double(),
##   PAY = col_double(),
##   LAZ = col_double(),
##   KPK = col_double(),
##   RT = col_double(),
##   COF = col_double(),
##   BIH = col_double(),
##   DII = col_double(),
##   ENG = col_double(),
##   ACU = col_double(),
##   Rank = col_double(),
##   Team = col_character(),
##   Conf = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 13
##      UCC   PAY   LAZ   KPK    RT   COF   BIH   DII   ENG   ACU  Rank Team  Conf 
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
##  1     1     1     1     1     1     1     1     1     1     1     1 Ohio~ B10  
##  2     2     2     2     2     2     2     2     2     4     2     2 Oreg~ P12  
##  3     3     4     3     4     3     4     3     4     2     3     3 Alab~ SEC  
##  4     4     3     4     3     4     3     5     3     3     4     4 TCU   B12  
##  5     6     6     6     5     5     7     6     5     6    11     5 Mich~ B10  
##  6     7     7     7     6     7     6    11     8     7     8     6 Geor~ SEC  
##  7     5     5     5     7     6     8     4     6     5     5     7 Flor~ ACC  
##  8     8     8     9     9    10     5     7     7    10     7     8 Bayl~ B12  
##  9     9    11     8    13    11    11    12     9    14     9     9 Geor~ ACC  
## 10    13    10    13    11     8     9    10    11     9    10    10 Miss~ SEC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como identifiquei que as colunas estavam separadas por espaços, utilizei &lt;code&gt;read_table&lt;/code&gt; cujo delimitador é o espaço &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A segunda feature mais interessante do readr, é uma interface para selecionar os tipos de colunas que serão importadas. Vejamos o seguinte exemplo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Vamos abrir mtcars.csv
read_lines(readr_example(&amp;quot;mtcars.csv&amp;quot;), n_max = 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;\&amp;quot;mpg\&amp;quot;,\&amp;quot;cyl\&amp;quot;,\&amp;quot;disp\&amp;quot;,\&amp;quot;hp\&amp;quot;,\&amp;quot;drat\&amp;quot;,\&amp;quot;wt\&amp;quot;,\&amp;quot;qsec\&amp;quot;,\&amp;quot;vs\&amp;quot;,\&amp;quot;am\&amp;quot;,\&amp;quot;gear\&amp;quot;,\&amp;quot;carb\&amp;quot;&amp;quot;
##  [2] &amp;quot;21,6,160,110,3.9,2.62,16.46,0,1,4,4&amp;quot;                                                     
##  [3] &amp;quot;21,6,160,110,3.9,2.875,17.02,0,1,4,4&amp;quot;                                                    
##  [4] &amp;quot;22.8,4,108,93,3.85,2.32,18.61,1,1,4,1&amp;quot;                                                   
##  [5] &amp;quot;21.4,6,258,110,3.08,3.215,19.44,1,0,3,1&amp;quot;                                                 
##  [6] &amp;quot;18.7,8,360,175,3.15,3.44,17.02,0,0,3,2&amp;quot;                                                  
##  [7] &amp;quot;18.1,6,225,105,2.76,3.46,20.22,1,0,3,1&amp;quot;                                                  
##  [8] &amp;quot;14.3,8,360,245,3.21,3.57,15.84,0,0,3,4&amp;quot;                                                  
##  [9] &amp;quot;24.4,4,146.7,62,3.69,3.19,20,1,0,4,2&amp;quot;                                                    
## [10] &amp;quot;22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Identificamos o separador de colunas, selecionamos a função adequada
read_csv(readr_example(&amp;quot;mtcars.csv&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   mpg = col_double(),
##   cyl = col_double(),
##   disp = col_double(),
##   hp = col_double(),
##   drat = col_double(),
##   wt = col_double(),
##   qsec = col_double(),
##   vs = col_double(),
##   am = col_double(),
##   gear = col_double(),
##   carb = col_double()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 11
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
## # ... with 22 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O console nos mostra que a leitura do banco foi completada, mas também mostra &lt;code&gt;Column Specification&lt;/code&gt;. Isto indica qual o tipo de dado que foi identificado automaticamente numa análise feita pela função  &lt;code&gt;guess_parser&lt;/code&gt;. Em diversos casos, nós podemos querer identificar manualmente as colunas. Vejamos um exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Vamos identificar as colunas com spec
spec_csv(readr_example(&amp;quot;mtcars.csv&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   mpg = col_double(),
##   cyl = col_double(),
##   disp = col_double(),
##   hp = col_double(),
##   drat = col_double(),
##   wt = col_double(),
##   qsec = col_double(),
##   vs = col_double(),
##   am = col_double(),
##   gear = col_double(),
##   carb = col_double()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## cols(
##   mpg = col_double(),
##   cyl = col_double(),
##   disp = col_double(),
##   hp = col_double(),
##   drat = col_double(),
##   wt = col_double(),
##   qsec = col_double(),
##   vs = col_double(),
##   am = col_double(),
##   gear = col_double(),
##   carb = col_double()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Copia e cola, modifica as colunas que queremos alterar

spec_cols &amp;lt;- cols(
  mpg = col_double(),
  cyl = col_factor(), # N de cilindros do automóvel
  disp = col_double(),
  hp = col_double(),
  drat = col_double(),
  wt = col_double(),
  qsec = col_double(),
  vs = col_double(),
  am = col_factor(c(&amp;quot;0&amp;quot;, &amp;quot;1&amp;quot;)), # Transmissão automática ou manual
  gear = col_double(),
  carb = col_double()
)

df &amp;lt;- read_csv(readr_example(&amp;quot;mtcars.csv&amp;quot;), col_types = spec_cols)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 11
##      mpg cyl    disp    hp  drat    wt  qsec    vs am     gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21   6      160    110  3.9   2.62  16.5     0 1         4     4
##  2  21   6      160    110  3.9   2.88  17.0     0 1         4     4
##  3  22.8 4      108     93  3.85  2.32  18.6     1 1         4     1
##  4  21.4 6      258    110  3.08  3.22  19.4     1 0         3     1
##  5  18.7 8      360    175  3.15  3.44  17.0     0 0         3     2
##  6  18.1 6      225    105  2.76  3.46  20.2     1 0         3     1
##  7  14.3 8      360    245  3.21  3.57  15.8     0 0         3     4
##  8  24.4 4      147.    62  3.69  3.19  20       1 0         4     2
##  9  22.8 4      141.    95  3.92  3.15  22.9     1 0         4     2
## 10  19.2 6      168.   123  3.92  3.44  18.3     1 0         4     4
## # ... with 22 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Para importar apenas colunas selecionadas, utilize &#39;cols_only()&#39;
spec_cols2 &amp;lt;- cols_only(
  mpg = col_double(),
  cyl = col_factor(), # N de cilindros do automóvel
  am = col_factor(c(&amp;quot;0&amp;quot;, &amp;quot;1&amp;quot;)), # Transmissão automática ou manual
  gear = col_double(),
  carb = col_double()
)

df2 &amp;lt;- read_csv(readr_example(&amp;quot;mtcars.csv&amp;quot;), col_types = spec_cols2)
df2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 5
##      mpg cyl   am     gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21   6     1         4     4
##  2  21   6     1         4     4
##  3  22.8 4     1         4     1
##  4  21.4 6     0         3     1
##  5  18.7 8     0         3     2
##  6  18.1 6     0         3     1
##  7  14.3 8     0         3     4
##  8  24.4 4     0         4     2
##  9  22.8 4     0         4     2
## 10  19.2 6     0         4     4
## # ... with 22 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Para indicar os tipos de colunas de um jeito mais sucinto, utilize uma string:

df &amp;lt;- read_csv(readr_example(&amp;quot;mtcars.csv&amp;quot;), col_types = &amp;quot;dfddddddfdd&amp;quot;)

# Só cuidado pra não perder a conta dos ds!
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 11
##      mpg cyl    disp    hp  drat    wt  qsec    vs am     gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21   6      160    110  3.9   2.62  16.5     0 1         4     4
##  2  21   6      160    110  3.9   2.88  17.0     0 1         4     4
##  3  22.8 4      108     93  3.85  2.32  18.6     1 1         4     1
##  4  21.4 6      258    110  3.08  3.22  19.4     1 0         3     1
##  5  18.7 8      360    175  3.15  3.44  17.0     0 0         3     2
##  6  18.1 6      225    105  2.76  3.46  20.2     1 0         3     1
##  7  14.3 8      360    245  3.21  3.57  15.8     0 0         3     4
##  8  24.4 4      147.    62  3.69  3.19  20       1 0         4     2
##  9  22.8 4      141.    95  3.92  3.15  22.9     1 0         4     2
## 10  19.2 6      168.   123  3.92  3.44  18.3     1 0         4     4
## # ... with 22 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você também pode querer definir características de localização, como a codificação de caracteres, os separadores de decimal e de milhar e etc. A melhor forma de fazer isso é definir um &lt;code&gt;locale&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;meu_locale &amp;lt;- locale(encoding = &amp;quot;UTF-8&amp;quot;, decimal_mark = &amp;quot;,&amp;quot;, grouping_mark = &amp;quot;.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aí é só passar isso pra uma das funções do pacote sob o argumento &lt;code&gt;locale&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;read_csv(readr_example(&amp;quot;mtcars.csv&amp;quot;), locale = meu_locale)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   mpg = col_number(),
##   cyl = col_double(),
##   disp = col_number(),
##   hp = col_double(),
##   drat = col_number(),
##   wt = col_number(),
##   qsec = col_number(),
##   vs = col_double(),
##   am = col_double(),
##   gear = col_double(),
##   carb = col_double()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 11
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1    21     6   160   110    39   262  1646     0     1     4     4
##  2    21     6   160   110    39  2875  1702     0     1     4     4
##  3   228     4   108    93   385   232  1861     1     1     4     1
##  4   214     6   258   110   308  3215  1944     1     0     3     1
##  5   187     8   360   175   315   344  1702     0     0     3     2
##  6   181     6   225   105   276   346  2022     1     0     3     1
##  7   143     8   360   245   321   357  1584     0     0     3     4
##  8   244     4  1467    62   369   319    20     1     0     4     2
##  9   228     4  1408    95   392   315   229     1     0     4     2
## 10   192     6  1676   123   392   344   183     1     0     4     4
## # ... with 22 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existe ainda a possibilidade de ler dados colunados com largura-fixa. &lt;code&gt;readr&lt;/code&gt; implementa quatro funções diferentes para ajudar na construção do dicionário:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Nossos dados
x &amp;lt;- readr_example(&amp;quot;fwf-sample.txt&amp;quot;)
read_lines(x, n_max = 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;John Smith          WA        418-Y11-4111&amp;quot;
## [2] &amp;quot;Mary Hartford       CA        319-Z19-4341&amp;quot;
## [3] &amp;quot;Evan Nolan          IL        219-532-c301&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# separados por espaço

dic1 &amp;lt;- fwf_empty(x)
dic1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $begin
## [1]  0  5 20 30
## 
## $end
## [1]  4 13 22 NA
## 
## $skip
## [1] 0
## 
## $col_names
## [1] &amp;quot;X1&amp;quot; &amp;quot;X2&amp;quot; &amp;quot;X3&amp;quot; &amp;quot;X4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- read_fwf(file = x, col_positions = dic1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   X1 = col_character(),
##   X2 = col_character(),
##   X3 = col_character(),
##   X4 = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   X1    X2       X3    X4          
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;       
## 1 John  Smith    WA    418-Y11-4111
## 2 Mary  Hartford CA    319-Z19-4341
## 3 Evan  Nolan    IL    219-532-c301
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# indicando a largura da coluna
larguras &amp;lt;- c(20, 10, 12)

dic2 &amp;lt;- fwf_widths(larguras)
dic2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   begin   end col_names
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    
## 1     0    20 X1       
## 2    20    30 X2       
## 3    30    42 X3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- read_fwf(file = x, col_positions = dic2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   X1 = col_character(),
##   X2 = col_character(),
##   X3 = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   X1            X2    X3          
##   &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;       
## 1 John Smith    WA    418-Y11-4111
## 2 Mary Hartford CA    319-Z19-4341
## 3 Evan Nolan    IL    219-532-c301
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# indicando onde cada coluna começa e termina
comeca &amp;lt;- c(1, 21, 30)
termina &amp;lt;- c(20, 29, 42)

dic3 &amp;lt;- fwf_positions(comeca, termina)
dic3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   begin   end col_names
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    
## 1     0    20 X1       
## 2    20    29 X2       
## 3    29    42 X3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- read_fwf(file = x, col_positions = dic3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   X1 = col_character(),
##   X2 = col_character(),
##   X3 = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   X1            X2    X3          
##   &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;       
## 1 John Smith    WA    418-Y11-4111
## 2 Mary Hartford CA    319-Z19-4341
## 3 Evan Nolan    IL    219-532-c301
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# indicando pares nome-valor
dic4 &amp;lt;- fwf_cols(
  nome = c(1, 20),
  uf = c(21, 29),
  numero = c(30, 42))
dic4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   begin   end col_names
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;    
## 1     0    20 nome     
## 2    20    29 uf       
## 3    29    42 numero
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- read_fwf(file = x, col_positions = dic4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   nome = col_character(),
##   uf = col_character(),
##   numero = col_character()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   nome          uf    numero      
##   &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;       
## 1 John Smith    WA    418-Y11-4111
## 2 Mary Hartford CA    319-Z19-4341
## 3 Evan Nolan    IL    219-532-c301
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Especificar dicionários para arquivos colunados é um pé-no-saco, por sorte, existem pacotes que já fizeram parte desse trabalho por nós. O &lt;code&gt;readr&lt;/code&gt; não melhora muita o serviço manual de construção de dicionários, o que ele oferece é um ganho de performance tremendo. &lt;code&gt;read_fwf&lt;/code&gt; é centenas de vezes mais rápido que o base &lt;code&gt;read.fwf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Em termos do que o pacote faz, é basicamente isso. A única coisa que falta mencionar é que ele importa os dados como &lt;code&gt;tibbles&lt;/code&gt; ao invés do &lt;code&gt;data.frame&lt;/code&gt; padrão, mas isso já é um ótimo gancho pra nossa próxima parte.&lt;/p&gt;
&lt;h2 id=&#34;tibbles&#34;&gt;&lt;code&gt;tibbles&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Tibbles são basicamente data.frames com um método mais bonitinho de &lt;code&gt;print&lt;/code&gt;. Elas automaticamente se ajustam a largura da sua tela, omitindo as colunas que estouram, e por padrão imprimem só as 10 primeiras observações. Outras características que pessoalmente gosto, é que elas informam o tipo de variável junto com o nome, arrendondam digitos significativos, destacam números grandes, negativos, NAs e etc.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- read_csv(readr_example(&amp;quot;mtcars.csv&amp;quot;), col_types = cols()) # omitir a especificação
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 11
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
## # ... with 22 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do ponto de vista prático, elas funcionam exatamente igual a data.frames, tudo que você pode fazer com um data.frame, você faz com tibbles. O que elas trazem de novidade é:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elas nunca mudam o tipo de dado inputado.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df1 &amp;lt;- data.frame(x = list(1:5, 1:10, 1:20))
df1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    x.1.5 x.1.10 x.1.20
## 1      1      1      1
## 2      2      2      2
## 3      3      3      3
## 4      4      4      4
## 5      5      5      5
## 6      1      6      6
## 7      2      7      7
## 8      3      8      8
## 9      4      9      9
## 10     5     10     10
## 11     1      1     11
## 12     2      2     12
## 13     3      3     13
## 14     4      4     14
## 15     5      5     15
## 16     1      6     16
## 17     2      7     17
## 18     3      8     18
## 19     4      9     19
## 20     5     10     20
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2 &amp;lt;- tibble(x = list(1:5, 1:10, 1:20))
df2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 1
##   x         
##   &amp;lt;list&amp;gt;    
## 1 &amp;lt;int [5]&amp;gt; 
## 2 &amp;lt;int [10]&amp;gt;
## 3 &amp;lt;int [20]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Elas nunca ajustam os nomes das variáveis&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(data.frame(`nome hipster` = 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;nome.hipster&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(tibble(`nome hipster` = 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;nome hipster&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Ela avalia cada argumento de forma &amp;ldquo;preguiçosa&amp;rdquo; e sequencial&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# erro
data.frame(x = 1:5, y = x ^ 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in x^2: argumento não-numérico para operador binário
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# funciona
tibble(x = 1:5, y = x ^ 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##       x     y
##   &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1     1
## 2     2     4
## 3     3     9
## 4     4    16
## 5     5    25
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Ela nunca utiliza row.names&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(data.frame(state.x77))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Population Income Illiteracy Life.Exp Murder HS.Grad Frost   Area
## Alabama          3615   3624        2.1    69.05   15.1    41.3    20  50708
## Alaska            365   6315        1.5    69.31   11.3    66.7   152 566432
## Arizona          2212   4530        1.8    70.55    7.8    58.1    15 113417
## Arkansas         2110   3378        1.9    70.66   10.1    39.9    65  51945
## California      21198   5114        1.1    71.71   10.3    62.6    20 156361
## Colorado         2541   4884        0.7    72.06    6.8    63.9   166 103766
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;as_tibble(state.x77)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 50 x 8
##    Population Income Illiteracy `Life Exp` Murder `HS Grad` Frost   Area
##         &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1       3615   3624        2.1       69.0   15.1      41.3    20  50708
##  2        365   6315        1.5       69.3   11.3      66.7   152 566432
##  3       2212   4530        1.8       70.6    7.8      58.1    15 113417
##  4       2110   3378        1.9       70.7   10.1      39.9    65  51945
##  5      21198   5114        1.1       71.7   10.3      62.6    20 156361
##  6       2541   4884        0.7       72.1    6.8      63.9   166 103766
##  7       3100   5348        1.1       72.5    3.1      56     139   4862
##  8        579   4809        0.9       70.1    6.2      54.6   103   1982
##  9       8277   4815        1.3       70.7   10.7      52.6    11  54090
## 10       4931   4091        2         68.5   13.9      40.6    60  58073
## # ... with 40 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Ela muda a &amp;ldquo;regra da reciclagem&amp;rdquo;: apenas são aceitos vetores unitários ou vetores de tamanho igual aos demais&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data.frame(x = 1:10, y = 1:5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     x y
## 1   1 1
## 2   2 2
## 3   3 3
## 4   4 4
## 5   5 5
## 6   6 1
## 7   7 2
## 8   8 3
## 9   9 4
## 10 10 5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# erro
tibble(x = 1:10, y = 1:5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: Tibble columns must have compatible sizes.
## * Size 10: Existing data.
## * Size 5: Column `y`.
## i Only values of size one are recycled.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(x = 1:10, y = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##        x     y
##    &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
##  1     1     1
##  2     2     1
##  3     3     1
##  4     4     1
##  5     5     1
##  6     6     1
##  7     7     1
##  8     8     1
##  9     9     1
## 10    10     1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(x = 1:10, y = c(1:5, 1:5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##        x     y
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1     1     1
##  2     2     2
##  3     3     3
##  4     4     4
##  5     5     5
##  6     6     1
##  7     7     2
##  8     8     3
##  9     9     4
## 10    10     5
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Tibbles são estritas com relação as operações de subsetting com &lt;code&gt;[&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df1 &amp;lt;- data.frame(x = 1:3, y = 3:1)
class(df1[,1:2])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(df1[,1])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2 &amp;lt;- tibble(x = 1:3, y = 3:1)
class(df2[, 1:2])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(df2[, 1])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Se quiser extrair só uma coluna, utilize &#39;[[&#39; ou &#39;$&#39;
class(df2[[1]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(df2$x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elas também não aceitam &amp;lsquo;partial matching&amp;rsquo; de nomes de variáveis.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(nome_de_cavalo = 1)
df$nome
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2 &amp;lt;- tibble(nome_de_cavalo = 1)
df2$nome
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Unknown or uninitialised column: `nome`.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tidyr&#34;&gt;&lt;code&gt;tidyr&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Ok, nossos dados estão no R, mas, muitas vezes, não estão no formato adequado. De maneira geral, analistas de dados vão dar preferência a um formato parecido com este:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia1_files/tidy-1.png&#34; alt=&#34;Tidy Data&#34;&gt;&lt;/p&gt;
&lt;p&gt;Isto tem uma razão de ser que deve tornar-se óbvia quando tentarmos realizar as operações de transformação de variáveis, visualização, modelos, etc. Porém, muitas vezes outras considerações são feitas na hora registrar os dados, armazená-los, apresentá-los ao público, por isso, frequentemente nossos dados não estão no formato tidy e precisam ser reformatados. Essa é uma das principais tarefas do &lt;code&gt;tidyr&lt;/code&gt; e é nela que vamos nos concentrar.&lt;/p&gt;
&lt;p&gt;Atente que reformatação, como muitos outros aspectos da análise de dados, não é receita de bolo. Muitas vezes o formato desejado não é óbvio, muito menos os passos necessários para chegar lá. Porém, vou apresentar as ferramentas e alguns exemplos simples que cobrem muitos dos nossos casos de uso.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyr)
who
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7,240 x 60
##    country  iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt;        &amp;lt;int&amp;gt;        &amp;lt;int&amp;gt;        &amp;lt;int&amp;gt;
##  1 Afghani~ AF    AFG    1980          NA           NA           NA           NA
##  2 Afghani~ AF    AFG    1981          NA           NA           NA           NA
##  3 Afghani~ AF    AFG    1982          NA           NA           NA           NA
##  4 Afghani~ AF    AFG    1983          NA           NA           NA           NA
##  5 Afghani~ AF    AFG    1984          NA           NA           NA           NA
##  6 Afghani~ AF    AFG    1985          NA           NA           NA           NA
##  7 Afghani~ AF    AFG    1986          NA           NA           NA           NA
##  8 Afghani~ AF    AFG    1987          NA           NA           NA           NA
##  9 Afghani~ AF    AFG    1988          NA           NA           NA           NA
## 10 Afghani~ AF    AFG    1989          NA           NA           NA           NA
## # ... with 7,230 more rows, and 52 more variables: new_sp_m4554 &amp;lt;int&amp;gt;,
## #   new_sp_m5564 &amp;lt;int&amp;gt;, new_sp_m65 &amp;lt;int&amp;gt;, new_sp_f014 &amp;lt;int&amp;gt;,
## #   new_sp_f1524 &amp;lt;int&amp;gt;, new_sp_f2534 &amp;lt;int&amp;gt;, new_sp_f3544 &amp;lt;int&amp;gt;,
## #   new_sp_f4554 &amp;lt;int&amp;gt;, new_sp_f5564 &amp;lt;int&amp;gt;, new_sp_f65 &amp;lt;int&amp;gt;,
## #   new_sn_m014 &amp;lt;int&amp;gt;, new_sn_m1524 &amp;lt;int&amp;gt;, new_sn_m2534 &amp;lt;int&amp;gt;,
## #   new_sn_m3544 &amp;lt;int&amp;gt;, new_sn_m4554 &amp;lt;int&amp;gt;, new_sn_m5564 &amp;lt;int&amp;gt;,
## #   new_sn_m65 &amp;lt;int&amp;gt;, new_sn_f014 &amp;lt;int&amp;gt;, new_sn_f1524 &amp;lt;int&amp;gt;,
## #   new_sn_f2534 &amp;lt;int&amp;gt;, new_sn_f3544 &amp;lt;int&amp;gt;, new_sn_f4554 &amp;lt;int&amp;gt;,
## #   new_sn_f5564 &amp;lt;int&amp;gt;, new_sn_f65 &amp;lt;int&amp;gt;, new_ep_m014 &amp;lt;int&amp;gt;,
## #   new_ep_m1524 &amp;lt;int&amp;gt;, new_ep_m2534 &amp;lt;int&amp;gt;, new_ep_m3544 &amp;lt;int&amp;gt;,
## #   new_ep_m4554 &amp;lt;int&amp;gt;, new_ep_m5564 &amp;lt;int&amp;gt;, new_ep_m65 &amp;lt;int&amp;gt;,
## #   new_ep_f014 &amp;lt;int&amp;gt;, new_ep_f1524 &amp;lt;int&amp;gt;, new_ep_f2534 &amp;lt;int&amp;gt;,
## #   new_ep_f3544 &amp;lt;int&amp;gt;, new_ep_f4554 &amp;lt;int&amp;gt;, new_ep_f5564 &amp;lt;int&amp;gt;,
## #   new_ep_f65 &amp;lt;int&amp;gt;, newrel_m014 &amp;lt;int&amp;gt;, newrel_m1524 &amp;lt;int&amp;gt;,
## #   newrel_m2534 &amp;lt;int&amp;gt;, newrel_m3544 &amp;lt;int&amp;gt;, newrel_m4554 &amp;lt;int&amp;gt;,
## #   newrel_m5564 &amp;lt;int&amp;gt;, newrel_m65 &amp;lt;int&amp;gt;, newrel_f014 &amp;lt;int&amp;gt;,
## #   newrel_f1524 &amp;lt;int&amp;gt;, newrel_f2534 &amp;lt;int&amp;gt;, newrel_f3544 &amp;lt;int&amp;gt;,
## #   newrel_f4554 &amp;lt;int&amp;gt;, newrel_f5564 &amp;lt;int&amp;gt;, newrel_f65 &amp;lt;int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esse é um banco de dados difícil de analisar, ele tem 60 colunas, indicando o número de casos de tuberculose em diversos estágios da doença, por país e ano. O problema é que ao invés de termos algo como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tribble(
  ~pais, ~ano, ~tipo, ~idade, ~casos,
  &amp;quot;brasil&amp;quot;, 1980, &amp;quot;extrapulmonar&amp;quot;, &amp;quot;15-24&amp;quot;, 10,
  &amp;quot;brasil&amp;quot;, 1990, &amp;quot;relapso&amp;quot;, &amp;quot;15-24&amp;quot;, 10
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 5
##   pais     ano tipo          idade casos
##   &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1 brasil  1980 extrapulmonar 15-24    10
## 2 brasil  1990 relapso       15-24    10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As informações de tipo de tuberculose e idade dos pacientes estão espalhadas pelas colunas. Pra encurtar a história, precisamos &amp;ldquo;tombar&amp;rdquo; esse banco para que essas colunas se tornem um novo conjunto de variáveis. Vamos passo a passo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Primeiro, vamos excluir as colunas iso2 e iso3, porque elas são a mesma informação redundante
who$iso2 &amp;lt;- NULL
who$iso3 &amp;lt;- NULL

who1 &amp;lt;- pivot_longer(who,
                     cols = c(new_sp_m014:newrel_f65),
                     names_to = &amp;quot;tipo_tb&amp;quot;,
                     values_to = &amp;quot;casos&amp;quot;,
                     values_drop_na = TRUE)
who1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 76,046 x 4
##    country      year tipo_tb      casos
##    &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;int&amp;gt;
##  1 Afghanistan  1997 new_sp_m014      0
##  2 Afghanistan  1997 new_sp_m1524    10
##  3 Afghanistan  1997 new_sp_m2534     6
##  4 Afghanistan  1997 new_sp_m3544     3
##  5 Afghanistan  1997 new_sp_m4554     5
##  6 Afghanistan  1997 new_sp_m5564     2
##  7 Afghanistan  1997 new_sp_m65       0
##  8 Afghanistan  1997 new_sp_f014      5
##  9 Afghanistan  1997 new_sp_f1524    38
## 10 Afghanistan  1997 new_sp_f2534    36
## # ... with 76,036 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nosso primeiro passo é transformar todas as colunas de novos casos em um par de colunas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cols&lt;/code&gt; indica quais colunas serão tombadas e quais serão mantidas.&lt;/li&gt;
&lt;li&gt;Uma coluna &lt;code&gt;names_to&lt;/code&gt; recebe as categorias da variável.&lt;/li&gt;
&lt;li&gt;Uma coluna &lt;code&gt;values_to&lt;/code&gt; recebe os valores das células.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;values_drop_na&lt;/code&gt; é uma opção para eliminar células vazias.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essa primeira transformação já nos dá um banco de dados um pouco mais amigável, porém, ainda temos variáveis &amp;ldquo;presas&amp;rdquo; na coluna &lt;code&gt;tipo_tb&lt;/code&gt;. Vamos tentar soltá-las.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# primeiro, corrigir uma pequena inconsistencia:
unique(who1$tipo_tb)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;new_sp_m014&amp;quot;  &amp;quot;new_sp_m1524&amp;quot; &amp;quot;new_sp_m2534&amp;quot; &amp;quot;new_sp_m3544&amp;quot; &amp;quot;new_sp_m4554&amp;quot;
##  [6] &amp;quot;new_sp_m5564&amp;quot; &amp;quot;new_sp_m65&amp;quot;   &amp;quot;new_sp_f014&amp;quot;  &amp;quot;new_sp_f1524&amp;quot; &amp;quot;new_sp_f2534&amp;quot;
## [11] &amp;quot;new_sp_f3544&amp;quot; &amp;quot;new_sp_f4554&amp;quot; &amp;quot;new_sp_f5564&amp;quot; &amp;quot;new_sp_f65&amp;quot;   &amp;quot;new_sn_m014&amp;quot; 
## [16] &amp;quot;new_sn_m1524&amp;quot; &amp;quot;new_sn_m2534&amp;quot; &amp;quot;new_sn_m3544&amp;quot; &amp;quot;new_sn_m4554&amp;quot; &amp;quot;new_sn_m5564&amp;quot;
## [21] &amp;quot;new_sn_m65&amp;quot;   &amp;quot;new_ep_m014&amp;quot;  &amp;quot;new_ep_m1524&amp;quot; &amp;quot;new_ep_m2534&amp;quot; &amp;quot;new_ep_m3544&amp;quot;
## [26] &amp;quot;new_ep_m4554&amp;quot; &amp;quot;new_ep_m5564&amp;quot; &amp;quot;new_ep_m65&amp;quot;   &amp;quot;new_sn_f014&amp;quot;  &amp;quot;newrel_m014&amp;quot; 
## [31] &amp;quot;newrel_f014&amp;quot;  &amp;quot;new_sn_f1524&amp;quot; &amp;quot;new_sn_f2534&amp;quot; &amp;quot;new_sn_f3544&amp;quot; &amp;quot;new_sn_f4554&amp;quot;
## [36] &amp;quot;new_sn_f5564&amp;quot; &amp;quot;new_sn_f65&amp;quot;   &amp;quot;new_ep_f014&amp;quot;  &amp;quot;new_ep_f1524&amp;quot; &amp;quot;new_ep_f2534&amp;quot;
## [41] &amp;quot;new_ep_f3544&amp;quot; &amp;quot;new_ep_f4554&amp;quot; &amp;quot;new_ep_f5564&amp;quot; &amp;quot;new_ep_f65&amp;quot;   &amp;quot;newrel_m1524&amp;quot;
## [46] &amp;quot;newrel_m2534&amp;quot; &amp;quot;newrel_m3544&amp;quot; &amp;quot;newrel_m4554&amp;quot; &amp;quot;newrel_m5564&amp;quot; &amp;quot;newrel_m65&amp;quot;  
## [51] &amp;quot;newrel_f1524&amp;quot; &amp;quot;newrel_f2534&amp;quot; &amp;quot;newrel_f3544&amp;quot; &amp;quot;newrel_f4554&amp;quot; &amp;quot;newrel_f5564&amp;quot;
## [56] &amp;quot;newrel_f65&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Notem que newrel deveria ser new_rel
# Alguns de vocês devem conhecer &#39;gsub&#39;
who1$tipo_tb &amp;lt;- gsub(&amp;quot;newrel&amp;quot;, &amp;quot;new_rel&amp;quot;, who1$tipo_tb)

# Agora, podemos usar outra função chave do tidyr, &#39;separate&#39;
who2 &amp;lt;- who1 %&amp;gt;%  separate(col = tipo_tb,
                           into = c(NA, &amp;quot;tipo_tb&amp;quot;, &amp;quot;sexo_idade&amp;quot;),
                           sep = &amp;quot;_&amp;quot;)
who2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 76,046 x 5
##    country      year tipo_tb sexo_idade casos
##    &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;
##  1 Afghanistan  1997 sp      m014           0
##  2 Afghanistan  1997 sp      m1524         10
##  3 Afghanistan  1997 sp      m2534          6
##  4 Afghanistan  1997 sp      m3544          3
##  5 Afghanistan  1997 sp      m4554          5
##  6 Afghanistan  1997 sp      m5564          2
##  7 Afghanistan  1997 sp      m65            0
##  8 Afghanistan  1997 sp      f014           5
##  9 Afghanistan  1997 sp      f1524         38
## 10 Afghanistan  1997 sp      f2534         36
## # ... with 76,036 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# E outra passagem de separate para separar a idade do sexo
who3 &amp;lt;- who2 %&amp;gt;% separate(col = sexo_idade,
                          into = c(&amp;quot;sexo&amp;quot;, &amp;quot;idade&amp;quot;),
                          sep = 1)
who3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 76,046 x 6
##    country      year tipo_tb sexo  idade casos
##    &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
##  1 Afghanistan  1997 sp      m     014       0
##  2 Afghanistan  1997 sp      m     1524     10
##  3 Afghanistan  1997 sp      m     2534      6
##  4 Afghanistan  1997 sp      m     3544      3
##  5 Afghanistan  1997 sp      m     4554      5
##  6 Afghanistan  1997 sp      m     5564      2
##  7 Afghanistan  1997 sp      m     65        0
##  8 Afghanistan  1997 sp      f     014       5
##  9 Afghanistan  1997 sp      f     1524     38
## 10 Afghanistan  1997 sp      f     2534     36
## # ... with 76,036 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bem melhor, não acham? Estamos agora com um banco de dados muito mais adequado para uma análise de dados em R. Cada linha é uma observação, cada coluna é uma informação sobre ela.&lt;/p&gt;
&lt;p&gt;Alguns de vocês podem ter reparado que fizemos um caminho em que nosso banco de dados passou de ter muitas colunas para muitas linhas (ficou mais &amp;ldquo;longo&amp;rdquo;) e depois precisamos separar algumas das colunas que criamos em outras (o que fizemos com separate). Podemos facilmente imaginar situações em que queremos fazer o caminho inverso: transformar um banco do formato longo para o formato com mais colunas e unir colunas separadas em uma nova. Vamos ver um exemplo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Exemplo adaptado de https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population
populacao &amp;lt;- tribble(
  ~Rank, ~Country, ~Population,	~&#39;% of world&#39;, ~Day, ~Month, ~Year, ~Source,
  1L,         &amp;quot;China&amp;quot;,    1411778724, &amp;quot;17.9%&amp;quot;,  &amp;quot;1&amp;quot;, &amp;quot;Nov&amp;quot;, &amp;quot;2020&amp;quot;,       &amp;quot;Seventh Census on 2020&amp;quot;,
  2L,         &amp;quot;India&amp;quot;,    1377123716, &amp;quot;17.5%&amp;quot;, &amp;quot;19&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;2021&amp;quot;, &amp;quot;National population clock[3]&amp;quot;,
  3L, &amp;quot;United States&amp;quot;,     331695937, &amp;quot;4.22%&amp;quot;, &amp;quot;19&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;2021&amp;quot;, &amp;quot;National population clock[4]&amp;quot;,
  4L,     &amp;quot;Indonesia&amp;quot;,     271350000, &amp;quot;3.45%&amp;quot;, &amp;quot;31&amp;quot;, &amp;quot;Dec&amp;quot;, &amp;quot;2020&amp;quot;,  &amp;quot;National annual estimate[5]&amp;quot;,
  5L,      &amp;quot;Pakistan&amp;quot;,     225200000, &amp;quot;2.86%&amp;quot;,  &amp;quot;1&amp;quot;, &amp;quot;Jul&amp;quot;, &amp;quot;2021&amp;quot;,             &amp;quot;UN projection[2]&amp;quot;,
  6L,        &amp;quot;Brazil&amp;quot;,     213154869, &amp;quot;2.71%&amp;quot;, &amp;quot;19&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;2021&amp;quot;, &amp;quot;National population clock[6]&amp;quot;,
  7L,       &amp;quot;Nigeria&amp;quot;,     211401000, &amp;quot;2.69%&amp;quot;,  &amp;quot;1&amp;quot;, &amp;quot;Jul&amp;quot;, &amp;quot;2021&amp;quot;,             &amp;quot;UN projection[2]&amp;quot;,
  8L,    &amp;quot;Bangladesh&amp;quot;,     170689832, &amp;quot;2.17%&amp;quot;, &amp;quot;19&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;2021&amp;quot;, &amp;quot;National population clock[7]&amp;quot;,
  9L,        &amp;quot;Russia&amp;quot;,     146171015, &amp;quot;1.86%&amp;quot;,  &amp;quot;1&amp;quot;, &amp;quot;Jan&amp;quot;, &amp;quot;2021&amp;quot;,  &amp;quot;National annual estimate[8]&amp;quot;,
  10L,       &amp;quot;Mexico&amp;quot;,     126014024, &amp;quot;1.60%&amp;quot;,  &amp;quot;2&amp;quot;, &amp;quot;Mar&amp;quot;, &amp;quot;2020&amp;quot;,        &amp;quot;2020 census result[9]&amp;quot;
)
populacao
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 8
##     Rank Country     Population `% of world` Day   Month Year  Source           
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;            
##  1     1 China       1411778724 17.9%        1     Nov   2020  Seventh Census o~
##  2     2 India       1377123716 17.5%        19    May   2021  National populat~
##  3     3 United Sta~  331695937 4.22%        19    May   2021  National populat~
##  4     4 Indonesia    271350000 3.45%        31    Dec   2020  National annual ~
##  5     5 Pakistan     225200000 2.86%        1     Jul   2021  UN projection[2] 
##  6     6 Brazil       213154869 2.71%        19    May   2021  National populat~
##  7     7 Nigeria      211401000 2.69%        1     Jul   2021  UN projection[2] 
##  8     8 Bangladesh   170689832 2.17%        19    May   2021  National populat~
##  9     9 Russia       146171015 1.86%        1     Jan   2021  National annual ~
## 10    10 Mexico       126014024 1.60%        2     Mar   2020  2020 census resu~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Imagine que, por qualquer motivo, você prefira trabalhar com uma variável &amp;ldquo;Data&amp;rdquo; ao invés de dia, mês e ano. Podemos usar &lt;code&gt;unite&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;populacao2 &amp;lt;- populacao %&amp;gt;% unite(col = Data, Day, Month, Year, sep = &amp;quot; &amp;quot;)
populacao2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 6
##     Rank Country      Population `% of world` Data       Source                 
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                  
##  1     1 China        1411778724 17.9%        1 Nov 2020 Seventh Census on 2020 
##  2     2 India        1377123716 17.5%        19 May 20~ National population cl~
##  3     3 United Stat~  331695937 4.22%        19 May 20~ National population cl~
##  4     4 Indonesia     271350000 3.45%        31 Dec 20~ National annual estima~
##  5     5 Pakistan      225200000 2.86%        1 Jul 2021 UN projection[2]       
##  6     6 Brazil        213154869 2.71%        19 May 20~ National population cl~
##  7     7 Nigeria       211401000 2.69%        1 Jul 2021 UN projection[2]       
##  8     8 Bangladesh    170689832 2.17%        19 May 20~ National population cl~
##  9     9 Russia        146171015 1.86%        1 Jan 2021 National annual estima~
## 10    10 Mexico        126014024 1.60%        2 Mar 2020 2020 census result[9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O outro problema que precisamos resolver frequentemente, é separar um par de variáveis em diversas colunas, fazendo o caminho inverso que fizemos no caso do dataset da OMS.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;us_rent_income
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 104 x 5
##    GEOID NAME       variable estimate   moe
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 01    Alabama    income      24476   136
##  2 01    Alabama    rent          747     3
##  3 02    Alaska     income      32940   508
##  4 02    Alaska     rent         1200    13
##  5 04    Arizona    income      27517   148
##  6 04    Arizona    rent          972     4
##  7 05    Arkansas   income      23789   165
##  8 05    Arkansas   rent          709     5
##  9 06    California income      29454   109
## 10 06    California rent         1358     3
## # ... with 94 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No exemplo acima, queremos separar em colunas os valores das variáveis de renda e valor do aluguel. Esse tipo de operação tem um certo grau de abstração que me deu bastante dor de cabeça para entender inicialmente, então vamos olhar com carinho para o que queremos ter depois da transformação.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;us_rent_income2 &amp;lt;- tribble(
  ~GEOID, ~NAME, ~income_estimate, ~rent_estimate, ~income_moe, ~rent_moe,
  &amp;quot;01&amp;quot;, &amp;quot;Alabama&amp;quot;, 24476,  747, 136, 3,
  &amp;quot;02&amp;quot;, &amp;quot;Alaska&amp;quot;, 32940, 1200, 508, 13
)
us_rent_income2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 6
##   GEOID NAME    income_estimate rent_estimate income_moe rent_moe
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1 01    Alabama           24476           747        136        3
## 2 02    Alaska            32940          1200        508       13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O banco que queremos tem uma cara assim. Ele tem mais colunas novas e menos linhas, já que eu tinha no formato tidy uma variável chamada &amp;ldquo;variable&amp;rdquo; que guardava os valores renda e aluguel e duas colunas que guardavam os valores da estimativa e do moe. Agora, eu vou ter 4 colunas, duas para as estimativas de renda e aluguel e duas para os moes das mesmas variáveis. Como especificar isso para o banco todo? Usando &lt;code&gt;pivot_wider&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;us_rent_income %&amp;gt;% pivot_wider(names_from = variable, values_from = c(estimate, moe))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 52 x 6
##    GEOID NAME                 estimate_income estimate_rent moe_income moe_rent
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;                          &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 01    Alabama                        24476           747        136        3
##  2 02    Alaska                         32940          1200        508       13
##  3 04    Arizona                        27517           972        148        4
##  4 05    Arkansas                       23789           709        165        5
##  5 06    California                     29454          1358        109        3
##  6 08    Colorado                       32401          1125        109        5
##  7 09    Connecticut                    35326          1123        195        5
##  8 10    Delaware                       31560          1076        247       10
##  9 11    District of Columbia           43198          1424        681       17
## 10 12    Florida                        25952          1077         70        3
## # ... with 42 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As funções &lt;code&gt;pivot_&lt;/code&gt; tem diversos outros argumentos e cobrem diversos casos de uso. Vejam este exemplo da documentação de &lt;code&gt;pivot_longer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;anscombe
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    x1 x2 x3 x4    y1   y2    y3    y4
## 1  10 10 10  8  8.04 9.14  7.46  6.58
## 2   8  8  8  8  6.95 8.14  6.77  5.76
## 3  13 13 13  8  7.58 8.74 12.74  7.71
## 4   9  9  9  8  8.81 8.77  7.11  8.84
## 5  11 11 11  8  8.33 9.26  7.81  8.47
## 6  14 14 14  8  9.96 8.10  8.84  7.04
## 7   6  6  6  8  7.24 6.13  6.08  5.25
## 8   4  4  4 19  4.26 3.10  5.39 12.50
## 9  12 12 12  8 10.84 9.13  8.15  5.56
## 10  7  7  7  8  4.82 7.26  6.42  7.91
## 11  5  5  5  8  5.68 4.74  5.73  6.89
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos transformar esse banco de dados rapidamente usando um dos argumentos de &lt;code&gt;pivot_longer&lt;/code&gt;, chamado &lt;code&gt;names_pattern&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;anscombe %&amp;gt;% pivot_longer(everything(),
                          names_to = c(&amp;quot;.value&amp;quot;, &amp;quot;set&amp;quot;),
                          names_pattern = &amp;quot;(.)(.)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 44 x 3
##    set       x     y
##    &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 1        10  8.04
##  2 2        10  9.14
##  3 3        10  7.46
##  4 4         8  6.58
##  5 1         8  6.95
##  6 2         8  8.14
##  7 3         8  6.77
##  8 4         8  5.76
##  9 1        13  7.58
## 10 2        13  8.74
## # ... with 34 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esse exemplo é interessante, porque ele se aproveita de uma &amp;ldquo;regular expression&amp;rdquo;, tema da parte do nosso curso em que falaremos sobre manipulação de strings com o &lt;code&gt;stringr&lt;/code&gt;. Resumidas as contas, as colunas se chamam &amp;ldquo;x1, x2, x3 &amp;hellip;&amp;rdquo; e a string &amp;ldquo;(.)(.)&amp;rdquo; indica que há dois &amp;ldquo;grupos&amp;rdquo; formados por um caractere cada. A string &amp;ldquo;.value&amp;rdquo; que vai no argumento de cima é um atalho da função para dizer &amp;ldquo;pegue o valor de todas as células das variáveis selecionadas&amp;rdquo;, aqui, todas. Ou seja, ele indica para a função que o primeiro caractere &amp;ldquo;x&amp;rdquo; ou &amp;ldquo;y&amp;rdquo; definirá uma nova variável e armazenará os valores das celulas, enquanto o segundo grupo &amp;ldquo;1&amp;rdquo;, &amp;ldquo;2&amp;rdquo;, &amp;ldquo;3&amp;rdquo; ou &amp;ldquo;4&amp;rdquo; formará uma segunda variável chamada &amp;ldquo;set&amp;rdquo; que contém apenas os nomes das colunas. Deu um nó na cabeça?&lt;/p&gt;
&lt;p&gt;Uma última preocupação ao utilizar a reformatação de dados é o que ocorre com os valores &lt;code&gt;NA&lt;/code&gt;. Vejamos este exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acoes &amp;lt;- tibble(
  ano   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
  qdr   = c(   1,    2,    3,    4,    2,    3,    4),
  lucro = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existem dois tipos de valor nulo, &lt;strong&gt;explícito&lt;/strong&gt; se diz de um valor nulo como aquele NA que aparece na variável lucro. &lt;strong&gt;Implícito&lt;/strong&gt; é o valor que ocorre no primeiro quadrimestre de 2016, onde sequer foi adicionada uma linha no banco de dados. Os valores implícitos são muito sacanas, porque eles não são imediatamente visíveis.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acoes %&amp;gt;% 
  pivot_wider(names_from = ano, values_from = lucro)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 3
##     qdr `2015` `2016`
##   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1     1   1.88  NA   
## 2     2   0.59   0.92
## 3     3   0.35   0.17
## 4     4  NA      2.66
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ao transformar o banco, o valor implícito ficou explícito. Caso você não esteja interessado neste valor, você pode passar o &lt;code&gt;values_drop_na&lt;/code&gt; durante a transformação de volta ao formato original.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acoes %&amp;gt;% 
  pivot_wider(names_from = ano, values_from = lucro) %&amp;gt;% 
  pivot_longer(c(`2015`, `2016`),
               names_to = &amp;quot;ano&amp;quot;,
               values_to = &amp;quot;lucro&amp;quot;,
               values_drop_na = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##     qdr ano   lucro
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1 2015   1.88
## 2     2 2015   0.59
## 3     2 2016   0.92
## 4     3 2015   0.35
## 5     3 2016   0.17
## 6     4 2016   2.66
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Que faz os valores missing desaparecerem do resultado.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;complete&lt;/code&gt; pode ser usada pra tornar valores implícitos, explícitos! A função toma todas as colunas pedidas e verifica todas as combinações possíveis de valores, preenchendo as lacunas com &lt;code&gt;NA&lt;/code&gt;. Cuidado ao utilizar complete com valores numéricos ou conjuntos de colunas com muitas combinações possíveis, pois o número de combinações pode ser infinitamente grande e travar sua sessão!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acoes %&amp;gt;% complete(ano, qdr)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 3
##     ano   qdr lucro
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1  2015     1  1.88
## 2  2015     2  0.59
## 3  2015     3  0.35
## 4  2015     4 NA   
## 5  2016     1 NA   
## 6  2016     2  0.92
## 7  2016     3  0.17
## 8  2016     4  2.66
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pra encerrar, &lt;code&gt;fill&lt;/code&gt; serve para aqueles casos em que um valor missing indica que a última observação deve ser repetida. Pesquisadores brasileiros das antigas podem lembrar-se do Censo de 1991, em que o IBGE registrava os arquivos de domícilio e pessoas com esse sistema. Em inglês, isso se chama LOCF, ou &amp;ldquo;last observation carried forward&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;treatment &amp;lt;- tribble(
  ~ person,           ~ treatment, ~response,
  &amp;quot;Derrick Whitmore&amp;quot;, 1,           7,
  NA,                 2,           10,
  NA,                 3,           9,
  &amp;quot;Katherine Burke&amp;quot;,  1,           4
)
treatment
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 3
##   person           treatment response
##   &amp;lt;chr&amp;gt;                &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1 Derrick Whitmore         1        7
## 2 &amp;lt;NA&amp;gt;                     2       10
## 3 &amp;lt;NA&amp;gt;                     3        9
## 4 Katherine Burke          1        4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;treatment %&amp;gt;% fill(person)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 3
##   person           treatment response
##   &amp;lt;chr&amp;gt;                &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1 Derrick Whitmore         1        7
## 2 Derrick Whitmore         2       10
## 3 Derrick Whitmore         3        9
## 4 Katherine Burke          1        4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;tidyr&lt;/code&gt; tem também outras funcionalidades relevantes para modelagem estatística, mas acho que isso sai um pouco do escopo do curso. Quem sabe a gente não faz um curso posterior só sobre modelagem no tidyverse?&lt;/p&gt;
&lt;h2 id=&#34;revisão&#34;&gt;Revisão&lt;/h2&gt;
&lt;h3 id=&#34;readr-1&#34;&gt;&lt;code&gt;readr&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;O pacote &lt;code&gt;readr&lt;/code&gt; apresenta uma família de funções para substituir as funções do &lt;code&gt;base&lt;/code&gt; relacionadas a importação de arquivos em formato texto, seja delimitado ou largura-fixa. São elas,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read_delim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_csv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_csv2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_tsv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_table&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read_fwf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E assim sucessivamente. Durante o processo de importação, você pode querer especificar o tipo de coluna com &lt;code&gt;cols&lt;/code&gt; ou &lt;code&gt;cols_only&lt;/code&gt;, usando o argumento &lt;code&gt;col_types&lt;/code&gt;. Ou use uma string do tipo &amp;ldquo;ddcdiDT&amp;rdquo; em que cada letra é um tipo de variável.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;col_integer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;col_double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;col_factor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;col_character&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Etc. Você também pode querer definir características de localização, como a codificação de caracteres, os separadores de decimal e de milhar e etc. A melhor forma de fazer isso é definir um &lt;code&gt;locale&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ah, e você sempre pode salvar com &lt;code&gt;write_&lt;/code&gt;, inclusive salvando/lendo compactado para &lt;code&gt;bzip&lt;/code&gt;, &lt;code&gt;gzip&lt;/code&gt; ou &lt;code&gt;xzip&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;tibble&#34;&gt;&lt;code&gt;tibble&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Tibbles são uma versão do data.frame com algumas regrinhas novas. Vou apenas repetí-las aqui de forma resumida.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tibbles tem um método print mais bonito e amigável, especialmente para bancos com muitas observações e variáveis.&lt;/li&gt;
&lt;li&gt;elas são estritas com operações de subsetting com &lt;code&gt;[&lt;/code&gt; e &lt;code&gt;$&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;elas não aceita a reciclagem de argumento de tamanho diferente de 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tidyr-1&#34;&gt;&lt;code&gt;tidyr&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;tidyr&lt;/code&gt; é um pacote de reformatação de bancos, criando novas linhas e colunas a partir da reorganização das variáveis e valores existentes. Suas principais operações são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pivot_longer&lt;/code&gt; para converter colunas em linhas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pivot_wider&lt;/code&gt; para converter linhas em colunas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;separate&lt;/code&gt; para separar uma coluna em várias com base em caracteres&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unite&lt;/code&gt; para unir diversas colunas em uma com base em caracteres&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ufa. Acabou né? Posso ir dormir já? Claro, só fazer uns exercícios!&lt;/p&gt;
&lt;h2 id=&#34;exercícios&#34;&gt;Exercícios&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Como você importaria o banco &amp;ldquo;epa78.csv&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- readr_example(&amp;quot;epa78.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Importe o banco &amp;ldquo;challenge.csv&amp;rdquo; e resolva os problemas com o tipo da coluna.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- readr_example(&amp;quot;challenge.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Com o banco sala_aula dado a seguir, transforme-o para que ele contenha as variáveis nome, avaliação e nota.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sala_aula &amp;lt;- tribble(
 ~name,    ~teste1,  ~teste2,  ~prova1,
 &amp;quot;Billy&amp;quot;,  &amp;quot;&amp;lt;NA&amp;gt;&amp;quot;,   &amp;quot;D&amp;quot;   ,   &amp;quot;C&amp;quot;,
 &amp;quot;Suzy&amp;quot;,   &amp;quot;F&amp;quot;,      &amp;quot;&amp;lt;NA&amp;gt;&amp;quot;,   &amp;quot;&amp;lt;NA&amp;gt;&amp;quot;,
 &amp;quot;Lionel&amp;quot;, &amp;quot;B&amp;quot;,      &amp;quot;C&amp;quot;   ,   &amp;quot;B&amp;quot;,
 &amp;quot;Jenny&amp;quot;,  &amp;quot;A&amp;quot;,      &amp;quot;A&amp;quot;   ,   &amp;quot;B&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Transforme o banco &lt;code&gt;relig_income&lt;/code&gt; para que ele contenha as colunas religião, renda e frequência.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;relig_income
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18 x 11
##    religion `&amp;lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`
##    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
##  1 Agnostic      27        34        60        81        76       137        122
##  2 Atheist       12        27        37        52        35        70         73
##  3 Buddhist      27        21        30        34        33        58         62
##  4 Catholic     418       617       732       670       638      1116        949
##  5 Don’t k~      15        14        15        11        10        35         21
##  6 Evangel~     575       869      1064       982       881      1486        949
##  7 Hindu          1         9         7         9        11        34         47
##  8 Histori~     228       244       236       238       197       223        131
##  9 Jehovah~      20        27        24        24        21        30         15
## 10 Jewish        19        19        25        25        30        95         69
## 11 Mainlin~     289       495       619       655       651      1107        939
## 12 Mormon        29        40        48        51        56       112         85
## 13 Muslim         6         7         9        10         9        23         16
## 14 Orthodox      13        17        23        32        32        47         38
## 15 Other C~       9         7        11        13        13        14         18
## 16 Other F~      20        33        40        46        49        63         46
## 17 Other W~       5         2         3         4         2         7          3
## 18 Unaffil~     217       299       374       365       341       528        407
## # ... with 3 more variables: $100-150k &amp;lt;dbl&amp;gt;, &amp;gt;150k &amp;lt;dbl&amp;gt;,
## #   Don&#39;t know/refused &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Transforme o banco &lt;code&gt;billboard&lt;/code&gt; para que ele contenha apenas uma coluna &amp;ldquo;semana&amp;rdquo; e uma coluna com a posição da música no ranking.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Dica, você pode selecionar várias colunas usando o atalho wk1:wk76
billboard 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 317 x 79
##    artist   track   date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;date&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 2 Pac    Baby D~ 2000-02-26      87    82    72    77    87    94    99    NA
##  2 2Ge+her  The Ha~ 2000-09-02      91    87    92    NA    NA    NA    NA    NA
##  3 3 Doors~ Krypto~ 2000-04-08      81    70    68    67    66    57    54    53
##  4 3 Doors~ Loser   2000-10-21      76    76    72    69    67    65    55    59
##  5 504 Boyz Wobble~ 2000-04-15      57    34    25    17    17    31    36    49
##  6 98^0     Give M~ 2000-08-19      51    39    34    26    26    19     2     2
##  7 A*Teens  Dancin~ 2000-07-08      97    97    96    95   100    NA    NA    NA
##  8 Aaliyah  I Don&#39;~ 2000-01-29      84    62    51    41    38    35    35    38
##  9 Aaliyah  Try Ag~ 2000-03-18      59    53    38    28    21    18    16    14
## 10 Adams, ~ Open M~ 2000-08-26      76    76    74    69    68    67    61    58
## # ... with 307 more rows, and 68 more variables: wk9 &amp;lt;dbl&amp;gt;, wk10 &amp;lt;dbl&amp;gt;,
## #   wk11 &amp;lt;dbl&amp;gt;, wk12 &amp;lt;dbl&amp;gt;, wk13 &amp;lt;dbl&amp;gt;, wk14 &amp;lt;dbl&amp;gt;, wk15 &amp;lt;dbl&amp;gt;, wk16 &amp;lt;dbl&amp;gt;,
## #   wk17 &amp;lt;dbl&amp;gt;, wk18 &amp;lt;dbl&amp;gt;, wk19 &amp;lt;dbl&amp;gt;, wk20 &amp;lt;dbl&amp;gt;, wk21 &amp;lt;dbl&amp;gt;, wk22 &amp;lt;dbl&amp;gt;,
## #   wk23 &amp;lt;dbl&amp;gt;, wk24 &amp;lt;dbl&amp;gt;, wk25 &amp;lt;dbl&amp;gt;, wk26 &amp;lt;dbl&amp;gt;, wk27 &amp;lt;dbl&amp;gt;, wk28 &amp;lt;dbl&amp;gt;,
## #   wk29 &amp;lt;dbl&amp;gt;, wk30 &amp;lt;dbl&amp;gt;, wk31 &amp;lt;dbl&amp;gt;, wk32 &amp;lt;dbl&amp;gt;, wk33 &amp;lt;dbl&amp;gt;, wk34 &amp;lt;dbl&amp;gt;,
## #   wk35 &amp;lt;dbl&amp;gt;, wk36 &amp;lt;dbl&amp;gt;, wk37 &amp;lt;dbl&amp;gt;, wk38 &amp;lt;dbl&amp;gt;, wk39 &amp;lt;dbl&amp;gt;, wk40 &amp;lt;dbl&amp;gt;,
## #   wk41 &amp;lt;dbl&amp;gt;, wk42 &amp;lt;dbl&amp;gt;, wk43 &amp;lt;dbl&amp;gt;, wk44 &amp;lt;dbl&amp;gt;, wk45 &amp;lt;dbl&amp;gt;, wk46 &amp;lt;dbl&amp;gt;,
## #   wk47 &amp;lt;dbl&amp;gt;, wk48 &amp;lt;dbl&amp;gt;, wk49 &amp;lt;dbl&amp;gt;, wk50 &amp;lt;dbl&amp;gt;, wk51 &amp;lt;dbl&amp;gt;, wk52 &amp;lt;dbl&amp;gt;,
## #   wk53 &amp;lt;dbl&amp;gt;, wk54 &amp;lt;dbl&amp;gt;, wk55 &amp;lt;dbl&amp;gt;, wk56 &amp;lt;dbl&amp;gt;, wk57 &amp;lt;dbl&amp;gt;, wk58 &amp;lt;dbl&amp;gt;,
## #   wk59 &amp;lt;dbl&amp;gt;, wk60 &amp;lt;dbl&amp;gt;, wk61 &amp;lt;dbl&amp;gt;, wk62 &amp;lt;dbl&amp;gt;, wk63 &amp;lt;dbl&amp;gt;, wk64 &amp;lt;dbl&amp;gt;,
## #   wk65 &amp;lt;dbl&amp;gt;, wk66 &amp;lt;lgl&amp;gt;, wk67 &amp;lt;lgl&amp;gt;, wk68 &amp;lt;lgl&amp;gt;, wk69 &amp;lt;lgl&amp;gt;, wk70 &amp;lt;lgl&amp;gt;,
## #   wk71 &amp;lt;lgl&amp;gt;, wk72 &amp;lt;lgl&amp;gt;, wk73 &amp;lt;lgl&amp;gt;, wk74 &amp;lt;lgl&amp;gt;, wk75 &amp;lt;lgl&amp;gt;, wk76 &amp;lt;lgl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;
&lt;p&gt;Experimente fazer o caminho inverso dos exercícios 3 a 5, devolvendo os datasets ao seu formato original. O que você observou?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O que os argumentos &lt;code&gt;extra&lt;/code&gt; e &lt;code&gt;fill&lt;/code&gt; em separate fazem? Utilize o exemplo a seguir como guia.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e,f,g&amp;quot;, &amp;quot;h,i,j&amp;quot;)) %&amp;gt;% 
  separate(x, c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;tres&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Expected 3 pieces. Additional pieces discarded in 1 rows [2].
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   um    dois  tres 
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     f    
## 3 h     i     j
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e&amp;quot;, &amp;quot;f,g,i&amp;quot;)) %&amp;gt;% 
  separate(x, c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;tres&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Expected 3 pieces. Missing pieces filled with `NA` in 1 rows [2].
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   um    dois  tres 
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     &amp;lt;NA&amp;gt; 
## 3 f     g     i
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;
&lt;p&gt;Tanto &lt;code&gt;unite&lt;/code&gt; como &lt;code&gt;separate&lt;/code&gt; possuem um argumento &lt;code&gt;remove&lt;/code&gt;. Pra que ele serve e quando você o utilizaria no valor &lt;code&gt;FALSE&lt;/code&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compare o argumento &lt;code&gt;values_fill&lt;/code&gt; em &lt;code&gt;pivot_wider&lt;/code&gt; e &lt;code&gt;fill&lt;/code&gt; em &lt;code&gt;complete&lt;/code&gt;. Qual é a diferença?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;agradecimentos&#34;&gt;Agradecimentos&lt;/h2&gt;
&lt;p&gt;Esse material é uma adaptação livre das vinhetas dos pacotes &lt;code&gt;tidyr&lt;/code&gt;, &lt;code&gt;readr&lt;/code&gt; e &lt;code&gt;tibble&lt;/code&gt; e do capítulo Tidy Data do &lt;a href=&#34;https://r4ds.had.co.nz/tidy-data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R for Data Science&lt;/a&gt;, de Wickham &amp;amp; Grolemund.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>stringr, forcats e dplyr</title>
      <link>https://laddem.github.io/courses/tidyverse/dia2/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/courses/tidyverse/dia2/</guid>
      <description>&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://laddem.github.io/rmarkdown-libs/str_view/str_view.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://laddem.github.io/rmarkdown-libs/str_view-binding/str_view.js&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;operações-em-variáveis-e-bancos-de-dados&#34;&gt;Operações em variáveis e bancos de dados&lt;/h2&gt;
&lt;p&gt;Hoje vamos apresentar dois pacotes com finalidades mais específicas para trabalhar com variáveis de tipo caractere e fator e um pacote super importante para as operações com bancos de dados.&lt;/p&gt;
&lt;p&gt;O pacote &lt;code&gt;stringr&lt;/code&gt; é uma série de adaptações da biblioteca &lt;code&gt;stringi&lt;/code&gt; e serve para a manipulação de variáveis texto, incluindo funções para detecção, modificação, substituição, remoção de texto em variáveis caractere. Para dominar esse assunto, é necessário compreender o conceito de “regex,” ou “expressão regular,” que foge um pouco do escopo do curso, mas que será introduzido brevemente.&lt;/p&gt;
&lt;p&gt;O pacote &lt;code&gt;forcats&lt;/code&gt; contém uma série de funções para trabalhar com o tipo &lt;code&gt;factor&lt;/code&gt;. São funções que facilitam operações envolvendo esse tipo de variável, como contagens, troca dos nomes das categorias, agrupamento de categorias, recodificação, plotagem, etc.&lt;/p&gt;
&lt;p&gt;O pacote &lt;code&gt;dplyr&lt;/code&gt; é um dos pilares do &lt;code&gt;tidyverse&lt;/code&gt; e ele tem dois papéis principais: operações de manipulação de banco de dados simples e operações de bancos de dados relacionais. No primeiro tipo são incluídas as operações de criação e modificação de variáveis, medidas resumo globais e por grupos, seleção de variáveis, mudança da ordem das linhas e colunas, etc. No segundo tipo, são as operações de tipo &lt;code&gt;_join&lt;/code&gt;, em que uma variável chave é utilizada para combinar registros de dois bancos de dados distintos.&lt;/p&gt;
&lt;p&gt;Os pacotes &lt;code&gt;stringr&lt;/code&gt; e &lt;code&gt;forcats&lt;/code&gt; são mais diretos, mas o &lt;code&gt;dplyr&lt;/code&gt; pode representar um certo nível de abstração que pode incomodar usuários de longa data do R, portanto, vamos nos esforçar para demonstrar as vantagens de mudar seu workflow para incluir as funções desse pacote através de comparações com o R base.&lt;/p&gt;
&lt;h2 id=&#34;dplyr&#34;&gt;&lt;code&gt;dplyr&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;dplyr-para-manipulação-de-dados&#34;&gt;&lt;code&gt;dplyr&lt;/code&gt; para manipulação de dados&lt;/h3&gt;
&lt;p&gt;Talvez o pacote mais utilizado de todo o tidyverse, &lt;code&gt;dplyr&lt;/code&gt; é um pacote de manipulação de bancos de dados inspirado pela linguagem SQL. A ideia é concatenar operações de &lt;strong&gt;seleção de variáveis&lt;/strong&gt;, &lt;strong&gt;filtragem de observação&lt;/strong&gt;, &lt;strong&gt;arranjo e ordenamento&lt;/strong&gt;, &lt;strong&gt;derivação de variáveis&lt;/strong&gt;, &lt;strong&gt;computação de medidas resumo&lt;/strong&gt; para o banco todo ou para &lt;strong&gt;grupos&lt;/strong&gt;. As funções básicas e mais utilizadas são, portanto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_by&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para praticar, vamos usar o dataset &lt;code&gt;flights&lt;/code&gt;, que contém informações sobre os vôos saídos de Nova Iorque em 2013.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(nycflights13)
library(dplyr)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;dplyr&#39;

## The following objects are masked from &#39;package:stats&#39;:
## 
##     filter, lag

## The following objects are masked from &#39;package:base&#39;:
## 
##     intersect, setdiff, setequal, union
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830            819
##  2  2013     1     1      533            529         4      850            830
##  3  2013     1     1      542            540         2      923            850
##  4  2013     1     1      544            545        -1     1004           1022
##  5  2013     1     1      554            600        -6      812            837
##  6  2013     1     1      554            558        -4      740            728
##  7  2013     1     1      555            600        -5      913            854
##  8  2013     1     1      557            600        -3      709            723
##  9  2013     1     1      557            600        -3      838            846
## 10  2013     1     1      558            600        -2      753            745
## # ... with 336,766 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;glimpse(flights)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 336,776
## Columns: 19
## $ year           &amp;lt;int&amp;gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2~
## $ month          &amp;lt;int&amp;gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~
## $ day            &amp;lt;int&amp;gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~
## $ dep_time       &amp;lt;int&amp;gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, ~
## $ sched_dep_time &amp;lt;int&amp;gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, ~
## $ dep_delay      &amp;lt;dbl&amp;gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1~
## $ arr_time       &amp;lt;int&amp;gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,~
## $ sched_arr_time &amp;lt;int&amp;gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,~
## $ arr_delay      &amp;lt;dbl&amp;gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1~
## $ carrier        &amp;lt;chr&amp;gt; &amp;quot;UA&amp;quot;, &amp;quot;UA&amp;quot;, &amp;quot;AA&amp;quot;, &amp;quot;B6&amp;quot;, &amp;quot;DL&amp;quot;, &amp;quot;UA&amp;quot;, &amp;quot;B6&amp;quot;, &amp;quot;EV&amp;quot;, &amp;quot;B6&amp;quot;, &amp;quot;~
## $ flight         &amp;lt;int&amp;gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4~
## $ tailnum        &amp;lt;chr&amp;gt; &amp;quot;N14228&amp;quot;, &amp;quot;N24211&amp;quot;, &amp;quot;N619AA&amp;quot;, &amp;quot;N804JB&amp;quot;, &amp;quot;N668DN&amp;quot;, &amp;quot;N394~
## $ origin         &amp;lt;chr&amp;gt; &amp;quot;EWR&amp;quot;, &amp;quot;LGA&amp;quot;, &amp;quot;JFK&amp;quot;, &amp;quot;JFK&amp;quot;, &amp;quot;LGA&amp;quot;, &amp;quot;EWR&amp;quot;, &amp;quot;EWR&amp;quot;, &amp;quot;LGA&amp;quot;,~
## $ dest           &amp;lt;chr&amp;gt; &amp;quot;IAH&amp;quot;, &amp;quot;IAH&amp;quot;, &amp;quot;MIA&amp;quot;, &amp;quot;BQN&amp;quot;, &amp;quot;ATL&amp;quot;, &amp;quot;ORD&amp;quot;, &amp;quot;FLL&amp;quot;, &amp;quot;IAD&amp;quot;,~
## $ air_time       &amp;lt;dbl&amp;gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1~
## $ distance       &amp;lt;dbl&amp;gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, ~
## $ hour           &amp;lt;dbl&amp;gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6~
## $ minute         &amp;lt;dbl&amp;gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0~
## $ time_hour      &amp;lt;dttm&amp;gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos filtrar nossas linhas: &lt;code&gt;filter&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos de primeiro de janeiro
flights %&amp;gt;% filter(month == 1, day == 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 842 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830            819
##  2  2013     1     1      533            529         4      850            830
##  3  2013     1     1      542            540         2      923            850
##  4  2013     1     1      544            545        -1     1004           1022
##  5  2013     1     1      554            600        -6      812            837
##  6  2013     1     1      554            558        -4      740            728
##  7  2013     1     1      555            600        -5      913            854
##  8  2013     1     1      557            600        -3      709            723
##  9  2013     1     1      557            600        -3      838            846
## 10  2013     1     1      558            600        -2      753            745
## # ... with 832 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos a partir de junho
flights %&amp;gt;% filter(month &amp;gt; 6)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 170,618 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013    10     1      447            500       -13      614            648
##  2  2013    10     1      522            517         5      735            757
##  3  2013    10     1      536            545        -9      809            855
##  4  2013    10     1      539            545        -6      801            827
##  5  2013    10     1      539            545        -6      917            933
##  6  2013    10     1      544            550        -6      912            932
##  7  2013    10     1      549            600       -11      653            716
##  8  2013    10     1      550            600       -10      648            700
##  9  2013    10     1      550            600       -10      649            659
## 10  2013    10     1      551            600        -9      727            730
## # ... with 170,608 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos saídos do aeroporto JFK
flights %&amp;gt;% filter(origin == &amp;quot;JFK&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 111,279 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      542            540         2      923            850
##  2  2013     1     1      544            545        -1     1004           1022
##  3  2013     1     1      557            600        -3      838            846
##  4  2013     1     1      558            600        -2      849            851
##  5  2013     1     1      558            600        -2      853            856
##  6  2013     1     1      558            600        -2      924            917
##  7  2013     1     1      559            559         0      702            706
##  8  2013     1     1      606            610        -4      837            845
##  9  2013     1     1      611            600        11      945            931
## 10  2013     1     1      613            610         3      925            921
## # ... with 111,269 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos com destino ao aeroporto de Albuquerque
flights %&amp;gt;% filter(dest == &amp;quot;ABQ&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 254 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013    10     1     1955           2001        -6     2213           2248
##  2  2013    10     2     2010           2001         9     2230           2248
##  3  2013    10     3     1955           2001        -6     2232           2248
##  4  2013    10     4     2017           2001        16     2304           2248
##  5  2013    10     5     1959           1959         0     2226           2246
##  6  2013    10     6     1959           2001        -2     2234           2248
##  7  2013    10     7     2002           2001         1     2233           2248
##  8  2013    10     8     1957           2001        -4     2216           2248
##  9  2013    10     9     1957           2001        -4     2220           2248
## 10  2013    10    10     2011           2001        10     2235           2248
## # ... with 244 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos com atraso de até 10 minutos
flights %&amp;gt;% filter(dep_delay &amp;lt;= 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 245,687 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830            819
##  2  2013     1     1      533            529         4      850            830
##  3  2013     1     1      542            540         2      923            850
##  4  2013     1     1      544            545        -1     1004           1022
##  5  2013     1     1      554            600        -6      812            837
##  6  2013     1     1      554            558        -4      740            728
##  7  2013     1     1      555            600        -5      913            854
##  8  2013     1     1      557            600        -3      709            723
##  9  2013     1     1      557            600        -3      838            846
## 10  2013     1     1      558            600        -2      753            745
## # ... with 245,677 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos com atraso de cerca de 10 minutos
flights %&amp;gt;% filter(near(dep_delay, 10, tol = 2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,677 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      611            600        11      945            931
##  2  2013     1     1      709            700         9      852            832
##  3  2013     1     1      826            817         9     1145           1158
##  4  2013     1     1      851            840        11     1215           1206
##  5  2013     1     1     1011           1001        10     1133           1128
##  6  2013     1     1     1208           1158        10     1540           1502
##  7  2013     1     1     1240           1229        11     1451           1428
##  8  2013     1     1     1310           1300        10     1559           1554
##  9  2013     1     1     1330           1321         9     1613           1536
## 10  2013     1     1     1511           1500        11     1753           1742
## # ... with 8,667 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos que ocorreram entre abril e maio
flights %&amp;gt;% filter(between(month, 4, 5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 57,126 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     4     1      454            500        -6      636            640
##  2  2013     4     1      509            515        -6      743            814
##  3  2013     4     1      526            530        -4      812            827
##  4  2013     4     1      534            540        -6      833            850
##  5  2013     4     1      542            545        -3      914            920
##  6  2013     4     1      543            545        -2      921            927
##  7  2013     4     1      551            600        -9      748            659
##  8  2013     4     1      552            600        -8      641            701
##  9  2013     4     1      553            600        -7      725            735
## 10  2013     4     1      554            600        -6      752            805
## # ... with 57,116 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos combinar várias condições usando operadores lógicos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos até 15 de abril ou até 15 de maio
flights %&amp;gt;% filter(
  between(month, 4, 5), # mesmo que usar &amp;amp;
  between(day, 1, 15)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 28,176 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     4     1      454            500        -6      636            640
##  2  2013     4     1      509            515        -6      743            814
##  3  2013     4     1      526            530        -4      812            827
##  4  2013     4     1      534            540        -6      833            850
##  5  2013     4     1      542            545        -3      914            920
##  6  2013     4     1      543            545        -2      921            927
##  7  2013     4     1      551            600        -9      748            659
##  8  2013     4     1      552            600        -8      641            701
##  9  2013     4     1      553            600        -7      725            735
## 10  2013     4     1      554            600        -6      752            805
## # ... with 28,166 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos entre 15 de abril e 15 de maio
flights %&amp;gt;% filter(
  month == 4 &amp;amp; between(day, 15, 30) | # OU
  month == 5 &amp;amp; between(day, 1, 15)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 29,101 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     4    15        2           2359         3      341            339
##  2  2013     4    15      453            500        -7      639            640
##  3  2013     4    15      511            515        -4      741            802
##  4  2013     4    15      527            530        -3      806            813
##  5  2013     4    15      527            529        -2      750            743
##  6  2013     4    15      537            540        -3      846            840
##  7  2013     4    15      542            545        -3      931            927
##  8  2013     4    15      551            600        -9      728            758
##  9  2013     4    15      552            600        -8      835            850
## 10  2013     4    15      552            600        -8      648            701
## # ... with 29,091 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos em todas os primeiros 7 dias de cada mês, exceto em janeiro e dezembro
flights %&amp;gt;% filter(
  between(day, 1, 7),
  !month %in% c(1, 12)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 64,365 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013    10     1      447            500       -13      614            648
##  2  2013    10     1      522            517         5      735            757
##  3  2013    10     1      536            545        -9      809            855
##  4  2013    10     1      539            545        -6      801            827
##  5  2013    10     1      539            545        -6      917            933
##  6  2013    10     1      544            550        -6      912            932
##  7  2013    10     1      549            600       -11      653            716
##  8  2013    10     1      550            600       -10      648            700
##  9  2013    10     1      550            600       -10      649            659
## 10  2013    10     1      551            600        -9      727            730
## # ... with 64,355 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos saidos de JFK, excluindo aqueles para os quais não tem informações de horário de saída
flights %&amp;gt;% filter(
  origin == &amp;quot;JFK&amp;quot;, !is.na(dep_time)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 109,416 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      542            540         2      923            850
##  2  2013     1     1      544            545        -1     1004           1022
##  3  2013     1     1      557            600        -3      838            846
##  4  2013     1     1      558            600        -2      849            851
##  5  2013     1     1      558            600        -2      853            856
##  6  2013     1     1      558            600        -2      924            917
##  7  2013     1     1      559            559         0      702            706
##  8  2013     1     1      606            610        -4      837            845
##  9  2013     1     1      611            600        11      945            931
## 10  2013     1     1      613            610         3      925            921
## # ... with 109,406 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Voos com mais de 30 minutos de atraso em janeiro ou dezembro
flights %&amp;gt;% filter(
  dep_delay &amp;gt; 30, xor(month == 1, month == 12)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,221 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      732            645        47     1011            941
##  2  2013     1     1      749            710        39      939            850
##  3  2013     1     1      811            630       101     1047            830
##  4  2013     1     1      826            715        71     1136           1045
##  5  2013     1     1      848           1835       853     1001           1950
##  6  2013     1     1      903            820        43     1045            955
##  7  2013     1     1      909            810        59     1331           1315
##  8  2013     1     1      953            921        32     1320           1241
##  9  2013     1     1      957            733       144     1056            853
## 10  2013     1     1     1025            951        34     1258           1302
## # ... with 8,211 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E assim sucessivamente.&lt;/p&gt;
&lt;p&gt;Da mesma forma, temos &lt;code&gt;select&lt;/code&gt; para selecionar as variáveis do banco. As duas grandes novidades são que você não precisa utilizar aspas na seleção de variáveis e que &lt;code&gt;select&lt;/code&gt; introduz várias &lt;code&gt;helper functions&lt;/code&gt; para facilitar a seleção de variáveis parecidas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Selecionar as colunas ano, mes, dia, horario de saida e horario de chegada
flights %&amp;gt;% select(year, month, day, dep_time, arr_time)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 5
##     year month   day dep_time arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517      830
##  2  2013     1     1      533      850
##  3  2013     1     1      542      923
##  4  2013     1     1      544     1004
##  5  2013     1     1      554      812
##  6  2013     1     1      554      740
##  7  2013     1     1      555      913
##  8  2013     1     1      557      709
##  9  2013     1     1      557      838
## 10  2013     1     1      558      753
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Utilizando helpers
flights %&amp;gt;% select(year:dep_time, arr_time)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 5
##     year month   day dep_time arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517      830
##  2  2013     1     1      533      850
##  3  2013     1     1      542      923
##  4  2013     1     1      544     1004
##  5  2013     1     1      554      812
##  6  2013     1     1      554      740
##  7  2013     1     1      555      913
##  8  2013     1     1      557      709
##  9  2013     1     1      557      838
## 10  2013     1     1      558      753
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Mais helpers
flights %&amp;gt;% select(year:day, starts_with(&amp;quot;dep&amp;quot;), starts_with(&amp;quot;arr&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 7
##     year month   day dep_time dep_delay arr_time arr_delay
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1  2013     1     1      517         2      830        11
##  2  2013     1     1      533         4      850        20
##  3  2013     1     1      542         2      923        33
##  4  2013     1     1      544        -1     1004       -18
##  5  2013     1     1      554        -6      812       -25
##  6  2013     1     1      554        -4      740        12
##  7  2013     1     1      555        -5      913        19
##  8  2013     1     1      557        -3      709       -14
##  9  2013     1     1      557        -3      838        -8
## 10  2013     1     1      558        -2      753         8
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% select(year:day, ends_with(&amp;quot;time&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 8
##     year month   day dep_time sched_dep_time arr_time sched_arr_time air_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;
##  1  2013     1     1      517            515      830            819      227
##  2  2013     1     1      533            529      850            830      227
##  3  2013     1     1      542            540      923            850      160
##  4  2013     1     1      544            545     1004           1022      183
##  5  2013     1     1      554            600      812            837      116
##  6  2013     1     1      554            558      740            728      150
##  7  2013     1     1      555            600      913            854      158
##  8  2013     1     1      557            600      709            723       53
##  9  2013     1     1      557            600      838            846      140
## 10  2013     1     1      558            600      753            745      138
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% select(year:day, c(ends_with(&amp;quot;time&amp;quot;)) &amp;amp; !contains(&amp;quot;sched&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 6
##     year month   day dep_time arr_time air_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;
##  1  2013     1     1      517      830      227
##  2  2013     1     1      533      850      227
##  3  2013     1     1      542      923      160
##  4  2013     1     1      544     1004      183
##  5  2013     1     1      554      812      116
##  6  2013     1     1      554      740      150
##  7  2013     1     1      555      913      158
##  8  2013     1     1      557      709       53
##  9  2013     1     1      557      838      140
## 10  2013     1     1      558      753      138
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Você pode mudar o nome das colunas durante um call para select
flights %&amp;gt;% select(ano = year, mes = month, dia = day)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 3
##      ano   mes   dia
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1  2013     1     1
##  2  2013     1     1
##  3  2013     1     1
##  4  2013     1     1
##  5  2013     1     1
##  6  2013     1     1
##  7  2013     1     1
##  8  2013     1     1
##  9  2013     1     1
## 10  2013     1     1
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Ou você pode usar rename para mudar os nomes sem selecionar variáveis
flights %&amp;gt;% rename(ano = year, mes = month, dia = day)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##      ano   mes   dia dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830            819
##  2  2013     1     1      533            529         4      850            830
##  3  2013     1     1      542            540         2      923            850
##  4  2013     1     1      544            545        -1     1004           1022
##  5  2013     1     1      554            600        -6      812            837
##  6  2013     1     1      554            558        -4      740            728
##  7  2013     1     1      555            600        -5      913            854
##  8  2013     1     1      557            600        -3      709            723
##  9  2013     1     1      557            600        -3      838            846
## 10  2013     1     1      558            600        -2      753            745
## # ... with 336,766 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;São realmente muitas possibilidades, vejam a documentação e os exemplos em &lt;code&gt;?select&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Utilizando &lt;code&gt;arrange&lt;/code&gt; podemos facilmente organizar nosso banco a partir de variáveis de interesse:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Selecionar algumas variáveis e ver organizar de acordar com os mais adiantados
flights %&amp;gt;% 
  select(year:day,matches(&amp;quot;^dep|^arr&amp;quot;)) %&amp;gt;% 
  arrange(dep_delay, arr_delay)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 7
##     year month   day dep_time dep_delay arr_time arr_delay
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1  2013    12     7     2040       -43       40        48
##  2  2013     2     3     2022       -33     2240       -58
##  3  2013    11    10     1408       -32     1549       -10
##  4  2013     1    11     1900       -30     2233       -10
##  5  2013     1    29     1703       -27     1947       -10
##  6  2013     8     9      729       -26     1002         7
##  7  2013     3    30     2030       -25     2213       -37
##  8  2013    10    23     1907       -25     2143         0
##  9  2013     5     5      934       -24     1225       -44
## 10  2013     9    18     1631       -24     1812       -33
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Ou os mais atrasados
flights %&amp;gt;% 
  select(year:day,matches(&amp;quot;^dep|^arr&amp;quot;)) %&amp;gt;% 
  arrange(-dep_delay, -arr_delay)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 7
##     year month   day dep_time dep_delay arr_time arr_delay
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1  2013     1     9      641      1301     1242      1272
##  2  2013     6    15     1432      1137     1607      1127
##  3  2013     1    10     1121      1126     1239      1109
##  4  2013     9    20     1139      1014     1457      1007
##  5  2013     7    22      845      1005     1044       989
##  6  2013     4    10     1100       960     1342       931
##  7  2013     3    17     2321       911      135       915
##  8  2013     6    27      959       899     1236       850
##  9  2013     7    22     2257       898      121       895
## 10  2013    12     5      756       896     1058       878
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É basicamente isso, você pode especificar uma ou muitas colunas para organizar, decidir se a ordem é ascendente ou descendente e pronto.&lt;/p&gt;
&lt;p&gt;Utilizando &lt;code&gt;mutate&lt;/code&gt;, você cria variáveis derivadas das originais. Como &lt;code&gt;tibble&lt;/code&gt;, essa função avalia seus argumentos de maneira preguiçosa e sequencial, o que permite você criar variáveis derivadas umas das outras muito facilmente.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% 
  select(sched_dep_time, dep_time, sched_arr_time, arr_time) %&amp;gt;% 
  mutate(atraso_decolagem = dep_time - sched_dep_time,
         atraso_pouso = arr_time - sched_arr_time,
         atraso_dec_horas = atraso_decolagem / 60,
         atraso_pouso_horas = atraso_pouso / 60)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 8
##    sched_dep_time dep_time sched_arr_time arr_time atraso_decolagem atraso_pouso
##             &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;            &amp;lt;int&amp;gt;        &amp;lt;int&amp;gt;
##  1            515      517            819      830                2           11
##  2            529      533            830      850                4           20
##  3            540      542            850      923                2           73
##  4            545      544           1022     1004               -1          -18
##  5            600      554            837      812              -46          -25
##  6            558      554            728      740               -4           12
##  7            600      555            854      913              -45           59
##  8            600      557            723      709              -43          -14
##  9            600      557            846      838              -43           -8
## 10            600      558            745      753              -42            8
## # ... with 336,766 more rows, and 2 more variables: atraso_dec_horas &amp;lt;dbl&amp;gt;,
## #   atraso_pouso_horas &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Transmute é um atalho para quando você quer apenas as variáveis resultado e não está interessado nas intermediárias.
flights %&amp;gt;% 
  transmute(atraso_decolagem = dep_time - sched_dep_time,
            atraso_pouso = arr_time - sched_arr_time,
            atraso_dec_horas = atraso_decolagem / 60,
            atraso_pouso_horas = atraso_pouso / 60)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 4
##    atraso_decolagem atraso_pouso atraso_dec_horas atraso_pouso_horas
##               &amp;lt;int&amp;gt;        &amp;lt;int&amp;gt;            &amp;lt;dbl&amp;gt;              &amp;lt;dbl&amp;gt;
##  1                2           11           0.0333              0.183
##  2                4           20           0.0667              0.333
##  3                2           73           0.0333              1.22 
##  4               -1          -18          -0.0167             -0.3  
##  5              -46          -25          -0.767              -0.417
##  6               -4           12          -0.0667              0.2  
##  7              -45           59          -0.75                0.983
##  8              -43          -14          -0.717              -0.233
##  9              -43           -8          -0.717              -0.133
## 10              -42            8          -0.7                 0.133
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usando o pipe, é fazer diversas operações de transformação de variáveis simultâneamente em um único call sem a necessidade de repetir o nome do objeto e &lt;code&gt;$&lt;/code&gt; a cada referência. &lt;code&gt;mutate&lt;/code&gt; é uma função extremamente flexível, você pode chamar qualquer função que retorne um vetor de tamanho 1 ou de tamanho do número de linhas do banco lá dentro para criar uma variável.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;desabafo &amp;lt;- function(x) {
  y &amp;lt;- floor(x / 60)
  
  dplyr::case_when(
    # Condições ~ Resultados
    y &amp;lt; 0       ~ &amp;quot;Opa, vou chegar cedo!&amp;quot;,
    y &amp;lt; 1       ~ &amp;quot;Atraso de menos de 1 hora é tolerável&amp;quot;,
    y &amp;gt;= 1      ~ paste0(&amp;quot;Atraso de mais de &amp;quot;, y, &amp;quot; horas é f***.&amp;quot;),
    TRUE        ~ &amp;quot;Ahn?&amp;quot; # Condição guarda-chuva
  )
  
}

flights %&amp;gt;% 
  select(dep_delay) %&amp;gt;% 
  mutate(desabafo = desabafo(dep_delay)) %&amp;gt;% 
  sample_n(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##    dep_delay desabafo                             
##        &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                                
##  1        -5 Opa, vou chegar cedo!                
##  2        23 Atraso de menos de 1 hora é tolerável
##  3        -4 Opa, vou chegar cedo!                
##  4        -3 Opa, vou chegar cedo!                
##  5        -8 Opa, vou chegar cedo!                
##  6        -3 Opa, vou chegar cedo!                
##  7        -5 Opa, vou chegar cedo!                
##  8        22 Atraso de menos de 1 hora é tolerável
##  9        23 Atraso de menos de 1 hora é tolerável
## 10        -2 Opa, vou chegar cedo!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Utilizando &lt;code&gt;summarize&lt;/code&gt; você tira medidas resumo das suas colunas de interesse:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% 
  summarize(atraso_decolagem_medio = mean(dep_delay, na.rm = T),
            atraso_decolagem_desvpad = sd(dep_delay, na.rm = T),
            atraso_pouso_medio = mean(arr_delay, na.rm = T),
            atraso_pouso_desvpad = sd(arr_delay, na.rm = T),
            n_voos = n())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 5
##   atraso_decolagem_~ atraso_decolagem_~ atraso_pouso_me~ atraso_pouso_de~ n_voos
##                &amp;lt;dbl&amp;gt;              &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;
## 1               12.6               40.2             6.90             44.6 336776
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Parece uma bobagem, mas quando você junta isso com a última função, &lt;code&gt;group_by&lt;/code&gt;, é possível obter diversas estatísticas de interesse muito rapidamente e para vários domínios:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Por mês
flights %&amp;gt;% 
  group_by(month) %&amp;gt;% 
  summarize(atraso_decolagem_medio = mean(dep_delay, na.rm = T),
            atraso_decolagem_desvpad = sd(dep_delay, na.rm = T),
            atraso_pouso_medio = mean(arr_delay, na.rm = T),
            atraso_pouso_desvpad = sd(arr_delay, na.rm = T),
            n_voos = n())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12 x 6
##    month atraso_decolagem_~ atraso_decolagem_~ atraso_pouso_me~ atraso_pouso_de~
##    &amp;lt;int&amp;gt;              &amp;lt;dbl&amp;gt;              &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
##  1     1              10.0                36.4            6.13              40.4
##  2     2              10.8                36.3            5.61              39.5
##  3     3              13.2                40.1            5.81              44.1
##  4     4              13.9                43.0           11.2               47.5
##  5     5              13.0                39.4            3.52              44.2
##  6     6              20.8                51.5           16.5               56.1
##  7     7              21.7                51.6           16.7               57.1
##  8     8              12.6                37.7            6.04              42.6
##  9     9               6.72               35.6           -4.02              39.7
## 10    10               6.24               29.7           -0.167             32.6
## 11    11               5.44               27.6            0.461             31.4
## 12    12              16.6                41.9           14.9               46.1
## # ... with 1 more variable: n_voos &amp;lt;int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Por mês e aeroporto de origem
flights %&amp;gt;% 
  group_by(month, origin) %&amp;gt;% 
  summarize(atraso_decolagem_medio = mean(dep_delay, na.rm = T),
            atraso_decolagem_desvpad = sd(dep_delay, na.rm = T),
            atraso_pouso_medio = mean(arr_delay, na.rm = T),
            atraso_pouso_desvpad = sd(arr_delay, na.rm = T),
            n_voos = n())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;month&#39;. You can override using the `.groups` argument.

## # A tibble: 36 x 7
## # Groups:   month [12]
##    month origin atraso_decolagem_medio atraso_decolagem_desvp~ atraso_pouso_med~
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                   &amp;lt;dbl&amp;gt;                   &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;
##  1     1 EWR                     14.9                     40.8             12.8 
##  2     1 JFK                      8.62                    36.0              1.37
##  3     1 LGA                      5.64                    29.7              3.38
##  4     2 EWR                     13.1                     37.2              8.78
##  5     2 JFK                     11.8                     37.4              4.39
##  6     2 LGA                      6.96                    33.4              3.15
##  7     3 EWR                     18.1                     44.1             10.6 
##  8     3 JFK                     10.7                     35.3              2.58
##  9     3 LGA                     10.2                     39.7              3.74
## 10     4 EWR                     17.4                     43.9             14.1 
## # ... with 26 more rows, and 2 more variables: atraso_pouso_desvpad &amp;lt;dbl&amp;gt;,
## #   n_voos &amp;lt;int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uma vez que você se familiariza com a gramática do &lt;code&gt;dplyr&lt;/code&gt;, o processo de análise exploratória se torna bastante trivial e até certo ponto, prazeiroso. Mas o que eu realmente gosto é que ele também se torna visualmente óbvio para o leitor, com cada chamado podendo ser lido como uma declaração:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Utilizando o banco de dados flights, agrupe as observações por mês e aeroporto de origem, então, calcule as médias e desvios padrão dos atrasos no pouso e na decolagem e o número de vôos para cada grupo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Você também pode rapidamente introduzir ou retirar passos em cada chamado deste utilizando o pipe, por exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% 
  group_by(month, origin) %&amp;gt;% 
  summarize(atraso_decolagem_medio = mean(dep_delay, na.rm = T),
            atraso_decolagem_desvpad = sd(dep_delay, na.rm = T),
            atraso_pouso_medio = mean(arr_delay, na.rm = T),
            atraso_pouso_desvpad = sd(arr_delay, na.rm = T),
            n_voos = n()) %&amp;gt;% 
  arrange(-atraso_decolagem_medio)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;month&#39;. You can override using the `.groups` argument.

## # A tibble: 36 x 7
## # Groups:   month [12]
##    month origin atraso_decolagem_medio atraso_decolagem_desvp~ atraso_pouso_med~
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                   &amp;lt;dbl&amp;gt;                   &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;
##  1     7 JFK                      23.8                    53.3             20.2 
##  2     6 EWR                      22.5                    50.8             16.9 
##  3     7 EWR                      22.0                    49.5             15.5 
##  4    12 EWR                      21.0                    45.7             19.6 
##  5     6 JFK                      20.5                    50.2             17.6 
##  6     6 LGA                      19.3                    53.6             14.8 
##  7     7 LGA                      19.0                    52.0             14.2 
##  8     3 EWR                      18.1                    44.1             10.6 
##  9     4 EWR                      17.4                    43.9             14.1 
## 10     5 EWR                      15.4                    39.0              5.38
## # ... with 26 more rows, and 2 more variables: atraso_pouso_desvpad &amp;lt;dbl&amp;gt;,
## #   n_voos &amp;lt;int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E a leitura fica:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Utilizando o banco de dados flights, agrupe as observações por mês e aeroporto de origem, então, calcule as médias e desvios padrão dos atrasos no pouso e na decolagem e o número de vôos para cada grupo, então, ordene os resultados pelo maior atraso.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;De quebra, você ainda leva para casa um dado no formato “tabela,” fácil de exportar para outros softwares para embelezamento e publicação. Veja:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resumo &amp;lt;- 
  flights %&amp;gt;% 
  group_by(month, origin) %&amp;gt;% 
  summarize(atraso_decolagem_medio = mean(dep_delay, na.rm = T),
            atraso_decolagem_desvpad = sd(dep_delay, na.rm = T),
            atraso_pouso_medio = mean(arr_delay, na.rm = T),
            atraso_pouso_desvpad = sd(arr_delay, na.rm = T),
            n_voos = n()) %&amp;gt;% 
  arrange(-atraso_decolagem_medio)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;month&#39;. You can override using the `.groups` argument.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;print(resumo, n = Inf)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 x 7
## # Groups:   month [12]
##    month origin atraso_decolagem_medio atraso_decolagem_desvp~ atraso_pouso_med~
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                   &amp;lt;dbl&amp;gt;                   &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;
##  1     7 JFK                     23.8                     53.3            20.2  
##  2     6 EWR                     22.5                     50.8            16.9  
##  3     7 EWR                     22.0                     49.5            15.5  
##  4    12 EWR                     21.0                     45.7            19.6  
##  5     6 JFK                     20.5                     50.2            17.6  
##  6     6 LGA                     19.3                     53.6            14.8  
##  7     7 LGA                     19.0                     52.0            14.2  
##  8     3 EWR                     18.1                     44.1            10.6  
##  9     4 EWR                     17.4                     43.9            14.1  
## 10     5 EWR                     15.4                     39.0             5.38 
## 11     1 EWR                     14.9                     40.8            12.8  
## 12    12 JFK                     14.8                     39.1            12.7  
## 13    12 LGA                     13.6                     39.8            12.0  
## 14     8 EWR                     13.5                     37.6             6.71 
## 15     2 EWR                     13.1                     37.2             8.78 
## 16     8 JFK                     12.9                     36.3             5.91 
## 17     5 JFK                     12.5                     38.5             2.12 
## 18     4 JFK                     12.2                     41.2             7.01 
## 19     2 JFK                     11.8                     37.4             4.39 
## 20     4 LGA                     11.5                     43.4            12.0  
## 21     8 LGA                     11.2                     39.2             5.41 
## 22     3 JFK                     10.7                     35.3             2.58 
## 23     5 LGA                     10.6                     40.6             2.80 
## 24     3 LGA                     10.2                     39.7             3.74 
## 25    10 EWR                      8.64                    32.7             2.60 
## 26     1 JFK                      8.62                    36.0             1.37 
## 27     9 EWR                      7.29                    35.0            -4.73 
## 28     2 LGA                      6.96                    33.4             3.15 
## 29    11 EWR                      6.72                    28.8             0.672
## 30     9 JFK                      6.64                    32.5            -4.46 
## 31     9 LGA                      6.21                    39.0            -2.83 
## 32     1 LGA                      5.64                    29.7             3.38 
## 33    10 LGA                      5.31                    30.1             0.186
## 34    11 LGA                      4.77                    26.6             1.55 
## 35    11 JFK                      4.68                    27.1            -0.873
## 36    10 JFK                      4.59                    25.2            -3.59 
## # ... with 2 more variables: atraso_pouso_desvpad &amp;lt;dbl&amp;gt;, n_voos &amp;lt;int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lembrem-se que é necessário atribuir &lt;code&gt;&amp;lt;-&lt;/code&gt; os resultados das operações para que elas sejam salvas. Em geral, meu workflow é assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Começo com o banco
flights
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830            819
##  2  2013     1     1      533            529         4      850            830
##  3  2013     1     1      542            540         2      923            850
##  4  2013     1     1      544            545        -1     1004           1022
##  5  2013     1     1      554            600        -6      812            837
##  6  2013     1     1      554            558        -4      740            728
##  7  2013     1     1      555            600        -5      913            854
##  8  2013     1     1      557            600        -3      709            723
##  9  2013     1     1      557            600        -3      838            846
## 10  2013     1     1      558            600        -2      753            745
## # ... with 336,766 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Seleciono algumas variáveis
flights %&amp;gt;% 
  select(month, dep_delay, arr_delay)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 3
##    month dep_delay arr_delay
##    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1     1         2        11
##  2     1         4        20
##  3     1         2        33
##  4     1        -1       -18
##  5     1        -6       -25
##  6     1        -4        12
##  7     1        -5        19
##  8     1        -3       -14
##  9     1        -3        -8
## 10     1        -2         8
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Recorto algumas observações
flights %&amp;gt;% 
  select(month, dep_delay, arr_delay) %&amp;gt;% 
  filter(between(month, 1, 6))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 166,158 x 3
##    month dep_delay arr_delay
##    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1     1         2        11
##  2     1         4        20
##  3     1         2        33
##  4     1        -1       -18
##  5     1        -6       -25
##  6     1        -4        12
##  7     1        -5        19
##  8     1        -3       -14
##  9     1        -3        -8
## 10     1        -2         8
## # ... with 166,148 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Escolho os dominios e calculo as medidas resumo
flights %&amp;gt;% 
  select(month, dep_delay, arr_delay) %&amp;gt;% 
  filter(between(month, 1, 6)) %&amp;gt;% 
  group_by(month) %&amp;gt;% 
  summarise(atraso_dec_medio = mean(dep_delay, na.rm = T),
            atraso_pou_medio = mean(arr_delay, na.rm = T))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   month atraso_dec_medio atraso_pou_medio
##   &amp;lt;int&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
## 1     1             10.0             6.13
## 2     2             10.8             5.61
## 3     3             13.2             5.81
## 4     4             13.9            11.2 
## 5     5             13.0             3.52
## 6     6             20.8            16.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Acho bom organizar pelos atrasos maiores
flights %&amp;gt;% 
  select(month, dep_delay, arr_delay) %&amp;gt;% 
  filter(between(month, 1, 6)) %&amp;gt;% 
  group_by(month) %&amp;gt;% 
  summarise(atraso_dec_medio = mean(dep_delay, na.rm = T),
            atraso_pou_medio = mean(arr_delay, na.rm = T)) %&amp;gt;% 
  arrange(-atraso_dec_medio, -atraso_pou_medio)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   month atraso_dec_medio atraso_pou_medio
##   &amp;lt;int&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
## 1     6             20.8            16.5 
## 2     4             13.9            11.2 
## 3     3             13.2             5.81
## 4     5             13.0             3.52
## 5     2             10.8             5.61
## 6     1             10.0             6.13
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Estou satisfeito, salvo meu resultado em outro objeto
atrasos &amp;lt;- 
  flights %&amp;gt;% 
  select(month, dep_delay, arr_delay) %&amp;gt;% 
  filter(between(month, 1, 6)) %&amp;gt;% 
  group_by(month) %&amp;gt;% 
  summarise(atraso_dec_medio = mean(dep_delay, na.rm = T),
            atraso_pou_medio = mean(arr_delay, na.rm = T)) %&amp;gt;% 
  arrange(-atraso_dec_medio, -atraso_pou_medio)

atrasos
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   month atraso_dec_medio atraso_pou_medio
##   &amp;lt;int&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;
## 1     6             20.8            16.5 
## 2     4             13.9            11.2 
## 3     3             13.2             5.81
## 4     5             13.0             3.52
## 5     2             10.8             5.61
## 6     1             10.0             6.13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desta forma, consigo construir interativamente meus cálculos, verificando a cada passo se estou obtendo o resultado esperado. Visto de outra perspectiva, se encontro um código programado desta forma que não funciona, posso ir apagando cada &lt;code&gt;%&amp;gt;%&lt;/code&gt; para identificar onde o problema ocorreu.&lt;/p&gt;
&lt;p&gt;Espero que tenha ficado claro que o assunto não se encerra por aqui. Existem diversas outras funções úteis no pacote, como &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;if_else&lt;/code&gt;, &lt;code&gt;case_when&lt;/code&gt;, &lt;code&gt;top_n&lt;/code&gt;, &lt;code&gt;bind_rows&lt;/code&gt;, &lt;code&gt;bind_cols&lt;/code&gt;, as novas funções &lt;code&gt;across&lt;/code&gt; e &lt;code&gt;c_across&lt;/code&gt; e muitas, muitas outras. Nos livros vocês encontram vários outros exemplos e funções para facilitar o processo de análise de dados, mas nossa expectativa é que essa apresentação seja um ponto de partida para vocês se aprofundarem no seu próprio ritmo.&lt;/p&gt;
&lt;h3 id=&#34;dplyr-para-bancos-de-dados-relacionais&#34;&gt;&lt;code&gt;dplyr&lt;/code&gt; para bancos de dados relacionais&lt;/h3&gt;
&lt;p&gt;Nesta seção, o nosso problema não é mais a análise de dados presentes em um banco, mas o problema de relacionar informações sobre uma mesma unidade de análise que estão presentes em vários bancos de dados distintos.&lt;/p&gt;
&lt;p&gt;O banco &lt;code&gt;nycflights13&lt;/code&gt; contém várias tabelas que se relacionam, e elas funcionam como um excelente exemplo de banco de dados relacionais.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/relational-nycflights.png&#34; alt=&#34;Banco de dados relacional&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note que além do banco de dados dos vôos, temos informações sobre clima, aviões e companhias aéreas. Para nós, pode ser relevante reunir informações de diferentes fontes em um mesmo banco de dados, algo que é possível através de &lt;code&gt;joins&lt;/code&gt;. Por uma questão de tempo, não vamos entrar muito a fundo no assunto, mas vamos introduzir dois conceitos chave e partir pros exemplos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chaves&lt;/code&gt; são as variáveis que identificam cada observação em um banco de dados de forma única. Uma chave é dita “primária” quando identifica uma observação na sua própria tabela e “externa” quando ela identifica uma observação em outra tabela. Assim, qualquer operação de join é uma forma de relacionar uma chave &lt;strong&gt;primária&lt;/strong&gt; e uma chave &lt;strong&gt;externa&lt;/strong&gt;. Essa junção de chaves é uma &lt;strong&gt;relação&lt;/strong&gt;, e as relações podem ser &lt;strong&gt;1 para 1&lt;/strong&gt;, &lt;strong&gt;1 para muitos&lt;/strong&gt; ou &lt;strong&gt;muitos para 1&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;joins&lt;/code&gt; são tipos de operação no qual se opta por priorizar um grupo de observações em detrimento de outras. Podemos vê-los didaticamente a partir de duas figuras:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/join-venn.png&#34; alt=&#34;Joins como diagrama de Venn&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/join-outer.png&#34; alt=&#34;Join como “pontos”&#34;&gt;&lt;/p&gt;
&lt;p&gt;A primeira figura é interessante porque nos dá uma ideia de quais observações serão mantidas e quais serão descartadas, podemos imaginá-la como uma abstração da nossa escolha.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quero todas as informações sobre os vôos e os aeroportos, e as duas são igualmente importantes (inner_join, x = flights, y = airports).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Quero todas as observações do banco vôos e as informações disponíveis sobre a aeronave (left_join, x = flights, y = planes).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Quero todas as informações tanto sobre os vôos quanto sobre o clima em cada dia (full_join, x = flights, y = weather).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Quero as informações dos vôos realizados pelas companhias aéreas - minha prioridade são as cias. áreas (right_join, x = flights, y = carriers).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A segunda figura é interessante porque elas mostra a mecânica de um &lt;code&gt;join&lt;/code&gt;: cada observação tem a sua chave marcada com a observação correspondente no outro banco. Se as chaves são iguais, a operação é realizada, se as chaves não são iguais, a operação não é realizada. Dependendo do tipo de &lt;code&gt;join&lt;/code&gt;, uma, as duas ou nenhuma das observações é descartada do banco resultante.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Antes de começar a trabalhar com bancos relacionais, é uma boa ideia dar uma explorada nas chaves, vendo suas contagens, se há erros de digitação, etc. Por uma questão de tempo, vamos pular essa fase.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se as nossas chaves forem perfeitinhas, e inclusive tiverem o mesmo nome nas duas tabelas, basta invocar o tipo de join desejado.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Vamos dar uma enxugada no flights para poder ver o efeito dos joins com maior facilidade.
flights2 &amp;lt;- flights %&amp;gt;% 
  select(year:day, hour, origin, dest, tailnum, carrier)

flights2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 8
##     year month   day  hour origin dest  tailnum carrier
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  
##  1  2013     1     1     5 EWR    IAH   N14228  UA     
##  2  2013     1     1     5 LGA    IAH   N24211  UA     
##  3  2013     1     1     5 JFK    MIA   N619AA  AA     
##  4  2013     1     1     5 JFK    BQN   N804JB  B6     
##  5  2013     1     1     6 LGA    ATL   N668DN  DL     
##  6  2013     1     1     5 EWR    ORD   N39463  UA     
##  7  2013     1     1     6 EWR    FLL   N516JB  B6     
##  8  2013     1     1     6 LGA    IAD   N829AS  EV     
##  9  2013     1     1     6 JFK    MCO   N593JB  B6     
## 10  2013     1     1     6 LGA    ORD   N3ALAA  AA     
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Chaves perfeitas, mesmo nome nos dois bancos = natural join
flights2 %&amp;gt;% left_join(weather) # Moleza
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;day&amp;quot;, &amp;quot;hour&amp;quot;, &amp;quot;origin&amp;quot;)

## # A tibble: 336,776 x 18
##     year month   day  hour origin dest  tailnum carrier  temp  dewp humid
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  2013     1     1     5 EWR    IAH   N14228  UA       39.0  28.0  64.4
##  2  2013     1     1     5 LGA    IAH   N24211  UA       39.9  25.0  54.8
##  3  2013     1     1     5 JFK    MIA   N619AA  AA       39.0  27.0  61.6
##  4  2013     1     1     5 JFK    BQN   N804JB  B6       39.0  27.0  61.6
##  5  2013     1     1     6 LGA    ATL   N668DN  DL       39.9  25.0  54.8
##  6  2013     1     1     5 EWR    ORD   N39463  UA       39.0  28.0  64.4
##  7  2013     1     1     6 EWR    FLL   N516JB  B6       37.9  28.0  67.2
##  8  2013     1     1     6 LGA    IAD   N829AS  EV       39.9  25.0  54.8
##  9  2013     1     1     6 JFK    MCO   N593JB  B6       37.9  27.0  64.3
## 10  2013     1     1     6 LGA    ORD   N3ALAA  AA       39.9  25.0  54.8
## # ... with 336,766 more rows, and 7 more variables: wind_dir &amp;lt;dbl&amp;gt;,
## #   wind_speed &amp;lt;dbl&amp;gt;, wind_gust &amp;lt;dbl&amp;gt;, precip &amp;lt;dbl&amp;gt;, pressure &amp;lt;dbl&amp;gt;,
## #   visib &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights2 %&amp;gt;% left_join(airlines) # Moleza
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;carrier&amp;quot;

## # A tibble: 336,776 x 9
##     year month   day  hour origin dest  tailnum carrier name                    
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;                   
##  1  2013     1     1     5 EWR    IAH   N14228  UA      United Air Lines Inc.   
##  2  2013     1     1     5 LGA    IAH   N24211  UA      United Air Lines Inc.   
##  3  2013     1     1     5 JFK    MIA   N619AA  AA      American Airlines Inc.  
##  4  2013     1     1     5 JFK    BQN   N804JB  B6      JetBlue Airways         
##  5  2013     1     1     6 LGA    ATL   N668DN  DL      Delta Air Lines Inc.    
##  6  2013     1     1     5 EWR    ORD   N39463  UA      United Air Lines Inc.   
##  7  2013     1     1     6 EWR    FLL   N516JB  B6      JetBlue Airways         
##  8  2013     1     1     6 LGA    IAD   N829AS  EV      ExpressJet Airlines Inc.
##  9  2013     1     1     6 JFK    MCO   N593JB  B6      JetBlue Airways         
## 10  2013     1     1     6 LGA    ORD   N3ALAA  AA      American Airlines Inc.  
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Chaves perfeitas, mas há variáveis nos dois bancos com o mesmo nome e que não são chaves
# É necessário especificar qual a chave
flights2 %&amp;gt;% left_join(planes, by = &amp;quot;tailnum&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 16
##    year.x month   day  hour origin dest  tailnum carrier year.y type            
##     &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;           
##  1   2013     1     1     5 EWR    IAH   N14228  UA        1999 Fixed wing mult~
##  2   2013     1     1     5 LGA    IAH   N24211  UA        1998 Fixed wing mult~
##  3   2013     1     1     5 JFK    MIA   N619AA  AA        1990 Fixed wing mult~
##  4   2013     1     1     5 JFK    BQN   N804JB  B6        2012 Fixed wing mult~
##  5   2013     1     1     6 LGA    ATL   N668DN  DL        1991 Fixed wing mult~
##  6   2013     1     1     5 EWR    ORD   N39463  UA        2012 Fixed wing mult~
##  7   2013     1     1     6 EWR    FLL   N516JB  B6        2000 Fixed wing mult~
##  8   2013     1     1     6 LGA    IAD   N829AS  EV        1998 Fixed wing mult~
##  9   2013     1     1     6 JFK    MCO   N593JB  B6        2004 Fixed wing mult~
## 10   2013     1     1     6 LGA    ORD   N3ALAA  AA          NA &amp;lt;NA&amp;gt;            
## # ... with 336,766 more rows, and 6 more variables: manufacturer &amp;lt;chr&amp;gt;,
## #   model &amp;lt;chr&amp;gt;, engines &amp;lt;int&amp;gt;, seats &amp;lt;int&amp;gt;, speed &amp;lt;int&amp;gt;, engine &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que tanto &lt;code&gt;flights2&lt;/code&gt; quanto &lt;code&gt;planes&lt;/code&gt; tem uma variável chamada &lt;code&gt;year&lt;/code&gt;, mas elas significados diferentes. Em &lt;code&gt;flights2&lt;/code&gt; é o ano do vôo, enquanto em &lt;code&gt;planes&lt;/code&gt; é o ano em que a aeronave entra em serviço. Na hora que fazemos o join, uma recebe o sufixo “x” e a outra “y” para a indicar a diferença. Você pode especificar o sufixo desejado para evitar confusão:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights2 %&amp;gt;% left_join(planes, by = &amp;quot;tailnum&amp;quot;, suffix = c(&amp;quot;_flight&amp;quot;, &amp;quot;_entered_service&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 16
##    year_flight month   day  hour origin dest  tailnum carrier year_entered_serv~
##          &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;                &amp;lt;int&amp;gt;
##  1        2013     1     1     5 EWR    IAH   N14228  UA                    1999
##  2        2013     1     1     5 LGA    IAH   N24211  UA                    1998
##  3        2013     1     1     5 JFK    MIA   N619AA  AA                    1990
##  4        2013     1     1     5 JFK    BQN   N804JB  B6                    2012
##  5        2013     1     1     6 LGA    ATL   N668DN  DL                    1991
##  6        2013     1     1     5 EWR    ORD   N39463  UA                    2012
##  7        2013     1     1     6 EWR    FLL   N516JB  B6                    2000
##  8        2013     1     1     6 LGA    IAD   N829AS  EV                    1998
##  9        2013     1     1     6 JFK    MCO   N593JB  B6                    2004
## 10        2013     1     1     6 LGA    ORD   N3ALAA  AA                      NA
## # ... with 336,766 more rows, and 7 more variables: type &amp;lt;chr&amp;gt;,
## #   manufacturer &amp;lt;chr&amp;gt;, model &amp;lt;chr&amp;gt;, engines &amp;lt;int&amp;gt;, seats &amp;lt;int&amp;gt;, speed &amp;lt;int&amp;gt;,
## #   engine &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Um aviso: cuidado com os produtos cartesianos. Não há um bom exemplo aqui no caso do &lt;code&gt;flights&lt;/code&gt; porque o banco já está limpinho, mas se você especificar chaves com uma relação “muitos para muitos,” ele vai registrar no banco novo uma linha para cada combinação possível de variáveis. Em bancos maiores, isso geralmente estoura sua memória e trava o R. Veja este pequeno exemplo de brinquedo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- tribble(
  ~key, ~val_x,
     1, &amp;quot;x1&amp;quot;,
     2, &amp;quot;x2&amp;quot;,
     2, &amp;quot;x3&amp;quot;,
     3, &amp;quot;x4&amp;quot;
)
y &amp;lt;- tribble(
  ~key, ~val_y,
     1, &amp;quot;y1&amp;quot;,
     2, &amp;quot;y2&amp;quot;,
     2, &amp;quot;y3&amp;quot;,
     3, &amp;quot;y4&amp;quot;
)
left_join(x, y, by = &amp;quot;key&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##     key val_x val_y
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1     1 x1    y1   
## 2     2 x2    y2   
## 3     2 x2    y3   
## 4     2 x3    y2   
## 5     2 x3    y3   
## 6     3 x4    y4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que no resultado foi criada uma linha para cada combinação de val_x e val_y que tem a mesma chave repetida. Podem até existir situações em que isso seja o que você quer mesmo, mas na minha experiência até o momento isso é problema com as chaves duplicadas e é sinal de que há algo errado.&lt;/p&gt;
&lt;p&gt;Mas peraí, se você falou que tem 4 tipos de join, porque só dá exemplo de &lt;code&gt;left_join&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Na prática, operações relacionais são feitas de forma intencional: escolhemos bancos de dados de acordo com o valor que atribuímos a informação presente nele e pinçamos informações relacionadas de outros lugares para adicionar aquilo que é nosso foco. Por isso, na maioria dos casos, o &lt;code&gt;left_join&lt;/code&gt; é o mais usual, porque &lt;strong&gt;preserva todas as informações do meu banco x e adiciona apenas as informações do banco y que combinaram com sucesso&lt;/strong&gt;. Isso garante que eu não vou perder nenhuma informação do meu banco principal.&lt;/p&gt;
&lt;p&gt;Pra encerrar essa parte, mais exemplos de &lt;code&gt;joins&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Minhas chaves tem nomes diferentes, então uso um vetor do tipo c(&amp;quot;chave_x&amp;quot; = &amp;quot;chave_y&amp;quot;)
flights2 %&amp;gt;% 
  left_join(airports, c(&amp;quot;dest&amp;quot; = &amp;quot;faa&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 15
##     year month   day  hour origin dest  tailnum carrier name     lat   lon   alt
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  2013     1     1     5 EWR    IAH   N14228  UA      Georg~  30.0 -95.3    97
##  2  2013     1     1     5 LGA    IAH   N24211  UA      Georg~  30.0 -95.3    97
##  3  2013     1     1     5 JFK    MIA   N619AA  AA      Miami~  25.8 -80.3     8
##  4  2013     1     1     5 JFK    BQN   N804JB  B6      &amp;lt;NA&amp;gt;    NA    NA      NA
##  5  2013     1     1     6 LGA    ATL   N668DN  DL      Harts~  33.6 -84.4  1026
##  6  2013     1     1     5 EWR    ORD   N39463  UA      Chica~  42.0 -87.9   668
##  7  2013     1     1     6 EWR    FLL   N516JB  B6      Fort ~  26.1 -80.2     9
##  8  2013     1     1     6 LGA    IAD   N829AS  EV      Washi~  38.9 -77.5   313
##  9  2013     1     1     6 JFK    MCO   N593JB  B6      Orlan~  28.4 -81.3    96
## 10  2013     1     1     6 LGA    ORD   N3ALAA  AA      Chica~  42.0 -87.9   668
## # ... with 336,766 more rows, and 3 more variables: tz &amp;lt;dbl&amp;gt;, dst &amp;lt;chr&amp;gt;,
## #   tzone &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Mesma coisa, só que agora juntando as informações da origem ao invés do destino
flights2 %&amp;gt;% 
  left_join(airports, c(&amp;quot;origin&amp;quot; = &amp;quot;faa&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 15
##     year month   day  hour origin dest  tailnum carrier name     lat   lon   alt
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  2013     1     1     5 EWR    IAH   N14228  UA      Newar~  40.7 -74.2    18
##  2  2013     1     1     5 LGA    IAH   N24211  UA      La Gu~  40.8 -73.9    22
##  3  2013     1     1     5 JFK    MIA   N619AA  AA      John ~  40.6 -73.8    13
##  4  2013     1     1     5 JFK    BQN   N804JB  B6      John ~  40.6 -73.8    13
##  5  2013     1     1     6 LGA    ATL   N668DN  DL      La Gu~  40.8 -73.9    22
##  6  2013     1     1     5 EWR    ORD   N39463  UA      Newar~  40.7 -74.2    18
##  7  2013     1     1     6 EWR    FLL   N516JB  B6      Newar~  40.7 -74.2    18
##  8  2013     1     1     6 LGA    IAD   N829AS  EV      La Gu~  40.8 -73.9    22
##  9  2013     1     1     6 JFK    MCO   N593JB  B6      John ~  40.6 -73.8    13
## 10  2013     1     1     6 LGA    ORD   N3ALAA  AA      La Gu~  40.8 -73.9    22
## # ... with 336,766 more rows, and 3 more variables: tz &amp;lt;dbl&amp;gt;, dst &amp;lt;chr&amp;gt;,
## #   tzone &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O assunto, obviamente, não pára por aí. Nos livros vocês encontrarão mais exemplos e funções, como é o caso do &lt;code&gt;semi_join&lt;/code&gt; e do &lt;code&gt;anti_join&lt;/code&gt; e das operações “set,” &lt;code&gt;intersect&lt;/code&gt;, &lt;code&gt;union&lt;/code&gt; e &lt;code&gt;setdiff&lt;/code&gt;, mas isso fica pra vocês explorarem por conta própria e virem tirar as dúvidas depois!&lt;/p&gt;
&lt;h2 id=&#34;stringr&#34;&gt;&lt;code&gt;stringr&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;stringr&lt;/code&gt; contém uma família de funções, todas começadas em &lt;code&gt;str_&lt;/code&gt;, cuja principal preocupação é a &lt;strong&gt;consistência&lt;/strong&gt;. As funções do &lt;code&gt;base&lt;/code&gt; para strings são muito úteis, porém, seus argumentos estão numa ordem um pouco estranha, algumas funções são vetorizadas e outras não. Quando você se acostuma, até que não é tão ruim, mas voltando para o assunto discutido ontem de tornar o seu código mais legível, é interessante ter a simplicidade oferecida.&lt;/p&gt;
&lt;h3 id=&#34;basicão-da-string&#34;&gt;Basicão da string&lt;/h3&gt;
&lt;p&gt;Como este curso já é pra praticantes de R, vou pular algumas coisas muito básicas de string, vamos ao que interessa.&lt;/p&gt;
&lt;p&gt;Determinados caracteres tem um significado especial dentro das strings. Quem já tentou copiar e colar um caminho de arquivo do Windows pro R sabe disso. Então, nesses casos, é precisar “escapar” caracteres. Por exemplo, se você quiser escrever aspas, você usar a contrabarra &lt;code&gt;\&lt;/code&gt; para “escapar” um caractere.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;aspa_simples &amp;lt;- &#39;\&#39;&#39; # ou &amp;quot;&#39;&amp;quot;
aspa_dupla &amp;lt;- &amp;quot;\&amp;quot;&amp;quot; # ou &#39;&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A regra do escape é simples, então se você quiser colocar uma contrabarra &lt;code&gt;\&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;\\&amp;quot;, &amp;quot;\&amp;quot;&amp;quot;)
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;\\&amp;quot; &amp;quot;\&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;writeLines(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## \
## &amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Outros caracteres especiais úteis: &lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt; para pular uma linha, &lt;code&gt;\t&lt;/code&gt; para Tab. Você pode ver os outros na ajuda das aspas &lt;code&gt;&amp;quot;&lt;/code&gt;, basta digitar no console &lt;code&gt;?&amp;quot;&#39;&amp;quot;&lt;/code&gt; ou &lt;code&gt;?&#39;&amp;quot;&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Outra coisa que dá pra fazer, se você precisar incluir um caractere distinto, é usar unicode:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- &amp;quot;\u00b5&amp;quot;
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;µ&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, mas e o pacote &lt;code&gt;stringr&lt;/code&gt;? Bem, ele tem o intuito de facilitar e dar consistência, então, todas as funções do pacote começam com as iniciais &lt;code&gt;str_&lt;/code&gt; justamente para serem utilizadas com o &lt;strong&gt;autocompletar&lt;/strong&gt; do RStudio, que pode ser acessada com os atalhos &lt;code&gt;Ctrl + Espaço&lt;/code&gt; ou &lt;code&gt;Tab&lt;/code&gt;. Vamos ver agora alguns exemplos de funções do pacote.&lt;/p&gt;
&lt;p&gt;Comprimento da string em caracteres:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(stringr)

# No RStudio, basta digitar &#39;str_&#39; e apertar Tab ou Ctrl + Espaço
x &amp;lt;- &amp;quot;Ministro Sinistro&amp;quot;
str_length(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 17
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;Ministro Sinistro&amp;quot;, &amp;quot;Abelha Gulosa&amp;quot;, &amp;quot;p&amp;quot;)
str_length(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 17 13  1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Concatenação de strings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;z&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;xyz&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use o argumento &lt;code&gt;sep&lt;/code&gt; para definir caracteres que aparecerão entre as strings originais:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;z&amp;quot;, sep = &amp;quot; + &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;x + y + z&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode trabalhar com strings que contém &lt;code&gt;NA&lt;/code&gt;s:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;abc&amp;quot;, NA)
str_c(&amp;quot;|-&amp;quot;, x, &amp;quot;-|&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;|-abc-|&amp;quot; NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_c(&amp;quot;|-&amp;quot;, str_replace_na(x), &amp;quot;-|&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;|-abc-|&amp;quot; &amp;quot;|-NA-|&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;str_c&lt;/code&gt; é uma função vetorizada e automaticamente recicla seus argumentos pra ter o tamanho do maior:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Eu na graduação
str_c(&amp;quot;Profe, me dá mais &amp;quot;, c(&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;), &amp;quot; semanas pra entregar, por favor!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Profe, me dá mais 1 semanas pra entregar, por favor!&amp;quot;
## [2] &amp;quot;Profe, me dá mais 2 semanas pra entregar, por favor!&amp;quot;
## [3] &amp;quot;Profe, me dá mais 3 semanas pra entregar, por favor!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Eu de manhã
str_c(&amp;quot;Só mais &amp;quot;, c(&amp;quot;5&amp;quot;, &amp;quot;10&amp;quot;, &amp;quot;20&amp;quot;, &amp;quot;30&amp;quot;), &amp;quot; minutinhos e eu acordo!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Só mais 5 minutinhos e eu acordo!&amp;quot;  &amp;quot;Só mais 10 minutinhos e eu acordo!&amp;quot;
## [3] &amp;quot;Só mais 20 minutinhos e eu acordo!&amp;quot; &amp;quot;Só mais 30 minutinhos e eu acordo!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se algum dos objetos passados para &lt;code&gt;str_c&lt;/code&gt; tiver tamanho 0, ele é descartado. Útil para usar com testes lógicos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nome &amp;lt;- &amp;quot;Vinicius&amp;quot;
sobrenome &amp;lt;- &amp;quot;Maia&amp;quot;
tem_nome_do_meio &amp;lt;- FALSE

str_c(
  &amp;quot;Meu nome é &amp;quot;, nome, &amp;quot; &amp;quot;,
  # isso aqui retorna um vetor tamanho 0
  if (tem_nome_do_meio) &amp;quot; de Souza&amp;quot;, 
  sobrenome,
  &amp;quot;.&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Meu nome é Vinicius Maia.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Conhecedores de &lt;code&gt;paste&lt;/code&gt; reconhecerão o argumento &lt;code&gt;collapse&lt;/code&gt;, que serve para transformar vetores de strings em uma única string.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_c(c(&amp;quot;Natália&amp;quot;, &amp;quot;Martins&amp;quot;, &amp;quot;Arruda&amp;quot;), collapse = &amp;quot; &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Natália Martins Arruda&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De forma similar, conhecedores de &lt;code&gt;substring&lt;/code&gt; deverão imediatamente reconhecer essa:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;Maçã&amp;quot;, &amp;quot;Banana&amp;quot;, &amp;quot;Abacaxi&amp;quot;)
str_sub(x, 1, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Maç&amp;quot; &amp;quot;Ban&amp;quot; &amp;quot;Aba&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_sub(x, -3, -1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;açã&amp;quot; &amp;quot;ana&amp;quot; &amp;quot;axi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;str_sub&lt;/code&gt; não vai dar erro se a string for muito curta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_sub(&amp;quot;a&amp;quot;, 1, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dá pra usar a forma &lt;code&gt;str_sub(x) &amp;lt;-&lt;/code&gt; para modificar partes de strings&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_sub(x, 1, 1) &amp;lt;- str_to_lower(str_sub(x, 1, 1))
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;maçã&amp;quot;    &amp;quot;banana&amp;quot;  &amp;quot;abacaxi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note o uso de &lt;code&gt;str_to_lower&lt;/code&gt; para mudar para minúsculas. O contrário é &lt;code&gt;str_to_upper&lt;/code&gt;, também há uma para títulos, &lt;code&gt;str_to_title&lt;/code&gt;, e para a primeira letra de uma frase, &lt;code&gt;str_to_sentence&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- &amp;quot;Ministro Sinistro&amp;quot;

str_to_lower(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;ministro sinistro&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_to_upper(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;MINISTRO SINISTRO&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_to_sentence(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Ministro sinistro&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_to_title(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Ministro Sinistro&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como vimos no &lt;code&gt;readr&lt;/code&gt;, algumas questões relacionadas a strings dependem da língua, ou, na linguagem do pacote, são “locale dependent.” Por isso nas funções onde isso é relevante, o argumento se chama &lt;code&gt;locale&lt;/code&gt;. Isso não é super relevante para quem trabalha com o inglês ou as línguas do oeste europeu, considerando que a maioria das línguas tem raízes similares, mas pode ser muito importante para outros idiomas. Vejamos este exemplo com a mudança da ordem das strings.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;abacaxi&amp;quot;, &amp;quot;escarola&amp;quot;, &amp;quot;banana&amp;quot;)

str_sort(x, locale = &amp;quot;en&amp;quot;)  # Inglês
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;abacaxi&amp;quot;  &amp;quot;banana&amp;quot;   &amp;quot;escarola&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_sort(x, locale = &amp;quot;haw&amp;quot;) # Havaiano
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;abacaxi&amp;quot;  &amp;quot;escarola&amp;quot; &amp;quot;banana&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É justamente para esses casos que &lt;code&gt;str_sort&lt;/code&gt; e &lt;code&gt;str_order&lt;/code&gt; oferecem a alternativa de você especificar o &lt;code&gt;locale&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;trabalhando-com-padrões-e-expressões-regulares&#34;&gt;Trabalhando com padrões e “expressões regulares”&lt;/h3&gt;
&lt;p&gt;Expressões regulares são quase uma linguagem de programação em si, aqui, vamos dar uma passada muito rápida e ver alguns exemplos simples. São uma ferramenta muito útil, mas talvez não do interesse de todos.&lt;/p&gt;
&lt;p&gt;Basicamente, a ideia é fazer uma pesquisa na string, em busca de um padrão específico. Pode ser uma palavra, um espaço em branco, uma quebra de linha. Pode ficar muito complexo ou ser bem básico. O nosso objetivo aqui é que todos tenham a capacidade de trabalhar com padrões simples para corrigir inconsistências em bancos de dados, como no exemplo da aula anterior das colunas do dataset da OMS.&lt;/p&gt;
&lt;p&gt;Para visualizar padrões, vamos usar duas &lt;code&gt;helper functions&lt;/code&gt;, &lt;code&gt;str_view&lt;/code&gt; e &lt;code&gt;str_view_all&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;mamão&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;ananas&amp;quot;)
str_view(x, &amp;quot;an&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;mamão&lt;\/li&gt;\n  &lt;li&gt;b&lt;span class=&#39;match&#39;&gt;an&lt;\/span&gt;ana&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;an&lt;\/span&gt;anas&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;O resultado sai na aba “Viewer” do seu RStudio.&lt;/p&gt;
&lt;p&gt;O primeiro padrão que podemos usar é o &lt;code&gt;.&lt;/code&gt;, que identifica qualquer caractere. As vezes na documentação esse tipo de padrão genérico é chamado de “wildcard.”&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;.a.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;mam&lt;\/span&gt;ão&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;ban&lt;\/span&gt;ana&lt;\/li&gt;\n  &lt;li&gt;a&lt;span class=&#39;match&#39;&gt;nan&lt;\/span&gt;as&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;A forma de ler essa operação é: “Identifique qualquer conjunto de caracteres que tenha uma letra a no meio deles.”&lt;/p&gt;
&lt;p&gt;Se você quiser identificar um &lt;code&gt;.&lt;/code&gt; numa string, você precisa usar o escape &lt;code&gt;\&lt;/code&gt;. Porém, a barra também é um escape! Então, ao escrever expressões regulares, precisamos usar &lt;code&gt;\\&lt;/code&gt;. Veja:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dot &amp;lt;- &amp;quot;.&amp;quot;
cat(dot)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## .
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# erro
dot &amp;lt;- &amp;quot;\.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: &#39;\.&#39;  é uma seqüência de escape não reconhecida na cadeia de caracteres começando com &amp;quot;&amp;quot;\.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# agora sim
dot &amp;lt;- &amp;quot;\\.&amp;quot;
cat(dot)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## \.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora em um exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;Praia.&amp;quot;, &amp;quot;Agora.&amp;quot;, &amp;quot;Ou.&amp;quot;, &amp;quot;Me.&amp;quot;, &amp;quot;Rebelo.&amp;quot;)
str_view(x, &amp;quot;a\\.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;Prai&lt;span class=&#39;match&#39;&gt;a.&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;Agor&lt;span class=&#39;match&#39;&gt;a.&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;Ou.&lt;\/li&gt;\n  &lt;li&gt;Me.&lt;\/li&gt;\n  &lt;li&gt;Rebelo.&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;u\\.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;Praia.&lt;\/li&gt;\n  &lt;li&gt;Agora.&lt;\/li&gt;\n  &lt;li&gt;O&lt;span class=&#39;match&#39;&gt;u.&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;Me.&lt;\/li&gt;\n  &lt;li&gt;Rebelo.&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;o\\.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-5&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-5&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;Praia.&lt;\/li&gt;\n  &lt;li&gt;Agora.&lt;\/li&gt;\n  &lt;li&gt;Ou.&lt;\/li&gt;\n  &lt;li&gt;Me.&lt;\/li&gt;\n  &lt;li&gt;Rebel&lt;span class=&#39;match&#39;&gt;o.&lt;\/span&gt;&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Tá, mas se a contrabarra é utilizada para denotar uma expressão regular tipo o &lt;code&gt;.&lt;/code&gt;, como eu faço para pesquisar uma contrabarra?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- &amp;quot;Jake Peralta é o melhor detetive\\gênio&amp;quot;
cat(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Jake Peralta é o melhor detetive\gênio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A solução é escapar o escape do escape, sacou?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;\\\\&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-6&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-6&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;Jake Peralta é o melhor detetive&lt;span class=&#39;match&#39;&gt;\\&lt;\/span&gt;gênio&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;É enrolado mesmo…&lt;/p&gt;
&lt;p&gt;Para não estender muito o assunto, vamos ver vários exemplos de caracteres especiais a ser usados em expressões regulares.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt; encontra o início de uma string&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;maçã&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;mamão&amp;quot;)

str_view(x, &amp;quot;^m&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-7&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-7&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;m&lt;\/span&gt;açã&lt;\/li&gt;\n  &lt;li&gt;banana&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;m&lt;\/span&gt;amão&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; encontra o final&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;a$&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-8&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-8&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;maçã&lt;\/li&gt;\n  &lt;li&gt;banan&lt;span class=&#39;match&#39;&gt;a&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;mamão&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Para forçar a expressão a achar apenas a palavra completa, use os dois&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;vitamina de banana&amp;quot;, &amp;quot;sundae de banana&amp;quot;, &amp;quot;banana&amp;quot;)
str_view(x, &amp;quot;banana&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-9&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-9&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;vitamina de &lt;span class=&#39;match&#39;&gt;banana&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;sundae de &lt;span class=&#39;match&#39;&gt;banana&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;banana&lt;\/span&gt;&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;^banana$&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-10&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-10&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;vitamina de banana&lt;\/li&gt;\n  &lt;li&gt;sundae de banana&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;banana&lt;\/span&gt;&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Use &lt;code&gt;classes&lt;/code&gt; de caracteres para encontrar genéricos&lt;/p&gt;
&lt;p&gt;Qualquer digito:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- &amp;quot;15 de Maio de 2021.&amp;quot;
str_view(x, &amp;quot;\\d&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-11&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-11&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;1&lt;\/span&gt;5 de Maio de 2021.&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Qualquer espaço em branco:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;\\s&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-12&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-12&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;15&lt;span class=&#39;match&#39;&gt; &lt;\/span&gt;de Maio de 2021.&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Qualquer caractere de um grupo: &lt;code&gt;[abc]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;[M]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-13&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-13&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;15 de &lt;span class=&#39;match&#39;&gt;M&lt;\/span&gt;aio de 2021.&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;[eM]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-14&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-14&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;15 d&lt;span class=&#39;match&#39;&gt;e&lt;\/span&gt; Maio de 2021.&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;[deM]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-15&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-15&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;15 &lt;span class=&#39;match&#39;&gt;d&lt;\/span&gt;e Maio de 2021.&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Qualquer caractere menos esses: &lt;code&gt;[^abc]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;[^15]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-16&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-16&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;15&lt;span class=&#39;match&#39;&gt; &lt;\/span&gt;de Maio de 2021.&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;[^15 de]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-17&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-17&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;15 de &lt;span class=&#39;match&#39;&gt;M&lt;\/span&gt;aio de 2021.&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;[^15 de Maio de ]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-18&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-18&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;15 de Maio de &lt;span class=&#39;match&#39;&gt;2&lt;\/span&gt;021.&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Usar uma classe pra evitar digitar 5 milhões de contrabarras&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;[.]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-19&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-19&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;15 de Maio de 2021&lt;span class=&#39;match&#39;&gt;.&lt;\/span&gt;&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(&amp;quot;a*c&amp;quot;, &amp;quot;[*]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-20&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-20&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;a&lt;span class=&#39;match&#39;&gt;*&lt;\/span&gt;c&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Você pode misturar strings com classes também&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;15 de Maio de 2021.&amp;quot;, &amp;quot;16 de Maio de 2021.&amp;quot;)
str_view(x, &amp;quot;1[56] de Maio&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-21&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-21&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;15 de Maio&lt;\/span&gt; de 2021.&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;16 de Maio&lt;\/span&gt; de 2021.&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Infelizmente, alguns caracteres tem significado especial dentro das classes, e você tem que usar contrabarras para fugir deles: &lt;code&gt;]&lt;/code&gt; &lt;code&gt;\&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; e &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Você pode lidar com repetições&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;Mariele&amp;quot;, &amp;quot;Marielle&amp;quot;, &amp;quot;Mariellle&amp;quot;, &amp;quot;Marie&amp;quot;)
str_view(x, &amp;quot;Mariell?e&amp;quot;) # l aparece 0 ou 1 vez
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-22&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-22&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariele&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marielle&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;Mariellle&lt;\/li&gt;\n  &lt;li&gt;Marie&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;Mariel+e&amp;quot;) # l aparece 1 ou + vezes
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-23&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-23&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariele&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marielle&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariellle&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;Marie&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;Mariel*&amp;quot;) # l aparece 0 ou + vezes
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-24&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-24&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariel&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariell&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marielll&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marie&lt;\/span&gt;&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;Mariel{0}&amp;quot;) # l aparece exatamente 0 vezes
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-25&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-25&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marie&lt;\/span&gt;le&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marie&lt;\/span&gt;lle&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marie&lt;\/span&gt;llle&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marie&lt;\/span&gt;&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;Mariel{1}&amp;quot;) # l aparece exatamente 1 vez
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-26&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-26&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariel&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariel&lt;\/span&gt;le&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariel&lt;\/span&gt;lle&lt;\/li&gt;\n  &lt;li&gt;Marie&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;Mariel{2}&amp;quot;) # l aparece exatamente 2 vezes
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-27&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-27&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;Mariele&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariell&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariell&lt;\/span&gt;le&lt;\/li&gt;\n  &lt;li&gt;Marie&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;Mariel{3}&amp;quot;) # l aparece exatamente 3 vezes
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-28&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-28&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;Mariele&lt;\/li&gt;\n  &lt;li&gt;Marielle&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marielll&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;Marie&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;Mariel{1,}&amp;quot;) # l aparece exatamente 1 vez ou mais
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-29&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-29&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariel&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariell&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marielll&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;Marie&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;Mariel{2,}&amp;quot;) # l aparece exatamente 2 vezes ou mais
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-30&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-30&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;Mariele&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariell&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marielll&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;Marie&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;Mariel{1,2}&amp;quot;) # l aparece de 1 a 2 vezes
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-31&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-31&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariel&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariell&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariell&lt;\/span&gt;le&lt;\/li&gt;\n  &lt;li&gt;Marie&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_view(x, &amp;quot;Mariel{2,3}&amp;quot;) # l aparece de 2 a 3 vezes
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-32&#34; style=&#34;width:960px;height:100%;&#34; class=&#34;str_view html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-32&#34;&gt;{&#34;x&#34;:{&#34;html&#34;:&#34;&lt;ul&gt;\n  &lt;li&gt;Mariele&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Mariell&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;&lt;span class=&#39;match&#39;&gt;Marielll&lt;\/span&gt;e&lt;\/li&gt;\n  &lt;li&gt;Marie&lt;\/li&gt;\n&lt;\/ul&gt;&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Esse assunto é enorme, e ainda estamos só na superfície. Há grupos, lookarounds, e muitos outros detalhes envolvendo expressões regulares, e vocês podem consultar os livros de referência para mergulhar mais fundo. Mas vamos parar por aqui para nos concentrar no que interessa.&lt;/p&gt;
&lt;p&gt;Em geral, temos um banco de dados com strings problemáticas, tipo erros de digitação, inconsistências etc. O primeiro passo, em geral, é detectar os problemas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;São Paulo&amp;quot;, &amp;quot;SAO PAULO&amp;quot;, &amp;quot;Sao Paulo&amp;quot;, &amp;quot;sp&amp;quot;, &amp;quot;SP&amp;quot;, &amp;quot;Sp&amp;quot;)
str_detect(x, &amp;quot;ã&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE FALSE FALSE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_detect(x, &amp;quot;[Ss][Pp]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_detect(x, &amp;quot;[Ss][Aa][Oo]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE  TRUE  TRUE FALSE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode se utilizar do fato da resposta ser um vetor lógico para descobrir quantos problemas você tem&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Contagens
str_detect(x, &amp;quot;ã&amp;quot;) %&amp;gt;% sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_detect(x, &amp;quot;[Ss][Pp]&amp;quot;) %&amp;gt;% sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_detect(x, &amp;quot;[Ss][Aa][Oo]&amp;quot;) %&amp;gt;% sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Proporções
str_detect(x, &amp;quot;ã&amp;quot;) %&amp;gt;% mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.1666667
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_detect(x, &amp;quot;[Ss][Pp]&amp;quot;) %&amp;gt;% mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_detect(x, &amp;quot;[Ss][Aa][Oo]&amp;quot;) %&amp;gt;% mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3333333
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depois de detectar seus problemas, você pode querer extrair uma parte dos seus casos: use &lt;code&gt;str_subset&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_subset(x, &amp;quot;[Ss][Pp]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;sp&amp;quot; &amp;quot;SP&amp;quot; &amp;quot;Sp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em geral, no entanto, você vai estar trabalhando num data frame. Então use &lt;code&gt;dplyr::filter&lt;/code&gt; e &lt;code&gt;str_detect&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- tibble::tibble(
  nome = c(&amp;quot;Marcos&amp;quot;, &amp;quot;rogério&amp;quot;, &amp;quot;cebolinha&amp;quot;, &amp;quot;Beiçola&amp;quot;, &amp;quot;nadir&amp;quot;, &amp;quot;Monica&amp;quot;),
  uf = x,
  dtnsc = c(&amp;quot;15 de Maio de 1980&amp;quot;, &amp;quot;1 de Jan de 2001&amp;quot;, &amp;quot;6 de Ago de 1993&amp;quot;, 
            &amp;quot;20 de Abril de 1964&amp;quot;, &amp;quot;24 de Nov de 1975&amp;quot;, &amp;quot;14 de Dezembro de 1997&amp;quot;)
)
df %&amp;gt;% dplyr::filter(str_detect(uf, &amp;quot;[Ss][Pp]&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   nome    uf    dtnsc                 
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;                 
## 1 Beiçola sp    20 de Abril de 1964   
## 2 nadir   SP    24 de Nov de 1975     
## 3 Monica  Sp    14 de Dezembro de 1997
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode contar quantos matches você tem &lt;code&gt;str_count&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_count(x, &amp;quot;o&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2 0 2 0 0 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_count(x, &amp;quot;[Oo]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2 2 2 0 0 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# e usar num data frame
df %&amp;gt;% dplyr::mutate(vogais = str_count(uf, &amp;quot;[aeiou]&amp;quot;),
                     consoantes = str_count(uf, &amp;quot;[^aeiou]&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##   nome      uf        dtnsc                  vogais consoantes
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;                   &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;
## 1 Marcos    São Paulo 15 de Maio de 1980          4          5
## 2 rogério   SAO PAULO 1 de Jan de 2001            0          9
## 3 cebolinha Sao Paulo 6 de Ago de 1993            5          4
## 4 Beiçola   sp        20 de Abril de 1964         0          2
## 5 nadir     SP        24 de Nov de 1975           0          2
## 6 Monica    Sp        14 de Dezembro de 1997      0          2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode extrair &lt;code&gt;str_extract&lt;/code&gt; as informações que você quer&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_extract(df$dtnsc, &amp;quot;\\d+&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;15&amp;quot; &amp;quot;1&amp;quot;  &amp;quot;6&amp;quot;  &amp;quot;20&amp;quot; &amp;quot;24&amp;quot; &amp;quot;14&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_extract(df$dtnsc, &amp;quot;\\d+$&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1980&amp;quot; &amp;quot;2001&amp;quot; &amp;quot;1993&amp;quot; &amp;quot;1964&amp;quot; &amp;quot;1975&amp;quot; &amp;quot;1997&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_extract(df$dtnsc, &amp;quot;\\D+&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot; de Maio de &amp;quot;     &amp;quot; de Jan de &amp;quot;      &amp;quot; de Ago de &amp;quot;      &amp;quot; de Abril de &amp;quot;   
## [5] &amp;quot; de Nov de &amp;quot;      &amp;quot; de Dezembro de &amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Na tibble
df %&amp;gt;% dplyr::mutate(
  dia = str_extract(dtnsc, &amp;quot;\\d+&amp;quot;),
  mes = str_extract(df$dtnsc, &amp;quot;\\D+&amp;quot;),
  ano = str_extract(dtnsc, &amp;quot;\\d+$&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   nome      uf        dtnsc                  dia   mes                ano  
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;
## 1 Marcos    São Paulo 15 de Maio de 1980     15    &amp;quot; de Maio de &amp;quot;     1980 
## 2 rogério   SAO PAULO 1 de Jan de 2001       1     &amp;quot; de Jan de &amp;quot;      2001 
## 3 cebolinha Sao Paulo 6 de Ago de 1993       6     &amp;quot; de Ago de &amp;quot;      1993 
## 4 Beiçola   sp        20 de Abril de 1964    20    &amp;quot; de Abril de &amp;quot;    1964 
## 5 nadir     SP        24 de Nov de 1975      24    &amp;quot; de Nov de &amp;quot;      1975 
## 6 Monica    Sp        14 de Dezembro de 1997 14    &amp;quot; de Dezembro de &amp;quot; 1997
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Melhor ainda
df %&amp;gt;% tidyr::extract(
  dtnsc, c(&amp;quot;dia&amp;quot;, &amp;quot;mes&amp;quot;, &amp;quot;ano&amp;quot;), 
  regex = &amp;quot;(\\d+) de (\\D+) de (\\d+$)&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##   nome      uf        dia   mes      ano  
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;
## 1 Marcos    São Paulo 15    Maio     1980 
## 2 rogério   SAO PAULO 1     Jan      2001 
## 3 cebolinha Sao Paulo 6     Ago      1993 
## 4 Beiçola   sp        20    Abril    1964 
## 5 nadir     SP        24    Nov      1975 
## 6 Monica    Sp        14    Dezembro 1997
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar a ideia de extração, podemos substituir com &lt;code&gt;str_replace&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_replace(x, &amp;quot;[Ss][Pp]&amp;quot;, &amp;quot;São Paulo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;São Paulo&amp;quot; &amp;quot;SAO PAULO&amp;quot; &amp;quot;Sao Paulo&amp;quot; &amp;quot;São Paulo&amp;quot; &amp;quot;São Paulo&amp;quot; &amp;quot;São Paulo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_replace(x, &amp;quot;SAO PAULO&amp;quot;, &amp;quot;São Paulo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;São Paulo&amp;quot; &amp;quot;São Paulo&amp;quot; &amp;quot;Sao Paulo&amp;quot; &amp;quot;sp&amp;quot;        &amp;quot;SP&amp;quot;        &amp;quot;Sp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_replace(x, &amp;quot;a&amp;quot;, &amp;quot;ã&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;São Pãulo&amp;quot; &amp;quot;SAO PAULO&amp;quot; &amp;quot;São Paulo&amp;quot; &amp;quot;sp&amp;quot;        &amp;quot;SP&amp;quot;        &amp;quot;Sp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tanto &lt;code&gt;str_extract&lt;/code&gt; quanto &lt;code&gt;str_replace&lt;/code&gt; substituem apenas a primeira marca, se você quiser substituir todas, utilize &lt;code&gt;str_..._all&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_extract_all(x, &amp;quot;a&amp;quot;, simplify = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,] &amp;quot;a&amp;quot;  &amp;quot;&amp;quot;  
## [2,] &amp;quot;&amp;quot;   &amp;quot;&amp;quot;  
## [3,] &amp;quot;a&amp;quot;  &amp;quot;a&amp;quot; 
## [4,] &amp;quot;&amp;quot;   &amp;quot;&amp;quot;  
## [5,] &amp;quot;&amp;quot;   &amp;quot;&amp;quot;  
## [6,] &amp;quot;&amp;quot;   &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str_replace_all(x, &amp;quot;a&amp;quot;, &amp;quot;ã&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;São Pãulo&amp;quot; &amp;quot;SAO PAULO&amp;quot; &amp;quot;São Pãulo&amp;quot; &amp;quot;sp&amp;quot;        &amp;quot;SP&amp;quot;        &amp;quot;Sp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O assunto não acaba, mas vamos parar por aqui. Novamente, recomendo consultarem os materiais para quem quiser ir mais a fundo nisso. É bem capaz de no andar da carruagem aparecerem outros exemplos nos quais a manipulação de strings pode ser importante.&lt;/p&gt;
&lt;h2 id=&#34;forcats&#34;&gt;&lt;code&gt;forcats&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Esse é um pacotinho muito que facilita bastante a vida de quem trabalha com variável categórica, ou, no R, os &lt;code&gt;factor&lt;/code&gt;s. Ele consiste em uma série de “helper functions” baseadas em funções do &lt;code&gt;base&lt;/code&gt; e do &lt;code&gt;stats&lt;/code&gt; que trabalham com os componentes de um &lt;code&gt;factor&lt;/code&gt;, ou seja, seus &lt;code&gt;levels&lt;/code&gt; e seus &lt;code&gt;values&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Imagino que todos aqui estão familiarizados com fatores e com a sua criação, então vamos direto ao que interessa. Educação é um vetor de caracteres que vem com os níveis educacionais de um população.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;educacao &amp;lt;- c(&amp;quot;Superior&amp;quot;, &amp;quot;Fundamental&amp;quot;, &amp;quot;Médio&amp;quot;, &amp;quot;Superior&amp;quot;, &amp;quot;Fundamental&amp;quot;, &amp;quot;Médio&amp;quot;,
              &amp;quot;Superior&amp;quot;, &amp;quot;Fundamental&amp;quot;, &amp;quot;Médio&amp;quot;, &amp;quot;Superior&amp;quot;, &amp;quot;Fundamental&amp;quot;, &amp;quot;Médio&amp;quot;)

x &amp;lt;- factor(educacao, levels = c(&amp;quot;Fundamental&amp;quot;, &amp;quot;Médio&amp;quot;, &amp;quot;Superior&amp;quot;))
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] Superior    Fundamental Médio       Superior    Fundamental Médio      
##  [7] Superior    Fundamental Médio       Superior    Fundamental Médio      
## Levels: Fundamental Médio Superior
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;levels(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Fundamental&amp;quot; &amp;quot;Médio&amp;quot;       &amp;quot;Superior&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;relevel(x, &amp;quot;Superior&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] Superior    Fundamental Médio       Superior    Fundamental Médio      
##  [7] Superior    Fundamental Médio       Superior    Fundamental Médio      
## Levels: Superior Fundamental Médio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em geral, diversas tarefas envolvendo fatores no &lt;code&gt;base&lt;/code&gt; não são muito simples. Por exemplo, se eu quiser modificar os nomes dos níveis de um fator depois dele já estar criado, modificar a ordem dos níveis, ou agrupar diversos níveis em um só. &lt;code&gt;forcats&lt;/code&gt; vem justamente oferecer soluções nesse sentido. Normalmente, estamos trabalhando com bancos de dados, e não com um vetor solitário, por isso, vamos usar o &lt;code&gt;gss_cat&lt;/code&gt;, uma amostra do General Social Survey aplicado pelo NORC e pela Universidade de Chicago, que vem no pacote forcats.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(forcats)
gss_cat
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 21,483 x 9
##     year marital     age race  rincome    partyid     relig     denom    tvhours
##    &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt;      &amp;lt;fct&amp;gt;       &amp;lt;fct&amp;gt;     &amp;lt;fct&amp;gt;      &amp;lt;int&amp;gt;
##  1  2000 Never ma~    26 White $8000 to ~ Ind,near r~ Protesta~ Souther~      12
##  2  2000 Divorced     48 White $8000 to ~ Not str re~ Protesta~ Baptist~      NA
##  3  2000 Widowed      67 White Not appli~ Independent Protesta~ No deno~       2
##  4  2000 Never ma~    39 White Not appli~ Ind,near r~ Orthodox~ Not app~       4
##  5  2000 Divorced     25 White Not appli~ Not str de~ None      Not app~       1
##  6  2000 Married      25 White $20000 - ~ Strong dem~ Protesta~ Souther~      NA
##  7  2000 Never ma~    36 White $25000 or~ Not str re~ Christian Not app~       3
##  8  2000 Divorced     44 White $7000 to ~ Ind,near d~ Protesta~ Luthera~      NA
##  9  2000 Married      44 White $25000 or~ Not str de~ Protesta~ Other          0
## 10  2000 Married      47 White $25000 or~ Strong rep~ Protesta~ Souther~       3
## # ... with 21,473 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Contagens&lt;/p&gt;
&lt;p&gt;Uma das primeiras coisas que interessa ao lidar com fatores, é obter suas contagens, o que é algo muito simples utilizando a gramática do dplyr.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Função count
gss_cat %&amp;gt;% 
  count(race)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   race      n
##   &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;
## 1 Other  1959
## 2 Black  3129
## 3 White 16395
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Incluindo níveis com contagem = 0.
gss_cat %&amp;gt;% 
  count(race, .drop = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##   race               n
##   &amp;lt;fct&amp;gt;          &amp;lt;int&amp;gt;
## 1 Other           1959
## 2 Black           3129
## 3 White          16395
## 4 Not applicable     0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Visualização com ggplot
library(ggplot2)
gss_cat %&amp;gt;% 
  ggplot(aes(race)) + geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-60-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Incluindo níveis com contagem = 0.
gss_cat %&amp;gt;% 
  ggplot(aes(race)) + geom_bar() + scale_x_discrete(drop = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-60-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note o uso do argumento &lt;code&gt;drop&lt;/code&gt; nos dois casos, para indicar que casos com 0 observações não devem ser removidos do resultado.&lt;/p&gt;
&lt;h3 id=&#34;modificando-a-ordem&#34;&gt;Modificando a ordem&lt;/h3&gt;
&lt;p&gt;A segunda tarefa comum quando trabalhamos com fatores é modificar a ordem em que eles aparecem. Não é tanto o caso quando trabalhamos com fatores ordenados, mas diversos tipos de variáveis categóricas não possuem uma ordem lógica pre-definida e, mesmo assim, nos interessa apresentá-los de acordo com uma determinada hierarquia visual, seja porque eles são os mais frequentes ou porque queremos destacar algum elemento em particular. &lt;code&gt;forcats&lt;/code&gt; implementa diversas estratégias de reordenamento de fatores. Vamos vê-las brevemente.&lt;/p&gt;
&lt;p&gt;Digamos que eu queira saber o tempo médio de televisão assistida por membros das diversas religiões. Eu poderia produzir um sumário e depois plotar isso num gráfico.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;relig_summary &amp;lt;- gss_cat %&amp;gt;%
  group_by(relig) %&amp;gt;%
  summarise(
    age = mean(age, na.rm = TRUE),
    tvhours = mean(tvhours, na.rm = TRUE),
    n = n()
  )

relig_summary %&amp;gt;% 
  ggplot(aes(tvhours, relig)) + geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-61-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;O display está técnicamente correto, mas a forma desorganizada dos níveis no eixo Y dificulta a nossa capacidade de fazer comparações. Talvez fosse mais interessante ordenar este resultado por ordem decrescente do número de horas de tv. Mas, como fazer isso de forma direta, sem precisar realizar diversas computações?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Direto no plot
relig_summary %&amp;gt;% 
  ggplot(aes(tvhours, fct_reorder(relig, tvhours))) + geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-62-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Antes de passar o data.frame para a plotagem
relig_summary %&amp;gt;% 
  mutate(relig = fct_reorder(relig, tvhours)) %&amp;gt;% 
  ggplot(aes(tvhours, relig)) + geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-62-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note como posso aplicar a transformação diretamente na variável durante o processo de plotagem, ou antes, e uma invocação de &lt;code&gt;mutate&lt;/code&gt;. Na minha opinião, o segundo jeito é o mais adequado, por duas razões: é mais fácil de digitar, inserir e retirar do código e é mais fácil para um leitor identificar que uma transformação foi feita na variável plotada.&lt;/p&gt;
&lt;p&gt;Outro exemplo: que tal exarminarmos a relação entre a idade e a renda declarada? Primeiro, é preciso construir um sumário, parecido com o primeiro:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rincome_summary &amp;lt;- gss_cat %&amp;gt;%
  group_by(rincome) %&amp;gt;%
  summarise(
    age = mean(age, na.rm = TRUE),
    tvhours = mean(tvhours, na.rm = TRUE),
    n = n()
  )

rincome_summary %&amp;gt;% 
  mutate(rincome = fct_reorder(rincome, age)) %&amp;gt;% 
  ggplot(aes(age, rincome)) + geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-63-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Aqui, o reordenamento das variáveis de acordo com a idade não faz muito sentido, porque os níveis de renda tem uma ordem própria. Nesse caso, não é recomendado utilizar &lt;code&gt;fct_reorder&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rincome_summary %&amp;gt;% 
  ggplot(aes(age, rincome)) + geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-64-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Só que ao plotar, notamos um problema: a categoria “Not applicable” ficou primeiro e isso desorganiza visualmente nosso gráfico. Sem problema! Utilizamos &lt;code&gt;fct_relevel&lt;/code&gt; para modificar a ordem de uma variável arbitrariamente. O padrão é colocar pro começo (Parecido com o comportamento de &lt;code&gt;stats::relevel&lt;/code&gt;), mas você pode especificar outra posição.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rincome_summary %&amp;gt;% 
  mutate(rincome = fct_relevel(rincome, &amp;quot;Not applicable&amp;quot;)) %&amp;gt;% 
  ggplot(aes(age, rincome)) + geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-65-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notem como nos exemplos acima, o uso do &lt;code&gt;%&amp;gt;%&lt;/code&gt; nos permite alterar partes do nosso código de maneira interativa para chegar no resultado desejado.&lt;/p&gt;
&lt;p&gt;Outro tipo de mudança de ordem interessante ocorre quando temos uma terceira “dimensão” no nosso gráfico. Em geral, utilizamos cores, formas ou linhas quebradas para diferenciar entre categorias e gostaríamos que a nossa legenda acompanhasse a tendência do gráfico. Compare:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;by_age &amp;lt;- gss_cat %&amp;gt;%
  filter(!is.na(age)) %&amp;gt;%
  count(age, marital) %&amp;gt;%
  group_by(age) %&amp;gt;%
  mutate(prop = n / sum(n))

# Sem alteração na ordem
by_age %&amp;gt;% 
  ggplot(aes(age, prop, colour = marital)) +
  geom_line(na.rm = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-66-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Com alteração na ordem
ggplot(by_age, aes(age, prop, colour = fct_reorder2(marital, age, prop))) +
  geom_line() +
  labs(colour = &amp;quot;marital&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-66-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;No caso de &lt;code&gt;fct_reorder2&lt;/code&gt;, é melhor fazer a alteração de ordem dentro da função gráfica, pois dentro uma invocação de &lt;code&gt;mutate&lt;/code&gt;, ela não funcionou durante meus testes.&lt;/p&gt;
&lt;p&gt;Por último, podemos querer ordenar um gráfico de barras de acordo com a frequência das categorias, o que podemos fazer com &lt;code&gt;fct_infreq&lt;/code&gt; e &lt;code&gt;fct_rev&lt;/code&gt; (opcional).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat %&amp;gt;%
  mutate(marital = marital %&amp;gt;% fct_infreq()) %&amp;gt;%
  ggplot(aes(marital)) +
    geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-67-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# OU
gss_cat %&amp;gt;%
  mutate(marital = marital %&amp;gt;% fct_infreq() %&amp;gt;% fct_rev()) %&amp;gt;%
  ggplot(aes(marital)) +
    geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia2_files/figure-html/unnamed-chunk-67-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notem o uso do pipe na hora de modificar a variável “marital.”&lt;/p&gt;
&lt;h3 id=&#34;modificando-os-níveis&#34;&gt;Modificando os níveis&lt;/h3&gt;
&lt;p&gt;O outro tipo de operação bastante comum é a alteração nos níves do fator. Em geral, queremos que os nossos níveis sejam representativos das nossas categorias de análise, sejam de fácil leitura e entendimento e contenham um número significativo de observações. Por essa razão, frequentemente precisamos alterar os rótulos, agrupar categorias, etc.&lt;/p&gt;
&lt;p&gt;Vejamos o exemplo da variável &lt;code&gt;partyid&lt;/code&gt;, que registra a identificação do entrevistado com os partidos políticos dos EUA.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat %&amp;gt;% count(partyid)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##    partyid                n
##    &amp;lt;fct&amp;gt;              &amp;lt;int&amp;gt;
##  1 No answer            154
##  2 Don&#39;t know             1
##  3 Other party          393
##  4 Strong republican   2314
##  5 Not str republican  3032
##  6 Ind,near rep        1791
##  7 Independent         4119
##  8 Ind,near dem        2499
##  9 Not str democrat    3690
## 10 Strong democrat     3490
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos supor que, por qualquer motivo, essa forma de representação das categorias não nos satisfaz. Vejamos algumas das ferramentas que podemos utilizar para modificar esse fator.&lt;/p&gt;
&lt;p&gt;Podemos, simplesmente, reescrever essas categorias de forma mais completa:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat %&amp;gt;% 
  mutate(partyid = fct_recode(partyid,
    &amp;quot;Republicano, forte&amp;quot; = &amp;quot;Strong republican&amp;quot;,
    &amp;quot;Republicano, fraco&amp;quot; = &amp;quot;Not str republican&amp;quot;,
    &amp;quot;Independente, próx. repub.&amp;quot; = &amp;quot;Ind,near rep&amp;quot;,
    &amp;quot;Independente, próx. democ.&amp;quot; = &amp;quot;Ind,near dem&amp;quot;,
    &amp;quot;Independente&amp;quot; = &amp;quot;Independent&amp;quot;,
    &amp;quot;Democrata, forte&amp;quot; = &amp;quot;Strong democrat&amp;quot;,
    &amp;quot;Democrata, fraco&amp;quot; = &amp;quot;Not str democrat&amp;quot;,
    &amp;quot;Outro partido&amp;quot; = &amp;quot;Other party&amp;quot;,
    &amp;quot;Não sei&amp;quot; = &amp;quot;Don&#39;t know&amp;quot;,
    &amp;quot;Sem resposta&amp;quot; = &amp;quot;No answer&amp;quot;
  )) %&amp;gt;% 
  count(partyid)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##    partyid                        n
##    &amp;lt;fct&amp;gt;                      &amp;lt;int&amp;gt;
##  1 Sem resposta                 154
##  2 Não sei                        1
##  3 Outro partido                393
##  4 Republicano, forte          2314
##  5 Republicano, fraco          3032
##  6 Independente, próx. repub.  1791
##  7 Independente                4119
##  8 Independente, próx. democ.  2499
##  9 Democrata, fraco            3690
## 10 Democrata, forte            3490
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A função utilizada é &lt;code&gt;fct_recode&lt;/code&gt; e ela é a mais genérica e flexível de todas, porém, exige que cada nível seja modificado individualmente. Dentro dela, é possível agrupar vários níveis associando vários níveis antigos a um mesmo nível novo. Veja o exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat %&amp;gt;% 
  mutate(partyid = fct_recode(partyid,
    &amp;quot;Republicano, forte&amp;quot; = &amp;quot;Strong republican&amp;quot;,
    &amp;quot;Republicano, fraco&amp;quot; = &amp;quot;Not str republican&amp;quot;,
    &amp;quot;Independente, próx. repub.&amp;quot; = &amp;quot;Ind,near rep&amp;quot;,
    &amp;quot;Independente, próx. democ.&amp;quot; = &amp;quot;Ind,near dem&amp;quot;,
    &amp;quot;Independente&amp;quot; = &amp;quot;Independent&amp;quot;,
    &amp;quot;Democrata, forte&amp;quot; = &amp;quot;Strong democrat&amp;quot;,
    &amp;quot;Democrata, fraco&amp;quot; = &amp;quot;Not str democrat&amp;quot;,
    # Note o nome
    &amp;quot;Outro&amp;quot; = &amp;quot;Other party&amp;quot;,
    &amp;quot;Outro&amp;quot; = &amp;quot;Don&#39;t know&amp;quot;,
    &amp;quot;Outro&amp;quot; = &amp;quot;No answer&amp;quot;
  )) %&amp;gt;% 
  count(partyid)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 2
##   partyid                        n
##   &amp;lt;fct&amp;gt;                      &amp;lt;int&amp;gt;
## 1 Outro                        548
## 2 Republicano, forte          2314
## 3 Republicano, fraco          3032
## 4 Independente, próx. repub.  1791
## 5 Independente                4119
## 6 Independente, próx. democ.  2499
## 7 Democrata, fraco            3690
## 8 Democrata, forte            3490
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se você quiser recategorizar um fator que tem muitos níveis para um menor, com poucos níveis, utilize &lt;code&gt;fct_collapse&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat %&amp;gt;%
  mutate(partyid = fct_collapse(partyid,
    Outro = c(&amp;quot;No answer&amp;quot;, &amp;quot;Don&#39;t know&amp;quot;, &amp;quot;Other party&amp;quot;),
    Republicano = c(&amp;quot;Strong republican&amp;quot;, &amp;quot;Not str republican&amp;quot;),
    Independente = c(&amp;quot;Ind,near rep&amp;quot;, &amp;quot;Independent&amp;quot;, &amp;quot;Ind,near dem&amp;quot;),
    Democrata = c(&amp;quot;Not str democrat&amp;quot;, &amp;quot;Strong democrat&amp;quot;)
  )) %&amp;gt;%
  count(partyid)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##   partyid          n
##   &amp;lt;fct&amp;gt;        &amp;lt;int&amp;gt;
## 1 Outro          548
## 2 Republicano   5346
## 3 Independente  8409
## 4 Democrata     7180
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Repare que do lado esquerdo, nos valores novos, não foi necessário usar aspas. É preciso cuidado com essa característica dos verbos do tidyverse. Ela se chama “tidy evaluation” e está um pouco fora do escopo do curso. Basicamente, se rolar dúvida ou der erros, se for usar acentos ou algum caractere diferente, use aspas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat %&amp;gt;%
  mutate(partyid = fct_collapse(partyid,
    &amp;quot;Outro&amp;quot; = c(&amp;quot;No answer&amp;quot;, &amp;quot;Don&#39;t know&amp;quot;, &amp;quot;Other party&amp;quot;),
    &amp;quot;Republicano&amp;quot; = c(&amp;quot;Strong republican&amp;quot;, &amp;quot;Not str republican&amp;quot;),
    &amp;quot;Independente&amp;quot; = c(&amp;quot;Ind,near rep&amp;quot;, &amp;quot;Independent&amp;quot;, &amp;quot;Ind,near dem&amp;quot;),
    &amp;quot;Democrata&amp;quot; = c(&amp;quot;Not str democrat&amp;quot;, &amp;quot;Strong democrat&amp;quot;)
  )) %&amp;gt;%
  count(partyid)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##   partyid          n
##   &amp;lt;fct&amp;gt;        &amp;lt;int&amp;gt;
## 1 Outro          548
## 2 Republicano   5346
## 3 Independente  8409
## 4 Democrata     7180
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Outro tipo de mudança importante no número de níveis é agrupar os níveis menos frequentes, por exemplo, para produzir uma visualização que dê maior destaque aos níveis mais frequentes. Esse é o trabalho de &lt;code&gt;fct_lump&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat %&amp;gt;% 
  mutate(relig = fct_lump(relig, n = 5)) %&amp;gt;% 
  count(relig)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   relig          n
##   &amp;lt;fct&amp;gt;      &amp;lt;int&amp;gt;
## 1 Christian    689
## 2 None        3523
## 3 Jewish       388
## 4 Catholic    5124
## 5 Protestant 10846
## 6 Other        913
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note que usando o argumento &lt;code&gt;n&lt;/code&gt; eu indico quantos níveis eu quero. No caso, escolhi os 5 níveis mais frequentes e todos os outros são automáticamente agrupados na categoria “Other.” Posso mudar esse nome também:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat %&amp;gt;% 
  mutate(relig = fct_lump(relig, n = 5, other_level = &amp;quot;Outros&amp;quot;)) %&amp;gt;% 
  count(relig)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   relig          n
##   &amp;lt;fct&amp;gt;      &amp;lt;int&amp;gt;
## 1 Christian    689
## 2 None        3523
## 3 Jewish       388
## 4 Catholic    5124
## 5 Protestant 10846
## 6 Outros       913
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;exercícios&#34;&gt;Exercícios&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Encontre os vôos que:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Atrasaram mais de duas horas&lt;/li&gt;
&lt;li&gt;Com destino a Houston (&lt;code&gt;IAH&lt;/code&gt; ou &lt;code&gt;HOU&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Operados pela United, American ou Delta&lt;/li&gt;
&lt;li&gt;Decolaram entre julho e setembro&lt;/li&gt;
&lt;li&gt;Chegaram com mais de duas horas de atraso, mas não decolaram com atraso&lt;/li&gt;
&lt;li&gt;Atrasaram mais de uma hora para decolar, mas recuperaram mais de 30 minutos durante o voo&lt;/li&gt;
&lt;li&gt;Decolaram entre a meia-noite e 6 da manhã (inclusive)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reordene suas colunas para encontrar os voos mais rápidos (maior velocidade de voo).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Teste várias maneiras diferentes de selecionar as variáveis &lt;code&gt;dep_time&lt;/code&gt;, &lt;code&gt;dep_delay&lt;/code&gt;, &lt;code&gt;arr_time&lt;/code&gt; e &lt;code&gt;arr_delay&lt;/code&gt; usando as várias helper functions de &lt;code&gt;select&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As variáveis &lt;code&gt;dep_time&lt;/code&gt; e &lt;code&gt;sched_dep_time&lt;/code&gt; estão num formato incorreto (veja &lt;code&gt;?flights&lt;/code&gt;). Converta-as com &lt;code&gt;mutate&lt;/code&gt; para um valor em minutos passados desde a meia-noite. Dica: utilize &lt;code&gt;%/%&lt;/code&gt; e &lt;code&gt;%%&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O que o código abaixo está fazendo? Porque mesmo após o código abaixo continuam existindo diferenças entre os valores das variáveis &lt;code&gt;air_time&lt;/code&gt; e &lt;code&gt;travel_time&lt;/code&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% 
  select(air_time, dep_time, arr_time, dep_delay, arr_delay) %&amp;gt;% 
  mutate(dep_hour = dep_time %/% 100,
         dep_min = dep_time %% 100,
         dep_time2 = dep_hour * 60 + dep_min,
         arr_hour = arr_time %/% 100,
         arr_min = arr_time %% 100,
         arr_time2 = arr_hour * 60 + arr_min,
         travel_time = arr_time2 - dep_time2) %&amp;gt;% 
  select(-dep_hour, -dep_min, -arr_hour, -arr_min)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 8
##    air_time dep_time arr_time dep_delay arr_delay dep_time2 arr_time2
##       &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1      227      517      830         2        11       317       510
##  2      227      533      850         4        20       333       530
##  3      160      542      923         2        33       342       563
##  4      183      544     1004        -1       -18       344       604
##  5      116      554      812        -6       -25       354       492
##  6      150      554      740        -4        12       354       460
##  7      158      555      913        -5        19       355       553
##  8       53      557      709        -3       -14       357       429
##  9      140      557      838        -3        -8       357       518
## 10      138      558      753        -2         8       358       473
## # ... with 336,766 more rows, and 1 more variable: travel_time &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Use o stringr para concatenar as seguintes strings em uma frase&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- &amp;quot;.&amp;quot;
y &amp;lt;- &amp;quot;feliz&amp;quot;
w &amp;lt;- &amp;quot;acordei&amp;quot;
z &amp;lt;- &amp;quot;hoje&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Corrija as inconsistências nas colunas país, primeiro_nome, segundo_nome e crie uma nova coluna nomes contendo as duas anteriores. No final, ordene o banco em ordem alfabética.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- 
  tibble::tribble(
    ~pais,    ~primeiro_nome, ~segundo_nome,
    # -------|----------------|-------------|
    &amp;quot;BRASIL&amp;quot;, &amp;quot;ISABELA&amp;quot;,       &amp;quot;MARTINS&amp;quot;,
    &amp;quot;Brasil&amp;quot;, &amp;quot;Eduardo&amp;quot;,       &amp;quot;cabellos&amp;quot;,
    &amp;quot;brasil&amp;quot;, &amp;quot;márcia&amp;quot;,         &amp;quot;pinto&amp;quot;,
    &amp;quot;bRaSiL&amp;quot;, &amp;quot;rogério&amp;quot;,        &amp;quot;Marinho&amp;quot;,
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Transforme a string &lt;code&gt;c(&amp;quot;Seu nome&amp;quot;, &amp;quot;Seu sobrenome da mãe&amp;quot;, &amp;quot;Seu sobrenome do pai&amp;quot;)&lt;/code&gt; na string &lt;code&gt;&amp;quot;SEU SOBRENOME DO PAI, sua inicial do nome. sua inicial da mãe.&amp;quot;&lt;/code&gt;, como numa citação. Veja o exemplo abaixo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Transforme
c(&amp;quot;Vinícius&amp;quot;, &amp;quot;de Souza&amp;quot;, &amp;quot;Maia&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Vinícius&amp;quot; &amp;quot;de Souza&amp;quot; &amp;quot;Maia&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Resultado
&amp;quot;MAIA, V. S.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;MAIA, V. S.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;DESAFIO: Nos microdados da área de saúde, é comum que a variável idade esteja registrada da seguinte forma: “150,” “219,” “312,” “471.” Esses códigos indicam primeiro qual a unidade de medida da idade e segundo o valor desta unidade, 1 = horas, 2 = dias, 3 = meses, 4 = anos. Proponha um código usando &lt;code&gt;stringr&lt;/code&gt; para transformar o vetor abaixo em um valor numérico.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Não precisa se preocupar com essa parte
x &amp;lt;- as.character(round(c(
  runif(25, 100, 124),
  runif(25, 201, 230),
  runif(25, 301, 312),
  runif(25, 401, 499)
)))

# Como você transformaria esse vetor em número?
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;115&amp;quot; &amp;quot;113&amp;quot; &amp;quot;119&amp;quot; &amp;quot;121&amp;quot; &amp;quot;118&amp;quot; &amp;quot;116&amp;quot; &amp;quot;100&amp;quot; &amp;quot;108&amp;quot; &amp;quot;113&amp;quot; &amp;quot;119&amp;quot; &amp;quot;121&amp;quot; &amp;quot;103&amp;quot;
##  [13] &amp;quot;116&amp;quot; &amp;quot;111&amp;quot; &amp;quot;111&amp;quot; &amp;quot;115&amp;quot; &amp;quot;114&amp;quot; &amp;quot;102&amp;quot; &amp;quot;116&amp;quot; &amp;quot;103&amp;quot; &amp;quot;120&amp;quot; &amp;quot;115&amp;quot; &amp;quot;123&amp;quot; &amp;quot;103&amp;quot;
##  [25] &amp;quot;119&amp;quot; &amp;quot;230&amp;quot; &amp;quot;228&amp;quot; &amp;quot;225&amp;quot; &amp;quot;214&amp;quot; &amp;quot;225&amp;quot; &amp;quot;206&amp;quot; &amp;quot;207&amp;quot; &amp;quot;208&amp;quot; &amp;quot;202&amp;quot; &amp;quot;210&amp;quot; &amp;quot;229&amp;quot;
##  [37] &amp;quot;204&amp;quot; &amp;quot;207&amp;quot; &amp;quot;215&amp;quot; &amp;quot;218&amp;quot; &amp;quot;223&amp;quot; &amp;quot;221&amp;quot; &amp;quot;205&amp;quot; &amp;quot;214&amp;quot; &amp;quot;220&amp;quot; &amp;quot;227&amp;quot; &amp;quot;202&amp;quot; &amp;quot;224&amp;quot;
##  [49] &amp;quot;214&amp;quot; &amp;quot;201&amp;quot; &amp;quot;305&amp;quot; &amp;quot;310&amp;quot; &amp;quot;309&amp;quot; &amp;quot;310&amp;quot; &amp;quot;305&amp;quot; &amp;quot;305&amp;quot; &amp;quot;309&amp;quot; &amp;quot;303&amp;quot; &amp;quot;312&amp;quot; &amp;quot;310&amp;quot;
##  [61] &amp;quot;303&amp;quot; &amp;quot;302&amp;quot; &amp;quot;305&amp;quot; &amp;quot;303&amp;quot; &amp;quot;304&amp;quot; &amp;quot;306&amp;quot; &amp;quot;309&amp;quot; &amp;quot;304&amp;quot; &amp;quot;303&amp;quot; &amp;quot;309&amp;quot; &amp;quot;306&amp;quot; &amp;quot;311&amp;quot;
##  [73] &amp;quot;306&amp;quot; &amp;quot;307&amp;quot; &amp;quot;310&amp;quot; &amp;quot;417&amp;quot; &amp;quot;477&amp;quot; &amp;quot;470&amp;quot; &amp;quot;493&amp;quot; &amp;quot;414&amp;quot; &amp;quot;446&amp;quot; &amp;quot;402&amp;quot; &amp;quot;423&amp;quot; &amp;quot;476&amp;quot;
##  [85] &amp;quot;432&amp;quot; &amp;quot;490&amp;quot; &amp;quot;499&amp;quot; &amp;quot;429&amp;quot; &amp;quot;414&amp;quot; &amp;quot;455&amp;quot; &amp;quot;409&amp;quot; &amp;quot;462&amp;quot; &amp;quot;447&amp;quot; &amp;quot;483&amp;quot; &amp;quot;458&amp;quot; &amp;quot;471&amp;quot;
##  [97] &amp;quot;402&amp;quot; &amp;quot;423&amp;quot; &amp;quot;464&amp;quot; &amp;quot;483&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;
&lt;p&gt;Explore as contagens da variável &lt;code&gt;rincome&lt;/code&gt; em &lt;code&gt;gss_cat&lt;/code&gt;, ela ficaria bem representada num gráfico? De qual tipo?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qual a religião mais comum em &lt;code&gt;gss_cat&lt;/code&gt;? Qual o partido (&lt;code&gt;partyid&lt;/code&gt;) mais popular?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A que religião se refere a variável &lt;code&gt;denom&lt;/code&gt;? Você pode descobrir isso fazendo uma tabela de contagens?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Como você poderia diminuir o número de categorias da variável &lt;code&gt;rincome&lt;/code&gt; do banco &lt;code&gt;gss_cat&lt;/code&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2</title>
      <link>https://laddem.github.io/courses/tidyverse/dia3/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/courses/tidyverse/dia3/</guid>
      <description>&lt;h2 id=&#34;o-pacote-ggplot2-e-a-gramática-dos-gráficos&#34;&gt;O pacote ggplot2 e a &amp;ldquo;gramática dos gráficos&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;Ainda me lembro da primeira vez que li o terceiro capítulo de &lt;a href=&#34;https://r4ds.had.co.nz/data-visualisation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R for Data Science&lt;/a&gt; em que o conceito de visualização de dados é apresentado junto com a ideia de &lt;code&gt;data.frame&lt;/code&gt; e o código utilizado para gerar o gráfico. Acho que se o termo &lt;code&gt;sobrecarga infromacional&lt;/code&gt; não existisse, eu teria inventado ele na hora.&lt;/p&gt;
&lt;p&gt;Anedotas a parte, não é culpa do autor. O livro pressupõe um certo conhecimento prévio que eu não tinha quando o li pela primeira vez. Imagino que a maioria de vocês já viu gráficos na vida e até construiu um ou dois deles usando esse ou outros softwares estatísticos. O que talvez nem todos tenham claro na mente é que os gráficos são uma &lt;strong&gt;codificação num sistema de coordenadas das informações presentes em um banco de dados através de escalas&lt;/strong&gt;. Vamos destrinchar um pouco melhor isso:&lt;/p&gt;
&lt;p&gt;Suponha que você tenha o banco de dados &lt;code&gt;mpg&lt;/code&gt;, presente na biblioteca &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)
mpg
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 234 x 11
##    manufacturer model    displ  year   cyl trans   drv     cty   hwy fl    class
##    &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
##  1 audi         a4         1.8  1999     4 auto(l~ f        18    29 p     comp~
##  2 audi         a4         1.8  1999     4 manual~ f        21    29 p     comp~
##  3 audi         a4         2    2008     4 manual~ f        20    31 p     comp~
##  4 audi         a4         2    2008     4 auto(a~ f        21    30 p     comp~
##  5 audi         a4         2.8  1999     6 auto(l~ f        16    26 p     comp~
##  6 audi         a4         2.8  1999     6 manual~ f        18    26 p     comp~
##  7 audi         a4         3.1  2008     6 auto(a~ f        18    27 p     comp~
##  8 audi         a4 quat~   1.8  1999     4 manual~ 4        18    26 p     comp~
##  9 audi         a4 quat~   1.8  1999     4 auto(l~ 4        16    25 p     comp~
## 10 audi         a4 quat~   2    2008     4 manual~ 4        20    28 p     comp~
## # ... with 224 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De posse desse banco, você gostaria de construir um gráfico relacionando a eficiência do combustível de um carro (&lt;code&gt;hwy&lt;/code&gt;) com o seu peso (&lt;code&gt;displ&lt;/code&gt;). Sábio e malandro no &lt;code&gt;ggplot2&lt;/code&gt;, você escreve o código a seguir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ,hwy, color = class)) +
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Mas fica a dúvida: que escolhas foram feitas no momento de traduzir a minha &lt;strong&gt;intenção&lt;/strong&gt; de produzir um diagrama de dispersão (&lt;em&gt;scatterplot&lt;/em&gt;) do peso com o consumo de gasolina para a representação gráfica diante de nós? Que unidades de medidas estão dispostas nos eixos X e Y? Qual o sistema de coordenadas no qual isto foi representado? Quem define os limites de início e fim de cada eixo? Como cada ponto recebeu a sua cor? Essas perguntas podem parecer óbvias ou tontas, dependendo da perspectiva e da experiência do usuário, mas elas são centrais para entender como construir e modificar gráficos no &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O pacote é inspirado pela &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gramática dos Gráficos&lt;/a&gt;, e procura decompor o processo de produção de gráficos em uma sequência de camadas que vão se sobrepondo até chegar no objeto desejado.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a camada dos &lt;strong&gt;dados&lt;/strong&gt; e do mapeamento &lt;strong&gt;estético&lt;/strong&gt; (que variáveis vão em quais eixos/escalas)&lt;/li&gt;
&lt;li&gt;a camada dos objetos geométricos (pontos, linhas, barras, etc.)&lt;/li&gt;
&lt;li&gt;a camada das escalas (natural? logarítmica? escala de cores?)&lt;/li&gt;
&lt;li&gt;a camada das &lt;strong&gt;facetas&lt;/strong&gt; (mini gráficos separados por alguma característica)&lt;/li&gt;
&lt;li&gt;a camada das transformações estatísticas (distribuições de probabilidade, contagens, proporções, etc.)&lt;/li&gt;
&lt;li&gt;o sistema de coordenadas (cartesiano? polar?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviamente, nem todo gráfico possui essa complexidade, e na verdade, a maioria dos gráficos que fazemos se encaixa num pequeno subgrupo de todas essas especificações, então porque toda essa complexidade?&lt;/p&gt;
&lt;p&gt;Porque não? Em primeiro lugar, se você está produzindo visualizações simples que cumprem seu propósito, você não precisa se preocupar com quase nada disso, os &lt;strong&gt;padrões&lt;/strong&gt; do ggplot2, via de regra, se encaixam perfeitamente na maioria dos problemas e, em segundo lugar, se você sentir a necessidade de ir mais fundo e produzir visualizações mais complexas, as mesmas ferramentas que você já conhece estão a sua disposição.&lt;/p&gt;
&lt;h2 id=&#34;três-gráficos-para-entender-a-mecânica-do-ggplot2&#34;&gt;Três gráficos para entender a mecânica do ggplot2&lt;/h2&gt;
&lt;h3 id=&#34;scatterplots&#34;&gt;Scatterplots&lt;/h3&gt;
&lt;p&gt;Voltemos para o nosso gráfico original, vamos decompô-lo em suas camadas como se estivéssemos construindo ele passo-a-passo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Primeiro, a camada dos dados e mapeamentos estéticos
ggplot(
  # Dados
  data = mpg,
  # Que variável vai em que eixo
  mapping = aes(x = displ, y = hwy)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Examinando a saída, vemos que ggplot desenhou um canvas com nossas variáveis, mas ainda nenhum objeto geométrico. Tudo bem, adicionamos (&lt;code&gt;+&lt;/code&gt;) uma camada de objetos geométricos, no caso, pontos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Objetos geométricos começam com &amp;quot;geom_&amp;quot;
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + # adicionamos
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Agora, nosso gráfico já tem uma cara de diagrama de dispersão. Mas ainda não tem as cores das classes de automóvel. Tudo bem, voltamos para a primeira camada e informamos que queremos um terceiro mapeamento estético.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# A cor é mapeada a variável class
ggplot(data = mpg, 
       mapping = aes(
         x = displ, y = hwy,
         color = class) # novo mapeamento estético
       ) + # adicionamos
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ok, chegamos no gráfico original. Mas como podem entender melhor as outras camadas? Vamos pensar, por exemplo, que talvez queiramos trabalhar a variável &lt;code&gt;hwy&lt;/code&gt; numa escala logarítmica. Poderíamos transformar a variável original, claro, mas o &lt;code&gt;ggplot2&lt;/code&gt; nos permite especificar as transformações diretamente nas escalas do gráfico!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +
  geom_point() + # adicionando uma nova &amp;quot;camada&amp;quot;
  scale_y_continuous(trans = &amp;quot;log&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Mas você, leitor, não ficou satisfeito. Você queria era transformar a variável &lt;code&gt;displ&lt;/code&gt; em raíz quadrada. Tudo bem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  scale_x_continuous(trans = &amp;quot;sqrt&amp;quot;) # especificamos a transformação na escala de x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Outro leitor não estava interessado nas escalas dos eixos x ou y, que são contínuas nesse caso, mas sim na seleção de cores utilizadas para representar a escala das cores. Por ser um leitor conhecedor das formas de deficiência visual cromática, ele optou pelas paletas de cores do &lt;code&gt;Colorbrewer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  scale_color_brewer(palette = &amp;quot;Set1&amp;quot;) # transformação da escala de cores
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Um geógrafo entrou na conversa e disse que o sistema cartesiano de coordenadas estava iludindo os leitores a pensar que a relação entre peso e consumo de combustível estava distorcida pelas diferenças entre as unidades de medida das variáveis, produzida pelo sistema cartesiano de coordenadas, então ele sugeriu que usássemos um sistema de coordenadas fixas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  scale_color_brewer(palette = &amp;quot;Set1&amp;quot;) +
  coord_fixed()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ficou horrível, esse geógrafo não sabe nada. Como recompensa pela sua ignorância, agora ele ocupa um cargo no primeiro escalão do Ministério da Saúde.&lt;/p&gt;
&lt;p&gt;Outro pesquisador estava interessado em visualizar as relações entre consumo, peso e classe, mas levando em consideração o fabricante do veículo, então, ele sugeriu que construíssemos um gráfico para cada. Você, que é preguiçoso, usou a capacidade do &lt;code&gt;ggplot2&lt;/code&gt; de dividir gráficos através da introdução de uma camada de &lt;code&gt;facets&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  scale_color_brewer(palette = &amp;quot;Set1&amp;quot;) + # adicionamos mais uma camada
  facet_wrap(~manufacturer)              # de facetas
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Agora, muito satisfeitos com o resultado do nosso trabalho, resolvemos incluir o gráfico numa publicação, mas do jeito que está, não dá. Então adicionamos mais algumas camadas para torná-lo apresentável.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  scale_color_brewer(palette = &amp;quot;Set1&amp;quot;) + 
  facet_wrap(~manufacturer) +
  # Colocamos os nomes nos eixos
  labs(title = &amp;quot;Relação entre peso e economia de combustível de automóveis&amp;quot;,
       subtitle = &amp;quot;Separado por categoria e fabricante&amp;quot;,
       x = &amp;quot;Peso do veículo em toneladas&amp;quot;,
       y = &amp;quot;Consumo em milhas por galão de 3,5l&amp;quot;,
       color = &amp;quot;Categoria&amp;quot;,
       caption = &amp;quot;Fonte: Agência de Proteção Ambiental Estadunidense.&amp;quot;) +
  # Escolhemos um tema bonito
  theme_light() +
  # Mudamos a posição da legenda, pra ficar mais jeitozinho
  theme(legend.position = &amp;quot;bottom&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Pronto. Mamãe vai ficar orgulhosa.&lt;/p&gt;
&lt;p&gt;Brincadeiras a parte, entendendo um pouco melhor a gramática do gráfico, podemos construir nossas visualizações passo a passo, até chegar no resultado desejado.&lt;/p&gt;
&lt;h3 id=&#34;lineplots&#34;&gt;Lineplots&lt;/h3&gt;
&lt;p&gt;O segundo exemplo que quero mostrar pra vocês é a construção de gráficos com linhas. Eles são interessantes porque dão bastante dor de cabeça pra quem está começando. Vamos continuar brincando com o &lt;code&gt;mpg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Agora que eu fiz meu diagrama de dispersão, estou interessado em começar um processo de modelagem, mas primeiro quero ter uma noção visual da relação entre as variáveis.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  geom_smooth()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;geom_smooth&lt;/code&gt; ajusta um modelo aos dados e desenha a linha com os valores preditos. Agora que temos dois objetos geométricos, talvez seja interessante ver o que acontece se eu colocar as cores das classes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy, color = class)) +
  geom_point() +
  geom_smooth(se = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Veja que ele fez o possível para aplicar as escalas nos dois objetos geométricos. Eu pedi para geom_smooth tirar os intervalos de confiança para melhorar a visibilidade. Mas e seu eu quisesse ver a cor dos pontos, mas manter a linha de tendência geral? Você pode especificar mapeamentos estéticos gerais (na primeira camada) ou mapeamentos estéticos locais (dentro de cada camada geométrica).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + # mapeamentos gerais, se aplicam a todos os objetos
  geom_point(aes(color = class)) + # mapeamento local, só se aplica aqui
  geom_smooth(se = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ok, mas e se eu quisesse um modelo linear ao invés de um &amp;ldquo;Smoother de Loess&amp;rdquo;?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + 
  geom_point(aes(color = class)) +
  geom_smooth(method = lm)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Não vou entrar muito nos argumentos de cada objeto geométrico e função, vocês podem aprender isso na prática olhando a documentação das funções que são do interesse de vocês. &lt;code&gt;?geom_smooth&lt;/code&gt; para ver todas as possibilidades. Uma dica boa é usar &lt;code&gt;geom_smooth&lt;/code&gt; para verificar interações entre variáveis numéricas e fatores.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy, color = factor(cyl))) + 
  geom_point() +
  geom_smooth(method = lm)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ok, mas e se temos um gráfico de linhas mais tradicional, tipo uma série histórica?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;economics
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 574 x 6
##    date         pce    pop psavert uempmed unemploy
##    &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 1967-07-01  507. 198712    12.6     4.5     2944
##  2 1967-08-01  510. 198911    12.6     4.7     2945
##  3 1967-09-01  516. 199113    11.9     4.6     2958
##  4 1967-10-01  512. 199311    12.9     4.9     3143
##  5 1967-11-01  517. 199498    12.8     4.7     3066
##  6 1967-12-01  525. 199657    11.8     4.8     3018
##  7 1968-01-01  531. 199808    11.7     5.1     2878
##  8 1968-02-01  534. 199920    12.3     4.5     3001
##  9 1968-03-01  544. 200056    11.7     4.1     2877
## 10 1968-04-01  544  200208    12.3     4.6     2709
## # ... with 564 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos criar um gráfico de linhas tendo como base a data (&lt;code&gt;date&lt;/code&gt;) e alguma das variáveis registradas, como a taxa de desemprego.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(economics, aes(x = date, y = uempmed)) +
  geom_line()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ou o consumo em bilhões de dólares&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(economics, aes(x = date, y = pce)) +
  geom_line()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ou a população&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(economics, aes(x = date, y = pop)) +
  geom_line()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ok, mas eu quero comparar visualmente o que ocorre com uma variável quando a outra muda. Podemos recorrer ao que aprendemos sobre mapeamentos estéticos globais e locais.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(economics, aes(x = date)) +
  geom_line(aes(y = uempmed)) +
  geom_line(aes(y = pce)) +
  geom_line(aes(y = pop))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ficou meio ruim, porque as variável tem grandezas distintas. Podemos tentar resolver esse problema aplicando transformações na variável idade, mas meio que pra qualquer lugar onde caminhos, batemos numa parede ou noutra. Esse tipo de solução é muito frequente entre pessoas que vem do &lt;code&gt;base&lt;/code&gt; pro &lt;code&gt;ggplot2&lt;/code&gt;, porque no base estamos acostumado a ideia de adicionar mais objetos geométricos ao nosso gráfico original adicionando invocações à funções como &lt;code&gt;lines&lt;/code&gt; ou &lt;code&gt;text&lt;/code&gt;. Porém, a solução preferida no &lt;code&gt;tidyverse&lt;/code&gt; é aplicar uma transformação no banco original de tal forma que as nossas variáveis numéricas caiam todas num par que especifica &lt;code&gt;o nome da variável | e o valor dela&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyr)
economics %&amp;gt;% 
  pivot_longer(cols = -date,
               names_to = &amp;quot;variavel&amp;quot;,
               values_to = &amp;quot;valor&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,870 x 3
##    date       variavel    valor
##    &amp;lt;date&amp;gt;     &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;
##  1 1967-07-01 pce         507. 
##  2 1967-07-01 pop      198712  
##  3 1967-07-01 psavert      12.6
##  4 1967-07-01 uempmed       4.5
##  5 1967-07-01 unemploy   2944  
##  6 1967-08-01 pce         510. 
##  7 1967-08-01 pop      198911  
##  8 1967-08-01 psavert      12.6
##  9 1967-08-01 uempmed       4.7
## 10 1967-08-01 unemploy   2945  
## # ... with 2,860 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Talvez não fique imediatamente claro para todos porque eu optei por esta solução, mas talvez essa próxima figura fale mais que mil palavras.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;economics %&amp;gt;% 
  pivot_longer(cols = -date,
               names_to = &amp;quot;variavel&amp;quot;,
               values_to = &amp;quot;valor&amp;quot;) %&amp;gt;% 
  ggplot(aes(date, valor)) +
  geom_line() +
  facet_wrap(~variavel, scales = &amp;quot;free_y&amp;quot;, ncol = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A ênfase em usar &lt;code&gt;tidy data&lt;/code&gt; no &lt;code&gt;tidyverse&lt;/code&gt; decorre do fato de que todos os pacotes são programados para usar a forma de organização do banco como uma alavanca para facilitar a análise de dados. Vejam esta outra &lt;code&gt;pipeline&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Como vamos fazer algumas transformações nos dados, vamos carregar o dplyr aqui
library(dplyr)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;dplyr&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:stats&#39;:
## 
##     filter, lag
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:base&#39;:
## 
##     intersect, setdiff, setequal, union
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;economics %&amp;gt;% 
  pivot_longer(cols = -date,
               names_to = &amp;quot;variavel&amp;quot;,
               values_to = &amp;quot;valor&amp;quot;) %&amp;gt;% 
  filter(variavel %in% c(&amp;quot;psavert&amp;quot;, &amp;quot;uempmed&amp;quot;)) %&amp;gt;% 
  ggplot(aes(date, valor, color = variavel, shape = variavel)) +
  geom_line()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;E agora vejam um dos erros mais comuns de quem está começando:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;economics %&amp;gt;% 
  pivot_longer(cols = -date,
               names_to = &amp;quot;variavel&amp;quot;,
               values_to = &amp;quot;valor&amp;quot;) %&amp;gt;% 
  filter(variavel %in% c(&amp;quot;psavert&amp;quot;, &amp;quot;uempmed&amp;quot;)) %&amp;gt;% 
  ggplot(aes(date, valor)) +
  geom_line()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ao não especificar uma separação entre grupos, o &lt;code&gt;ggplot2&lt;/code&gt; não interpreta meus dados! Ele simplesmente conecta as observações mais ou menos na ordem em que elas aparecem no eixo x. Para resolver esse problema, precisamos especificar grupos! Seja indiretamente, através de uma escala de cores, formas ou tipos de linha, seja diretamente através da estética &lt;code&gt;groups&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;economics %&amp;gt;% 
  pivot_longer(cols = -date,
               names_to = &amp;quot;variavel&amp;quot;,
               values_to = &amp;quot;valor&amp;quot;) %&amp;gt;% 
  filter(variavel %in% c(&amp;quot;psavert&amp;quot;, &amp;quot;uempmed&amp;quot;)) %&amp;gt;% 
  ggplot(aes(date, valor, group = variavel)) +
  geom_line()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-26-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;economics %&amp;gt;% 
  pivot_longer(cols = -date,
               names_to = &amp;quot;variavel&amp;quot;,
               values_to = &amp;quot;valor&amp;quot;) %&amp;gt;% 
  filter(variavel %in% c(&amp;quot;psavert&amp;quot;, &amp;quot;uempmed&amp;quot;)) %&amp;gt;% 
  ggplot(aes(date, valor, color = variavel, linetype = variavel)) +
  geom_line()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Legal né?&lt;/p&gt;
&lt;h3 id=&#34;barcharts&#34;&gt;Barcharts&lt;/h3&gt;
&lt;p&gt;Para terminar e ilustrar alguns exemplos de transformação estatística, vamos fazer alguns gráficos de barras usando o &lt;code&gt;diamonds&lt;/code&gt;, um banco de dados para fazer a alegria das piores pessoas na história da humanidade.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;diamonds
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 53,940 x 10
##    carat cut       color clarity depth table price     x     y     z
##    &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;     &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
##  2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
##  3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
##  4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
##  5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
##  6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48
##  7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47
##  8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53
##  9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49
## 10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39
## # ... with 53,930 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Que tal um gráfico básico, do número de diamantes de acordo com a qualidade de seu corte (&lt;code&gt;cut&lt;/code&gt;). Olhando a ajuda do &lt;code&gt;?geom_bar&lt;/code&gt; você vai na certeza de que você entendeu a aula e escreve o seguinte código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(diamonds, aes(x = cut, color = cut)) +
  geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-29-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;E agora, você fica olhando pro seu computador com cara de tacho. O que aconteceu? Bom, no caso de &lt;code&gt;geoms&lt;/code&gt; com duas dimensões, podem existir casos em que você quer dar mapeamentos estéticos distintos para as bordas e para o conteúdo deles. Por isso, existem as estéticas &lt;code&gt;color&lt;/code&gt; e &lt;code&gt;fill&lt;/code&gt;. Você pode pensar nelas como a casca do pão e o recheio.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(diamonds, aes(x = cut, fill = cut)) +
  geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-30-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Mas, você ainda não está satisfeito. Pela sua ampla experiência com uma das indústrias mais sangrentas e retrógadas do planeta você entende que a qualidade do corte não é o suficiente para determinar o valor de um diamante, então você quer ver a distribuição também pelo nível de transparência do diamante, codificado na variável &lt;code&gt;clarity&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(diamonds, aes(x = cut, fill = clarity)) +
  geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-31-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Esse é um primeiro passo interessante, e se tivessemos apenas duas ou três categorias, a gente poderia parar por aí. Mas no geral, para facilitar comparações, queremos poder controlar o posicionamento das barras. Isso é possível ajustando o argumento &lt;code&gt;position&lt;/code&gt; dos &lt;code&gt;geoms&lt;/code&gt; onde isso é necessário.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# O padrão
ggplot(diamonds, aes(x = cut, fill = clarity)) +
  geom_bar(position = &amp;quot;stack&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-32-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# O certo
ggplot(diamonds, aes(x = cut, fill = clarity)) +
  geom_bar(position = &amp;quot;dodge&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-32-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Empilhadas a 100%, para facilitar comparações entre categorias
ggplot(diamonds, aes(x = cut, fill = clarity)) +
  geom_bar(position = &amp;quot;fill&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-32-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Pode parecer jocoso, mas em 99% dos casos, o correto é você usar barras lado-a-lado, assim você visualmente pode comparar as categorias simplesmente comparando a altura das barras. Da próxima vez que você pensar em construir um gráfico de pizza, desista e faça um gráfico de barras com &lt;code&gt;position = &amp;quot;dodge&amp;quot;&lt;/code&gt;. Seus leitores vão agradecer.&lt;/p&gt;
&lt;p&gt;Esse exemplo também é legal para gente olhar um pouco para a parte de transformações estatísticas nas variáveis:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;diamonds2 &amp;lt;- diamonds %&amp;gt;% 
  count(cut) %&amp;gt;% 
  mutate(prop = n/sum(n))

diamonds2 %&amp;gt;% 
  ggplot() +
  geom_bar(aes(x = cut, y = prop), stat = &amp;quot;identity&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-33-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Por padrão, &lt;code&gt;geom_bar&lt;/code&gt; já faz o primeiro passo e utiliza as contagens (&lt;code&gt;stat_count&lt;/code&gt;) para produzir o gráfico de barras, mas eu posso mudar esse comportamento através do argumento &lt;code&gt;stat&lt;/code&gt;. Eu também posso querer mostrar proprções ao invés de contagens de outra forma mais sucinta.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(diamonds, aes(x = cut, 
                     # ao fazer isso, eu mudo o padrão de contagens para proporções.
                     y = stat(prop), 
                     # preciso especificar o grupo, se não todas as barras vão a 100%.
                     group = 1)) +
  geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-34-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Você pode construir seus gráficos a partir de transformações estatísticas ao invés de objetos geométricos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = diamonds) + 
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.min = min,
    fun.max = max,
    fun = median
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-35-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As transformações estatísticas começam sempre com &lt;code&gt;stat_&lt;/code&gt; e cada uma tem um objeto geométrico padrão, que você pode mudar com o argumento &lt;code&gt;geom&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = diamonds) + 
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.min = min,
    fun.max = max,
    # Não dá pra mostrar a mediana com barras de erro, sorry
    #fun = median,
    geom = &amp;quot;errorbar&amp;quot;
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-36-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;E era basicamente isso que eu tinha a dizer sobre como construir gráficos no &lt;code&gt;ggplot2&lt;/code&gt;! Abaixo, uma seção com alguns detalhes para quem tiver interesse nessa parte de embelezamento dos gráficos.&lt;/p&gt;
&lt;h2 id=&#34;perfumaria&#34;&gt;Perfumaria&lt;/h2&gt;
&lt;p&gt;Essa seção pretende introduzir um pouco uma parte de customização dos gráficos. Frequentemente, as publicações de regras mais estritas sobre formatos, fontes, temas, etc. As opções padrão do &lt;code&gt;ggplot2&lt;/code&gt; podem não se acomodar, então, cabe a nós ajeitar essa reta final.&lt;/p&gt;
&lt;h3 id=&#34;títulos-e-rótulos&#34;&gt;Títulos e rótulos&lt;/h3&gt;
&lt;p&gt;A melhor maneira de ajustar títulos e rótulos é através de &lt;code&gt;labs&lt;/code&gt;, porque você resolve tudo em uma só invocação. Mas também há uma função &lt;code&gt;ggtitle&lt;/code&gt;. Com ela, é possível setar apenas título e subtítulo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy, color = class)) +
  geom_point() +
  ggtitle(&amp;quot;Título do gráfico&amp;quot;, &amp;quot;Subtítulo do gráfico&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-37-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A maioria das opções de customização mais fina está na camada &lt;code&gt;theme&lt;/code&gt;. Internamente, cada elemento do gráfico é controlado por uma função &lt;code&gt;element_&lt;/code&gt;, por exemplo, &lt;code&gt;element_text&lt;/code&gt; desenha textos e recebe argumentos relativos a isso, como família da fonte, tamanho, cor, etc.&lt;/p&gt;
&lt;p&gt;Ali, você tem um controle mais direto sobre a construção do gráfico. No que diz respeito aos rótulos, podemos mudar a fonte do título.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy, color = class)) +
  geom_point() +
  ggtitle(&amp;quot;Título do gráfico&amp;quot;, &amp;quot;Subtítulo do gráfico&amp;quot;) +
  # Family é meio complicado de mudar, mas você pode escolher serif, sans ou mono
  theme(plot.title = element_text(family = &amp;quot;serif&amp;quot;, face = &amp;quot;bold&amp;quot;, colour = &amp;quot;red&amp;quot;),
        plot.subtitle = element_text(family = &amp;quot;mono&amp;quot;, face = &amp;quot;italic&amp;quot;, color = &amp;quot;forestgreen&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-38-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Usando uma síntaxe similar e os argumentos da função &lt;code&gt;element_text&lt;/code&gt;, você pode mudar qual outro elemento textual do gráfico.&lt;/p&gt;
&lt;h3 id=&#34;eixos&#34;&gt;Eixos&lt;/h3&gt;
&lt;p&gt;Continuando o nosso frankenstein, podemos fazer alterações nos eixos, como remover pedaços de um eixo, modificar sua forma, seu ângulo e ajustar sua posição.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy, color = class)) +
  geom_point() +
  ggtitle(&amp;quot;Título do gráfico&amp;quot;, &amp;quot;Subtítulo do gráfico&amp;quot;) +
  # Family é meio complicado de mudar, mas você pode escolher serif, sans ou mono
  theme(plot.title = element_text(family = &amp;quot;serif&amp;quot;, face = &amp;quot;bold&amp;quot;, colour = &amp;quot;red&amp;quot;),
        plot.subtitle = element_text(family = &amp;quot;mono&amp;quot;, face = &amp;quot;italic&amp;quot;, color = &amp;quot;forestgreen&amp;quot;),
        # você pode remover pedaços inteiros do gráfico com &amp;quot;element_blank()&amp;quot;
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank(),
        axis.title.y = element_blank(),
        # você pode mudar a orientação, angulo, posição e até formato de elementos
        axis.title = element_text(angle = 90, hjust = 1),
        axis.text.x = element_text(angle = 45, vjust = 1),
        axis.ticks.x = element_line(
          colour = &amp;quot;royalblue3&amp;quot;,
          arrow = grid::arrow(angle = 45, length = unit(0.5, &amp;quot;cm&amp;quot;), ends = &amp;quot;first&amp;quot;, type = &amp;quot;closed&amp;quot;))
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-39-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Realmente, o céu é o limite e você pode deixar o seu gráfico tão horrível quanto você quiser.&lt;/p&gt;
&lt;h3 id=&#34;legendas&#34;&gt;Legendas&lt;/h3&gt;
&lt;p&gt;Legendas no &lt;code&gt;ggplot2&lt;/code&gt; são controladas em alguns lugares diferentes. Elas são tratadas como guias (&lt;code&gt;guides&lt;/code&gt;) no sentido de que são guias para o leitor. Vamos pegar outra variável de cores, para poder brincar com diferentes tipos de legenda.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy, color = cyl)) +
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-40-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Por padrão, ele entende cilindros como numérico e faz uma barra de cores contínua. Mas eu quero uma legenda!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Jeito 1 - Simples e rápido
ggplot(mpg, aes(displ, hwy, color = cyl)) +
  geom_point() +
  guides(color = &amp;quot;legend&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-41-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Jeito 2 - Posso mudar detalhes!
ggplot(mpg, aes(displ, hwy, color = cyl)) +
  geom_point() +
  guides(color = guide_legend(title = &amp;quot;Cilindrossss&amp;quot;,
                              title.position = &amp;quot;right&amp;quot;,
                              label.position = &amp;quot;bottom&amp;quot;,
                              direction = &amp;quot;horizontal&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-41-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Jeito 3 - Mexendo diretamente nas escalas
ggplot(mpg, aes(displ, hwy, color = cyl)) +
  geom_point() +
  # Minha escala de cores preferida
  scale_color_viridis_c(guide = &amp;quot;legend&amp;quot;, option = &amp;quot;B&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-41-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Jeito 3 - de novo, mas agora usando a especificação mais completa do guia
ggplot(mpg, aes(displ, hwy, color = cyl)) +
  geom_point() +
  # Minha escala de cores preferida
  scale_color_viridis_c(
    guide = guide_legend(title = &amp;quot;Cilindrossss&amp;quot;,
                         title.position = &amp;quot;right&amp;quot;,
                         label.position = &amp;quot;bottom&amp;quot;,
                         direction = &amp;quot;horizontal&amp;quot;), 
    option = &amp;quot;B&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-41-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Em qualquer lugar onde você possa especificar &lt;code&gt;guides&lt;/code&gt;, você pode passar o valor &lt;code&gt;FALSE&lt;/code&gt; para remover a legenda.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Na camada &amp;quot;guides()&amp;quot;
ggplot(mpg, aes(displ, hwy, color = cyl, size = cyl)) +
  geom_point() +
  guides(color = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-42-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Na própria escala
ggplot(mpg, aes(displ, hwy, color = cyl, size = cyl)) +
  geom_point() +
  scale_size(guide = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-42-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Bônus = no tema, mas aí você remove todas
ggplot(mpg, aes(displ, hwy, color = cyl, size = cyl)) +
  geom_point() +
  theme(legend.position = &amp;quot;none&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-42-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;escalas&#34;&gt;Escalas&lt;/h3&gt;
&lt;p&gt;Já dei uma palhinha de editar escalas, antes, então aqui vai um pouco mais de detalhe:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy, color = cyl, size = cyl)) +
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-43-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Mudar as cores manualmente
cores &amp;lt;- c(&amp;quot;red&amp;quot;, &amp;quot;green&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;yellow&amp;quot;, &amp;quot;purple&amp;quot;, &amp;quot;tomato&amp;quot;, &amp;quot;wheat2&amp;quot;)

ggplot(mpg, aes(displ, hwy, color = class, size = cyl)) +
  geom_point() +
  scale_color_manual(values = cores)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-43-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Mudar os tamanhos
ggplot(mpg, aes(displ, hwy, color = class, size = cyl)) +
  geom_point() +
  scale_color_manual(values = cores) +
  # scale_radius para fazer proprcional ao raio
  scale_radius(range = c(3,6))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-43-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy, color = class, size = cyl)) +
  geom_point() +
  scale_color_manual(values = cores) +
  # scale_size para fazer proprcional a área
  scale_size(range = c(2,4))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-43-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;É possível aplicar transformações na variável diretamente na escala, mudar o número de &lt;code&gt;breaks&lt;/code&gt; e especificar &lt;code&gt;labels&lt;/code&gt; e alterar os limites do gráfico manualmente.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy, color = class, size = cyl)) +
  geom_point() +
  scale_x_continuous(trans = &amp;quot;sqrt&amp;quot;, name = &amp;quot;Peso&amp;quot;) +
  scale_y_continuous(
    name   = &amp;quot;Consumo (rodovia)&amp;quot;,
    limits = c(0, 50),
    breaks = c(10, 20, 30, 40, 50), 
    labels = c(&amp;quot;fogo no clima&amp;quot;, &amp;quot;aquecimento global&amp;quot;, &amp;quot;caldeira planetária&amp;quot;, &amp;quot;deixa pra próxima geração&amp;quot;, &amp;quot;desastre em câmera lenta&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-44-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Cada escala vai ter argumentos específicos que fazem sentido em seu próprio contexto. Escalas contínuas tem argumentos para transformação estatística, escalas discretas não aceitam argumentos contínuos e etc.&lt;/p&gt;
&lt;p&gt;Isto encerra nossa parte de &lt;code&gt;ggplot2&lt;/code&gt;, que tal uns exercícios pra esquentar?&lt;/p&gt;
&lt;h2 id=&#34;exercícios&#34;&gt;Exercícios&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;O que tem de errado no código abaixo? Por que os pontos não ficaram azuis?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = &amp;quot;blue&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-45-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;Utilizando o banco &lt;code&gt;mpg&lt;/code&gt;, faça o diagrama de dispersão de &lt;code&gt;displ&lt;/code&gt; por &lt;code&gt;hwy&lt;/code&gt; e mapeie a cor para &lt;code&gt;class&lt;/code&gt;, o tamanho para &lt;code&gt;cyl&lt;/code&gt; e a forma para &lt;code&gt;manufacturer&lt;/code&gt;. Como esses atributos estéticos se comportam diferente para variáveis categóricas vs contínuas?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utilizando o &lt;code&gt;diamonds&lt;/code&gt;, crie um diagrama de dispersão que relacione &lt;code&gt;carat&lt;/code&gt; com &lt;code&gt;price&lt;/code&gt;. Explore algumas outras variáveis utilizando escalas de cor para ver se você identifica algum padrão. Aplique transformações nas variáveis que você considerar justificadas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ainda continuando o exemplo anterior, aplique um &lt;code&gt;geom_smooth&lt;/code&gt; utilizando várias opções de &lt;code&gt;method&lt;/code&gt; para as variáveis originais ou transformadas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No nosso gráfico de barras usando &lt;code&gt;stat(prop)&lt;/code&gt; a gente precisou colocar &lt;code&gt;group = 1&lt;/code&gt;, porque? Qual é a diferença entre esses dois códigos?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, y = after_stat(prop)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-47-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-47-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;code&gt;stat_smooth&lt;/code&gt; é muito parecido com &lt;code&gt;geom_smooth&lt;/code&gt;, mas há uma diferença sutil. Compare os códigos abaixo.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + 
  geom_point() +
  geom_smooth()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-48-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + 
  geom_point() +
  stat_smooth(geom = &amp;quot;step&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-48-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + 
  geom_point() +
  stat_smooth(geom = &amp;quot;linerange&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-48-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + 
  geom_point() +
  stat_smooth(geom = &amp;quot;errorbar&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-48-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + 
  geom_point() +
  stat_smooth(geom = &amp;quot;crossbar&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-48-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;
&lt;p&gt;Usando o &lt;code&gt;mpg&lt;/code&gt; e &lt;code&gt;facet_grid&lt;/code&gt;, crie um scatterplot que contenha &lt;code&gt;displ&lt;/code&gt; no eixo x, &lt;code&gt;hwy&lt;/code&gt; no eixo y, &lt;code&gt;class&lt;/code&gt; na cor, &lt;code&gt;drv&lt;/code&gt; nas facetas-coluna e &lt;code&gt;cyl&lt;/code&gt; nas facetas linha.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Você acha que os dois gráficos abaixo ficarão diferentes um do outro? Porque? Tente responder antes de rodar o código.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-50-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot() + 
  geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-50-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;Tente recriar o seguinte gráfico&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-51-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;Transforme o gráfico seguir em um gráfico de pizza usando &lt;code&gt;coord_polar&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(diamonds, aes(cut, fill = cut)) +
  geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia3_files/figure-html/unnamed-chunk-52-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>purrr</title>
      <link>https://laddem.github.io/courses/tidyverse/dia4/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/courses/tidyverse/dia4/</guid>
      <description>&lt;p&gt;O autor dos pacotes do &lt;code&gt;tidyverse&lt;/code&gt; core é completamente fascinado por gatos, por isso, tantas referências ao bicho nos nomes dos pacotes. &amp;ldquo;Purr&amp;rdquo; (em inglês) é o som que os gatos fazem quando sentem prazer. Para não ficar uma coisa solta no começo da aula, aqui uma foto de gatinho pra vocês:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/dia4_files/gato-de-buteco.jpeg&#34; alt=&#34;O Vizinho da Luciana&#34;&gt;&lt;/p&gt;
&lt;!-- Inciting incident --&gt;
&lt;p&gt;O assunto da aula de hoje é talvez um pouco mais abstrato do que as aulas anteriores. Vamos falar bastante de funções, loops e programação funcional. São termos que fazem parte do jargão da computação, mas que mesmo usuários veteranos do R como software estatístico para análise de dados podem ter pouca familiaridade. Ao invés de começar definindo o que vamos fazer, vou começar definindo o que não vamos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Não vamos revisar a fundo o assunto de iterações. Os livros fazem um bom serviço, é um assunto espinhoso e não basta compreender os conceitos, tem que botar a mão na massa pra ter um entendimento não apenas da teoria, mas também para conseguir resolver os muitos problemas que aparecem quando você está construindo iterações com maior nível de complexidade.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Não vamos cavar fundo em todos os aspectos da programação funcional ou de todas as funções do purrr. São muitas e temos poucas horas.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Agora o que SIM vamos fazer é revisar muito brevemente a sintaxe de um for loop, ver em que situações a gente o utilizaria e como você pode substituir seus vários for loops por funções no purrr, com exemplos de aplicação quando possível. Se der tempo, vamos entrar um pouco na ideia de utilizar programação funcional para resolver problemas mais genéricos em que precisamos generalizar alguma tarefa.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Primeiro, nossos pacotes!
library(tidyverse) # o purrr já é carregado automaticamente junto com os outros,
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Attaching packages --------------------------------------- tidyverse 1.3.1 --
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v ggplot2 3.3.3     v purrr   0.3.4
## v tibble  3.1.2     v dplyr   1.0.6
## v tidyr   1.1.3     v stringr 1.4.0
## v readr   1.4.0     v forcats 0.5.1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Conflicts ------------------------------------------ tidyverse_conflicts() --
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Se quiser carregar apenas o purrr, descomente a linha abaixo
# library(purrr)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iterações&#34;&gt;Iterações&lt;/h2&gt;
&lt;p&gt;Do ponto de vista prático, uma iteração é uma repetição uma linha de código de tal forma que apenas uma pequena parte previsível do código muda entre uma repetição e outra. Por exemplo, digamos que você vai calcular uma soma de &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- runif(100, 0, 1000)
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] 932.45060 854.73036 322.68529 473.32061 787.93718 737.81215 985.23288
##   [8] 556.12284 427.43083 202.31560 556.68959 471.12877 325.80404 864.23383
##  [15] 821.50368 217.90992 828.55693 208.16253 101.32865 497.02844 162.14640
##  [22] 705.92322 541.78227 878.39618 999.20586 779.41229 235.10385 716.48081
##  [29] 316.74047 600.86867 223.53952 776.60319 462.10780 883.16957 709.43722
##  [36] 389.57969 964.70028 376.61982 799.59570 144.71691 924.66184 588.25282
##  [43] 116.61194 608.07781 134.93851 350.80481 851.81603 712.44217  72.07885
##  [50] 921.23962  29.30420 803.04197 704.33304 529.43881 620.59352  68.71324
##  [57] 621.06605 369.86052 978.34026  71.94507 954.05547 933.73772 747.56437
##  [64] 467.99461 708.76668  68.69263 904.94534 444.09781 274.69749 977.41118
##  [71] 251.36856 702.56858  40.30280 940.35432 117.62457 442.16959  15.79249
##  [78] 102.77577  99.87290 712.89847 962.80337  46.97794 930.34112 326.48483
##  [85] 439.90790 965.39917 322.10377 970.62833 663.42152 263.12762 759.84708
##  [92]   5.94325 431.82749 460.66645 458.93459  74.09223 315.73897 686.44889
##  [99] 861.14429 498.09425
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esqueça, por um instante, a função &lt;code&gt;sum&lt;/code&gt;. O cálculo da soma se dá pela soma de todos os elementos do vetor &lt;code&gt;x&lt;/code&gt;. Então, é necessário repetir a operação de soma através da acumulação dos valores. Veja que é tudo totalmente previsível, cada nova repetição simplesmente adiciona mais um valor ao vetor original e esse valor pode ser encontrado na próxima posição de &lt;code&gt;x&lt;/code&gt;. Esse é o típico caso de iteração. No R, a melhor prática é inicializar uma variável antes e salvar os resultados da iteração nela.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Inicialização
result &amp;lt;- x[[1]]

# Sequência
for (i in 2:length(x)) {
  # Corpo
  result &amp;lt;- result + x[[i]]
}

# Comparando os dois resultados
result
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 53267.7
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 53267.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Outro exemplo de mesmo tipo é repetição de uma mesma operação em vários vetores/colunas/variáveis comuns. Por exemplo, se eu tenho um &lt;code&gt;data.frame&lt;/code&gt; com três colunas numéricas e eu gostaria de calcular a soma de cada uma.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Data.frame
df &amp;lt;- tibble(x = rnorm(100, 50, 25),
             y = rnorm(100, 100, 25),
             z = rnorm(100, 200, 25))

# Inicialização
result &amp;lt;- vector(mode = &amp;quot;double&amp;quot;, length = length(df))

# Sequência
for (i in seq_along(df)) {
  result[[i]] &amp;lt;- sum(df[[i]])
}

# Resultado
result
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  4763.273 10257.077 20251.471
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essa é a minha revisão de 5 minutos de iteração em R usando &lt;code&gt;for&lt;/code&gt; loops. Como já é de costume, tem muito mais. Por exemplo, existe um outro tipo de iterador no R básico chamado &lt;code&gt;while&lt;/code&gt;, que tem um funcionamento diferente do &lt;code&gt;for&lt;/code&gt;. Ao invés de você ter um resultado de tamanho previsível, você pode ter um resultado de tamanho desconhecido. Vou deixar o &lt;code&gt;while&lt;/code&gt; para vocês pesquisarem porque o bom e velho &lt;code&gt;for&lt;/code&gt; costuma cobrir a maioria dos casos de uso do cientista de dados.&lt;/p&gt;
&lt;h2 id=&#34;programação-funcional&#34;&gt;Programação funcional&lt;/h2&gt;
&lt;p&gt;Beleza, agora que já dominamos (ou não) o &lt;code&gt;for&lt;/code&gt; loop, encontramos várias situações em que a gente gostaria de realizar a mesma operação várias vezes, mas, o &lt;code&gt;for&lt;/code&gt; loop é como uma feijoada: é gostoso, mas é pesado. &lt;code&gt;For&lt;/code&gt; loops em geral são &amp;ldquo;verbosos&amp;rdquo;, você precisa escrever bastante para chegar em um determinado resultado e, depois de escrever alguns, você cansa de ter que repetir todos os pedaços dele. E se você pudesse &lt;strong&gt;abstrair&lt;/strong&gt; o loop para uma função? Aí você não precisaria escrever toda aquela parafernalha.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;soma &amp;lt;- function(x) {
  result &amp;lt;- 0
  for (i in 1:length(x)) {
    result &amp;lt;- result + x[[i]]
  }
  result
}

soma(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 53267.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ao fazer isso, eu ganho duas vantagens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Manutenção: sempre que eu precisar repetir a operação, eu consigo simplificar muito meu código. Não preciso escrever um for loop para cada soma que eu precisar fazer. Se meus requerimentos mudarem no futuro, eu só preciso mudar um pedaço de código.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leitura: o humano que lê um &lt;code&gt;for&lt;/code&gt; loop vai precisar de um minuto para se familiarizar com a operação e entender o que está sendo iterado, calculado, etc. O humano que lê &amp;ldquo;soma&amp;rdquo; sabe que ocorrerá uma soma. Você alinha a &lt;strong&gt;expectativa&lt;/strong&gt; com a &lt;strong&gt;execução&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Outro exemplo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;soma_xyz &amp;lt;- function(x) {
  soma_xyz &amp;lt;- vector(mode = &amp;quot;double&amp;quot;, length = nrow(x))
  for (i in seq_along(x[[1]])) {
    soma_xyz[[i]] &amp;lt;- x[[1]][[i]] + x[[2]][[i]] + x[[3]][i]
  }
  soma_xyz
}

df$soma_xyz2 &amp;lt;- soma_xyz(df)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 100 x 4
##        x     y     z soma_xyz2
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1  20.2 139.   193.      352.
##  2  56.3  91.9  199.      347.
##  3  28.2 125.   221.      375.
##  4  77.4  68.6  213.      359.
##  5  76.9  48.6  169.      294.
##  6  26.1  95.7  236.      358.
##  7  55.3  68.5  198.      322.
##  8  81.9  98.0  265.      445.
##  9  58.5  71.3  111.      240.
## 10  31.5 108.   231.      371.
## # ... with 90 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Outra vantagem de ter na mão uma função, é que eu posso me apropriar das ferramentas de programação funcional do R. São as funções da família &lt;code&gt;apply&lt;/code&gt;, que recebem uma lista de objetos e aplicam uma função em cada um. Basicamente, aquela &lt;strong&gt;abstração&lt;/strong&gt; do for loop que estavamos buscando.&lt;/p&gt;
&lt;p&gt;Vejam como eu posso recriar o exemplo das somas das colunas do &lt;code&gt;data.frame&lt;/code&gt; usando a função soma.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(df, soma)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         x         y         z soma_xyz2 
##  4763.273 10257.077 20251.471 35271.821
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eu sei, o exemplo é muito simples pra ter uma aplicação real. Até porque já vimos como fazer esse tipo de operação com &lt;code&gt;summarize&lt;/code&gt; lá atrás. Mas talvez, na hora que você estiver realizando alguma operação de repetição, você se lembre dessa possibilidade e ela lhe seja útil.&lt;/p&gt;
&lt;h3 id=&#34;o-pacote-purrr&#34;&gt;o pacote &lt;code&gt;purrr&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Até o momento, nos limitamos a utilizar funções presentes no &lt;code&gt;base&lt;/code&gt;, mas o verdadeiro intuito dessa aula é introduzir as facilidade trazidas pelas funções do &lt;code&gt;tidyverse&lt;/code&gt;. No pacote &lt;code&gt;purrr&lt;/code&gt;, são importadas funções com diversas funcionalidades que facilitam o trabalho com objetos mais complexos, como listas (pense saída de modelo), iterações envolvendo mais de um argumento (pense escrever diversos objetos em diversos arquivos distintos) e assim sucessivamente. Abaixo, segue uma lista das funções do pacote com uma descrição curta.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a família &lt;code&gt;map_()&lt;/code&gt;: similar a família &lt;code&gt;apply&lt;/code&gt; do R base. Recebe uma lista de objetos de entrada e uma função e devolve uma lista com os resultados.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;map2_()&lt;/code&gt;: mesma coisa, só que você pode passar duas listas de objetos e uma função que requer dois argumentos variáveis. &lt;code&gt;pmap()&lt;/code&gt; é a generalização, em que você passa &lt;code&gt;p&lt;/code&gt; listas e uma função que pede &lt;code&gt;p&lt;/code&gt; argumentos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;imap()&lt;/code&gt;: aplica uma função tanto ao vetor, como a seu nome/índice. É meio louco, mas é muito útil para alguns casos de uso.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;modify_()&lt;/code&gt;: permite aplicar alterações no objeto estilo o que você faria com uma pipeline de &lt;code&gt;filter %&amp;gt;% mutate&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;safely()&lt;/code&gt;: e suas irmãs &lt;code&gt;possibly()&lt;/code&gt; e &lt;code&gt;quietly()&lt;/code&gt; ajudam a obter resultados mesmo quando há ocorre um erro na iteração.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;transpose()&lt;/code&gt;, &lt;code&gt;flatten_&lt;/code&gt;: manipulam e reformatam listas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;invoke_map()&lt;/code&gt;: aplica uma lista de funções a uma (opcional) segunda lista de parâmetros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt; e &lt;code&gt;accumulate()&lt;/code&gt;: generalizam as operações de sumarização (pense soma acumulada, média, limite, fatorial)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pluck()&lt;/code&gt;: pesca elementos de uma lista com uma sintaxe linear e bonitinha.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://purrr.tidyverse.org/reference/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;E muito mais coisas&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No interesse de ir direto ao ponto e não tentar ser exaustivo, vamos ver algumas delas em mais detalhe.&lt;/p&gt;
&lt;h4 id=&#34;a-função-map&#34;&gt;A função &lt;code&gt;map&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Essa função é praticamente uma cópia de &lt;code&gt;lapply&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df %&amp;gt;% lapply(sum)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $x
## [1] 4763.273
## 
## $y
## [1] 10257.08
## 
## $z
## [1] 20251.47
## 
## $soma_xyz2
## [1] 35271.82
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df %&amp;gt;% map(sum)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $x
## [1] 4763.273
## 
## $y
## [1] 10257.08
## 
## $z
## [1] 20251.47
## 
## $soma_xyz2
## [1] 35271.82
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Embora existam pequenas diferenças técnicas entre elas, a principal vantagem de &lt;code&gt;map&lt;/code&gt; é a possibilidade de criar funções anônimas com uma síntaxe enxuta. Pense, por exemplo, em elevar ao quadrado.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df %&amp;gt;% lapply(function(x) x ^ 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $x
##   [1] 4.098851e+02 3.166900e+03 7.965187e+02 5.990114e+03 5.919986e+03
##   [6] 6.806833e+02 3.058849e+03 6.710794e+03 3.418073e+03 9.911043e+02
##  [11] 7.262557e+03 1.229650e+03 4.614959e+03 1.334587e+03 4.376548e+03
##  [16] 1.683557e+00 3.678986e+03 7.303855e+02 2.281344e+03 6.020090e+03
##  [21] 1.616306e+03 1.022110e+03 2.669522e+03 6.254209e+02 2.947705e+03
##  [26] 1.228063e+03 2.983676e+03 5.213567e+03 9.712738e+02 1.091035e+03
##  [31] 9.744005e+03 3.788507e+03 1.518321e+03 3.973071e+00 4.709316e+03
##  [36] 8.881056e+03 4.026554e+03 6.044031e+03 4.619299e+03 3.993292e+03
##  [41] 1.099183e+03 3.245529e+03 2.409330e+03 6.679147e+03 3.316934e+03
##  [46] 6.501946e+03 1.978189e+03 4.707893e+03 9.689042e+02 1.957993e+03
##  [51] 2.873459e+03 2.794197e+03 5.046830e+03 1.074281e+03 2.117916e+03
##  [56] 3.384339e+03 2.103909e+03 4.102475e+02 9.532060e+02 6.740582e+03
##  [61] 7.270433e+02 3.579561e+03 7.520174e+03 2.640835e+03 1.262544e+03
##  [66] 2.075985e+03 1.424682e+03 2.603697e+02 8.431157e+02 1.063360e+03
##  [71] 3.582397e+02 3.114648e+02 9.796727e+02 2.202274e+03 5.074693e+03
##  [76] 4.770465e+03 3.896971e+03 3.910142e+03 5.819862e+01 3.020810e+03
##  [81] 7.376594e+03 1.009338e+03 1.488763e+03 1.447512e-03 2.358162e+03
##  [86] 1.749782e+03 6.096146e+02 2.326065e-01 7.560180e+02 4.230610e+03
##  [91] 3.870858e+03 7.034365e+03 2.282774e+00 2.048389e+03 1.783539e+03
##  [96] 3.326398e+02 3.721681e+03 3.599671e+03 9.388893e+02 1.781901e+02
## 
## $y
##   [1] 19262.498  8440.949 15706.307  4699.395  2365.636  9158.381  4692.247
##   [8]  9608.843  5090.449 11770.936 18153.544 17477.696  5395.348 10194.023
##  [15] 16405.544  7442.935  6077.889 11838.011  1518.600 14098.638  8195.648
##  [22] 20491.093 16726.949  1902.552 16036.617  3346.542  7980.461 17444.534
##  [29] 10690.553 15542.924 19621.167  8133.165 17494.853 16943.489  9692.481
##  [36] 18518.499  8078.944  8584.160  8936.495  2016.352 16465.394  7015.704
##  [43] 15703.783 28859.615 14385.671 12426.197 22442.690  4366.540  7877.715
##  [50] 15996.190 13474.364  6688.742  7970.944  8001.087  9704.368  8127.663
##  [57] 12784.580 15311.353 13045.664  5888.471  4923.967 13759.427 10456.918
##  [64] 17088.958  7803.571  4756.058  7695.688 15125.565 18005.310 13821.906
##  [71] 12273.549  3906.617 15237.079  9925.422 14122.162  8628.404 15950.013
##  [78] 20258.130 13275.272 10398.823 14999.890  5641.321  5964.132 17029.926
##  [85] 12111.979 10285.968  9533.723 18723.109 12764.953 18973.842 13175.134
##  [92]  2003.455 11236.108  3245.825  9936.697  7681.693  3721.840  6701.296
##  [99] 13070.664  7377.707
## 
## $z
##   [1] 37183.52 39628.72 49034.03 45434.22 28479.23 55896.08 39203.50 70104.90
##   [9] 12246.82 53206.94 37583.26 38015.74 48362.58 52578.69 30413.38 48118.08
##  [17] 35491.71 49080.87 28324.10 25013.11 62625.54 36067.94 33375.13 30367.84
##  [25] 43104.49 47884.11 51146.67 33091.00 45992.31 37133.20 33173.89 39156.23
##  [33] 51787.03 43173.31 38775.45 31521.51 50210.34 47023.23 27656.30 36609.76
##  [41] 35897.11 41197.37 28894.09 52887.36 32805.70 37407.91 52157.29 41996.41
##  [49] 34322.69 33124.52 31077.55 21019.93 46411.13 32895.26 55085.26 47956.83
##  [57] 73376.10 31954.32 29485.71 49999.43 52964.14 37318.59 38305.11 44738.32
##  [65] 38052.40 51223.73 43747.69 55565.40 57276.59 63332.76 42843.69 56657.40
##  [73] 38516.17 43591.16 59826.20 46073.10 47388.84 43874.46 43295.12 37138.21
##  [81] 55577.27 33570.50 44585.57 39053.49 27161.43 29699.13 39081.64 30360.08
##  [89] 33522.29 49180.78 49246.60 39041.14 38814.45 35312.49 38863.55 31376.48
##  [97] 32465.36 38521.36 52356.80 34374.93
## 
## $soma_xyz2
##   [1] 123809.19 120561.38 140612.83 128953.53  86634.35 128316.46 103558.83
##   [8] 197773.60  57829.20 137375.52 171246.79 131222.06 130538.74 134540.69
##  [15] 135890.98  94204.98 106934.16 127713.53  65040.45 125657.67 145148.87
##  [22] 133249.22 132269.50  58995.74 150967.02  97167.74 136983.45 149144.35
##  [29] 121813.96 122781.46 177177.27 122230.11 159042.55 112866.29 132488.50
##  [36] 166353.87 142441.87 149956.75 108109.63  89660.17 123156.64 118130.16
##  [43] 118599.15 231919.06 128634.52 148624.71 178646.03 115344.55  93115.03
##  [50] 124416.11 119696.66  78191.49 141190.79  92170.25 143818.48 134923.31
##  [57] 184743.12 104168.42 100365.85 146262.60 107108.34 137129.66 147990.19
##  [64] 154943.12 101722.96 116181.28 111976.92 140508.90 162042.95 161472.01
##  [71] 113367.20 101238.16 123196.54 126266.34 188935.87 141830.72 165168.16
##  [78] 171664.79 109509.35 122254.62 197233.20  84158.80 106906.26 107636.66
##  [85] 104602.18  99593.59 102414.04  96467.13 104696.77 180247.90 159133.14
##  [92] 106419.09  90904.34  84185.55 114957.18  80099.05  91321.16 114330.07
##  [99] 139714.77  81024.00
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df %&amp;gt;% map(~ .x ^ 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $x
##   [1] 4.098851e+02 3.166900e+03 7.965187e+02 5.990114e+03 5.919986e+03
##   [6] 6.806833e+02 3.058849e+03 6.710794e+03 3.418073e+03 9.911043e+02
##  [11] 7.262557e+03 1.229650e+03 4.614959e+03 1.334587e+03 4.376548e+03
##  [16] 1.683557e+00 3.678986e+03 7.303855e+02 2.281344e+03 6.020090e+03
##  [21] 1.616306e+03 1.022110e+03 2.669522e+03 6.254209e+02 2.947705e+03
##  [26] 1.228063e+03 2.983676e+03 5.213567e+03 9.712738e+02 1.091035e+03
##  [31] 9.744005e+03 3.788507e+03 1.518321e+03 3.973071e+00 4.709316e+03
##  [36] 8.881056e+03 4.026554e+03 6.044031e+03 4.619299e+03 3.993292e+03
##  [41] 1.099183e+03 3.245529e+03 2.409330e+03 6.679147e+03 3.316934e+03
##  [46] 6.501946e+03 1.978189e+03 4.707893e+03 9.689042e+02 1.957993e+03
##  [51] 2.873459e+03 2.794197e+03 5.046830e+03 1.074281e+03 2.117916e+03
##  [56] 3.384339e+03 2.103909e+03 4.102475e+02 9.532060e+02 6.740582e+03
##  [61] 7.270433e+02 3.579561e+03 7.520174e+03 2.640835e+03 1.262544e+03
##  [66] 2.075985e+03 1.424682e+03 2.603697e+02 8.431157e+02 1.063360e+03
##  [71] 3.582397e+02 3.114648e+02 9.796727e+02 2.202274e+03 5.074693e+03
##  [76] 4.770465e+03 3.896971e+03 3.910142e+03 5.819862e+01 3.020810e+03
##  [81] 7.376594e+03 1.009338e+03 1.488763e+03 1.447512e-03 2.358162e+03
##  [86] 1.749782e+03 6.096146e+02 2.326065e-01 7.560180e+02 4.230610e+03
##  [91] 3.870858e+03 7.034365e+03 2.282774e+00 2.048389e+03 1.783539e+03
##  [96] 3.326398e+02 3.721681e+03 3.599671e+03 9.388893e+02 1.781901e+02
## 
## $y
##   [1] 19262.498  8440.949 15706.307  4699.395  2365.636  9158.381  4692.247
##   [8]  9608.843  5090.449 11770.936 18153.544 17477.696  5395.348 10194.023
##  [15] 16405.544  7442.935  6077.889 11838.011  1518.600 14098.638  8195.648
##  [22] 20491.093 16726.949  1902.552 16036.617  3346.542  7980.461 17444.534
##  [29] 10690.553 15542.924 19621.167  8133.165 17494.853 16943.489  9692.481
##  [36] 18518.499  8078.944  8584.160  8936.495  2016.352 16465.394  7015.704
##  [43] 15703.783 28859.615 14385.671 12426.197 22442.690  4366.540  7877.715
##  [50] 15996.190 13474.364  6688.742  7970.944  8001.087  9704.368  8127.663
##  [57] 12784.580 15311.353 13045.664  5888.471  4923.967 13759.427 10456.918
##  [64] 17088.958  7803.571  4756.058  7695.688 15125.565 18005.310 13821.906
##  [71] 12273.549  3906.617 15237.079  9925.422 14122.162  8628.404 15950.013
##  [78] 20258.130 13275.272 10398.823 14999.890  5641.321  5964.132 17029.926
##  [85] 12111.979 10285.968  9533.723 18723.109 12764.953 18973.842 13175.134
##  [92]  2003.455 11236.108  3245.825  9936.697  7681.693  3721.840  6701.296
##  [99] 13070.664  7377.707
## 
## $z
##   [1] 37183.52 39628.72 49034.03 45434.22 28479.23 55896.08 39203.50 70104.90
##   [9] 12246.82 53206.94 37583.26 38015.74 48362.58 52578.69 30413.38 48118.08
##  [17] 35491.71 49080.87 28324.10 25013.11 62625.54 36067.94 33375.13 30367.84
##  [25] 43104.49 47884.11 51146.67 33091.00 45992.31 37133.20 33173.89 39156.23
##  [33] 51787.03 43173.31 38775.45 31521.51 50210.34 47023.23 27656.30 36609.76
##  [41] 35897.11 41197.37 28894.09 52887.36 32805.70 37407.91 52157.29 41996.41
##  [49] 34322.69 33124.52 31077.55 21019.93 46411.13 32895.26 55085.26 47956.83
##  [57] 73376.10 31954.32 29485.71 49999.43 52964.14 37318.59 38305.11 44738.32
##  [65] 38052.40 51223.73 43747.69 55565.40 57276.59 63332.76 42843.69 56657.40
##  [73] 38516.17 43591.16 59826.20 46073.10 47388.84 43874.46 43295.12 37138.21
##  [81] 55577.27 33570.50 44585.57 39053.49 27161.43 29699.13 39081.64 30360.08
##  [89] 33522.29 49180.78 49246.60 39041.14 38814.45 35312.49 38863.55 31376.48
##  [97] 32465.36 38521.36 52356.80 34374.93
## 
## $soma_xyz2
##   [1] 123809.19 120561.38 140612.83 128953.53  86634.35 128316.46 103558.83
##   [8] 197773.60  57829.20 137375.52 171246.79 131222.06 130538.74 134540.69
##  [15] 135890.98  94204.98 106934.16 127713.53  65040.45 125657.67 145148.87
##  [22] 133249.22 132269.50  58995.74 150967.02  97167.74 136983.45 149144.35
##  [29] 121813.96 122781.46 177177.27 122230.11 159042.55 112866.29 132488.50
##  [36] 166353.87 142441.87 149956.75 108109.63  89660.17 123156.64 118130.16
##  [43] 118599.15 231919.06 128634.52 148624.71 178646.03 115344.55  93115.03
##  [50] 124416.11 119696.66  78191.49 141190.79  92170.25 143818.48 134923.31
##  [57] 184743.12 104168.42 100365.85 146262.60 107108.34 137129.66 147990.19
##  [64] 154943.12 101722.96 116181.28 111976.92 140508.90 162042.95 161472.01
##  [71] 113367.20 101238.16 123196.54 126266.34 188935.87 141830.72 165168.16
##  [78] 171664.79 109509.35 122254.62 197233.20  84158.80 106906.26 107636.66
##  [85] 104602.18  99593.59 102414.04  96467.13 104696.77 180247.90 159133.14
##  [92] 106419.09  90904.34  84185.55 114957.18  80099.05  91321.16 114330.07
##  [99] 139714.77  81024.00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Através do uso de fórmulas &lt;code&gt;~&lt;/code&gt; é possível especificar funções anônimas simples economizando caracteres e utilizando o autocompletar.&lt;/p&gt;
&lt;p&gt;Que tal esta pipeline?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(nycflights13)

# Médias de todas as variáveis numéricas usando where()
flights %&amp;gt;% 
  select(where(is.numeric)) %&amp;gt;% 
  map(mean)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $year
## [1] 2013
## 
## $month
## [1] 6.54851
## 
## $day
## [1] 15.71079
## 
## $dep_time
## [1] NA
## 
## $sched_dep_time
## [1] 1344.255
## 
## $dep_delay
## [1] NA
## 
## $arr_time
## [1] NA
## 
## $sched_arr_time
## [1] 1536.38
## 
## $arr_delay
## [1] NA
## 
## $flight
## [1] 1971.924
## 
## $air_time
## [1] NA
## 
## $distance
## [1] 1039.913
## 
## $hour
## [1] 13.18025
## 
## $minute
## [1] 26.2301
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou esta&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Proporção de missings em todas as variáveis
flights %&amp;gt;% 
  map(is.na) %&amp;gt;% 
  map(mean)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $year
## [1] 0
## 
## $month
## [1] 0
## 
## $day
## [1] 0
## 
## $dep_time
## [1] 0.02451184
## 
## $sched_dep_time
## [1] 0
## 
## $dep_delay
## [1] 0.02451184
## 
## $arr_time
## [1] 0.0258718
## 
## $sched_arr_time
## [1] 0
## 
## $arr_delay
## [1] 0.02800081
## 
## $carrier
## [1] 0
## 
## $flight
## [1] 0
## 
## $tailnum
## [1] 0.007458964
## 
## $origin
## [1] 0
## 
## $dest
## [1] 0
## 
## $air_time
## [1] 0.02800081
## 
## $distance
## [1] 0
## 
## $hour
## [1] 0
## 
## $minute
## [1] 0
## 
## $time_hour
## [1] 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Contagem de missings em todas as variáveis
flights %&amp;gt;% 
  map(is.na) %&amp;gt;% 
  map(sum)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $year
## [1] 0
## 
## $month
## [1] 0
## 
## $day
## [1] 0
## 
## $dep_time
## [1] 8255
## 
## $sched_dep_time
## [1] 0
## 
## $dep_delay
## [1] 8255
## 
## $arr_time
## [1] 8713
## 
## $sched_arr_time
## [1] 0
## 
## $arr_delay
## [1] 9430
## 
## $carrier
## [1] 0
## 
## $flight
## [1] 0
## 
## $tailnum
## [1] 2512
## 
## $origin
## [1] 0
## 
## $dest
## [1] 0
## 
## $air_time
## [1] 9430
## 
## $distance
## [1] 0
## 
## $hour
## [1] 0
## 
## $minute
## [1] 0
## 
## $time_hour
## [1] 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A outra grande vantagem do map é ter acesso fácil ao controle do tipo de saída.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Vetor numérico
flights %&amp;gt;% 
  map(is.na) %&amp;gt;% 
  map_dbl(mean)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           year          month            day       dep_time sched_dep_time 
##    0.000000000    0.000000000    0.000000000    0.024511842    0.000000000 
##      dep_delay       arr_time sched_arr_time      arr_delay        carrier 
##    0.024511842    0.025871796    0.000000000    0.028000808    0.000000000 
##         flight        tailnum         origin           dest       air_time 
##    0.000000000    0.007458964    0.000000000    0.000000000    0.028000808 
##       distance           hour         minute      time_hour 
##    0.000000000    0.000000000    0.000000000    0.000000000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Vetor de caracteres
flights %&amp;gt;% 
  map(is.na) %&amp;gt;% 
  map_chr(mean)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           year          month            day       dep_time sched_dep_time 
##     &amp;quot;0.000000&amp;quot;     &amp;quot;0.000000&amp;quot;     &amp;quot;0.000000&amp;quot;     &amp;quot;0.024512&amp;quot;     &amp;quot;0.000000&amp;quot; 
##      dep_delay       arr_time sched_arr_time      arr_delay        carrier 
##     &amp;quot;0.024512&amp;quot;     &amp;quot;0.025872&amp;quot;     &amp;quot;0.000000&amp;quot;     &amp;quot;0.028001&amp;quot;     &amp;quot;0.000000&amp;quot; 
##         flight        tailnum         origin           dest       air_time 
##     &amp;quot;0.000000&amp;quot;     &amp;quot;0.007459&amp;quot;     &amp;quot;0.000000&amp;quot;     &amp;quot;0.000000&amp;quot;     &amp;quot;0.028001&amp;quot; 
##       distance           hour         minute      time_hour 
##     &amp;quot;0.000000&amp;quot;     &amp;quot;0.000000&amp;quot;     &amp;quot;0.000000&amp;quot;     &amp;quot;0.000000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Um exemplo um pouco mais elaborado: avaliação inicial de variáveis em um modelo. Em geral, é comum rodar um modelo para cada variável numérica para ver como elas se comportam.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;respvar &amp;lt;- &amp;quot;hwy&amp;quot;
predvars &amp;lt;- names(select(mpg, where(is.numeric), -hwy))

tibble(
  names = predvars,
  fit = map(names, ~lm(paste0(respvar, &amp;quot;~&amp;quot;, .x), data = mpg)),
  summary = map(fit, summary),
  r2 = map_dbl(summary, &amp;quot;r.squared&amp;quot;),
  FStat = map_df(summary, &amp;quot;fstatistic&amp;quot;),
  coefs = map_df(fit, coef),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 6
##   names fit    summary      r2 FStat$value $numdf $dendf coefs$`(Interce~ $displ
##   &amp;lt;chr&amp;gt; &amp;lt;list&amp;gt; &amp;lt;list&amp;gt;    &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 displ &amp;lt;lm&amp;gt;   &amp;lt;smmry~ 5.87e-1   329.           1    232           35.7    -3.53
## 2 year  &amp;lt;lm&amp;gt;   &amp;lt;smmry~ 4.66e-6     0.00108      1    232           17.7    NA   
## 3 cyl   &amp;lt;lm&amp;gt;   &amp;lt;smmry~ 5.81e-1   321.           1    232           40.0    NA   
## 4 cty   &amp;lt;lm&amp;gt;   &amp;lt;smmry~ 9.14e-1  2459.           1    232            0.892  NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, a saída não está muito bonitinha! Mas com um pouco mais de trabalho, programadores melhores que eu fizeram isso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;models &amp;lt;- 
  tibble(
    names = predvars,
    fit = map(names, ~lm(paste0(respvar, &amp;quot;~&amp;quot;, .x), data = mpg)),
    tidied = fit %&amp;gt;% map(broom::tidy),
    glanced = fit %&amp;gt;% map(broom::glance),
    augmented = fit %&amp;gt;% map(broom::augment)
  )

models
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 5
##   names fit    tidied           glanced           augmented         
##   &amp;lt;chr&amp;gt; &amp;lt;list&amp;gt; &amp;lt;list&amp;gt;           &amp;lt;list&amp;gt;            &amp;lt;list&amp;gt;            
## 1 displ &amp;lt;lm&amp;gt;   &amp;lt;tibble [2 x 5]&amp;gt; &amp;lt;tibble [1 x 12]&amp;gt; &amp;lt;tibble [234 x 8]&amp;gt;
## 2 year  &amp;lt;lm&amp;gt;   &amp;lt;tibble [2 x 5]&amp;gt; &amp;lt;tibble [1 x 12]&amp;gt; &amp;lt;tibble [234 x 8]&amp;gt;
## 3 cyl   &amp;lt;lm&amp;gt;   &amp;lt;tibble [2 x 5]&amp;gt; &amp;lt;tibble [1 x 12]&amp;gt; &amp;lt;tibble [234 x 8]&amp;gt;
## 4 cty   &amp;lt;lm&amp;gt;   &amp;lt;tibble [2 x 5]&amp;gt; &amp;lt;tibble [1 x 12]&amp;gt; &amp;lt;tibble [234 x 8]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Grande coisa, Vinícius, o output é ilegível! Calma! Lembram da primeira aula em que eu comentei que havia mais funções no &lt;code&gt;tidyr&lt;/code&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Coeficientes
models %&amp;gt;% 
  select(tidied) %&amp;gt;%
  tidyr::unnest(tidied) %&amp;gt;% 
  filter(term != &amp;quot;(Intercept)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 5
##   term  estimate std.error statistic   p.value
##   &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 displ -3.53       0.195   -18.2    2.04e- 46
## 2 year   0.00285    0.0867    0.0329 9.74e-  1
## 3 cyl   -2.82       0.157   -17.9    1.18e- 45
## 4 cty    1.34       0.0270   49.6    1.87e-125
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Estatísticas do modelo
models %&amp;gt;% 
  select(names, glanced) %&amp;gt;% 
  unnest(glanced)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 13
##   names  r.squared adj.r.squared sigma  statistic   p.value    df logLik   AIC
##   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 displ 0.587            0.585    3.84  329.      2.04e- 46     1  -646. 1297.
## 2 year  0.00000466      -0.00431  5.97    0.00108 9.74e-  1     1  -749. 1504.
## 3 cyl   0.581            0.579    3.87  321.      1.18e- 45     1  -647. 1301.
## 4 cty   0.914            0.913    1.75 2459.      1.87e-125     1  -462.  931.
## # ... with 4 more variables: BIC &amp;lt;dbl&amp;gt;, deviance &amp;lt;dbl&amp;gt;, df.residual &amp;lt;int&amp;gt;,
## #   nobs &amp;lt;int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Bancos &amp;quot;aumentados&amp;quot; com valores ajustados, resíduos, distâncias de cook, etc.
models %&amp;gt;% 
  filter(names == &amp;quot;displ&amp;quot;) %&amp;gt;% 
  select(names, augmented) %&amp;gt;% 
  unnest(augmented)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 234 x 9
##    names   hwy displ .fitted .resid    .hat .sigma    .cooksd .std.resid
##    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
##  1 displ    29   1.8    29.3 -0.343 0.0115    3.84 0.0000468     -0.0898
##  2 displ    29   1.8    29.3 -0.343 0.0115    3.84 0.0000468     -0.0898
##  3 displ    31   2      28.6  2.36  0.00984   3.84 0.00191        0.619 
##  4 displ    30   2      28.6  1.36  0.00984   3.84 0.000634       0.357 
##  5 displ    26   2.8    25.8  0.188 0.00543   3.84 0.00000660     0.0491
##  6 displ    26   2.8    25.8  0.188 0.00543   3.84 0.00000660     0.0491
##  7 displ    27   3.1    24.8  2.25  0.00463   3.84 0.000802       0.587 
##  8 displ    26   1.8    29.3 -3.34  0.0115    3.84 0.00445       -0.876 
##  9 displ    25   1.8    29.3 -4.34  0.0115    3.83 0.00751       -1.14  
## 10 displ    28   2      28.6 -0.636 0.00984   3.84 0.000138      -0.167 
## # ... with 224 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isso aqui é só uma palhinha de modelagem com o &lt;code&gt;tidyverse&lt;/code&gt;, mas acho que é uma demonstração muito convincente da aplicabilidade dos exemplos que vimos usando programação funcional.&lt;/p&gt;
&lt;p&gt;Outro exemplo mais simples com &lt;code&gt;map2&lt;/code&gt;: salvar vários arquivos de uma vez só.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df1 &amp;lt;- tibble(x = rnorm(100), y = rnorm(100), z = rnorm(100))
df2 &amp;lt;- tibble(x = rnorm(100), y = rnorm(100), z = rnorm(100))
df3 &amp;lt;- tibble(x = rnorm(100), y = rnorm(100), z = rnorm(100))
df4 &amp;lt;- tibble(x = rnorm(100), y = rnorm(100), z = rnorm(100))

dfs &amp;lt;- list(df1, df2, df3, df4)
dfs
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## # A tibble: 100 x 3
##         x       y       z
##     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 -1.59   0.296   0.738 
##  2 -0.430 -0.0696  0.554 
##  3 -1.66  -0.0623 -1.25  
##  4 -0.595  0.353  -0.704 
##  5  0.669 -0.510   0.399 
##  6  0.829  1.08   -0.0918
##  7 -0.372  0.0488 -0.225 
##  8 -0.777  1.47    0.698 
##  9  0.510 -1.02    0.970 
## 10 -0.511  1.29    0.374 
## # ... with 90 more rows
## 
## [[2]]
## # A tibble: 100 x 3
##          x      y       z
##      &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1  0.0224  0.746 -1.29  
##  2  1.51   -0.462  0.743 
##  3 -0.0367  0.502  1.01  
##  4 -0.575   0.653  1.47  
##  5 -0.879  -0.591 -1.54  
##  6  0.168  -0.173 -0.0793
##  7 -0.747   1.75   0.962 
##  8 -0.748   2.08  -0.282 
##  9 -0.526  -1.08   0.486 
## 10  1.56    1.72   0.706 
## # ... with 90 more rows
## 
## [[3]]
## # A tibble: 100 x 3
##         x      y       z
##     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 -0.694 -0.633  0.469 
##  2  0.669  0.956  1.88  
##  3 -0.874  0.997 -0.415 
##  4 -1.99   0.517 -0.0228
##  5  0.308 -2.41   0.601 
##  6 -0.273 -1.70  -0.891 
##  7 -0.769 -0.531 -1.12  
##  8 -1.67  -0.520  0.0485
##  9 -0.837  0.254  0.675 
## 10 -0.627 -0.734 -0.830 
## # ... with 90 more rows
## 
## [[4]]
## # A tibble: 100 x 3
##          x       y      z
##      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1  0.376  -0.0913 -0.312
##  2 -0.109   1.05   -0.229
##  3  0.181  -0.826  -0.658
##  4 -0.534  -0.498  -1.53 
##  5 -0.0549  2.03    0.809
##  6  0.677   1.04    0.750
##  7  0.0816 -1.15    1.80 
##  8 -0.710   1.26   -0.769
##  9  0.165  -0.375  -0.788
## 10  0.456   0.759   0.163
## # ... with 90 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;paths &amp;lt;- sprintf(&amp;quot;arquivo%s.csv&amp;quot;, 1:4)
paths
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;arquivo1.csv&amp;quot; &amp;quot;arquivo2.csv&amp;quot; &amp;quot;arquivo3.csv&amp;quot; &amp;quot;arquivo4.csv&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map2(dfs, paths, ~write_csv(x = .x, file = .y))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## # A tibble: 100 x 3
##         x       y       z
##     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 -1.59   0.296   0.738 
##  2 -0.430 -0.0696  0.554 
##  3 -1.66  -0.0623 -1.25  
##  4 -0.595  0.353  -0.704 
##  5  0.669 -0.510   0.399 
##  6  0.829  1.08   -0.0918
##  7 -0.372  0.0488 -0.225 
##  8 -0.777  1.47    0.698 
##  9  0.510 -1.02    0.970 
## 10 -0.511  1.29    0.374 
## # ... with 90 more rows
## 
## [[2]]
## # A tibble: 100 x 3
##          x      y       z
##      &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1  0.0224  0.746 -1.29  
##  2  1.51   -0.462  0.743 
##  3 -0.0367  0.502  1.01  
##  4 -0.575   0.653  1.47  
##  5 -0.879  -0.591 -1.54  
##  6  0.168  -0.173 -0.0793
##  7 -0.747   1.75   0.962 
##  8 -0.748   2.08  -0.282 
##  9 -0.526  -1.08   0.486 
## 10  1.56    1.72   0.706 
## # ... with 90 more rows
## 
## [[3]]
## # A tibble: 100 x 3
##         x      y       z
##     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 -0.694 -0.633  0.469 
##  2  0.669  0.956  1.88  
##  3 -0.874  0.997 -0.415 
##  4 -1.99   0.517 -0.0228
##  5  0.308 -2.41   0.601 
##  6 -0.273 -1.70  -0.891 
##  7 -0.769 -0.531 -1.12  
##  8 -1.67  -0.520  0.0485
##  9 -0.837  0.254  0.675 
## 10 -0.627 -0.734 -0.830 
## # ... with 90 more rows
## 
## [[4]]
## # A tibble: 100 x 3
##          x       y      z
##      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1  0.376  -0.0913 -0.312
##  2 -0.109   1.05   -0.229
##  3  0.181  -0.826  -0.658
##  4 -0.534  -0.498  -1.53 
##  5 -0.0549  2.03    0.809
##  6  0.677   1.04    0.750
##  7  0.0816 -1.15    1.80 
##  8 -0.710   1.26   -0.769
##  9  0.165  -0.375  -0.788
## 10  0.456   0.759   0.163
## # ... with 90 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E se eu quiser ler um banco de dados que está em vários arquivos diferentes? Vamos usar os que acabamos de criar&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Bum! Uma linha
paths %&amp;gt;% map_dfr(read_csv, .id = &amp;quot;arquivo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   x = col_double(),
##   y = col_double(),
##   z = col_double()
## )
## 
## 
## -- Column specification --------------------------------------------------------
## cols(
##   x = col_double(),
##   y = col_double(),
##   z = col_double()
## )
## 
## 
## -- Column specification --------------------------------------------------------
## cols(
##   x = col_double(),
##   y = col_double(),
##   z = col_double()
## )
## 
## 
## -- Column specification --------------------------------------------------------
## cols(
##   x = col_double(),
##   y = col_double(),
##   z = col_double()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 400 x 4
##    arquivo      x       y       z
##    &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 1       -1.59   0.296   0.738 
##  2 1       -0.430 -0.0696  0.554 
##  3 1       -1.66  -0.0623 -1.25  
##  4 1       -0.595  0.353  -0.704 
##  5 1        0.669 -0.510   0.399 
##  6 1        0.829  1.08   -0.0918
##  7 1       -0.372  0.0488 -0.225 
##  8 1       -0.777  1.47    0.698 
##  9 1        0.510 -1.02    0.970 
## 10 1       -0.511  1.29    0.374 
## # ... with 390 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As possibilidades são inúmeras. A regra é a seguinte: viu uma tarefa que precisa ser repetida muitas vezes? Pense com carinho em usar uma função vetorizada através de &lt;code&gt;map_&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;predicados&#34;&gt;Predicados&lt;/h4&gt;
&lt;p&gt;O objetivo de um função predicado é selecionar elementos de uma lista com base em uma função. Em geral, são funções simples que retornam um valor &lt;code&gt;TRUE&lt;/code&gt; ou &lt;code&gt;FALSE&lt;/code&gt; com base em alguma característica do objeto, como o tipo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;l &amp;lt;- list(c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;), c(1, 2, 3))
l %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 2
##  $ : chr [1:3] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;
##  $ : num [1:3] 1 2 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;l %&amp;gt;% keep(is.numeric) %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 1
##  $ : num [1:3] 1 2 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;l %&amp;gt;% keep(is.character) %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 1
##  $ : chr [1:3] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O uso mais frequente que vejo de &lt;code&gt;keep&lt;/code&gt; e &lt;code&gt;discard&lt;/code&gt; é como uma espécie de atalho para &lt;code&gt;select&lt;/code&gt;. Como &lt;code&gt;data.frames&lt;/code&gt; são secretamente listas, você pode rapidamente selecionar todas as variáveis do banco que tenham o mesmo tipo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% keep(is.numeric)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 14
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830            819
##  2  2013     1     1      533            529         4      850            830
##  3  2013     1     1      542            540         2      923            850
##  4  2013     1     1      544            545        -1     1004           1022
##  5  2013     1     1      554            600        -6      812            837
##  6  2013     1     1      554            558        -4      740            728
##  7  2013     1     1      555            600        -5      913            854
##  8  2013     1     1      557            600        -3      709            723
##  9  2013     1     1      557            600        -3      838            846
## 10  2013     1     1      558            600        -2      753            745
## # ... with 336,766 more rows, and 6 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   flight &amp;lt;int&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% discard(is.character)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 15
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830            819
##  2  2013     1     1      533            529         4      850            830
##  3  2013     1     1      542            540         2      923            850
##  4  2013     1     1      544            545        -1     1004           1022
##  5  2013     1     1      554            600        -6      812            837
##  6  2013     1     1      554            558        -4      740            728
##  7  2013     1     1      555            600        -5      913            854
##  8  2013     1     1      557            600        -3      709            723
##  9  2013     1     1      557            600        -3      838            846
## 10  2013     1     1      558            600        -2      753            745
## # ... with 336,766 more rows, and 7 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   flight &amp;lt;int&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como outros aspectos do &lt;code&gt;purrr&lt;/code&gt;, a grande vantagem aqui é a generalidade. Essas funções funcionam em qualquer lista de objetos e não apenas em &lt;code&gt;data.frames&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;lidando-com-a-presença-de-erros&#34;&gt;Lidando com a presença de erros&lt;/h4&gt;
&lt;p&gt;A próxima dica forte é utilizar os advérbios (chique) &lt;code&gt;safely()&lt;/code&gt; e companhia para lidar com erros.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- list(a = c(1,2,3), b = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;), c = c(99, 88, 77))

x %&amp;gt;% map(sum)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in .Primitive(&amp;quot;sum&amp;quot;)(..., na.rm = na.rm): &#39;type&#39; inválido (character) do argumento
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Não conseguimos nada! A mensagem de erro nem nos informa onde o problema ocorreu. E agora?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x %&amp;gt;% map(safely(sum)) %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 3
##  $ a:List of 2
##   ..$ result: num 6
##   ..$ error : NULL
##  $ b:List of 2
##   ..$ result: NULL
##   ..$ error :List of 2
##   .. ..$ message: chr &amp;quot;&#39;type&#39; inválido (character) do argumento&amp;quot;
##   .. ..$ call   : language .Primitive(&amp;quot;sum&amp;quot;)(..., na.rm = na.rm)
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:3] &amp;quot;simpleError&amp;quot; &amp;quot;error&amp;quot; &amp;quot;condition&amp;quot;
##  $ c:List of 2
##   ..$ result: num 264
##   ..$ error : NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x %&amp;gt;% map(possibly(sum, otherwise = NA_real_)) %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 3
##  $ a: num 6
##  $ b: num NA
##  $ c: num 264
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essas funções permitem alterar a saída de uma função quando ocorrer um erro. &lt;code&gt;quietly&lt;/code&gt; é parecido, mas ela captura mais a saída do R, o texto em si.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- list(1, -1)
x %&amp;gt;% map(quietly(log)) %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 2
##  $ :List of 4
##   ..$ result  : num 0
##   ..$ output  : chr &amp;quot;&amp;quot;
##   ..$ warnings: chr(0) 
##   ..$ messages: chr(0) 
##  $ :List of 4
##   ..$ result  : num NaN
##   ..$ output  : chr &amp;quot;&amp;quot;
##   ..$ warnings: chr &amp;quot;NaNs produzidos&amp;quot;
##   ..$ messages: chr(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;chamando-listas-de-funções&#34;&gt;Chamando listas de funções&lt;/h4&gt;
&lt;p&gt;Vamos supor que você tem um vetor de números e você quer aplicar um monte de funções diferentes nele, mas você não quer ter que ficar copiando e colando tudo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;numeros &amp;lt;- rnorm(25, 50, 10)
numeros
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 44.79172 47.60495 48.61908 46.47576 33.53751 53.53056 59.71062 45.06651
##  [9] 87.43203 42.82188 42.27556 51.03986 46.29749 48.02671 68.12173 63.99874
## [17] 54.37657 47.13603 50.91887 50.39004 70.29964 33.01856 55.71406 61.57012
## [25] 53.94121
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nessas situações, você gostaria de chamar várias funções no mesmo objeto ou grupo de objetos, mas você não sabe bem como fazer isso&amp;hellip; Então, &lt;code&gt;invoke_map&lt;/code&gt; vem ao resgate.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;funcs &amp;lt;- list(&amp;quot;mean&amp;quot;, &amp;quot;sd&amp;quot;, &amp;quot;IQR&amp;quot;, &amp;quot;sum&amp;quot;, &amp;quot;length&amp;quot;, &amp;quot;range&amp;quot;, &amp;quot;min&amp;quot;, &amp;quot;max&amp;quot;)
args &amp;lt;- list(list(na.rm = T, trim = 0.05),
             list(na.rm=T), 
             list(type = 2),
             list(na.rm = T), 
             list(),
             list(na.rm = T), 
             list(na.rm = T), 
             list(na.rm = T))
funcs %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 8
##  $ : chr &amp;quot;mean&amp;quot;
##  $ : chr &amp;quot;sd&amp;quot;
##  $ : chr &amp;quot;IQR&amp;quot;
##  $ : chr &amp;quot;sum&amp;quot;
##  $ : chr &amp;quot;length&amp;quot;
##  $ : chr &amp;quot;range&amp;quot;
##  $ : chr &amp;quot;min&amp;quot;
##  $ : chr &amp;quot;max&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;args %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 8
##  $ :List of 2
##   ..$ na.rm: logi TRUE
##   ..$ trim : num 0.05
##  $ :List of 1
##   ..$ na.rm: logi TRUE
##  $ :List of 1
##   ..$ type: num 2
##  $ :List of 1
##   ..$ na.rm: logi TRUE
##  $ : list()
##  $ :List of 1
##   ..$ na.rm: logi TRUE
##  $ :List of 1
##   ..$ na.rm: logi TRUE
##  $ :List of 1
##   ..$ na.rm: logi TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;invoke_map(funcs, args, x = numeros) %&amp;gt;% glimpse()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 8
##  $ : num 51.6
##  $ : num 11.7
##  $ : num 9.42
##  $ : num 1307
##  $ : int 25
##  $ : num [1:2] 33 87.4
##  $ : num 33
##  $ : num 87.4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fica mais bonito se você nomear os argumentos, ai o output fica melhorzinho.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(funcs) &amp;lt;- unlist(funcs)

invoke_map(funcs, args, x = numeros) %&amp;gt;% glimpse()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 8
##  $ mean  : num 51.6
##  $ sd    : num 11.7
##  $ IQR   : num 9.42
##  $ sum   : num 1307
##  $ length: int 25
##  $ range : num [1:2] 33 87.4
##  $ min   : num 33
##  $ max   : num 87.4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Claro que esse exemplo aqui talvez não seja útil para vocês, mas espero que quando vocês encontrarem uma situação em que você gostaria de aplicar uma bateria de funções no mesmo objeto ou grupo de objetos, vocês se lembrem dessa possibilidade.&lt;/p&gt;
&lt;h4 id=&#34;reduce-e-accumulate&#34;&gt;&lt;code&gt;reduce&lt;/code&gt; e &lt;code&gt;accumulate&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Essas duas funções são desenhadas para fazer aplicações recursivas de funções que recebem dois argumentos (operadores matemáticos, &lt;code&gt;_join&lt;/code&gt;s, etc. Recursividade em linhas gerais, é você repetir uma operação com o resultado da repetição anterior. Pense em somas ou produtos acumulados, em que o próximo valor é determinado pela aplicação de uma regra sobre o anterior.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;accumulate(1:10, `+`)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  3  6 10 15 21 28 36 45 55
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;accumulate(1:10, `*`)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]       1       2       6      24     120     720    5040   40320  362880
## [10] 3628800
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A principal diferença entre &lt;code&gt;accumulate&lt;/code&gt; e &lt;code&gt;reduce&lt;/code&gt; é que a primeira guarda os resultados intermediários, enquanto a segunda retorna apenas o último.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;reduce(1:10, `+`)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 55
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;reduce(1:10, `*`)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3628800
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uma aplicação bastante prática dessas funções é a produção de um único banco de dados a partir de vários arquivos separados.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Lembra dos nossos arquivos lá em cima?
paths
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;arquivo1.csv&amp;quot; &amp;quot;arquivo2.csv&amp;quot; &amp;quot;arquivo3.csv&amp;quot; &amp;quot;arquivo4.csv&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos fingir que não temos acesso a &lt;code&gt;map_dfr&lt;/code&gt; e precisamos importar esses objetos e todos compõem um único banco. Imaginaem que tratam-se de dados por ano.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dfs &amp;lt;- map(paths, read_csv)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   x = col_double(),
##   y = col_double(),
##   z = col_double()
## )
## 
## 
## -- Column specification --------------------------------------------------------
## cols(
##   x = col_double(),
##   y = col_double(),
##   z = col_double()
## )
## 
## 
## -- Column specification --------------------------------------------------------
## cols(
##   x = col_double(),
##   y = col_double(),
##   z = col_double()
## )
## 
## 
## -- Column specification --------------------------------------------------------
## cols(
##   x = col_double(),
##   y = col_double(),
##   z = col_double()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;glimpse(dfs)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 4
##  $ : spec_tbl_df [100 x 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
##   ..$ x: num [1:100] -1.594 -0.43 -1.66 -0.595 0.669 ...
##   ..$ y: num [1:100] 0.2958 -0.0696 -0.0623 0.3526 -0.51 ...
##   ..$ z: num [1:100] 0.738 0.554 -1.252 -0.704 0.399 ...
##   ..- attr(*, &amp;quot;spec&amp;quot;)=
##   .. .. cols(
##   .. ..   x = col_double(),
##   .. ..   y = col_double(),
##   .. ..   z = col_double()
##   .. .. )
##  $ : spec_tbl_df [100 x 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
##   ..$ x: num [1:100] 0.0224 1.5069 -0.0367 -0.575 -0.8793 ...
##   ..$ y: num [1:100] 0.746 -0.462 0.502 0.653 -0.591 ...
##   ..$ z: num [1:100] -1.287 0.743 1.006 1.47 -1.536 ...
##   ..- attr(*, &amp;quot;spec&amp;quot;)=
##   .. .. cols(
##   .. ..   x = col_double(),
##   .. ..   y = col_double(),
##   .. ..   z = col_double()
##   .. .. )
##  $ : spec_tbl_df [100 x 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
##   ..$ x: num [1:100] -0.694 0.669 -0.874 -1.991 0.308 ...
##   ..$ y: num [1:100] -0.633 0.956 0.997 0.517 -2.412 ...
##   ..$ z: num [1:100] 0.4692 1.879 -0.4147 -0.0228 0.6012 ...
##   ..- attr(*, &amp;quot;spec&amp;quot;)=
##   .. .. cols(
##   .. ..   x = col_double(),
##   .. ..   y = col_double(),
##   .. ..   z = col_double()
##   .. .. )
##  $ : spec_tbl_df [100 x 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
##   ..$ x: num [1:100] 0.3761 -0.1088 0.1815 -0.5345 -0.0549 ...
##   ..$ y: num [1:100] -0.0913 1.0474 -0.8255 -0.4983 2.0343 ...
##   ..$ z: num [1:100] -0.312 -0.229 -0.658 -1.526 0.809 ...
##   ..- attr(*, &amp;quot;spec&amp;quot;)=
##   .. .. cols(
##   .. ..   x = col_double(),
##   .. ..   y = col_double(),
##   .. ..   z = col_double()
##   .. .. )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;new_df &amp;lt;- reduce(dfs, bind_rows)
new_df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 400 x 3
##         x       y       z
##     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 -1.59   0.296   0.738 
##  2 -0.430 -0.0696  0.554 
##  3 -1.66  -0.0623 -1.25  
##  4 -0.595  0.353  -0.704 
##  5  0.669 -0.510   0.399 
##  6  0.829  1.08   -0.0918
##  7 -0.372  0.0488 -0.225 
##  8 -0.777  1.47    0.698 
##  9  0.510 -1.02    0.970 
## 10 -0.511  1.29    0.374 
## # ... with 390 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O resultado é o mesmo observado em &lt;code&gt;map_dfr&lt;/code&gt;, mas essa abordagem é &lt;strong&gt;genérica&lt;/strong&gt;, ou seja, ela se aplica para qualquer grupo de objetos e para qualquer função que recebe dois argumentos e precisa ser repetida de maneira &lt;strong&gt;recursiva&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Apaga os arquivos pra eles não ficarem ai gastando memória a toa
file.remove(paths)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE TRUE TRUE TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;pluck&#34;&gt;&lt;code&gt;pluck&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Esta função é um atalho para as tesouras duplas do r &lt;code&gt;[[&lt;/code&gt;. Seu objeto é facilitar a &lt;strong&gt;leitura&lt;/strong&gt; de códigos que pescam elementos profundos de uma lista aninhada.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;l &amp;lt;- list(
  list(-1, x = 1, y = c(2), z = &amp;quot;a&amp;quot;),
  list(-2, x = 4, y = c(5, 6), z = &amp;quot;b&amp;quot;),
  list(-3, x = 8, y = c(9, 10, 11))
)

glimpse(l)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 3
##  $ :List of 4
##   ..$  : num -1
##   ..$ x: num 1
##   ..$ y: num 2
##   ..$ z: chr &amp;quot;a&amp;quot;
##  $ :List of 4
##   ..$  : num -2
##   ..$ x: num 4
##   ..$ y: num [1:2] 5 6
##   ..$ z: chr &amp;quot;b&amp;quot;
##  $ :List of 3
##   ..$  : num -3
##   ..$ x: num 8
##   ..$ y: num [1:3] 9 10 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se você chamar &lt;code&gt;map_&lt;/code&gt; nessa lista, você pode extrair os elementos delas pelo nome.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_dbl(l, &amp;quot;x&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 4 8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map(l, &amp;quot;y&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 2
## 
## [[2]]
## [1] 5 6
## 
## [[3]]
## [1]  9 10 11
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map(l, &amp;quot;z&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;a&amp;quot;
## 
## [[2]]
## [1] &amp;quot;b&amp;quot;
## 
## [[3]]
## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou pela posição na lista&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_dbl(l, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -1 -2 -3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_dbl(l, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 4 8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map(l, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 2
## 
## [[2]]
## [1] 5 6
## 
## [[3]]
## [1]  9 10 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou os dois&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_dbl(l, list(&amp;quot;x&amp;quot;, 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 4 8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map(l, list(&amp;quot;z&amp;quot;, 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] &amp;quot;a&amp;quot;
## 
## [[2]]
## [1] &amp;quot;b&amp;quot;
## 
## [[3]]
## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map(l, list(&amp;quot;y&amp;quot;, 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## NULL
## 
## [[2]]
## NULL
## 
## [[3]]
## [1] 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se um componente não existir, você recebe um erro&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_chr(l, &amp;quot;z&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: Result 3 must be a single string, not NULL of length 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas você pode resolver isso passando um valor padrão&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_chr(l, &amp;quot;z&amp;quot;, .default = NA_character_)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tudo isso funciona com base na função &lt;code&gt;pluck&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pluck(l, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] -1
## 
## $x
## [1] 1
## 
## $y
## [1] 2
## 
## $z
## [1] &amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pluck(l, 1, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pluck(l, 2, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pluck(l, 1, &amp;quot;x&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pluck(l, 2, &amp;quot;z&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;b&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pluck(l, 3, &amp;quot;y&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  9 10 11
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;exercícios&#34;&gt;Exercícios&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Utilize uma das funções &lt;code&gt;map_&lt;/code&gt; para:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calcular a média de cada coluna em &lt;code&gt;mtcars&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Determinar o tipo de cada coluna em &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computar o número de valores únicos em cada coluna de &lt;code&gt;iris&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gere 10 distribuições aleatórias (&lt;code&gt;rnorm&lt;/code&gt;) com médias -10, 0, 10 e 100.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Como você pode criar um vetor indicando se cada coluna em um &lt;code&gt;data.frame&lt;/code&gt; é um fator?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usando as funções predicado &lt;code&gt;keep&lt;/code&gt; e &lt;code&gt;discard&lt;/code&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Selecione todas as colunas caractere no banco &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Descarte os caracteres em &lt;code&gt;mpg&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Selecione os fatores ordenados em &lt;code&gt;diamonds&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Descarte as variáveis não-numéricas em &lt;code&gt;iris&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Imagine que você tem um diretório cheio de arquivos &lt;code&gt;.csv&lt;/code&gt; que correspondem a um único banco de dados. Você tem os caminhos de todos eles num vetor com a forma &lt;code&gt;c(arquivo_1.csv, ..., arquivo_n.csv)&lt;/code&gt;. Como você importaria esses arquivos? Tente fazer duas soluções diferentes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Escreva um código sucinto que implemente vários modelos lineares especificados por você. Salve os resultados numa &lt;code&gt;tibble&lt;/code&gt; com colunas-lista. Depois, extraia os resultados com &lt;code&gt;unnest()&lt;/code&gt;. Use o exemplo como guia.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modelos &amp;lt;- c(&amp;quot;mpg ~ wt&amp;quot;,
             &amp;quot;mpg ~ wt + cyl&amp;quot;,
             &amp;quot;mpg ~ wt + cyl + drat&amp;quot;,
             &amp;quot;mpg ~ wt + cyl + drat + am&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Soluções</title>
      <link>https://laddem.github.io/courses/rbase/solucoes/</link>
      <pubDate>Tue, 15 Jun 2021 20:04:57 -0300</pubDate>
      <guid>https://laddem.github.io/courses/rbase/solucoes/</guid>
      <description>&lt;p&gt;Soluções para os exercícios feitos em sala e os exercícios de revisão do final das aulas.&lt;/p&gt;
&lt;h2 id=&#34;aula-1-básico&#34;&gt;Aula 1: Básico&lt;/h2&gt;
&lt;h3 id=&#34;fundamentos&#34;&gt;Fundamentos&lt;/h3&gt;
&lt;h4 id=&#34;funções&#34;&gt;Funções&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;round(3.1415)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;factorial(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Só de olhar para as funções e seus resultados, você conseguíria dizer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O que cada função faz?&lt;/li&gt;
&lt;li&gt;Quais entradas (inputs) ela pede?&lt;/li&gt;
&lt;li&gt;Qual saída ela produz (output)?&lt;/li&gt;
&lt;li&gt;Que opções alternativas (argumentos) elas poderiam conter?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A função &lt;code&gt;round()&lt;/code&gt; arredonda valores decimais, enquanto &lt;code&gt;factorial()&lt;/code&gt; calcula o fatorial de um número. Ambas recebem inputs numéricos, e emitem outputs numéricos também. &lt;code&gt;round()&lt;/code&gt; tem um argumento extra &lt;code&gt;digits&lt;/code&gt;, que permite determina para quantas casas decimais o número deverá ser arredondado.&lt;/p&gt;
&lt;h4 id=&#34;argumentos&#34;&gt;Argumentos&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dado &amp;lt;- 1:6

# dado limpo
sample(dado, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# dado viciado
sample(dado, size = 1, prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Repita a operação de sample acima com o dado “viciado” e com o dado “limpo” e verifique se você consegue perceber empiricamente que meu dado está “viciado”.&lt;/p&gt;
&lt;p&gt;Esse exercício era para repetir o código várias vezes e verificar se o resultado 6 aparecia mais no dado viciado que no limpo.&lt;/p&gt;
&lt;p&gt;Que outros argumentos existem na função sample? Qual o papel do argumento replace?&lt;/p&gt;
&lt;p&gt;Sample tem os argumento opcionais &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt; e &lt;code&gt;prob&lt;/code&gt;. O primeiro define quantas amostram devem ser retiradas, o segundo define se a amostra tem reposição, ou seja, se um valor sorteado é retirado da amostra ou não e o terceiro define com que probabilidades devem ser feitos os sorteios, o padrão é com probabilidades iguais para todos os valores do vetor &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;sua-primeira-função&#34;&gt;Sua primeira função&lt;/h4&gt;
&lt;p&gt;Escreva uma função que role 2 dados de 10 faces e some seus resultados.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role10 &amp;lt;- function() {
  x &amp;lt;- sample(x = 1:10, size = 1)
  y &amp;lt;- sample(x = 1:10, size = 1)
  x + y
}

role10()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 19
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ajuda&#34;&gt;Ajuda&lt;/h4&gt;
&lt;p&gt;Consulte a ajuda das funções sum, mean, min, max, range. Porque todas elas tem o argumento na.rm? O que argumento o trim em mean faz? Qual a melhor maneira de rapidamente entender o que uma função faz através da página de ajuda?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?sum
?mean
?min
?max
?range
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O argumento na.rm permite que os cálculos das medidas sejam feitos mesmo na presença de valores nulos/desconhecidos, registrados no R como &lt;code&gt;NA&lt;/code&gt;. Você pode ler o argumento &lt;code&gt;na.rm&lt;/code&gt; como &amp;ldquo;Remova os &lt;code&gt;NA&lt;/code&gt;s&amp;rdquo;. A melhor maneira de entender o funcionamento de uma função rapidamente é ler as seções &amp;ldquo;Description&amp;rdquo; e &amp;ldquo;Examples&amp;rdquo;, que você pode utilizar para rapidamente entender como a função funciona na prática.&lt;/p&gt;
&lt;h3 id=&#34;objetos-em-r&#34;&gt;Objetos em R&lt;/h3&gt;
&lt;h4 id=&#34;vetores&#34;&gt;Vetores&lt;/h4&gt;
&lt;p&gt;Teste se vetor2, criado anteriormente é um vetor. Crie um vetor com os nomes de cinco pessoas da sala.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor2 &amp;lt;- c(1, 2, 3, 4, 5)
is.vector(vetor2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nomes &amp;lt;- c(&amp;quot;Pessoa 1&amp;quot;, &amp;quot;Pessoa 2&amp;quot;, &amp;quot;Pessoa 3&amp;quot;, &amp;quot;Pessoa 4&amp;quot;, &amp;quot;Pessoa 5&amp;quot;)
nomes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Pessoa 1&amp;quot; &amp;quot;Pessoa 2&amp;quot; &amp;quot;Pessoa 3&amp;quot; &amp;quot;Pessoa 4&amp;quot; &amp;quot;Pessoa 5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A função &lt;code&gt;is.vector&lt;/code&gt; testa se um objeto é do tipo vetor. Existem outras funções da família &lt;code&gt;is.____&lt;/code&gt; para todos os objetos R. Você pode criar um vetor de nomes usando aspas ao redor dos valores das informações em cada posição do vetor e atribuir isso &lt;code&gt;&amp;lt;-&lt;/code&gt; para um objeto com um nome da sua preferência.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Considerando os dois vetores abaixo, calcule as suas médias. Porque não é possível calcular a média do segundo vetor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;idade1 &amp;lt;- c(20, 25, 30, 35, 40, 45, 50)
idade2 &amp;lt;- c(&amp;quot;20&amp;quot;, &amp;quot;25&amp;quot;, &amp;quot;30&amp;quot;, &amp;quot;35&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;45&amp;quot;, &amp;quot;50&amp;quot;)

mean(idade1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(idade2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in mean.default(idade2): argumento não é numérico nem lógico: retornando
## NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O primeiro vetor retorna normalmente porque &lt;code&gt;idade1&lt;/code&gt; é um vetor de números. Apesar da sua aparência, &lt;code&gt;idade2&lt;/code&gt; é um vetor de texto. Podemos verificar o tipo do vetor da seguinte forma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(idade1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(idade2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Qual a diferença entre: 1, “1”, “one” no R? Quais são números e quais são caracteres?&lt;/p&gt;
&lt;p&gt;Ao invés de responder essa pergunta, podemos usar o R para satisfazer nossa curiosidade:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(&amp;quot;1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(&amp;quot;one&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O primeiro é um número, os outros são caracteres de texto.&lt;/p&gt;
&lt;h4 id=&#34;atributos&#34;&gt;Atributos&lt;/h4&gt;
&lt;p&gt;Usando seus conhecimentos sobre atributos, construa uma pequena matriz com o nome de 5 pessoas da turma e seu sexo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;info &amp;lt;- c(&amp;quot;Pessoa 1&amp;quot;, &amp;quot;Pessoa 2&amp;quot;, &amp;quot;Pessoa 3&amp;quot;, &amp;quot;Pessoa 4&amp;quot;, &amp;quot;Pessoa 5&amp;quot;, &amp;quot;Masculino&amp;quot;, &amp;quot;Masculino&amp;quot;, &amp;quot;Masculino&amp;quot;, &amp;quot;Feminino&amp;quot;, &amp;quot;Feminino&amp;quot;)

dim(info) &amp;lt;- c(5, 2)

info
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1]       [,2]       
## [1,] &amp;quot;Pessoa 1&amp;quot; &amp;quot;Masculino&amp;quot;
## [2,] &amp;quot;Pessoa 2&amp;quot; &amp;quot;Masculino&amp;quot;
## [3,] &amp;quot;Pessoa 3&amp;quot; &amp;quot;Masculino&amp;quot;
## [4,] &amp;quot;Pessoa 4&amp;quot; &amp;quot;Feminino&amp;quot; 
## [5,] &amp;quot;Pessoa 5&amp;quot; &amp;quot;Feminino&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;matrizes&#34;&gt;Matrizes&lt;/h4&gt;
&lt;p&gt;Reconstrua a sua matriz original usando a função matrix ao invés de alterar os atributos. E os nomes das colunas?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;info_matrix &amp;lt;- matrix(info, nrow = 5, dimnames = list(1:5, c(&amp;quot;Nome&amp;quot;, &amp;quot;Sexo&amp;quot;)))
info_matrix
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Nome       Sexo       
## 1 &amp;quot;Pessoa 1&amp;quot; &amp;quot;Masculino&amp;quot;
## 2 &amp;quot;Pessoa 2&amp;quot; &amp;quot;Masculino&amp;quot;
## 3 &amp;quot;Pessoa 3&amp;quot; &amp;quot;Masculino&amp;quot;
## 4 &amp;quot;Pessoa 4&amp;quot; &amp;quot;Feminino&amp;quot; 
## 5 &amp;quot;Pessoa 5&amp;quot; &amp;quot;Feminino&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;classe&#34;&gt;Classe&lt;/h4&gt;
&lt;p&gt;Experimente brincar com o valor de objeto e ver&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qual é a data de referência do R para calcular tempos?&lt;/li&gt;
&lt;li&gt;O que acontece se o valor for negativo?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;objeto &amp;lt;- 0
class(objeto) &amp;lt;- c(&amp;quot;POSIXct&amp;quot;, &amp;quot;POSIXt&amp;quot;)

objeto
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1969-12-31 21:00:00 -03&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;objeto &amp;lt;- -100000000
class(objeto) &amp;lt;- c(&amp;quot;POSIXct&amp;quot;, &amp;quot;POSIXt&amp;quot;)

objeto
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1966-10-31 11:13:20 -03&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este exercício parte do princípio de que vocês compreenderam como o R entende tempos: eles são armazenadas como o número de segundos entre a data de referência do sistema e o tempo que ele pretendem medir. Assim, para descobrir a data de referência basta criar um objeto com o tempo 0 e passar a classe adequada para seus atributos e ver o resultado na tela. Da mesma forma, os números negativos representam tempos ocorridos antes dessa data de referência.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Construa um fator a partir do vetor a seguir que registre os meses do ano. Dica: utilize o argumento levels da função factor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;f &amp;lt;- c(1, 3, 9, 4, 11, 2, 6, 6, 3, 2, 9, 11, 12, 12, 1, 8)

factor(f, levels = 1:12, 
       labels = c(&amp;quot;Jan&amp;quot;, &amp;quot;Fev&amp;quot;, &amp;quot;Mar&amp;quot;, &amp;quot;Abr&amp;quot;, &amp;quot;Mai&amp;quot;, &amp;quot;Jun&amp;quot;,
                  &amp;quot;Jul&amp;quot;, &amp;quot;Ago&amp;quot;, &amp;quot;Set&amp;quot;, &amp;quot;Out&amp;quot;, &amp;quot;Nov&amp;quot;, &amp;quot;Dez&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] Jan Mar Set Abr Nov Fev Jun Jun Mar Fev Set Nov Dez Dez Jan Ago
## Levels: Jan Fev Mar Abr Mai Jun Jul Ago Set Out Nov Dez
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;coerção&#34;&gt;Coerção&lt;/h4&gt;
&lt;p&gt;Porque o R prefere coagir vetores lógicos mistos para números e vetores numéricos e lógicos para caractere?&lt;/p&gt;
&lt;p&gt;A resposta é mais conceitual que prática, mas o objetivo é usar o tipo de dado mais genérico possível de tal forma que a gente não perca as informações. Veja alguns exemplos abaixo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Números misturados com valores lógicos
v &amp;lt;- c(32, 64, 128, 256, TRUE, FALSE)
v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  32  64 128 256   1   0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Posso &amp;quot;recuperar&amp;quot; meus valores lógicos depois
as.logical(v[5:6])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Texto misturado com números
v &amp;lt;- c(15, 21, 19, 80, &amp;quot;Abóbora&amp;quot;, &amp;quot;Caqui&amp;quot;)
v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;15&amp;quot;      &amp;quot;21&amp;quot;      &amp;quot;19&amp;quot;      &amp;quot;80&amp;quot;      &amp;quot;Abóbora&amp;quot; &amp;quot;Caqui&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Posso &amp;quot;recuperar&amp;quot; meus números depois
as.numeric(v[1:4])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 15 21 19 80
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;listas&#34;&gt;Listas&lt;/h4&gt;
&lt;p&gt;Crie uma lista de compras em que cada elemento da lista seja um vetor atômico de itens que você vai comprar de cada seção do supermercado. Para simplificar, utilize as seções: “limpeza”, “mercearia” e “hortifruti”.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lista_de_compras &amp;lt;- list(
  limpeza = c(&amp;quot;Creme dental&amp;quot;, &amp;quot;Sabonete&amp;quot;, &amp;quot;Xampú&amp;quot;, &amp;quot;Condicionador&amp;quot;, &amp;quot;Tira-limo&amp;quot;),
  mercearia = c(&amp;quot;Pão&amp;quot;, &amp;quot;Leite&amp;quot;, &amp;quot;Ovos&amp;quot;, &amp;quot;Queijo&amp;quot;, &amp;quot;Presunto&amp;quot;, &amp;quot;Manteiga&amp;quot;, &amp;quot;Biscoito&amp;quot;),
  hortifruti = c(&amp;quot;Cebola&amp;quot;, &amp;quot;Tomate&amp;quot;, &amp;quot;Alho&amp;quot;, &amp;quot;Banana&amp;quot;, &amp;quot;Mamão&amp;quot;, &amp;quot;Abacate&amp;quot;, &amp;quot;Batata&amp;quot;, &amp;quot;Pimenta dedo-de-moça&amp;quot;)
)

lista_de_compras
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $limpeza
## [1] &amp;quot;Creme dental&amp;quot;  &amp;quot;Sabonete&amp;quot;      &amp;quot;Xampú&amp;quot;         &amp;quot;Condicionador&amp;quot;
## [5] &amp;quot;Tira-limo&amp;quot;    
## 
## $mercearia
## [1] &amp;quot;Pão&amp;quot;      &amp;quot;Leite&amp;quot;    &amp;quot;Ovos&amp;quot;     &amp;quot;Queijo&amp;quot;   &amp;quot;Presunto&amp;quot; &amp;quot;Manteiga&amp;quot; &amp;quot;Biscoito&amp;quot;
## 
## $hortifruti
## [1] &amp;quot;Cebola&amp;quot;               &amp;quot;Tomate&amp;quot;               &amp;quot;Alho&amp;quot;                
## [4] &amp;quot;Banana&amp;quot;               &amp;quot;Mamão&amp;quot;                &amp;quot;Abacate&amp;quot;             
## [7] &amp;quot;Batata&amp;quot;               &amp;quot;Pimenta dedo-de-moça&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A principal característica da lista que eu queria ressaltar aqui é que podemos armazenar várias informações de tipos e tamanhos diferentes numa lista. É a estrutura de dados mais flexível no R.&lt;/p&gt;
&lt;h4 id=&#34;data-frames&#34;&gt;Data Frames&lt;/h4&gt;
&lt;p&gt;Crie um data frame contendo informações de cinco colegas de turma: registre o nome, a idade presumida, o sexo, a profissão e a renda presumida. Não precisa perguntar, basta chutar um valor que você ache.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(nome = c(&amp;quot;Colega 1&amp;quot;, &amp;quot;Colega 2&amp;quot;, &amp;quot;Colega 3&amp;quot;, &amp;quot;Colega 4&amp;quot;, &amp;quot;Colega 5&amp;quot;),
                 idade = c(20, 30, 40, 25, 35),
                 sexo = c(&amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;M&amp;quot;), 
                 profissao = c(&amp;quot;Professor&amp;quot;, &amp;quot;Pesquisador&amp;quot;, &amp;quot;Programador&amp;quot;, &amp;quot;Jornalista&amp;quot;, &amp;quot;Analista de dados&amp;quot;),
                 renda = c(2000, 3000, 1500, 2000, 4000))

df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       nome idade sexo         profissao renda
## 1 Colega 1    20    M         Professor  2000
## 2 Colega 2    30    F       Pesquisador  3000
## 3 Colega 3    40    F       Programador  1500
## 4 Colega 4    25    F        Jornalista  2000
## 5 Colega 5    35    M Analista de dados  4000
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;revisão&#34;&gt;Revisão&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Como você poderia identificar o tipo de um objeto? Como você poderia identificar a classe dele? Qual a diferença entre essas duas coisas? Porque isso é relevante?&lt;/p&gt;
&lt;p&gt;Supondo que você tenha um objeto desconhecido, você pode usar as funções descritas na aula para identificar seu tipo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 2, 3, 4, NA)

typeof(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.vector(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.list(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O tipo de um objeto define quais informações estão guardadas nele:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;double guardam números reais, que contém casas decimais&lt;/li&gt;
&lt;li&gt;integer guardam números inteiros&lt;/li&gt;
&lt;li&gt;character guardam strings de caracteres em formato texto&lt;/li&gt;
&lt;li&gt;listas guardam objetos R, como vetores, funções, outras listas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A classe de um objeto define como o R vai tratá-lo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fatores serão armazenados como números inteiros, mas serão representados por rótulos de texto sempre que o usuário desejar ver seu conteúdo.&lt;/li&gt;
&lt;li&gt;datas serão armazenadas como números de segundos, mas serão representadas em formato de data/hora legível por pessoas.&lt;/li&gt;
&lt;li&gt;matrizes codificam operações como transposição e multiplicação de matrizes que não funcionam em outros tipos de dado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esses são apenas alguns exemplos de classe, mas acho que deu pra pegar a ideia.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Digamos que você quer armazenar algumas informações na memória do computador. Que tipo de objeto você utilizaria para armanzenar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Os nomes dos colegas da sua turma&lt;/li&gt;
&lt;li&gt;Seus números de telefone&lt;/li&gt;
&lt;li&gt;Uma variável que indica se esta pessoa nasceu antes de 1989&lt;/li&gt;
&lt;li&gt;A idade de um grupo de pessoas&lt;/li&gt;
&lt;li&gt;Informações de cadastro de uma pessoa: nome completo, afiliações, telefones para contato, endereços, etc.&lt;/li&gt;
&lt;li&gt;Uma coleção de funções que você utiliza frequentemente&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Você pode armazenar valores em vetores atômicos, então nomes de colegas poderiam ficar num vetor de caracteres, números de telefone num vetor de números inteiros, uma variável que indica se alguém nasceu antes de 1989 ou depois é perfeita para um vetor lógico.&lt;/p&gt;
&lt;p&gt;A idade de um grupo de pessoas já parece conter mais de uma informação por observação, então ela pode ser armazenada em um data.frame, contendo a identificação da pessoa e a sua idade.&lt;/p&gt;
&lt;p&gt;Um caso parecido, mas levemente diferente são as informações de cadastro de uma pessoa, que deveriam ser armazenadas numa lista, pois o cadastro pode conter informações de diferentes formatos e tamanhos e não necessariamente teria o formato retangular do data.frame.&lt;/p&gt;
&lt;p&gt;Uma coleção de funções deve ser armazenadas numa lista, pois este é objeto R adequado para armazenar tudo que não for uma coleção de informações como num vetor atômico.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Porque no resumo eu disse que as funções são verbos? Que tipo de ações as funções que vimos na aula fazem nos nossos objetos? Se as funções são verbos, que classe de palavras a gente poderia dizer que são os nossos objetos? E nós, que usamos o software, o que somos?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Se você parar para pensar, programação de computadores é uma forma de comunicação envolvendo pelo menos 3 interlocutores: você, a máquina e outros programadores. Na sintaxe do português, as frases são divididas em sujeito e predicado, sendo que o predicado geralmente tem um verbo e alguns complementos opcionais. O sujeito de uma frase na programação geralmente está oculto, pois ele é implicitamente você, que pede que a máquina execute tarefas. O verbo são as funções, que indicam à máquina que ações deverão ser executadas, e os complementos são os argumentos da função, em geral, objetos contendo informações, bem como opções (adjetivos, advérbios) que descrevem não apenas EM QUEM as tarefas serão executadas, mas também COMO.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Digamos que eu quero armazenar as informações de cadastro dos membros da turma. Que estrutura de dados eu deveria utilizar? Como você implementaria esta estrutura no R? Desenvolva um pequeno exemplo.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Você deveria utilizar um data frame para guardar as várias informações de cadastro da turma. Note que é um pouco diferente do exemplo acima, em que eu tenho o cadastro de uma pessoa. Em geral, parte do processo de tabulação de um banco de dados é coletar informações que estão em formatos díspares e transformá-las em algo que pode ser analisado com facilidade, ou seja, um data frame.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(nome = c(&amp;quot;Fulano&amp;quot;, &amp;quot;Beltrano&amp;quot;),
                 telefone = c(123456, 456321),
                 endereco = c(&amp;quot;Onde Judas perdeu as botas&amp;quot;, &amp;quot;Duas ruas pra baixo&amp;quot;),
                 sexo = c(&amp;quot;M&amp;quot;, &amp;quot;F&amp;quot;),
                 email = c(&amp;quot;fulano@email.com&amp;quot;, &amp;quot;beltrano@nomail.com&amp;quot;), 
                 uf = c(&amp;quot;SP&amp;quot;, &amp;quot;RN&amp;quot;), 
                 cidade = c(&amp;quot;Borá&amp;quot;, &amp;quot;São Miguel do Gostoso&amp;quot;))

df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       nome telefone                   endereco sexo               email uf
## 1   Fulano   123456 Onde Judas perdeu as botas    M    fulano@email.com SP
## 2 Beltrano   456321        Duas ruas pra baixo    F beltrano@nomail.com RN
##                  cidade
## 1                  Borá
## 2 São Miguel do Gostoso
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em geral, não é comum construir bancos de dados no R, existem softwares com facilidades melhores para a digitação de informações. O exemplo acima apenas demonstra minimamente o resultado do que, provavelmente, seria uma importação de um cadastro já salvo.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Quais são os atributos de um data frame? Como você poderia descobrí-los e alterá-los? Em que situações isso seria proveitoso?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Usando o data frame construído no exercício anterior, podemos verificar seus atributos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $names
## [1] &amp;quot;nome&amp;quot;     &amp;quot;telefone&amp;quot; &amp;quot;endereco&amp;quot; &amp;quot;sexo&amp;quot;     &amp;quot;email&amp;quot;    &amp;quot;uf&amp;quot;       &amp;quot;cidade&amp;quot;  
## 
## $class
## [1] &amp;quot;data.frame&amp;quot;
## 
## $row.names
## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos alterar esses atributos usando a forma &lt;code&gt;&amp;lt;-&lt;/code&gt; da mesma função:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(df) &amp;lt;- list(row.names = c(&amp;quot;Oi&amp;quot;, &amp;quot;Td bem?&amp;quot;),
                       names = c(&amp;quot;Nome&amp;quot;, &amp;quot;Telefone&amp;quot;, &amp;quot;Endereço&amp;quot;, &amp;quot;Sexo&amp;quot;, &amp;quot;Email&amp;quot;, &amp;quot;Uf&amp;quot;, &amp;quot;Cidade&amp;quot;),
                       class = &amp;quot;data.frame&amp;quot;)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             Nome Telefone                   Endereço Sexo               Email
## Oi        Fulano   123456 Onde Judas perdeu as botas    M    fulano@email.com
## Td bem? Beltrano   456321        Duas ruas pra baixo    F beltrano@nomail.com
##         Uf                Cidade
## Oi      SP                  Borá
## Td bem? RN São Miguel do Gostoso
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em geral, no entanto, evitamos usar essa última forma e usamos as funções acessórias para modificar os atributos sem bagunçar nosso objeto! Se você não especificar TODOS os atributos na lista, ele vai desmanchar sua festa&amp;hellip; Por isso, preferimos alterar cada um individualmente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;row.names(df) &amp;lt;- c(1, 2)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Nome Telefone                   Endereço Sexo               Email Uf
## 1   Fulano   123456 Onde Judas perdeu as botas    M    fulano@email.com SP
## 2 Beltrano   456321        Duas ruas pra baixo    F beltrano@nomail.com RN
##                  Cidade
## 1                  Borá
## 2 São Miguel do Gostoso
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em geral, é proveitoso alterar atributos de um objeto como seus nomes para facilitar a legibilidade do código e a digitação. Outros atributos mais consequentes como a classe, em geral, não é proveitoso alterar diretamente. As funções que criam e manipulam objetos costumam modificar a classe de um objeto automaticamente e da forma correta, e não precisamos nos preocupar com isso. No entanto, é útil saber a classe de um objeto pois isto pode nos ajudar a identificar a origem de um erro. Há um exemplo na aula 2 em que tentamos tirar a média de um valor que está salvo num data frame incorretamente.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(idade = c(20, 30, 40, 50))

mean(df[&amp;quot;idade&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in mean.default(df[&amp;quot;idade&amp;quot;]): argumento não é numérico nem lógico:
## retornando NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O código não funciona, pois estamos tentando tirar a média de uma lista:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(df[&amp;quot;idade&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para tirar uma média, precisamos acessar os valores que estão no vetor atômico guardado dentro da lista:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[[&amp;quot;idade&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 20 30 40 50
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(df[[&amp;quot;idade&amp;quot;]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ou

df$idade
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 20 30 40 50
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(df$idade)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora sim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(df$idade)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(df[[&amp;quot;idade&amp;quot;]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Suponha que você têm o vetor atômico abaixo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 1, TRUE, FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que acontecerá com as informações desse vetor ao ser armazenado no R? Como você poderia alterar esse resultado? Porque o R se comporta dessa maneira?&lt;/p&gt;
&lt;p&gt;Como já discutido anteriormente, os valores &lt;code&gt;TRUE/FALSE&lt;/code&gt; serão coagidos a &lt;code&gt;1/0&lt;/code&gt;, e você pode usar as funções &lt;code&gt;as._____&lt;/code&gt; para converter para o formato desejado.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;as.logical(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE  TRUE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R se comporta dessa maneira pois ele visa preservar as informações no formato mais genérico possível.&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Considere a operação matemática abaixo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v1 &amp;lt;- c(1, 2, 3)
v2 &amp;lt;- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)

v1 * v2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que você espera encontrar na saída do R ao rodar essa seção? Rode o código e responda: você se surpreendeu? O que aconteceu e porquê? Qual o significado da mensagem de aviso?&lt;/p&gt;
&lt;p&gt;Antes de rodar, você já deve ter notado que estamos fazendo uma multiplicação de cada elemento do vetor 1 por cada elemento do vetor 2, porém, eles tem tamanhos distintos. Não nos deve surpreender então que o R recicle os argumentos do vetor menor até dar o tamanho do vetor maior. Como o comprimento do v2 não é múltiplo de v1, recebemos um aviso, mas mesmo que não recebamos esse aviso, precisamos estar atentos a reciclagens que não fizemos intencionalmente!&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Considere o banco de dados abaixo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sala &amp;lt;- data.frame(
  id = c(1, 2, 3),
  idade = c(20, 25, 30, 35, 40, 45),
  nome = c(&amp;quot;Fulano&amp;quot;, &amp;quot;Cicrano&amp;quot;, &amp;quot;Beltrano&amp;quot;, &amp;quot;Herculano&amp;quot;, &amp;quot;Mariano&amp;quot;, &amp;quot;Carrano&amp;quot;),
  sexo = &amp;quot;Masculino&amp;quot;,
  origem = c(&amp;quot;Campinas&amp;quot;, &amp;quot;Barueri&amp;quot;, &amp;quot;Monte Verde&amp;quot;, &amp;quot;Rio de Janeiro&amp;quot;, &amp;quot;Natal&amp;quot;, &amp;quot;Belo Horizonte&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Verifique as variáveis &lt;code&gt;id&lt;/code&gt; e &lt;code&gt;sexo&lt;/code&gt;. Os valores dessas variáveis fazem sentido? Elas não impedem a construção do data frame, por quê? Que característica do R está operando nessas variáveis?&lt;/p&gt;
&lt;p&gt;O valor da variável id está incorreto, pois temos ids repetidas para pessoas diferentes. O valor da variável sexo está correto, aparentemente, de acordo com a variável nome. Em ambos os casos, R está reciclando os vetores mais curtos para preencher os espaços vazios e criar um data frame completo. A variável id precisa ser corrigida, pois a reciclagem aqui está prejudicando a consistência da informação, mas no caso de sexo, é um uso válido da regra da reciclagem para evitar repetição.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Soluções</title>
      <link>https://laddem.github.io/courses/tidyverse/solucoes/</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/courses/tidyverse/solucoes/</guid>
      <description>&lt;p&gt;Soluções dos exercícios.&lt;/p&gt;
&lt;h2 id=&#34;readr-tibble-tidyr&#34;&gt;&lt;code&gt;readr&lt;/code&gt;, &lt;code&gt;tibble&lt;/code&gt;, &lt;code&gt;tidyr&lt;/code&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Não esqueça dos pacotes!
library(tidyverse)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Attaching packages --------------------------------------- tidyverse 1.3.1 --
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v ggplot2 3.3.3     v purrr   0.3.4
## v tibble  3.1.2     v dplyr   1.0.6
## v tidyr   1.1.3     v stringr 1.4.0
## v readr   1.4.0     v forcats 0.5.1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Conflicts ------------------------------------------ tidyverse_conflicts() --
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Como você importaria o banco &amp;ldquo;epa78.csv&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- readr_example(&amp;quot;epa78.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Primeiro, é bom verificar como estão dispostas as informações no arquivo texto&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;read_lines(file, n_max = 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;ALFA ROMEO                                                                     ALFA ROMEO           78010003&amp;quot;
##  [2] &amp;quot;ALFETTA                              03  81  8    74  7   89  9                ALFETTA              78010053&amp;quot;
##  [3] &amp;quot;SPIDER 2000                          01                                        SPIDER 2000          78010103&amp;quot;
##  [4] &amp;quot;AMC                                                                            AMC                  78020002&amp;quot;
##  [5] &amp;quot;GREMLIN                              03  79  9                    79  9        GREMLIN              78020053&amp;quot;
##  [6] &amp;quot;PACER                                04  89 11                    89 11        PACER                78020103&amp;quot;
##  [7] &amp;quot;PACER WAGON                          07  90 26    91 26                        PACER WAGON          78020153&amp;quot;
##  [8] &amp;quot;CONCORD                              04  88 12    90 11   90 11   83 16        CONCORD              78020203&amp;quot;
##  [9] &amp;quot;CONCORD WAGON                        07  91 30            91 30                CONCORD WAGON        78020253&amp;quot;
## [10] &amp;quot;MATADOR COUPE                        05  97 14    97 14                        MATADOR COUPE        78020303&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ao identificar que se trata de um arquivo colunado, mas que as colunas são separadas por espaços, escolho o read_fwf com o fwf_empty.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dic &amp;lt;- fwf_empty(file)

df &amp;lt;- read_fwf(file, col_positions = dic)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   X1 = col_character(),
##   X2 = col_character(),
##   X3 = col_double(),
##   X4 = col_double(),
##   X5 = col_double(),
##   X6 = col_double(),
##   X7 = col_double(),
##   X8 = col_double(),
##   X9 = col_double(),
##   X10 = col_double(),
##   X11 = col_character(),
##   X12 = col_double()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 20 x 12
##    X1       X2       X3    X4    X5    X6    X7    X8    X9   X10 X11        X12
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 ALFA RO~ &amp;lt;NA&amp;gt;     NA    NA    NA    NA    NA    NA    NA    NA ALFA R~ 7.80e7
##  2 ALFETTA  03       81     8    74     7    89     9    NA    NA ALFETTA 7.80e7
##  3 SPIDER ~ 01       NA    NA    NA    NA    NA    NA    NA    NA SPIDER~ 7.80e7
##  4 AMC      &amp;lt;NA&amp;gt;     NA    NA    NA    NA    NA    NA    NA    NA AMC     7.80e7
##  5 GREMLIN  03       79     9    NA    NA    NA    NA    79     9 GREMLIN 7.80e7
##  6 PACER    04       89    11    NA    NA    NA    NA    89    11 PACER   7.80e7
##  7 PACER W~ 07       90    26    91    26    NA    NA    NA    NA PACER ~ 7.80e7
##  8 CONCORD  04       88    12    90    11    90    11    83    16 CONCORD 7.80e7
##  9 CONCORD~ 07       91    30    NA    NA    91    30    NA    NA CONCOR~ 7.80e7
## 10 MATADOR~ 05       97    14    97    14    NA    NA    NA    NA MATADO~ 7.80e7
## 11 MATADOR~ 06      110    20    NA    NA   110    20    NA    NA MATADO~ 7.80e7
## 12 MATADOR~ 09      112    50    NA    NA   112    50    NA    NA MATADO~ 7.80e7
## 13 ASTON M~ &amp;lt;NA&amp;gt;     NA    NA    NA    NA    NA    NA    NA    NA ASTON ~ 7.80e7
## 14 ASTON M~ &amp;lt;NA&amp;gt;     NA    NA    NA    NA    NA    NA    NA    NA ASTON ~ 7.80e7
## 15 AUDI     &amp;lt;NA&amp;gt;     NA    NA    NA    NA    NA    NA    NA    NA AUDI    7.81e7
## 16 FOX      03       84    11    84    11    84    11    NA    NA FOX     7.81e7
## 17 FOX WAG~ 07       83    40    NA    NA    83    40    NA    NA FOX WA~ 7.81e7
## 18 5000     04       90    15    NA    NA    90    15    NA    NA 5000    7.81e7
## 19 AVANTI   &amp;lt;NA&amp;gt;     NA    NA    NA    NA    NA    NA    NA    NA AVANTI  7.81e7
## 20 AVANTI ~ 02       75     8    75     8    NA    NA    NA    NA AVANTI~ 7.81e7
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Importe o banco &amp;ldquo;challenge.csv&amp;rdquo; e resolva os problemas com o tipo da coluna.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ao verificar as primeiras 10 linhas do banco, podemos notar algo estranho&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file &amp;lt;- readr_example(&amp;quot;challenge.csv&amp;quot;)

read_lines(file, n_max = 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;x,y&amp;quot;     &amp;quot;404,NA&amp;quot;  &amp;quot;4172,NA&amp;quot; &amp;quot;3004,NA&amp;quot; &amp;quot;787,NA&amp;quot;  &amp;quot;37,NA&amp;quot;   &amp;quot;2332,NA&amp;quot;
##  [8] &amp;quot;2489,NA&amp;quot; &amp;quot;1449,NA&amp;quot; &amp;quot;3665,NA&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Parece ser um arquivo csv comum, com duas colunas, mas uma delas parece ter apenas NAs. Se a gente proceder com a importação padrão, chegaremos em&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- read_csv(file)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   x = col_double(),
##   y = col_logical()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: 1000 parsing failures.
##  row col           expected     actual                                                                     file
## 1001   y 1/0/T/F/TRUE/FALSE 2015-01-16 &#39;C:/Users/vinic/Documents/R/win-library/4.1/readr/extdata/challenge.csv&#39;
## 1002   y 1/0/T/F/TRUE/FALSE 2018-05-18 &#39;C:/Users/vinic/Documents/R/win-library/4.1/readr/extdata/challenge.csv&#39;
## 1003   y 1/0/T/F/TRUE/FALSE 2015-09-05 &#39;C:/Users/vinic/Documents/R/win-library/4.1/readr/extdata/challenge.csv&#39;
## 1004   y 1/0/T/F/TRUE/FALSE 2012-11-28 &#39;C:/Users/vinic/Documents/R/win-library/4.1/readr/extdata/challenge.csv&#39;
## 1005   y 1/0/T/F/TRUE/FALSE 2020-01-13 &#39;C:/Users/vinic/Documents/R/win-library/4.1/readr/extdata/challenge.csv&#39;
## .... ... .................. .......... ........................................................................
## See problems(...) for more details.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,000 x 2
##        x y    
##    &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;
##  1   404 NA   
##  2  4172 NA   
##  3  3004 NA   
##  4   787 NA   
##  5    37 NA   
##  6  2332 NA   
##  7  2489 NA   
##  8  1449 NA   
##  9  3665 NA   
## 10  3863 NA   
## # ... with 1,990 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No console de vocês, deve aparecer que foram importadas as colunas x como double e y como logical. Mas uma chuva de &amp;ldquo;parsing failures&amp;rdquo;, indicando que expected = 1/0/T/F/TRUE/FALSE, actual = 2015-01-16.&lt;/p&gt;
&lt;p&gt;Na verdade, ao tentar adivinhar o tipo de colunas, o readr lê as primeiras 1000 observações em busca de um padrão. Você pode resolver esse problema:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# 1. Aumentando o número de observações utilizadas para adivinhar as colunas
df &amp;lt;- read_csv(file, guess_max = 1001)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## -- Column specification --------------------------------------------------------
## cols(
##   x = col_double(),
##   y = col_date(format = &amp;quot;&amp;quot;)
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# A específicação da coluna Y agora é &amp;lt;date&amp;gt;
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,000 x 2
##        x y         
##    &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;    
##  1   404 NA        
##  2  4172 NA        
##  3  3004 NA        
##  4   787 NA        
##  5    37 NA        
##  6  2332 NA        
##  7  2489 NA        
##  8  1449 NA        
##  9  3665 NA        
## 10  3863 NA        
## # ... with 1,990 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# 2. escolhendo diretamente o tipo de coluna antes da importação
tipos &amp;lt;- cols(
  y = col_date()
)

df &amp;lt;- read_csv(file, col_types = tipos)

# Mesmo resultado
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,000 x 2
##        x y         
##    &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;    
##  1   404 NA        
##  2  4172 NA        
##  3  3004 NA        
##  4   787 NA        
##  5    37 NA        
##  6  2332 NA        
##  7  2489 NA        
##  8  1449 NA        
##  9  3665 NA        
## 10  3863 NA        
## # ... with 1,990 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Com o banco sala_aula dado a seguir, transforme-o para que ele contenha as variáveis nome, avaliação e nota.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sala_aula &amp;lt;- tribble(
 ~name,    ~teste1,  ~teste2,  ~prova1,
 &amp;quot;Billy&amp;quot;,  &amp;quot;&amp;lt;NA&amp;gt;&amp;quot;,   &amp;quot;D&amp;quot;   ,   &amp;quot;C&amp;quot;,
 &amp;quot;Suzy&amp;quot;,   &amp;quot;F&amp;quot;,      &amp;quot;&amp;lt;NA&amp;gt;&amp;quot;,   &amp;quot;&amp;lt;NA&amp;gt;&amp;quot;,
 &amp;quot;Lionel&amp;quot;, &amp;quot;B&amp;quot;,      &amp;quot;C&amp;quot;   ,   &amp;quot;B&amp;quot;,
 &amp;quot;Jenny&amp;quot;,  &amp;quot;A&amp;quot;,      &amp;quot;A&amp;quot;   ,   &amp;quot;B&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É sempre bom começar planejando o banco que queremos construir. Queremos um banco que tenha 3 variáveis: o nome, o tipo de prova aplicada e a nota de cada aluno. Para isso, precisamos colocar os nomes das colunas teste1, teste2 e prova1 numa variável e os valores das células em outra. Vamos chamar essas colunas de &amp;ldquo;avaliação&amp;rdquo; e &amp;ldquo;nota&amp;rdquo;, elas formam um par.&lt;/p&gt;
&lt;p&gt;Agora vamos chamar &lt;code&gt;pivot_wider&lt;/code&gt; e especificar esses argumentos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sala_aula %&amp;gt;% pivot_longer(
  # Primeiro, identificamos as colunas que serão modificadas
  cols = c(teste1, teste2, prova1),
  # Agora, indicamos os nomes das colunas que receberão
  # os nomes das colunas transformadas
  names_to = &amp;quot;avaliacao&amp;quot;,
  # os valores das células
  values_to = &amp;quot;nota&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12 x 3
##    name   avaliacao nota 
##    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;
##  1 Billy  teste1    &amp;lt;NA&amp;gt; 
##  2 Billy  teste2    D    
##  3 Billy  prova1    C    
##  4 Suzy   teste1    F    
##  5 Suzy   teste2    &amp;lt;NA&amp;gt; 
##  6 Suzy   prova1    &amp;lt;NA&amp;gt; 
##  7 Lionel teste1    B    
##  8 Lionel teste2    C    
##  9 Lionel prova1    B    
## 10 Jenny  teste1    A    
## 11 Jenny  teste2    A    
## 12 Jenny  prova1    B
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Transforme o banco &lt;code&gt;relig_income&lt;/code&gt; para que ele contenha as colunas religião, renda e frequência.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;relig_income
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18 x 11
##    religion `&amp;lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`
##    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
##  1 Agnostic      27        34        60        81        76       137        122
##  2 Atheist       12        27        37        52        35        70         73
##  3 Buddhist      27        21        30        34        33        58         62
##  4 Catholic     418       617       732       670       638      1116        949
##  5 Don’t k~      15        14        15        11        10        35         21
##  6 Evangel~     575       869      1064       982       881      1486        949
##  7 Hindu          1         9         7         9        11        34         47
##  8 Histori~     228       244       236       238       197       223        131
##  9 Jehovah~      20        27        24        24        21        30         15
## 10 Jewish        19        19        25        25        30        95         69
## 11 Mainlin~     289       495       619       655       651      1107        939
## 12 Mormon        29        40        48        51        56       112         85
## 13 Muslim         6         7         9        10         9        23         16
## 14 Orthodox      13        17        23        32        32        47         38
## 15 Other C~       9         7        11        13        13        14         18
## 16 Other F~      20        33        40        46        49        63         46
## 17 Other W~       5         2         3         4         2         7          3
## 18 Unaffil~     217       299       374       365       341       528        407
## # ... with 3 more variables: $100-150k &amp;lt;dbl&amp;gt;, &amp;gt;150k &amp;lt;dbl&amp;gt;,
## #   Don&#39;t know/refused &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O banco relig_income parece ter uma organização em que temos 2 variáveis, mas uma delas está numa coluna &amp;ldquo;religion&amp;rdquo; e a outra está em 10 colunas, &amp;ldquo;income&amp;rdquo;. Queremos um banco que tenha 3 colunas: a religião, o nível de renda, e o número de pessoas em cada combinação das duas primeiras.&lt;/p&gt;
&lt;p&gt;Como no exerício anterior, vamos chamar pivot_longer e especificar&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;relig_income %&amp;gt;% pivot_longer(
  
  # As colunas a serem modificadas, notem o uso de &#39;:&#39; para selecionar várias
  # colunas em sequência
  cols = `&amp;lt;$10k`:`Don&#39;t know/refused`,
  
  # Variável recebe os nomes da antiga coluna
  names_to = &amp;quot;nivel_renda&amp;quot;,
  
  # Variável recebe os valores das células
  values_to = &amp;quot;contagem&amp;quot;
  
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 180 x 3
##    religion nivel_renda        contagem
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                 &amp;lt;dbl&amp;gt;
##  1 Agnostic &amp;lt;$10k                    27
##  2 Agnostic $10-20k                  34
##  3 Agnostic $20-30k                  60
##  4 Agnostic $30-40k                  81
##  5 Agnostic $40-50k                  76
##  6 Agnostic $50-75k                 137
##  7 Agnostic $75-100k                122
##  8 Agnostic $100-150k               109
##  9 Agnostic &amp;gt;150k                    84
## 10 Agnostic Don&#39;t know/refused       96
## # ... with 170 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Transforme o banco &lt;code&gt;billboard&lt;/code&gt; para que ele contenha apenas uma coluna &amp;ldquo;semana&amp;rdquo; e uma coluna com a posição da música no ranking.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Dica, você pode selecionar várias colunas usando o atalho wk1:wk76&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;billboard
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 317 x 79
##    artist   track   date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;date&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 2 Pac    Baby D~ 2000-02-26      87    82    72    77    87    94    99    NA
##  2 2Ge+her  The Ha~ 2000-09-02      91    87    92    NA    NA    NA    NA    NA
##  3 3 Doors~ Krypto~ 2000-04-08      81    70    68    67    66    57    54    53
##  4 3 Doors~ Loser   2000-10-21      76    76    72    69    67    65    55    59
##  5 504 Boyz Wobble~ 2000-04-15      57    34    25    17    17    31    36    49
##  6 98^0     Give M~ 2000-08-19      51    39    34    26    26    19     2     2
##  7 A*Teens  Dancin~ 2000-07-08      97    97    96    95   100    NA    NA    NA
##  8 Aaliyah  I Don&#39;~ 2000-01-29      84    62    51    41    38    35    35    38
##  9 Aaliyah  Try Ag~ 2000-03-18      59    53    38    28    21    18    16    14
## 10 Adams, ~ Open M~ 2000-08-26      76    76    74    69    68    67    61    58
## # ... with 307 more rows, and 68 more variables: wk9 &amp;lt;dbl&amp;gt;, wk10 &amp;lt;dbl&amp;gt;,
## #   wk11 &amp;lt;dbl&amp;gt;, wk12 &amp;lt;dbl&amp;gt;, wk13 &amp;lt;dbl&amp;gt;, wk14 &amp;lt;dbl&amp;gt;, wk15 &amp;lt;dbl&amp;gt;, wk16 &amp;lt;dbl&amp;gt;,
## #   wk17 &amp;lt;dbl&amp;gt;, wk18 &amp;lt;dbl&amp;gt;, wk19 &amp;lt;dbl&amp;gt;, wk20 &amp;lt;dbl&amp;gt;, wk21 &amp;lt;dbl&amp;gt;, wk22 &amp;lt;dbl&amp;gt;,
## #   wk23 &amp;lt;dbl&amp;gt;, wk24 &amp;lt;dbl&amp;gt;, wk25 &amp;lt;dbl&amp;gt;, wk26 &amp;lt;dbl&amp;gt;, wk27 &amp;lt;dbl&amp;gt;, wk28 &amp;lt;dbl&amp;gt;,
## #   wk29 &amp;lt;dbl&amp;gt;, wk30 &amp;lt;dbl&amp;gt;, wk31 &amp;lt;dbl&amp;gt;, wk32 &amp;lt;dbl&amp;gt;, wk33 &amp;lt;dbl&amp;gt;, wk34 &amp;lt;dbl&amp;gt;,
## #   wk35 &amp;lt;dbl&amp;gt;, wk36 &amp;lt;dbl&amp;gt;, wk37 &amp;lt;dbl&amp;gt;, wk38 &amp;lt;dbl&amp;gt;, wk39 &amp;lt;dbl&amp;gt;, wk40 &amp;lt;dbl&amp;gt;,
## #   wk41 &amp;lt;dbl&amp;gt;, wk42 &amp;lt;dbl&amp;gt;, wk43 &amp;lt;dbl&amp;gt;, wk44 &amp;lt;dbl&amp;gt;, wk45 &amp;lt;dbl&amp;gt;, wk46 &amp;lt;dbl&amp;gt;,
## #   wk47 &amp;lt;dbl&amp;gt;, wk48 &amp;lt;dbl&amp;gt;, wk49 &amp;lt;dbl&amp;gt;, wk50 &amp;lt;dbl&amp;gt;, wk51 &amp;lt;dbl&amp;gt;, wk52 &amp;lt;dbl&amp;gt;,
## #   wk53 &amp;lt;dbl&amp;gt;, wk54 &amp;lt;dbl&amp;gt;, wk55 &amp;lt;dbl&amp;gt;, wk56 &amp;lt;dbl&amp;gt;, wk57 &amp;lt;dbl&amp;gt;, wk58 &amp;lt;dbl&amp;gt;,
## #   wk59 &amp;lt;dbl&amp;gt;, wk60 &amp;lt;dbl&amp;gt;, wk61 &amp;lt;dbl&amp;gt;, wk62 &amp;lt;dbl&amp;gt;, wk63 &amp;lt;dbl&amp;gt;, wk64 &amp;lt;dbl&amp;gt;,
## #   wk65 &amp;lt;dbl&amp;gt;, wk66 &amp;lt;lgl&amp;gt;, wk67 &amp;lt;lgl&amp;gt;, wk68 &amp;lt;lgl&amp;gt;, wk69 &amp;lt;lgl&amp;gt;, wk70 &amp;lt;lgl&amp;gt;,
## #   wk71 &amp;lt;lgl&amp;gt;, wk72 &amp;lt;lgl&amp;gt;, wk73 &amp;lt;lgl&amp;gt;, wk74 &amp;lt;lgl&amp;gt;, wk75 &amp;lt;lgl&amp;gt;, wk76 &amp;lt;lgl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Da mesma forma como fizemos nos anteriores, queremos transformar as várias wk1:wk76 em um par de colunas, uma que me diga a semana e a outra que me diga em que posição no ranking a música estava.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;billboard %&amp;gt;% pivot_longer(
  # Colunas que serão transformadas
  cols = wk1:wk76,
  # Nome da variável que receberá os nomes das colunas
  names_to = &amp;quot;semana&amp;quot;,
  # Nome da variável que receberá os valores das células
  values_to = &amp;quot;posicao_rank&amp;quot;,
  # Nesse caso, uso o argumento opcional para eliminar os NAs
  values_drop_na = TRUE
  # Experimente mudar este argumento para FALSE e veja o resultado
  # Quando uma música não está mais nas paradas, ela recebe NA. Acho
  # justificado excluir os NAs nesse caso.
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5,307 x 5
##    artist  track                   date.entered semana posicao_rank
##    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;                   &amp;lt;date&amp;gt;       &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;
##  1 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk1              87
##  2 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk2              82
##  3 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk3              72
##  4 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk4              77
##  5 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk5              87
##  6 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk6              94
##  7 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk7              99
##  8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1              91
##  9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2              87
## 10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3              92
## # ... with 5,297 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Experimente fazer o caminho inverso dos exercícios 3 a 5, devolvendo os datasets ao seu formato original. O que você observou?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Vou começar enxugando os códigos anteriores para criar os resultados que produzimos e salvá-los em objetos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sala_aula_long &amp;lt;- 
  sala_aula %&amp;gt;% pivot_longer(
    cols = c(teste1, teste2, prova1),
    names_to = &amp;quot;avaliacao&amp;quot;,
    values_to = &amp;quot;nota&amp;quot;
  )

relig_income_long &amp;lt;- 
  relig_income %&amp;gt;% pivot_longer(
    cols = `&amp;lt;$10k`:`Don&#39;t know/refused`,
    names_to = &amp;quot;nivel_renda&amp;quot;,
    values_to = &amp;quot;contagem&amp;quot;
  )

billboard_long &amp;lt;- 
  billboard %&amp;gt;% pivot_longer(
    cols = wk1:wk76,
    names_to = &amp;quot;semana&amp;quot;,
    values_to = &amp;quot;posicao_rank&amp;quot;,
    values_drop_na = TRUE
  )

sala_aula_long
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12 x 3
##    name   avaliacao nota 
##    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;
##  1 Billy  teste1    &amp;lt;NA&amp;gt; 
##  2 Billy  teste2    D    
##  3 Billy  prova1    C    
##  4 Suzy   teste1    F    
##  5 Suzy   teste2    &amp;lt;NA&amp;gt; 
##  6 Suzy   prova1    &amp;lt;NA&amp;gt; 
##  7 Lionel teste1    B    
##  8 Lionel teste2    C    
##  9 Lionel prova1    B    
## 10 Jenny  teste1    A    
## 11 Jenny  teste2    A    
## 12 Jenny  prova1    B
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;relig_income_long
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 180 x 3
##    religion nivel_renda        contagem
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                 &amp;lt;dbl&amp;gt;
##  1 Agnostic &amp;lt;$10k                    27
##  2 Agnostic $10-20k                  34
##  3 Agnostic $20-30k                  60
##  4 Agnostic $30-40k                  81
##  5 Agnostic $40-50k                  76
##  6 Agnostic $50-75k                 137
##  7 Agnostic $75-100k                122
##  8 Agnostic $100-150k               109
##  9 Agnostic &amp;gt;150k                    84
## 10 Agnostic Don&#39;t know/refused       96
## # ... with 170 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;billboard_long
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5,307 x 5
##    artist  track                   date.entered semana posicao_rank
##    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;                   &amp;lt;date&amp;gt;       &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;
##  1 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk1              87
##  2 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk2              82
##  3 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk3              72
##  4 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk4              77
##  5 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk5              87
##  6 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk6              94
##  7 2 Pac   Baby Don&#39;t Cry (Keep... 2000-02-26   wk7              99
##  8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1              91
##  9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2              87
## 10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3              92
## # ... with 5,297 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O caminho inverso desses bancos de dados, é utilizar &lt;code&gt;pivot_wider&lt;/code&gt;. Aqui, vamos escolher um par de colunas que contém:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;O nome das colunas que queremos criar&lt;/li&gt;
&lt;li&gt;O valor que queremos passar para as células dessas novas colunas&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Vamos ver exemplos comentados como no anterior&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sala_aula_long %&amp;gt;% pivot_wider(
  
  # Aqui, identificamos colunas que NÃO SERÃO MODIFICADAS
  # É o contrário de pivot_longer. Por padrão, são todas as que não são
  # mencionadas na transformação, mas para deixar bem claro, 
  # vou deixar explícito.
  id_cols = name,
  
  # Variável com os nomes para as novas colunas
  names_from = avaliacao,
  
  # Variável com os valores para as células
  values_from = nota
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 4
##   name   teste1 teste2 prova1
##   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; 
## 1 Billy  &amp;lt;NA&amp;gt;   D      C     
## 2 Suzy   F      &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;  
## 3 Lionel B      C      B     
## 4 Jenny  A      A      B
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;relig_income_long %&amp;gt;% pivot_wider(
  # Colunas não modificadas
  id_cols = religion,
  
  # Variável com os nomes para as novas colunas
  names_from = nivel_renda,
  
  # Variável com os valores para as células
  values_from = contagem
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18 x 11
##    religion `&amp;lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`
##    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
##  1 Agnostic      27        34        60        81        76       137        122
##  2 Atheist       12        27        37        52        35        70         73
##  3 Buddhist      27        21        30        34        33        58         62
##  4 Catholic     418       617       732       670       638      1116        949
##  5 Don’t k~      15        14        15        11        10        35         21
##  6 Evangel~     575       869      1064       982       881      1486        949
##  7 Hindu          1         9         7         9        11        34         47
##  8 Histori~     228       244       236       238       197       223        131
##  9 Jehovah~      20        27        24        24        21        30         15
## 10 Jewish        19        19        25        25        30        95         69
## 11 Mainlin~     289       495       619       655       651      1107        939
## 12 Mormon        29        40        48        51        56       112         85
## 13 Muslim         6         7         9        10         9        23         16
## 14 Orthodox      13        17        23        32        32        47         38
## 15 Other C~       9         7        11        13        13        14         18
## 16 Other F~      20        33        40        46        49        63         46
## 17 Other W~       5         2         3         4         2         7          3
## 18 Unaffil~     217       299       374       365       341       528        407
## # ... with 3 more variables: $100-150k &amp;lt;dbl&amp;gt;, &amp;gt;150k &amp;lt;dbl&amp;gt;,
## #   Don&#39;t know/refused &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;billboard_long %&amp;gt;% pivot_wider(
  # Colunas não modificadas
  id_cols = c(artist, track, date.entered),
  
  # Variável com os nomes para as novas colunas
  names_from = semana,
  
  # Variável com os valores para as células
  values_from = posicao_rank
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 317 x 68
##    artist   track   date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;date&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 2 Pac    Baby D~ 2000-02-26      87    82    72    77    87    94    99    NA
##  2 2Ge+her  The Ha~ 2000-09-02      91    87    92    NA    NA    NA    NA    NA
##  3 3 Doors~ Krypto~ 2000-04-08      81    70    68    67    66    57    54    53
##  4 3 Doors~ Loser   2000-10-21      76    76    72    69    67    65    55    59
##  5 504 Boyz Wobble~ 2000-04-15      57    34    25    17    17    31    36    49
##  6 98^0     Give M~ 2000-08-19      51    39    34    26    26    19     2     2
##  7 A*Teens  Dancin~ 2000-07-08      97    97    96    95   100    NA    NA    NA
##  8 Aaliyah  I Don&#39;~ 2000-01-29      84    62    51    41    38    35    35    38
##  9 Aaliyah  Try Ag~ 2000-03-18      59    53    38    28    21    18    16    14
## 10 Adams, ~ Open M~ 2000-08-26      76    76    74    69    68    67    61    58
## # ... with 307 more rows, and 57 more variables: wk9 &amp;lt;dbl&amp;gt;, wk10 &amp;lt;dbl&amp;gt;,
## #   wk11 &amp;lt;dbl&amp;gt;, wk12 &amp;lt;dbl&amp;gt;, wk13 &amp;lt;dbl&amp;gt;, wk14 &amp;lt;dbl&amp;gt;, wk15 &amp;lt;dbl&amp;gt;, wk16 &amp;lt;dbl&amp;gt;,
## #   wk17 &amp;lt;dbl&amp;gt;, wk18 &amp;lt;dbl&amp;gt;, wk19 &amp;lt;dbl&amp;gt;, wk20 &amp;lt;dbl&amp;gt;, wk21 &amp;lt;dbl&amp;gt;, wk22 &amp;lt;dbl&amp;gt;,
## #   wk23 &amp;lt;dbl&amp;gt;, wk24 &amp;lt;dbl&amp;gt;, wk25 &amp;lt;dbl&amp;gt;, wk26 &amp;lt;dbl&amp;gt;, wk27 &amp;lt;dbl&amp;gt;, wk28 &amp;lt;dbl&amp;gt;,
## #   wk29 &amp;lt;dbl&amp;gt;, wk30 &amp;lt;dbl&amp;gt;, wk31 &amp;lt;dbl&amp;gt;, wk32 &amp;lt;dbl&amp;gt;, wk33 &amp;lt;dbl&amp;gt;, wk34 &amp;lt;dbl&amp;gt;,
## #   wk35 &amp;lt;dbl&amp;gt;, wk36 &amp;lt;dbl&amp;gt;, wk37 &amp;lt;dbl&amp;gt;, wk38 &amp;lt;dbl&amp;gt;, wk39 &amp;lt;dbl&amp;gt;, wk40 &amp;lt;dbl&amp;gt;,
## #   wk41 &amp;lt;dbl&amp;gt;, wk42 &amp;lt;dbl&amp;gt;, wk43 &amp;lt;dbl&amp;gt;, wk44 &amp;lt;dbl&amp;gt;, wk45 &amp;lt;dbl&amp;gt;, wk46 &amp;lt;dbl&amp;gt;,
## #   wk47 &amp;lt;dbl&amp;gt;, wk48 &amp;lt;dbl&amp;gt;, wk49 &amp;lt;dbl&amp;gt;, wk50 &amp;lt;dbl&amp;gt;, wk51 &amp;lt;dbl&amp;gt;, wk52 &amp;lt;dbl&amp;gt;,
## #   wk53 &amp;lt;dbl&amp;gt;, wk54 &amp;lt;dbl&amp;gt;, wk55 &amp;lt;dbl&amp;gt;, wk56 &amp;lt;dbl&amp;gt;, wk57 &amp;lt;dbl&amp;gt;, wk58 &amp;lt;dbl&amp;gt;,
## #   wk59 &amp;lt;dbl&amp;gt;, wk60 &amp;lt;dbl&amp;gt;, wk61 &amp;lt;dbl&amp;gt;, wk62 &amp;lt;dbl&amp;gt;, wk63 &amp;lt;dbl&amp;gt;, wk64 &amp;lt;dbl&amp;gt;,
## #   wk65 &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tanto &lt;code&gt;pivot_longer&lt;/code&gt; quanto &lt;code&gt;pivot_wider&lt;/code&gt; tem mais argumentos para lidar com situações complexas, como quando você precisa aplicar transformações em variáveis antes de reformatar o banco ou precisa utilizar múltiplas colunas, mas eu deixo isso para vocês descobrirem por conta própria quando estiverem confortáveis com a sintaxe básica.&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;O que os argumentos &lt;code&gt;extra&lt;/code&gt; e &lt;code&gt;fill&lt;/code&gt; em separate fazem? Utilize o exemplo a seguir como guia.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e,f,g&amp;quot;, &amp;quot;h,i,j&amp;quot;)) %&amp;gt;% 
  separate(x, c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;tres&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Expected 3 pieces. Additional pieces discarded in 1 rows [2].
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   um    dois  tres 
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     f    
## 3 h     i     j
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e&amp;quot;, &amp;quot;f,g,i&amp;quot;)) %&amp;gt;% 
  separate(x, c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;tres&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Expected 3 pieces. Missing pieces filled with `NA` in 1 rows [2].
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   um    dois  tres 
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     &amp;lt;NA&amp;gt; 
## 3 f     g     i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por padrão, &lt;code&gt;separate&lt;/code&gt; espera que todas as colunas sendo separadas tenham o mesmo comprimento. Por exemplo, no primeiro caso, indicamos que vamos criar três novas colunas, chamadas de &amp;ldquo;um&amp;rdquo;, &amp;ldquo;dois&amp;rdquo; e &amp;ldquo;tres&amp;rdquo;. Mas os vetores tem tamanhos diferentes. Um deles tem 4 letras ao invés de 3. No segundo exemplo, um deles tem duas letras ao invés de três. Esse tipo de situação é bastante comum quando lidamos com erros de digitação. Então, o que fazer com o elemento que está sobrando ou faltando?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Sobrando
tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e,f,g&amp;quot;, &amp;quot;h,i,j&amp;quot;)) %&amp;gt;% 
  separate(x, c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;tres&amp;quot;), extra = &amp;quot;warn&amp;quot;) # avise que ocorreu (padrão)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Expected 3 pieces. Additional pieces discarded in 1 rows [2].
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   um    dois  tres 
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     f    
## 3 h     i     j
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e,f,g&amp;quot;, &amp;quot;h,i,j&amp;quot;)) %&amp;gt;% 
  separate(x, c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;tres&amp;quot;), extra = &amp;quot;drop&amp;quot;) # descarte o que sobrou
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   um    dois  tres 
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     f    
## 3 h     i     j
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e,f,g&amp;quot;, &amp;quot;h,i,j&amp;quot;)) %&amp;gt;% 
  separate(x, c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;tres&amp;quot;), extra = &amp;quot;merge&amp;quot;) # junte com o último
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   um    dois  tres 
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     f,g  
## 3 h     i     j
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Note especialmente no último caso o que ocorreu com as colunas.

# Faltando
tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e&amp;quot;, &amp;quot;f,g,i&amp;quot;)) %&amp;gt;% 
  separate(x, c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;tres&amp;quot;), fill = &amp;quot;warn&amp;quot;) # avise e preencha a direita
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Expected 3 pieces. Missing pieces filled with `NA` in 1 rows [2].
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   um    dois  tres 
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     &amp;lt;NA&amp;gt; 
## 3 f     g     i
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e&amp;quot;, &amp;quot;f,g,i&amp;quot;)) %&amp;gt;% 
  separate(x, c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;tres&amp;quot;), fill = &amp;quot;left&amp;quot;) # preencha a esquerda
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   um    dois  tres 
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 &amp;lt;NA&amp;gt;  d     e    
## 3 f     g     i
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(x = c(&amp;quot;a,b,c&amp;quot;, &amp;quot;d,e&amp;quot;, &amp;quot;f,g,i&amp;quot;)) %&amp;gt;% 
  separate(x, c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;tres&amp;quot;), fill = &amp;quot;right&amp;quot;) # preencha a direta
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   um    dois  tres 
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 a     b     c    
## 2 d     e     &amp;lt;NA&amp;gt; 
## 3 f     g     i
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Note na sua saída do R como ficou a tibble e onde foram colocados NAs
# em cada caso
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Tanto &lt;code&gt;unite&lt;/code&gt; como &lt;code&gt;separate&lt;/code&gt; possuem um argumento &lt;code&gt;remove&lt;/code&gt;. Pra que ele serve e quando você o utilizaria no valor &lt;code&gt;FALSE&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Acho que a melhor forma de compreender isso é utilizar um banco de dados. Vamos pegar aquele da população retirado da Wikipédia.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;populacao &amp;lt;- tribble(
  ~Rank, ~Country, ~Population,	~&#39;% of world&#39;, ~Day, ~Month, ~Year, ~Source,
  1L,         &amp;quot;China&amp;quot;,    1411778724, &amp;quot;17.9%&amp;quot;,  &amp;quot;1&amp;quot;, &amp;quot;Nov&amp;quot;, &amp;quot;2020&amp;quot;,       &amp;quot;Seventh Census on 2020&amp;quot;,
  2L,         &amp;quot;India&amp;quot;,    1377123716, &amp;quot;17.5%&amp;quot;, &amp;quot;19&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;2021&amp;quot;, &amp;quot;National population clock[3]&amp;quot;,
  3L, &amp;quot;United States&amp;quot;,     331695937, &amp;quot;4.22%&amp;quot;, &amp;quot;19&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;2021&amp;quot;, &amp;quot;National population clock[4]&amp;quot;,
  4L,     &amp;quot;Indonesia&amp;quot;,     271350000, &amp;quot;3.45%&amp;quot;, &amp;quot;31&amp;quot;, &amp;quot;Dec&amp;quot;, &amp;quot;2020&amp;quot;,  &amp;quot;National annual estimate[5]&amp;quot;,
  5L,      &amp;quot;Pakistan&amp;quot;,     225200000, &amp;quot;2.86%&amp;quot;,  &amp;quot;1&amp;quot;, &amp;quot;Jul&amp;quot;, &amp;quot;2021&amp;quot;,             &amp;quot;UN projection[2]&amp;quot;,
  6L,        &amp;quot;Brazil&amp;quot;,     213154869, &amp;quot;2.71%&amp;quot;, &amp;quot;19&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;2021&amp;quot;, &amp;quot;National population clock[6]&amp;quot;,
  7L,       &amp;quot;Nigeria&amp;quot;,     211401000, &amp;quot;2.69%&amp;quot;,  &amp;quot;1&amp;quot;, &amp;quot;Jul&amp;quot;, &amp;quot;2021&amp;quot;,             &amp;quot;UN projection[2]&amp;quot;,
  8L,    &amp;quot;Bangladesh&amp;quot;,     170689832, &amp;quot;2.17%&amp;quot;, &amp;quot;19&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;2021&amp;quot;, &amp;quot;National population clock[7]&amp;quot;,
  9L,        &amp;quot;Russia&amp;quot;,     146171015, &amp;quot;1.86%&amp;quot;,  &amp;quot;1&amp;quot;, &amp;quot;Jan&amp;quot;, &amp;quot;2021&amp;quot;,  &amp;quot;National annual estimate[8]&amp;quot;,
  10L,       &amp;quot;Mexico&amp;quot;,     126014024, &amp;quot;1.60%&amp;quot;,  &amp;quot;2&amp;quot;, &amp;quot;Mar&amp;quot;, &amp;quot;2020&amp;quot;,        &amp;quot;2020 census result[9]&amp;quot;
)
populacao
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 8
##     Rank Country     Population `% of world` Day   Month Year  Source           
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;            
##  1     1 China       1411778724 17.9%        1     Nov   2020  Seventh Census o~
##  2     2 India       1377123716 17.5%        19    May   2021  National populat~
##  3     3 United Sta~  331695937 4.22%        19    May   2021  National populat~
##  4     4 Indonesia    271350000 3.45%        31    Dec   2020  National annual ~
##  5     5 Pakistan     225200000 2.86%        1     Jul   2021  UN projection[2] 
##  6     6 Brazil       213154869 2.71%        19    May   2021  National populat~
##  7     7 Nigeria      211401000 2.69%        1     Jul   2021  UN projection[2] 
##  8     8 Bangladesh   170689832 2.17%        19    May   2021  National populat~
##  9     9 Russia       146171015 1.86%        1     Jan   2021  National annual ~
## 10    10 Mexico       126014024 1.60%        2     Mar   2020  2020 census resu~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos ver dois exemplos, um com &lt;code&gt;unite&lt;/code&gt; e outro com &lt;code&gt;separate&lt;/code&gt; para exemplificar o que &lt;code&gt;remove&lt;/code&gt; faz.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Unir as colunas Day, Month, Year, remove = TRUE
populacao %&amp;gt;% unite(Data, Day, Month, Year, remove = TRUE) # padrão
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 6
##     Rank Country      Population `% of world` Data       Source                 
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                  
##  1     1 China        1411778724 17.9%        1_Nov_2020 Seventh Census on 2020 
##  2     2 India        1377123716 17.5%        19_May_20~ National population cl~
##  3     3 United Stat~  331695937 4.22%        19_May_20~ National population cl~
##  4     4 Indonesia     271350000 3.45%        31_Dec_20~ National annual estima~
##  5     5 Pakistan      225200000 2.86%        1_Jul_2021 UN projection[2]       
##  6     6 Brazil        213154869 2.71%        19_May_20~ National population cl~
##  7     7 Nigeria       211401000 2.69%        1_Jul_2021 UN projection[2]       
##  8     8 Bangladesh    170689832 2.17%        19_May_20~ National population cl~
##  9     9 Russia        146171015 1.86%        1_Jan_2021 National annual estima~
## 10    10 Mexico        126014024 1.60%        2_Mar_2020 2020 census result[9]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Unir as colunas Day, Month, Year, remove = FALSE
populacao %&amp;gt;% unite(Data, Day, Month, Year, remove = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 9
##     Rank Country   Population `% of world` Data    Day   Month Year  Source     
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      
##  1     1 China     1411778724 17.9%        1_Nov_~ 1     Nov   2020  Seventh Ce~
##  2     2 India     1377123716 17.5%        19_May~ 19    May   2021  National p~
##  3     3 United S~  331695937 4.22%        19_May~ 19    May   2021  National p~
##  4     4 Indonesia  271350000 3.45%        31_Dec~ 31    Dec   2020  National a~
##  5     5 Pakistan   225200000 2.86%        1_Jul_~ 1     Jul   2021  UN project~
##  6     6 Brazil     213154869 2.71%        19_May~ 19    May   2021  National p~
##  7     7 Nigeria    211401000 2.69%        1_Jul_~ 1     Jul   2021  UN project~
##  8     8 Banglade~  170689832 2.17%        19_May~ 19    May   2021  National p~
##  9     9 Russia     146171015 1.86%        1_Jan_~ 1     Jan   2021  National a~
## 10    10 Mexico     126014024 1.60%        2_Mar_~ 2     Mar   2020  2020 censu~
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Vejam o que aconteceu com as colunas nos dois bancos.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora com &lt;code&gt;separate&lt;/code&gt;: Separar a coluna &lt;code&gt;year&lt;/code&gt; em século e ano, apenas como exemplo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# remove = TRUE, padrão
populacao %&amp;gt;% separate(Year, c(&amp;quot;seculo&amp;quot;, &amp;quot;ano&amp;quot;), sep = 2, remove = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 9
##     Rank Country   Population `% of world` Day   Month seculo ano   Source      
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;       
##  1     1 China     1411778724 17.9%        1     Nov   20     20    Seventh Cen~
##  2     2 India     1377123716 17.5%        19    May   20     21    National po~
##  3     3 United S~  331695937 4.22%        19    May   20     21    National po~
##  4     4 Indonesia  271350000 3.45%        31    Dec   20     20    National an~
##  5     5 Pakistan   225200000 2.86%        1     Jul   20     21    UN projecti~
##  6     6 Brazil     213154869 2.71%        19    May   20     21    National po~
##  7     7 Nigeria    211401000 2.69%        1     Jul   20     21    UN projecti~
##  8     8 Banglade~  170689832 2.17%        19    May   20     21    National po~
##  9     9 Russia     146171015 1.86%        1     Jan   20     21    National an~
## 10    10 Mexico     126014024 1.60%        2     Mar   20     20    2020 census~
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# remove = FALSE
populacao %&amp;gt;% separate(Year, c(&amp;quot;seculo&amp;quot;, &amp;quot;ano&amp;quot;), sep = 2, remove = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 10
##     Rank Country  Population `% of world` Day   Month Year  seculo ano   Source 
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  
##  1     1 China    1411778724 17.9%        1     Nov   2020  20     20    Sevent~
##  2     2 India    1377123716 17.5%        19    May   2021  20     21    Nation~
##  3     3 United ~  331695937 4.22%        19    May   2021  20     21    Nation~
##  4     4 Indones~  271350000 3.45%        31    Dec   2020  20     20    Nation~
##  5     5 Pakistan  225200000 2.86%        1     Jul   2021  20     21    UN pro~
##  6     6 Brazil    213154869 2.71%        19    May   2021  20     21    Nation~
##  7     7 Nigeria   211401000 2.69%        1     Jul   2021  20     21    UN pro~
##  8     8 Banglad~  170689832 2.17%        19    May   2021  20     21    Nation~
##  9     9 Russia    146171015 1.86%        1     Jan   2021  20     21    Nation~
## 10    10 Mexico    126014024 1.60%        2     Mar   2020  20     20    2020 c~
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Vejam o que aconteceu com as colunas nos dois bancos.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eu gosto de utilizar esse argumento quando eu tenho dúvida sobre o resultado e quero fazer inspeção visual para detectar eventuais problemas na separação ou junção. Uma vez que estou satisfeito com o resultado, em geral eu uso o &lt;code&gt;remove=TRUE&lt;/code&gt;. Vocês tem que decidir se precisam manter as colunas originais ou se a coluna transformada é o suficiente.&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;Compare o argumento &lt;code&gt;values_fill&lt;/code&gt; em &lt;code&gt;pivot_wider&lt;/code&gt; e &lt;code&gt;fill&lt;/code&gt; em &lt;code&gt;complete&lt;/code&gt;. Qual é a diferença?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A resposta curta é simples: em &lt;code&gt;pivot_wider&lt;/code&gt;, podemos ter aqueles missings &amp;ldquo;implícitos&amp;rdquo; que não apareciam no nosso banco longo e, durante a transformação, eles viram &lt;code&gt;NA&lt;/code&gt;s nas colunas. Ó argumento &lt;code&gt;values_fill&lt;/code&gt; indica um valor para ser preenchido no lugar de &lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Em &lt;code&gt;complete&lt;/code&gt;, temos uma situação similar. O que fazer quando for encontrada uma combinação de valores no banco longo que é um &amp;ldquo;missing implícito&amp;rdquo;? Você pode especificar um valor padrão para preenchê-lo.&lt;/p&gt;
&lt;p&gt;São funções similares, mas uma funciona sem reformatar o banco e a outra durante o processo de reformatação. Veja um exemplo abaixo com aquela &lt;code&gt;tibble&lt;/code&gt; das ações.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;acoes &amp;lt;- tibble(
  ano   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
  qdr   = c(   1,    2,    3,    4,    2,    3,    4),
  lucro = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)

acoes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 3
##     ano   qdr lucro
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1  2015     1  1.88
## 2  2015     2  0.59
## 3  2015     3  0.35
## 4  2015     4 NA   
## 5  2016     2  0.92
## 6  2016     3  0.17
## 7  2016     4  2.66
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Vamos supor que o NA implícito significa que a empresa teve 
# lucro = 0 naquele quadrimestre.

# pivot_wider, values_fill
acoes %&amp;gt;% pivot_wider(
  id_cols = ano,
  names_from = qdr,
  values_from = lucro,
  values_fill = 0
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 5
##     ano   `1`   `2`   `3`   `4`
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1  2015  1.88  0.59  0.35 NA   
## 2  2016  0     0.92  0.17  2.66
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# complete, fill
acoes %&amp;gt;% complete(ano, qdr, fill = list(lucro = 0))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 3
##     ano   qdr lucro
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1  2015     1  1.88
## 2  2015     2  0.59
## 3  2015     3  0.35
## 4  2015     4  0   
## 5  2016     1  0   
## 6  2016     2  0.92
## 7  2016     3  0.17
## 8  2016     4  2.66
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note o resultado. E note também que &lt;code&gt;values_fill&lt;/code&gt; em &lt;code&gt;pivot_wider&lt;/code&gt; é um pouco mais criterioso na hora de fazer as transformações.&lt;/p&gt;
&lt;h2 id=&#34;stringr-forcats-e-dplyr&#34;&gt;&lt;code&gt;stringr&lt;/code&gt;, &lt;code&gt;forcats&lt;/code&gt; e &lt;code&gt;dplyr&lt;/code&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(nycflights13)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Encontre os vôos que:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atrasaram mais de duas horas&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% filter(dep_delay &amp;gt; 120)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9,723 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      848           1835       853     1001           1950
##  2  2013     1     1      957            733       144     1056            853
##  3  2013     1     1     1114            900       134     1447           1222
##  4  2013     1     1     1540           1338       122     2020           1825
##  5  2013     1     1     1815           1325       290     2120           1542
##  6  2013     1     1     1842           1422       260     1958           1535
##  7  2013     1     1     1856           1645       131     2212           2005
##  8  2013     1     1     1934           1725       129     2126           1855
##  9  2013     1     1     1938           1703       155     2109           1823
## 10  2013     1     1     1942           1705       157     2124           1830
## # ... with 9,713 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Com destino a Houston (&lt;code&gt;IAH&lt;/code&gt; ou &lt;code&gt;HOU&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% filter(dest %in% c(&amp;quot;IAH&amp;quot;, &amp;quot;HOU&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9,313 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830            819
##  2  2013     1     1      533            529         4      850            830
##  3  2013     1     1      623            627        -4      933            932
##  4  2013     1     1      728            732        -4     1041           1038
##  5  2013     1     1      739            739         0     1104           1038
##  6  2013     1     1      908            908         0     1228           1219
##  7  2013     1     1     1028           1026         2     1350           1339
##  8  2013     1     1     1044           1045        -1     1352           1351
##  9  2013     1     1     1114            900       134     1447           1222
## 10  2013     1     1     1205           1200         5     1503           1505
## # ... with 9,303 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Operados pela United, American ou Delta&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unique(flights$carrier)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;UA&amp;quot; &amp;quot;AA&amp;quot; &amp;quot;B6&amp;quot; &amp;quot;DL&amp;quot; &amp;quot;EV&amp;quot; &amp;quot;MQ&amp;quot; &amp;quot;US&amp;quot; &amp;quot;WN&amp;quot; &amp;quot;VX&amp;quot; &amp;quot;FL&amp;quot; &amp;quot;AS&amp;quot; &amp;quot;9E&amp;quot; &amp;quot;F9&amp;quot; &amp;quot;HA&amp;quot; &amp;quot;YV&amp;quot;
## [16] &amp;quot;OO&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% filter(carrier %in% c(&amp;quot;UA&amp;quot;, &amp;quot;AA&amp;quot;, &amp;quot;DL&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 139,504 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830            819
##  2  2013     1     1      533            529         4      850            830
##  3  2013     1     1      542            540         2      923            850
##  4  2013     1     1      554            600        -6      812            837
##  5  2013     1     1      554            558        -4      740            728
##  6  2013     1     1      558            600        -2      753            745
##  7  2013     1     1      558            600        -2      924            917
##  8  2013     1     1      558            600        -2      923            937
##  9  2013     1     1      559            600        -1      941            910
## 10  2013     1     1      559            600        -1      854            902
## # ... with 139,494 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Decolaram entre julho e setembro&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% filter(between(month, 7, 9))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 86,326 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     7     1        1           2029       212      236           2359
##  2  2013     7     1        2           2359         3      344            344
##  3  2013     7     1       29           2245       104      151              1
##  4  2013     7     1       43           2130       193      322             14
##  5  2013     7     1       44           2150       174      300            100
##  6  2013     7     1       46           2051       235      304           2358
##  7  2013     7     1       48           2001       287      308           2305
##  8  2013     7     1       58           2155       183      335             43
##  9  2013     7     1      100           2146       194      327             30
## 10  2013     7     1      100           2245       135      337            135
## # ... with 86,316 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Chegaram com mais de duas horas de atraso, mas não decolaram com atraso&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% filter(arr_delay &amp;gt; 120, dep_delay &amp;lt;= 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 29 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1    27     1419           1420        -1     1754           1550
##  2  2013    10     7     1350           1350         0     1736           1526
##  3  2013    10     7     1357           1359        -2     1858           1654
##  4  2013    10    16      657            700        -3     1258           1056
##  5  2013    11     1      658            700        -2     1329           1015
##  6  2013     3    18     1844           1847        -3       39           2219
##  7  2013     4    17     1635           1640        -5     2049           1845
##  8  2013     4    18      558            600        -2     1149            850
##  9  2013     4    18      655            700        -5     1213            950
## 10  2013     5    22     1827           1830        -3     2217           2010
## # ... with 19 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;,
## #   flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;,
## #   distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Atrasaram mais de uma hora para decolar, mas recuperaram mais de 30 minutos durante o voo&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% filter(dep_delay &amp;gt; 60, dep_delay - arr_delay &amp;gt;= 30)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,046 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1     1716           1545        91     2140           2039
##  2  2013     1     1     2205           1720       285       46           2040
##  3  2013     1     1     2326           2130       116      131             18
##  4  2013     1     3     1503           1221       162     1803           1555
##  5  2013     1     3     1821           1530       171     2131           1910
##  6  2013     1     3     1839           1700        99     2056           1950
##  7  2013     1     3     1850           1745        65     2148           2120
##  8  2013     1     3     1923           1815        68     2036           1958
##  9  2013     1     3     1941           1759       102     2246           2139
## 10  2013     1     3     1950           1845        65     2228           2227
## # ... with 2,036 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Decolaram entre a meia-noite e 6 da manhã (inclusive)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% filter(between(hour, 0, 5) | (hour == 6 &amp;amp; minute == 0))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,970 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830            819
##  2  2013     1     1      533            529         4      850            830
##  3  2013     1     1      542            540         2      923            850
##  4  2013     1     1      544            545        -1     1004           1022
##  5  2013     1     1      554            600        -6      812            837
##  6  2013     1     1      554            558        -4      740            728
##  7  2013     1     1      555            600        -5      913            854
##  8  2013     1     1      557            600        -3      709            723
##  9  2013     1     1      557            600        -3      838            846
## 10  2013     1     1      558            600        -2      753            745
## # ... with 8,960 more rows, and 11 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Reordene suas colunas para encontrar os voos mais rápidos (maior velocidade de voo).&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% 
  select(air_time, distance) %&amp;gt;% 
  mutate(speed = distance/air_time) %&amp;gt;% 
  arrange(desc(speed))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 3
##    air_time distance speed
##       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1       65      762 11.7 
##  2       93     1008 10.8 
##  3       55      594 10.8 
##  4       70      748 10.7 
##  5      105     1035  9.86
##  6      170     1598  9.4 
##  7      172     1598  9.29
##  8      175     1623  9.27
##  9      173     1598  9.24
## 10      173     1598  9.24
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Teste várias maneiras diferentes de selecionar as variáveis &lt;code&gt;dep_time&lt;/code&gt;, &lt;code&gt;dep_delay&lt;/code&gt;, &lt;code&gt;arr_time&lt;/code&gt; e &lt;code&gt;arr_delay&lt;/code&gt; usando as várias helper functions de &lt;code&gt;select&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% select(dep_time, dep_delay, arr_time, arr_delay)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 4
##    dep_time dep_delay arr_time arr_delay
##       &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1      517         2      830        11
##  2      533         4      850        20
##  3      542         2      923        33
##  4      544        -1     1004       -18
##  5      554        -6      812       -25
##  6      554        -4      740        12
##  7      555        -5      913        19
##  8      557        -3      709       -14
##  9      557        -3      838        -8
## 10      558        -2      753         8
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% select(starts_with(&amp;quot;dep&amp;quot;), starts_with(&amp;quot;arr&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 4
##    dep_time dep_delay arr_time arr_delay
##       &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1      517         2      830        11
##  2      533         4      850        20
##  3      542         2      923        33
##  4      544        -1     1004       -18
##  5      554        -6      812       -25
##  6      554        -4      740        12
##  7      555        -5      913        19
##  8      557        -3      709       -14
##  9      557        -3      838        -8
## 10      558        -2      753         8
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% select(starts_with(c(&amp;quot;dep&amp;quot;, &amp;quot;arr&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 4
##    dep_time dep_delay arr_time arr_delay
##       &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1      517         2      830        11
##  2      533         4      850        20
##  3      542         2      923        33
##  4      544        -1     1004       -18
##  5      554        -6      812       -25
##  6      554        -4      740        12
##  7      555        -5      913        19
##  8      557        -3      709       -14
##  9      557        -3      838        -8
## 10      558        -2      753         8
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% select(matches(&amp;quot;^arr|^dep&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 4
##    dep_time dep_delay arr_time arr_delay
##       &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1      517         2      830        11
##  2      533         4      850        20
##  3      542         2      923        33
##  4      544        -1     1004       -18
##  5      554        -6      812       -25
##  6      554        -4      740        12
##  7      555        -5      913        19
##  8      557        -3      709       -14
##  9      557        -3      838        -8
## 10      558        -2      753         8
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% select(!starts_with(c(&amp;quot;sched&amp;quot;, &amp;quot;car&amp;quot;)) &amp;amp; contains(c(&amp;quot;dep&amp;quot;, &amp;quot;arr&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 4
##    dep_time dep_delay arr_time arr_delay
##       &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
##  1      517         2      830        11
##  2      533         4      850        20
##  3      542         2      923        33
##  4      544        -1     1004       -18
##  5      554        -6      812       -25
##  6      554        -4      740        12
##  7      555        -5      913        19
##  8      557        -3      709       -14
##  9      557        -3      838        -8
## 10      558        -2      753         8
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% select(ends_with(c(&amp;quot;time&amp;quot;, &amp;quot;delay&amp;quot;)) &amp;amp; !starts_with(c(&amp;quot;sched&amp;quot;, &amp;quot;air&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 4
##    dep_time arr_time dep_delay arr_delay
##       &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1      517      830         2        11
##  2      533      850         4        20
##  3      542      923         2        33
##  4      544     1004        -1       -18
##  5      554      812        -6       -25
##  6      554      740        -4        12
##  7      555      913        -5        19
##  8      557      709        -3       -14
##  9      557      838        -3        -8
## 10      558      753        -2         8
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;As variáveis &lt;code&gt;dep_time&lt;/code&gt; e &lt;code&gt;sched_dep_time&lt;/code&gt; estão num formato incorreto (veja &lt;code&gt;?flights&lt;/code&gt;). Converta-as com &lt;code&gt;mutate&lt;/code&gt; para um valor em minutos passados desde a meia-noite. Dica: utilize &lt;code&gt;%/%&lt;/code&gt; e &lt;code&gt;%%&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% mutate(
  dep_hour         = dep_time %/% 100,
  dep_minute       = dep_time %% 100,
  sched_dep_hour   = sched_dep_time %/% 100,
  sched_arr_minute = sched_arr_time %% 100
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 23
##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830            819
##  2  2013     1     1      533            529         4      850            830
##  3  2013     1     1      542            540         2      923            850
##  4  2013     1     1      544            545        -1     1004           1022
##  5  2013     1     1      554            600        -6      812            837
##  6  2013     1     1      554            558        -4      740            728
##  7  2013     1     1      555            600        -5      913            854
##  8  2013     1     1      557            600        -3      709            723
##  9  2013     1     1      557            600        -3      838            846
## 10  2013     1     1      558            600        -2      753            745
## # ... with 336,766 more rows, and 15 more variables: arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;,
## #   dep_hour &amp;lt;dbl&amp;gt;, dep_minute &amp;lt;dbl&amp;gt;, sched_dep_hour &amp;lt;dbl&amp;gt;,
## #   sched_arr_minute &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Há uma outra solução com separate!
flights %&amp;gt;% 
  separate(
    col = dep_time,
    into = c(&amp;quot;dep_hour&amp;quot;, &amp;quot;dep_minute&amp;quot;),
    sep = 1,
    # Esse argumento é importante! Teste com FALSE para ver a diferença
    convert = TRUE) %&amp;gt;% 
  separate(
    col = sched_dep_time,
    into = c(&amp;quot;sched_dep_hour&amp;quot;, &amp;quot;sched_dep_minute&amp;quot;),
    sep = 1,
    convert = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 21
##     year month   day dep_hour dep_minute sched_dep_hour sched_dep_minute
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;            &amp;lt;int&amp;gt;
##  1  2013     1     1        5         17              5               15
##  2  2013     1     1        5         33              5               29
##  3  2013     1     1        5         42              5               40
##  4  2013     1     1        5         44              5               45
##  5  2013     1     1        5         54              6                0
##  6  2013     1     1        5         54              5               58
##  7  2013     1     1        5         55              6                0
##  8  2013     1     1        5         57              6                0
##  9  2013     1     1        5         57              6                0
## 10  2013     1     1        5         58              6                0
## # ... with 336,766 more rows, and 14 more variables: dep_delay &amp;lt;dbl&amp;gt;,
## #   arr_time &amp;lt;int&amp;gt;, sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;,
## #   flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;,
## #   distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existe uma outra solução possível para essa questão usando manipulação de strings, com &lt;code&gt;str_sub&lt;/code&gt; também. Fica como desafio!&lt;/p&gt;
&lt;p&gt;Pensando na legibilidade do código e na flexibilidade da abordagem, qual das duas soluções acima você implementaria? &lt;code&gt;mutate&lt;/code&gt; ou duas &lt;code&gt;separate&lt;/code&gt;? Reflita.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;O que o código abaixo está fazendo? Porque mesmo após o código abaixo continuam existindo diferenças entre os valores das variáveis &lt;code&gt;air_time&lt;/code&gt; e &lt;code&gt;travel_time&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% 
  select(air_time, dep_time, arr_time, dep_delay, arr_delay) %&amp;gt;% 
  mutate(dep_hour = dep_time %/% 100,
         dep_min = dep_time %% 100,
         dep_time2 = dep_hour * 60 + dep_min,
         arr_hour = arr_time %/% 100,
         arr_min = arr_time %% 100,
         arr_time2 = arr_hour * 60 + arr_min,
         travel_time = arr_time2 - dep_time2) %&amp;gt;% 
  select(-dep_hour, -dep_min, -arr_hour, -arr_min)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 8
##    air_time dep_time arr_time dep_delay arr_delay dep_time2 arr_time2
##       &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1      227      517      830         2        11       317       510
##  2      227      533      850         4        20       333       530
##  3      160      542      923         2        33       342       563
##  4      183      544     1004        -1       -18       344       604
##  5      116      554      812        -6       -25       354       492
##  6      150      554      740        -4        12       354       460
##  7      158      555      913        -5        19       355       553
##  8       53      557      709        -3       -14       357       429
##  9      140      557      838        -3        -8       357       518
## 10      138      558      753        -2         8       358       473
## # ... with 336,766 more rows, and 1 more variable: travel_time &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essa tem uma resposta mais qualitativa. A primeira parte é parecida com a questão anterior, mas estamos manualmente tentando calcular os tempos de viagem. Acontece que os valores não batem com os tempos de vôo identificados no banco. Isso se deve a pelo menos três questões distintas.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uma delas diz respeito ao registro dos tempos, a definição de &lt;code&gt;air_time&lt;/code&gt; pode não estar considerando tempos em que o avião está manobrando ou em solo ou mesmo podem existir erros de preenchimento.&lt;/li&gt;
&lt;li&gt;A segunda diz respeito ao fuso horário distinto entre aeroportos de saída e chegada, que complica o cálculo dos tempos reais, então nosso cálculo está muito cru para identificar isso.&lt;/li&gt;
&lt;li&gt;A última questão são os vôos longos, que começam em um dia e terminam no dia seguinte, que podem prejudicar nosso método de cálculo. Para corrigir alguns desses problemas, você precisaria escrever um código que minimamente levasse essas questões em consideração. Como esse não é o objetivo do curso, eu deixo para quem quiser tentar. &lt;a href=&#34;https://jrnold.github.io/r4ds-exercise-solutions/transform.html#exercise-5.5.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Há uma solução postada aqui&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Use o stringr para concatenar as seguintes strings em uma frase&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- &amp;quot;.&amp;quot;
y &amp;lt;- &amp;quot;feliz&amp;quot;
w &amp;lt;- &amp;quot;acordei&amp;quot;
z &amp;lt;- &amp;quot;hoje&amp;quot;

str_c(z, w, y, sep = &amp;quot; &amp;quot;) %&amp;gt;% 
  str_c(x, sep = &amp;quot;&amp;quot;) %&amp;gt;% 
  str_to_sentence()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Hoje acordei feliz.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Corrija as inconsistências nas colunas país, primeiro_nome, segundo_nome e crie uma nova coluna nomes contendo as duas anteriores. No final, ordene o banco em ordem alfabética.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- 
  tibble::tribble(
    ~pais,    ~primeiro_nome, ~segundo_nome,
    # -------|----------------|-------------|
    &amp;quot;BRASIL&amp;quot;, &amp;quot;ISABELA&amp;quot;,       &amp;quot;MARTINS&amp;quot;,
    &amp;quot;Brasil&amp;quot;, &amp;quot;Eduardo&amp;quot;,       &amp;quot;cabellos&amp;quot;,
    &amp;quot;brasil&amp;quot;, &amp;quot;márcia&amp;quot;,         &amp;quot;pinto&amp;quot;,
    &amp;quot;bRaSiL&amp;quot;, &amp;quot;rogério&amp;quot;,        &amp;quot;Marinho&amp;quot;,
  )

# Sem dplyr
df$pais &amp;lt;- str_to_title(df$pais)
df$primeiro_nome &amp;lt;-  str_to_title(df$primeiro_nome)
df$segundo_nome &amp;lt;- str_to_title(df$segundo_nome)

df &amp;lt;- df %&amp;gt;% tidyr::unite(nomes, primeiro_nome, segundo_nome, sep = &amp;quot; &amp;quot;)
df[ str_order(df$nomes), ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##   pais   nomes           
##   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           
## 1 Brasil Eduardo Cabellos
## 2 Brasil Isabela Martins 
## 3 Brasil Márcia Pinto    
## 4 Brasil Rogério Marinho
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Com dplyr
df &amp;lt;- 
  tibble::tribble(
    ~pais,    ~primeiro_nome, ~segundo_nome,
    # -------|----------------|-------------|
    &amp;quot;BRASIL&amp;quot;, &amp;quot;ISABELA&amp;quot;,       &amp;quot;MARTINS&amp;quot;,
    &amp;quot;Brasil&amp;quot;, &amp;quot;Eduardo&amp;quot;,       &amp;quot;cabellos&amp;quot;,
    &amp;quot;brasil&amp;quot;, &amp;quot;márcia&amp;quot;,         &amp;quot;pinto&amp;quot;,
    &amp;quot;bRaSiL&amp;quot;, &amp;quot;rogério&amp;quot;,        &amp;quot;Marinho&amp;quot;,
  )

df %&amp;gt;% 
  mutate(pais = str_to_title(pais),
         primeiro_nome = str_to_title(primeiro_nome),
         segundo_nome = str_to_title(segundo_nome)) %&amp;gt;% 
  unite(nomes, primeiro_nome, segundo_nome, sep = &amp;quot; &amp;quot;) %&amp;gt;% 
  arrange(str_order(nomes))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##   pais   nomes           
##   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           
## 1 Brasil Eduardo Cabellos
## 2 Brasil Isabela Martins 
## 3 Brasil Márcia Pinto    
## 4 Brasil Rogério Marinho
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Transforme a string &lt;code&gt;c(&amp;quot;Seu nome&amp;quot;, &amp;quot;Seu sobrenome da mãe&amp;quot;, &amp;quot;Seu sobrenome do pai&amp;quot;)&lt;/code&gt; na string &lt;code&gt;&amp;quot;SEU SOBRENOME DO PAI, sua inicial do nome. sua inicial da mãe.&amp;quot;&lt;/code&gt;, como numa citação. Veja o exemplo abaixo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Transforme
c(&amp;quot;Vinícius&amp;quot;, &amp;quot;de Souza&amp;quot;, &amp;quot;Maia&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Vinícius&amp;quot; &amp;quot;de Souza&amp;quot; &amp;quot;Maia&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Resultado
&amp;quot;MAIA, V. S.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;MAIA, V. S.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- c(&amp;quot;Vinícius&amp;quot;, &amp;quot;de Souza&amp;quot;, &amp;quot;Maia&amp;quot;)
x[1] &amp;lt;- str_sub(x[1], 1, 1) %&amp;gt;% str_c(&amp;quot;.&amp;quot;)
x[2] &amp;lt;- str_sub(x[2], 4, 4) %&amp;gt;% str_c(&amp;quot;.&amp;quot;)
x[3] &amp;lt;- str_to_upper(x[3])
str_c(c(x[3], x[1], x[2]), collapse = &amp;quot; &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;MAIA V. S.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;DESAFIO: Nos microdados da área de saúde, é comum que a variável idade esteja registrada da seguinte forma: &amp;ldquo;150&amp;rdquo;, &amp;ldquo;219&amp;rdquo;, &amp;ldquo;312&amp;rdquo;, &amp;ldquo;471&amp;rdquo;. Esses códigos indicam primeiro qual a unidade de medida da idade e segundo o valor desta unidade, 1 = horas, 2 = dias, 3 = meses, 4 = anos. Proponha um código usando &lt;code&gt;stringr&lt;/code&gt; para transformar o vetor abaixo em um valor numérico.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Não precisa se preocupar com essa parte
x &amp;lt;- as.character(round(c(
  runif(25, 100, 124),
  runif(25, 201, 230),
  runif(25, 301, 312),
  runif(25, 401, 499)
)))

# Como você transformaria esse vetor em número?
x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;118&amp;quot; &amp;quot;114&amp;quot; &amp;quot;118&amp;quot; &amp;quot;120&amp;quot; &amp;quot;109&amp;quot; &amp;quot;104&amp;quot; &amp;quot;114&amp;quot; &amp;quot;117&amp;quot; &amp;quot;122&amp;quot; &amp;quot;109&amp;quot; &amp;quot;110&amp;quot; &amp;quot;113&amp;quot;
##  [13] &amp;quot;106&amp;quot; &amp;quot;100&amp;quot; &amp;quot;122&amp;quot; &amp;quot;121&amp;quot; &amp;quot;124&amp;quot; &amp;quot;124&amp;quot; &amp;quot;110&amp;quot; &amp;quot;100&amp;quot; &amp;quot;117&amp;quot; &amp;quot;119&amp;quot; &amp;quot;105&amp;quot; &amp;quot;118&amp;quot;
##  [25] &amp;quot;122&amp;quot; &amp;quot;201&amp;quot; &amp;quot;205&amp;quot; &amp;quot;212&amp;quot; &amp;quot;216&amp;quot; &amp;quot;228&amp;quot; &amp;quot;213&amp;quot; &amp;quot;227&amp;quot; &amp;quot;221&amp;quot; &amp;quot;214&amp;quot; &amp;quot;227&amp;quot; &amp;quot;206&amp;quot;
##  [37] &amp;quot;207&amp;quot; &amp;quot;215&amp;quot; &amp;quot;224&amp;quot; &amp;quot;223&amp;quot; &amp;quot;203&amp;quot; &amp;quot;221&amp;quot; &amp;quot;215&amp;quot; &amp;quot;225&amp;quot; &amp;quot;210&amp;quot; &amp;quot;208&amp;quot; &amp;quot;219&amp;quot; &amp;quot;207&amp;quot;
##  [49] &amp;quot;221&amp;quot; &amp;quot;227&amp;quot; &amp;quot;310&amp;quot; &amp;quot;305&amp;quot; &amp;quot;301&amp;quot; &amp;quot;304&amp;quot; &amp;quot;310&amp;quot; &amp;quot;307&amp;quot; &amp;quot;305&amp;quot; &amp;quot;309&amp;quot; &amp;quot;308&amp;quot; &amp;quot;306&amp;quot;
##  [61] &amp;quot;308&amp;quot; &amp;quot;305&amp;quot; &amp;quot;304&amp;quot; &amp;quot;303&amp;quot; &amp;quot;306&amp;quot; &amp;quot;302&amp;quot; &amp;quot;310&amp;quot; &amp;quot;306&amp;quot; &amp;quot;301&amp;quot; &amp;quot;310&amp;quot; &amp;quot;306&amp;quot; &amp;quot;304&amp;quot;
##  [73] &amp;quot;305&amp;quot; &amp;quot;304&amp;quot; &amp;quot;307&amp;quot; &amp;quot;401&amp;quot; &amp;quot;459&amp;quot; &amp;quot;429&amp;quot; &amp;quot;435&amp;quot; &amp;quot;435&amp;quot; &amp;quot;415&amp;quot; &amp;quot;475&amp;quot; &amp;quot;414&amp;quot; &amp;quot;419&amp;quot;
##  [85] &amp;quot;495&amp;quot; &amp;quot;475&amp;quot; &amp;quot;431&amp;quot; &amp;quot;460&amp;quot; &amp;quot;478&amp;quot; &amp;quot;447&amp;quot; &amp;quot;436&amp;quot; &amp;quot;412&amp;quot; &amp;quot;403&amp;quot; &amp;quot;423&amp;quot; &amp;quot;467&amp;quot; &amp;quot;438&amp;quot;
##  [97] &amp;quot;475&amp;quot; &amp;quot;467&amp;quot; &amp;quot;418&amp;quot; &amp;quot;476&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Esse exercício é um pouco mais difícil mesmo!
x %&amp;gt;% str_extract(&amp;quot;\\d&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot;
##  [19] &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot;
##  [37] &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot;
##  [55] &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot;
##  [73] &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot;
##  [91] &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot; &amp;quot;4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(
  tipo_idade = str_sub(x, 1, 1),
  idade = str_sub(x, 2, 3),
  idade_anos =
    if_else(
      str_detect(tipo_idade, &amp;quot;1&amp;quot;),
      as.numeric(idade) / (24 * 30 * 12),
      if_else(
        str_detect(tipo_idade, &amp;quot;2&amp;quot;),
        as.numeric(idade) / (30 * 12),
        if_else(
          str_detect(tipo_idade, &amp;quot;3&amp;quot;),
          as.numeric(idade) / 12,
          as.numeric(idade)
        )
      )
    )
) %&amp;gt;% 
  print(n = Inf)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 100 x 3
##     tipo_idade idade idade_anos
##     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt;
##   1 1          18      0.00208 
##   2 1          14      0.00162 
##   3 1          18      0.00208 
##   4 1          20      0.00231 
##   5 1          09      0.00104 
##   6 1          04      0.000463
##   7 1          14      0.00162 
##   8 1          17      0.00197 
##   9 1          22      0.00255 
##  10 1          09      0.00104 
##  11 1          10      0.00116 
##  12 1          13      0.00150 
##  13 1          06      0.000694
##  14 1          00      0       
##  15 1          22      0.00255 
##  16 1          21      0.00243 
##  17 1          24      0.00278 
##  18 1          24      0.00278 
##  19 1          10      0.00116 
##  20 1          00      0       
##  21 1          17      0.00197 
##  22 1          19      0.00220 
##  23 1          05      0.000579
##  24 1          18      0.00208 
##  25 1          22      0.00255 
##  26 2          01      0.00278 
##  27 2          05      0.0139  
##  28 2          12      0.0333  
##  29 2          16      0.0444  
##  30 2          28      0.0778  
##  31 2          13      0.0361  
##  32 2          27      0.075   
##  33 2          21      0.0583  
##  34 2          14      0.0389  
##  35 2          27      0.075   
##  36 2          06      0.0167  
##  37 2          07      0.0194  
##  38 2          15      0.0417  
##  39 2          24      0.0667  
##  40 2          23      0.0639  
##  41 2          03      0.00833 
##  42 2          21      0.0583  
##  43 2          15      0.0417  
##  44 2          25      0.0694  
##  45 2          10      0.0278  
##  46 2          08      0.0222  
##  47 2          19      0.0528  
##  48 2          07      0.0194  
##  49 2          21      0.0583  
##  50 2          27      0.075   
##  51 3          10      0.833   
##  52 3          05      0.417   
##  53 3          01      0.0833  
##  54 3          04      0.333   
##  55 3          10      0.833   
##  56 3          07      0.583   
##  57 3          05      0.417   
##  58 3          09      0.75    
##  59 3          08      0.667   
##  60 3          06      0.5     
##  61 3          08      0.667   
##  62 3          05      0.417   
##  63 3          04      0.333   
##  64 3          03      0.25    
##  65 3          06      0.5     
##  66 3          02      0.167   
##  67 3          10      0.833   
##  68 3          06      0.5     
##  69 3          01      0.0833  
##  70 3          10      0.833   
##  71 3          06      0.5     
##  72 3          04      0.333   
##  73 3          05      0.417   
##  74 3          04      0.333   
##  75 3          07      0.583   
##  76 4          01      1       
##  77 4          59     59       
##  78 4          29     29       
##  79 4          35     35       
##  80 4          35     35       
##  81 4          15     15       
##  82 4          75     75       
##  83 4          14     14       
##  84 4          19     19       
##  85 4          95     95       
##  86 4          75     75       
##  87 4          31     31       
##  88 4          60     60       
##  89 4          78     78       
##  90 4          47     47       
##  91 4          36     36       
##  92 4          12     12       
##  93 4          03      3       
##  94 4          23     23       
##  95 4          67     67       
##  96 4          38     38       
##  97 4          75     75       
##  98 4          67     67       
##  99 4          18     18       
## 100 4          76     76
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ao invés de utilizar essas chamadas recursivas de &lt;code&gt;if_else&lt;/code&gt;, que são muito ruins de ler, como você poderia reescrever a condição usando &lt;code&gt;case_when&lt;/code&gt;?&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;Explore as contagens da variável &lt;code&gt;rincome&lt;/code&gt; em &lt;code&gt;gss_cat&lt;/code&gt;, ela ficaria bem representada num gráfico? De qual tipo?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat %&amp;gt;% count(rincome)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 16 x 2
##    rincome            n
##    &amp;lt;fct&amp;gt;          &amp;lt;int&amp;gt;
##  1 No answer        183
##  2 Don&#39;t know       267
##  3 Refused          975
##  4 $25000 or more  7363
##  5 $20000 - 24999  1283
##  6 $15000 - 19999  1048
##  7 $10000 - 14999  1168
##  8 $8000 to 9999    340
##  9 $7000 to 7999    188
## 10 $6000 to 6999    215
## 11 $5000 to 5999    227
## 12 $4000 to 4999    226
## 13 $3000 to 3999    276
## 14 $1000 to 2999    395
## 15 Lt $1000         286
## 16 Not applicable  7043
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em geral, contagens de variáveis ficam bem em gráficos de barras ou visualizações equivalentes, em que é possível comparar visualmente as contagens das diversas categorias. Mais sobre isso na aula do &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;Qual a religião mais comum em &lt;code&gt;gss_cat&lt;/code&gt;? Qual o partido (&lt;code&gt;partyid&lt;/code&gt;) mais popular?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Religião
gss_cat %&amp;gt;% count(relig) %&amp;gt;% arrange(desc(n))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 15 x 2
##    relig                       n
##    &amp;lt;fct&amp;gt;                   &amp;lt;int&amp;gt;
##  1 Protestant              10846
##  2 Catholic                 5124
##  3 None                     3523
##  4 Christian                 689
##  5 Jewish                    388
##  6 Other                     224
##  7 Buddhism                  147
##  8 Inter-nondenominational   109
##  9 Moslem/islam              104
## 10 Orthodox-christian         95
## 11 No answer                  93
## 12 Hinduism                   71
## 13 Other eastern              32
## 14 Native american            23
## 15 Don&#39;t know                 15
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Partido
gss_cat %&amp;gt;% count(partyid) %&amp;gt;% arrange(desc(n))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##    partyid                n
##    &amp;lt;fct&amp;gt;              &amp;lt;int&amp;gt;
##  1 Independent         4119
##  2 Not str democrat    3690
##  3 Strong democrat     3490
##  4 Not str republican  3032
##  5 Ind,near dem        2499
##  6 Strong republican   2314
##  7 Ind,near rep        1791
##  8 Other party          393
##  9 No answer            154
## 10 Don&#39;t know             1
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;12&#34;&gt;
&lt;li&gt;A que religião se refere a variável &lt;code&gt;denom&lt;/code&gt;? Você pode descobrir isso fazendo uma tabela de contagens?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Você pode chamar count com várias variáveis para fazer uma tabulação cruzada.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat %&amp;gt;% count(relig, denom) %&amp;gt;% print(n = Inf)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 47 x 3
##    relig                   denom                    n
##    &amp;lt;fct&amp;gt;                   &amp;lt;fct&amp;gt;                &amp;lt;int&amp;gt;
##  1 No answer               No answer               93
##  2 Don&#39;t know              Not applicable          15
##  3 Inter-nondenominational Not applicable         109
##  4 Native american         Not applicable          23
##  5 Christian               No answer                2
##  6 Christian               Don&#39;t know              11
##  7 Christian               No denomination        452
##  8 Christian               Not applicable         224
##  9 Orthodox-christian      Not applicable          95
## 10 Moslem/islam            Not applicable         104
## 11 Other eastern           Not applicable          32
## 12 Hinduism                Not applicable          71
## 13 Buddhism                Not applicable         147
## 14 Other                   No denomination          7
## 15 Other                   Not applicable         217
## 16 None                    Not applicable        3523
## 17 Jewish                  Not applicable         388
## 18 Catholic                Not applicable        5124
## 19 Protestant              No answer               22
## 20 Protestant              Don&#39;t know              41
## 21 Protestant              No denomination       1224
## 22 Protestant              Other                 2534
## 23 Protestant              Episcopal              397
## 24 Protestant              Presbyterian-dk wh     244
## 25 Protestant              Presbyterian, merged    67
## 26 Protestant              Other presbyterian      47
## 27 Protestant              United pres ch in us   110
## 28 Protestant              Presbyterian c in us   104
## 29 Protestant              Lutheran-dk which      267
## 30 Protestant              Evangelical luth       122
## 31 Protestant              Other lutheran          30
## 32 Protestant              Wi evan luth synod      71
## 33 Protestant              Lutheran-mo synod      212
## 34 Protestant              Luth ch in america      71
## 35 Protestant              Am lutheran            146
## 36 Protestant              Methodist-dk which     239
## 37 Protestant              Other methodist         33
## 38 Protestant              United methodist      1067
## 39 Protestant              Afr meth ep zion        32
## 40 Protestant              Afr meth episcopal      77
## 41 Protestant              Baptist-dk which      1457
## 42 Protestant              Other baptists         213
## 43 Protestant              Southern baptist      1536
## 44 Protestant              Nat bapt conv usa       40
## 45 Protestant              Nat bapt conv of am     76
## 46 Protestant              Am bapt ch in usa      130
## 47 Protestant              Am baptist asso        237
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;13&#34;&gt;
&lt;li&gt;Como você poderia diminuir o número de categorias da variável &lt;code&gt;rincome&lt;/code&gt; do banco &lt;code&gt;gss_cat&lt;/code&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A melhor função para redução de fatores é &lt;code&gt;fct_collapse&lt;/code&gt;. Veja como ficam a coluna original e a transformada.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat2 &amp;lt;- 
  gss_cat %&amp;gt;% 
  # Aqui vou salvar em &amp;quot;rincome2&amp;quot; para a gente poder ver as duas
  mutate(rincome2 = fct_collapse(
    rincome,
    &amp;quot;Non-response&amp;quot; = c(&amp;quot;No answer&amp;quot;, &amp;quot;Don&#39;t know&amp;quot;, &amp;quot;Refused&amp;quot;, &amp;quot;Not applicable&amp;quot;),
    &amp;quot;Até 5k&amp;quot;       = c(&amp;quot;$4000 to 4999&amp;quot;, &amp;quot;$3000 to 3999&amp;quot;, &amp;quot;$1000 to 2999&amp;quot;, &amp;quot;Lt $1000&amp;quot;),
    &amp;quot;5k-10k&amp;quot;       = c( &amp;quot;$8000 to 9999&amp;quot;, &amp;quot;$7000 to 7999&amp;quot;, &amp;quot;$6000 to 6999&amp;quot;, &amp;quot;$5000 to 5999&amp;quot;),
    &amp;quot;10k-20k&amp;quot;      = c(&amp;quot;$15000 - 19999&amp;quot;, &amp;quot;$10000 - 14999&amp;quot;),
    &amp;quot;20k+&amp;quot;         = c(&amp;quot;$25000 or more&amp;quot;, &amp;quot;$20000 - 24999&amp;quot;))) %&amp;gt;% 
  select(rincome, rincome2)

# E veja as contagens
gss_cat2 %&amp;gt;% count(rincome)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 16 x 2
##    rincome            n
##    &amp;lt;fct&amp;gt;          &amp;lt;int&amp;gt;
##  1 No answer        183
##  2 Don&#39;t know       267
##  3 Refused          975
##  4 $25000 or more  7363
##  5 $20000 - 24999  1283
##  6 $15000 - 19999  1048
##  7 $10000 - 14999  1168
##  8 $8000 to 9999    340
##  9 $7000 to 7999    188
## 10 $6000 to 6999    215
## 11 $5000 to 5999    227
## 12 $4000 to 4999    226
## 13 $3000 to 3999    276
## 14 $1000 to 2999    395
## 15 Lt $1000         286
## 16 Not applicable  7043
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gss_cat2 %&amp;gt;% count(rincome2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   rincome2         n
##   &amp;lt;fct&amp;gt;        &amp;lt;int&amp;gt;
## 1 Non-response  8468
## 2 20k+          8646
## 3 10k-20k       2216
## 4 5k-10k         970
## 5 Até 5k        1183
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ggplot2&#34;&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;O que tem de errado no código abaixo? Por que os pontos não ficaram azuis?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = &amp;quot;blue&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-42-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Os pontos não ficam azuis porque você não está especificando cores! Dentro da função &lt;code&gt;aes()&lt;/code&gt; você está especificando variáveis para serem mapeadas a uma escala de cores. Portanto, o &lt;code&gt;ggplot&lt;/code&gt; interpreta &amp;ldquo;blue&amp;rdquo; como uma variável sem nome que tem o valor &amp;ldquo;blue&amp;rdquo; e mapeia ela para a escala de cores padrão, que é vermelha. Se você quer controlar apenas a &amp;ldquo;aparência&amp;rdquo; dos pontos e não está preocupada em mapear nenhuma variável, você pode passar essa estética fora da função &lt;code&gt;aes()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = mpg) + 
  geom_point(
    mapping = aes(x = displ, y = hwy), # aqui acabam os mapeamentos estéticos
    color = &amp;quot;blue&amp;quot;, # alteração apenas na aparência do geom
    size = 2, # alteração apenas na aparência do geom
    shape = 6 # alteração apenas na aparência do geom
    ) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-43-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Utilizando o banco &lt;code&gt;mpg&lt;/code&gt;, faça o diagrama de dispersão de &lt;code&gt;displ&lt;/code&gt; por &lt;code&gt;hwy&lt;/code&gt; e mapeie a cor para &lt;code&gt;class&lt;/code&gt;, o tamanho para &lt;code&gt;cyl&lt;/code&gt; e a forma para &lt;code&gt;manufacturer&lt;/code&gt;. Como esses atributos estéticos se comportam diferente para variáveis categóricas vs contínuas?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(
  displ, 
  hwy, 
  color = class, 
  size = cyl,
  shape = manufacturer)) +
  geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: The shape palette can deal with a maximum of 6 discrete values because
## more than 6 becomes difficult to discriminate; you have 15. Consider
## specifying shapes manually if you must have them.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 112 rows containing missing values (geom_point).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-44-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ao cumprir as instruções como dadas, logo de cara você recebe um aviso do &lt;code&gt;ggplot2&lt;/code&gt;. A paleta de &amp;ldquo;shapes&amp;rdquo; só recebe por padrão 6 shapes diferentes, porque de acordo com o autor, mais de 6 torna difícil de distinguir. Mas eu sou teimoso.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(
  displ, 
  hwy, 
  color = class, 
  size = cyl,
  shape = manufacturer)) +
  geom_point() +
  scale_shape_manual(values = 1:15, guide = &amp;quot;legend&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-45-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Esse gráfico é mais um exemplo para vocês verem como diferentes escalas se comportam. A variável &lt;code&gt;cyl&lt;/code&gt; é numérica e ordenada, então faz sentido colocá-la num mapeamento como &lt;code&gt;size&lt;/code&gt;, já que visualmente é possível indicar que a grandeza aumenta com o tamanho. Classe é uma variável categórica, então ela fica melhor em mapeamentos que ressaltam diferenças entre as categorias, como &lt;code&gt;colors&lt;/code&gt; ou &lt;code&gt;shapes&lt;/code&gt;. O pacote também impõe algumas restrições sobre o que é possível mapear. Por exemplo, ele retorna erro se você tenta mapear uma variável discreta para uma escala contínua.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy, color = class)) +
  geom_point() +
  scale_color_continuous()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: Discrete value supplied to continuous scale
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-46-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Experimentem tentar mapear diferentes variáveis no banco &lt;code&gt;mpg&lt;/code&gt; para as diferentes escalas e vejam os resultados. Em alguns casos, é possível, mas o gráfico é pouco informativo, em outros, você verá mensagens de erro.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Utilizando o &lt;code&gt;diamonds&lt;/code&gt;, crie um diagrama de dispersão que relacione &lt;code&gt;carat&lt;/code&gt; com &lt;code&gt;price&lt;/code&gt;. Explore algumas outras variáveis utilizando escalas de cor para ver se você identifica algum padrão. Aplique transformações nas variáveis que você considerar justificadas.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Esse exercício não tem uma resposta correta. O objetivo era que vocês explorassem as transformações estatísticas e as escalas de cores diferentes presentes no &lt;code&gt;ggplot&lt;/code&gt;, através do argumento &lt;code&gt;trans&lt;/code&gt;, ou mesmo fazer outras transformações que interessassem vocês nas variáveis. Abaixo um exemplo de transformação de Yeo-Johnson, um tipo de transformação BoxCox que aceita valores negativos e uma das escalas de cor do pacote &lt;code&gt;viridis&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(diamonds, aes(carat, price, color = clarity)) +
  geom_point() +
  scale_x_continuous(trans = scales::yj_trans(p = 2)) +
  scale_color_viridis_d(option = &amp;quot;magma&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-47-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Ainda continuando o exemplo anterior, aplique um &lt;code&gt;geom_smooth&lt;/code&gt; utilizando várias opções de &lt;code&gt;method&lt;/code&gt; para as variáveis originais ou transformadas.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Segundo a mesma lógica, o objetivo era explorar as opções de visualização de modelos simples através do argumento &lt;code&gt;method&lt;/code&gt;. Abaixo um exemplo de &lt;code&gt;gam&lt;/code&gt;. Uma mudança que fiz foi usar a variável &lt;code&gt;cut&lt;/code&gt; ao invés de &lt;code&gt;clarity&lt;/code&gt;, porque o gráfico não-transformado de &lt;code&gt;clarity&lt;/code&gt; estava muito poluído.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(diamonds, aes(carat, price, color = cut)) +
  geom_point(alpha = 0.1) + # pontos translúcidos para reduzir a poluição
  geom_smooth(method = &amp;quot;gam&amp;quot;, se = FALSE) +
  scale_color_viridis_d(option = &amp;quot;plasma&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &#39;y ~ s(x, bs = &amp;quot;cs&amp;quot;)&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-48-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;No nosso gráfico de barras usando &lt;code&gt;stat(prop)&lt;/code&gt; a gente precisou colocar &lt;code&gt;group = 1&lt;/code&gt;, porque? Qual é a diferença entre esses dois códigos?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, y = after_stat(prop)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-49-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-49-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Acabei explicando isso na aula, devido a uma pergunta, mas para quem perdeu, trata-se do comportamento padrão quando há proporções: cada barra terá sua própria proporção e todas somarão a 100%. O uso de &lt;code&gt;group = 1&lt;/code&gt; indica à função que as proporções que somam a 100% são o total dos níveis do fator e não cada nível individualmente.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, y = after_stat(prop), group = 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-50-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# No caso em que há um &amp;quot;fill&amp;quot;, precisamos normalizar as alturas das barras
ggplot(data = diamonds) +
  geom_bar(mapping = aes(
    x = cut,
    y = stat(prop),
    fill = clarity
  ))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-50-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = diamonds) +
  geom_bar(mapping = aes(
    x = cut,
    y = stat(count)/sum(stat(count)),
    fill = clarity
  ))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-50-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;code&gt;stat_smooth&lt;/code&gt; é muito parecido com &lt;code&gt;geom_smooth&lt;/code&gt;, mas há uma diferença sutil. Compare os códigos abaixo.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;geom_smooth&lt;/code&gt; chama &lt;code&gt;stat_smooth&lt;/code&gt; quando você utiliza a função para calcular as &amp;ldquo;médias condicionais&amp;rdquo; que correspondem a linha de tendência desenhada no gráfico. É assim com todos os &lt;code&gt;geom&lt;/code&gt;s no pacote. Há uma conexão entre o objeto geométrico e uma transformação estatística. Mesmo que seja a transformação &lt;code&gt;_identity&lt;/code&gt;, que mantém a variável exatamente como ela estava no dado. A grande vantagem de construir um gráfico com &lt;code&gt;stat_smooth&lt;/code&gt; ao invés de &lt;code&gt;geom_smooth&lt;/code&gt; é que você pode especificar outro objeto geométrico que não seja o padrão (&lt;code&gt;geom_line&lt;/code&gt; + &lt;code&gt;geom_ribbon&lt;/code&gt;). É isso que os gráficos abaixo demonstram.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + 
  geom_point() +
  geom_smooth()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-51-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + 
  geom_point() +
  stat_smooth(geom = &amp;quot;step&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-51-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + 
  geom_point() +
  stat_smooth(geom = &amp;quot;linerange&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-51-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + 
  geom_point() +
  stat_smooth(geom = &amp;quot;errorbar&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-51-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy)) + 
  geom_point() +
  stat_smooth(geom = &amp;quot;crossbar&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-51-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Usando o &lt;code&gt;mpg&lt;/code&gt; e &lt;code&gt;facet_grid&lt;/code&gt;, crie um scatterplot que contenha &lt;code&gt;displ&lt;/code&gt; no eixo x, &lt;code&gt;hwy&lt;/code&gt; no eixo y, &lt;code&gt;class&lt;/code&gt; na cor, &lt;code&gt;drv&lt;/code&gt; nas facetas-coluna e &lt;code&gt;cyl&lt;/code&gt; nas facetas linha.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Esse aqui é para demonstrar o uso de &lt;code&gt;facet_grid&lt;/code&gt;, que permite especificar fatores de classificação diferentes nas linhas e colunas, diferente de &lt;code&gt;facet_wrap&lt;/code&gt; mostrado na aula, que só permite especificar uma dimensão.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  facet_grid(cyl ~ drv)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-52-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Você acha que os dois gráficos abaixo ficarão diferentes um do outro? Porque? Tente responder antes de rodar o código.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-53-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot() + 
  geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-53-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Mesmo antes de rodar o código, o observador astuto notará que os mapeamentos locais no segundo gráfico são idênticos entre si e aos mapeamentos globais, então os dois gráficos são iguais.&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;Tente recriar o seguinte gráfico&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;O objetivo dessa era fazer vocês fuçarem um pouco na ajuda para tentar recriar o mais fielmente possível o gráfico final. Não precisava ter acertado, o objetivo era chegar o mais próximo possível.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mpg, aes(displ, hwy, color = drv)) +
  geom_point() +
  geom_smooth(method = lm, se = FALSE) +
  labs(x = &amp;quot;Rodovia&amp;quot;, y = &amp;quot;Toneladas&amp;quot;, color = &amp;quot;Tração&amp;quot;) +
  scale_color_brewer(palette = &amp;quot;Set1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &#39;y ~ x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-54-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;Transforme o gráfico seguir em um gráfico de pizza usando &lt;code&gt;coord_polar&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(diamonds, aes(cut, fill = cut)) +
  geom_bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-55-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Depois de simplesmente especificar &lt;code&gt;coord_polar&lt;/code&gt;, em geral o gráfico fica meio estranho, não tem aquela cara bonita de pizza. É preciso corrigir os seguintes problemas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A largura das barras deve ser igual a proporção das contagens, mas a altura deve ser igual a 1! Portanto, eu inverto as coisas e passo as contagens/proporções para &amp;ldquo;x&amp;rdquo; e &amp;ldquo;y&amp;rdquo; fica com o valor fixo = 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(diamonds, 
       aes(
         # calculando as proporções do total,
         # também funciona com o padrão stat(count)
         x = stat(count)/sum(stat(count)),
         y = 1, # altura igual a 1
         fill = cut)) + # cores
  geom_bar() +
  coord_polar() + # coordenadas polares
  # opcional: remover aspectos do tema para um visual mais clean
  theme_void()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/tidyverse/solucoes_files/figure-html/unnamed-chunk-56-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Como desafio, tentem adicionar elementos textuais das proporções no gráfico. O problema a ser resolvido é como posicionar o texto num sistema de coordenadas polares. Boa sorte!&lt;/p&gt;
&lt;p&gt;Gráficos de pizza são polêmicos na análise de dados porque nossos olhos não captam bem diferenças entre formatos curvos e complexos, então a comparação entre as categorias fica prejudicada se houverem mais de 2 ou 3. Eu sempre dou preferência para barras. Há um tipo de gráfico de pizza melhorzinho chamado &amp;ldquo;donut plot&amp;rdquo;, em que o meio do círculo é oco, mas eu ainda prefiro as barras.&lt;/p&gt;
&lt;h2 id=&#34;purrr&#34;&gt;&lt;code&gt;purrr&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Utilize uma das funções &lt;code&gt;map_&lt;/code&gt; para:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nos exemplos abaixo, eu utilizo sempre &lt;code&gt;str()&lt;/code&gt; no final para facilitar a visualização das listas, mas não é obrigatório utilizar esse comando.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Calcular a média de cada coluna em `mtcars`.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map(mtcars, mean) %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 11
##  $ mpg : num 20.1
##  $ cyl : num 6.19
##  $ disp: num 231
##  $ hp  : num 147
##  $ drat: num 3.6
##  $ wt  : num 3.22
##  $ qsec: num 17.8
##  $ vs  : num 0.438
##  $ am  : num 0.406
##  $ gear: num 3.69
##  $ carb: num 2.81
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2. Determinar o tipo de cada coluna em `flights`.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% map(class) %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 19
##  $ year          : chr &amp;quot;integer&amp;quot;
##  $ month         : chr &amp;quot;integer&amp;quot;
##  $ day           : chr &amp;quot;integer&amp;quot;
##  $ dep_time      : chr &amp;quot;integer&amp;quot;
##  $ sched_dep_time: chr &amp;quot;integer&amp;quot;
##  $ dep_delay     : chr &amp;quot;numeric&amp;quot;
##  $ arr_time      : chr &amp;quot;integer&amp;quot;
##  $ sched_arr_time: chr &amp;quot;integer&amp;quot;
##  $ arr_delay     : chr &amp;quot;numeric&amp;quot;
##  $ carrier       : chr &amp;quot;character&amp;quot;
##  $ flight        : chr &amp;quot;integer&amp;quot;
##  $ tailnum       : chr &amp;quot;character&amp;quot;
##  $ origin        : chr &amp;quot;character&amp;quot;
##  $ dest          : chr &amp;quot;character&amp;quot;
##  $ air_time      : chr &amp;quot;numeric&amp;quot;
##  $ distance      : chr &amp;quot;numeric&amp;quot;
##  $ hour          : chr &amp;quot;numeric&amp;quot;
##  $ minute        : chr &amp;quot;numeric&amp;quot;
##  $ time_hour     : chr [1:2] &amp;quot;POSIXct&amp;quot; &amp;quot;POSIXt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3. Computar o número de valores únicos em cada coluna de `iris`.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% map(unique) %&amp;gt;% map(length) %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 19
##  $ year          : int 1
##  $ month         : int 12
##  $ day           : int 31
##  $ dep_time      : int 1319
##  $ sched_dep_time: int 1021
##  $ dep_delay     : int 528
##  $ arr_time      : int 1412
##  $ sched_arr_time: int 1163
##  $ arr_delay     : int 578
##  $ carrier       : int 16
##  $ flight        : int 3844
##  $ tailnum       : int 4044
##  $ origin        : int 3
##  $ dest          : int 105
##  $ air_time      : int 510
##  $ distance      : int 214
##  $ hour          : int 20
##  $ minute        : int 60
##  $ time_hour     : int 6936
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Sugestão do Pedro Gomes
flights %&amp;gt;% map(n_distinct) %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 19
##  $ year          : int 1
##  $ month         : int 12
##  $ day           : int 31
##  $ dep_time      : int 1319
##  $ sched_dep_time: int 1021
##  $ dep_delay     : int 528
##  $ arr_time      : int 1412
##  $ sched_arr_time: int 1163
##  $ arr_delay     : int 578
##  $ carrier       : int 16
##  $ flight        : int 3844
##  $ tailnum       : int 4044
##  $ origin        : int 3
##  $ dest          : int 105
##  $ air_time      : int 510
##  $ distance      : int 214
##  $ hour          : int 20
##  $ minute        : int 60
##  $ time_hour     : int 6936
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;4. Gere 10 distribuições aleatórias (`rnorm`) com médias -10, 0, 10 e 100.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- rep(100, 40)
medias &amp;lt;- rep(c(-10, 0, 10, 100), each = 10)
map2(x, medias, ~rnorm(.x, mean = .y)) %&amp;gt;% str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 40
##  $ : num [1:100] -9.96 -9.53 -9.12 -9.64 -10.36 ...
##  $ : num [1:100] -11.71 -10.76 -9.41 -9.22 -10.53 ...
##  $ : num [1:100] -11.33 -9.51 -8.98 -10.91 -9.52 ...
##  $ : num [1:100] -11.4 -10.9 -10.7 -12.1 -9.8 ...
##  $ : num [1:100] -11.06 -10.66 -10.33 -9.13 -9.13 ...
##  $ : num [1:100] -10.22 -9.59 -9.81 -10.71 -10.24 ...
##  $ : num [1:100] -11 -9.14 -10.91 -9.38 -9.63 ...
##  $ : num [1:100] -9.83 -9.61 -11.23 -9.68 -10.47 ...
##  $ : num [1:100] -9.11 -10.03 -10.62 -9.65 -10.2 ...
##  $ : num [1:100] -9.06 -10.41 -10.84 -9.16 -9.41 ...
##  $ : num [1:100] -0.8378 0.1102 0.7519 -0.2477 0.0342 ...
##  $ : num [1:100] 0.607 -0.902 -2.185 -0.397 -1.019 ...
##  $ : num [1:100] -0.452 2.067 1.45 -1.184 0.893 ...
##  $ : num [1:100] -0.604 -0.783 1.767 -0.632 1.322 ...
##  $ : num [1:100] -2.515 0.43 0.694 1.239 1.091 ...
##  $ : num [1:100] -1.462 1.177 -0.376 0.037 0.387 ...
##  $ : num [1:100] -0.0803 -0.0421 2.4765 0.0509 -0.1479 ...
##  $ : num [1:100] 1.118 0.662 -1.439 -1.074 0.493 ...
##  $ : num [1:100] -0.3136 0.4455 -0.947 2.0658 -0.0188 ...
##  $ : num [1:100] 0.193 0.625 2.281 0.297 -0.629 ...
##  $ : num [1:100] 9.29 9.1 9.54 9.99 10.2 ...
##  $ : num [1:100] 7.96 7.32 10.7 9.13 10.3 ...
##  $ : num [1:100] 9.96 10.24 10.31 10.54 11.65 ...
##  $ : num [1:100] 10.88 10.41 8.19 10.37 10.28 ...
##  $ : num [1:100] 11.27 9.74 11.75 11.7 9.31 ...
##  $ : num [1:100] 9.62 11.35 10.78 10.79 9.7 ...
##  $ : num [1:100] 9.04 10.24 11.85 9.82 10.66 ...
##  $ : num [1:100] 10.48 6.97 8.97 9.69 11.03 ...
##  $ : num [1:100] 8.48 10.12 9.09 8.18 10.11 ...
##  $ : num [1:100] 9.97 9.27 10.19 10.93 11.07 ...
##  $ : num [1:100] 100 99.2 99.6 100.3 99.2 ...
##  $ : num [1:100] 99 99.9 100.7 98.7 99.7 ...
##  $ : num [1:100] 99.6 99.2 100.1 100 99.9 ...
##  $ : num [1:100] 100.5 100.4 100.2 98.4 98.9 ...
##  $ : num [1:100] 99.8 99.8 100 99.1 101.1 ...
##  $ : num [1:100] 100.7 100 100.1 98.6 100 ...
##  $ : num [1:100] 99 99.4 100.5 100.1 99.3 ...
##  $ : num [1:100] 99.2 98.6 99.2 100.9 97.4 ...
##  $ : num [1:100] 99.7 99.8 100.9 100.5 99.9 ...
##  $ : num [1:100] 99.5 100.9 98.5 99.7 100 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Como você pode criar um vetor indicando se cada coluna em um &lt;code&gt;data.frame&lt;/code&gt; é um fator?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Flights por exemplo
flights %&amp;gt;% 
  # Lembrem-se que a pergunta pedia para criar um vetor!
  map_lgl(is.factor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           year          month            day       dep_time sched_dep_time 
##          FALSE          FALSE          FALSE          FALSE          FALSE 
##      dep_delay       arr_time sched_arr_time      arr_delay        carrier 
##          FALSE          FALSE          FALSE          FALSE          FALSE 
##         flight        tailnum         origin           dest       air_time 
##          FALSE          FALSE          FALSE          FALSE          FALSE 
##       distance           hour         minute      time_hour 
##          FALSE          FALSE          FALSE          FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Usando as funções predicado &lt;code&gt;keep&lt;/code&gt; e &lt;code&gt;discard&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Selecione todas as colunas caractere no banco &lt;code&gt;flights&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;% keep(is.character)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 4
##    carrier tailnum origin dest 
##    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;
##  1 UA      N14228  EWR    IAH  
##  2 UA      N24211  LGA    IAH  
##  3 AA      N619AA  JFK    MIA  
##  4 B6      N804JB  JFK    BQN  
##  5 DL      N668DN  LGA    ATL  
##  6 UA      N39463  EWR    ORD  
##  7 B6      N516JB  EWR    FLL  
##  8 EV      N829AS  LGA    IAD  
##  9 B6      N593JB  JFK    MCO  
## 10 AA      N3ALAA  LGA    ORD  
## # ... with 336,766 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2. Descarte os caracteres em `mpg`.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mpg %&amp;gt;% discard(is.character)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 234 x 5
##    displ  year   cyl   cty   hwy
##    &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1   1.8  1999     4    18    29
##  2   1.8  1999     4    21    29
##  3   2    2008     4    20    31
##  4   2    2008     4    21    30
##  5   2.8  1999     6    16    26
##  6   2.8  1999     6    18    26
##  7   3.1  2008     6    18    27
##  8   1.8  1999     4    18    26
##  9   1.8  1999     4    16    25
## 10   2    2008     4    20    28
## # ... with 224 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3. Selecione os fatores ordenados em `diamonds`.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;diamonds %&amp;gt;% keep(is.ordered)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 53,940 x 3
##    cut       color clarity
##    &amp;lt;ord&amp;gt;     &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt;  
##  1 Ideal     E     SI2    
##  2 Premium   E     SI1    
##  3 Good      E     VS1    
##  4 Premium   I     VS2    
##  5 Good      J     SI2    
##  6 Very Good J     VVS2   
##  7 Very Good I     VVS1   
##  8 Very Good H     SI1    
##  9 Fair      E     VS2    
## 10 Very Good H     VS1    
## # ... with 53,930 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;4. Descarte as variáveis não-numéricas em `iris`
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris %&amp;gt;% discard(negate(is.numeric))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Sepal.Length Sepal.Width Petal.Length Petal.Width
## 1            5.1         3.5          1.4         0.2
## 2            4.9         3.0          1.4         0.2
## 3            4.7         3.2          1.3         0.2
## 4            4.6         3.1          1.5         0.2
## 5            5.0         3.6          1.4         0.2
## 6            5.4         3.9          1.7         0.4
## 7            4.6         3.4          1.4         0.3
## 8            5.0         3.4          1.5         0.2
## 9            4.4         2.9          1.4         0.2
## 10           4.9         3.1          1.5         0.1
## 11           5.4         3.7          1.5         0.2
## 12           4.8         3.4          1.6         0.2
## 13           4.8         3.0          1.4         0.1
## 14           4.3         3.0          1.1         0.1
## 15           5.8         4.0          1.2         0.2
## 16           5.7         4.4          1.5         0.4
## 17           5.4         3.9          1.3         0.4
## 18           5.1         3.5          1.4         0.3
## 19           5.7         3.8          1.7         0.3
## 20           5.1         3.8          1.5         0.3
## 21           5.4         3.4          1.7         0.2
## 22           5.1         3.7          1.5         0.4
## 23           4.6         3.6          1.0         0.2
## 24           5.1         3.3          1.7         0.5
## 25           4.8         3.4          1.9         0.2
## 26           5.0         3.0          1.6         0.2
## 27           5.0         3.4          1.6         0.4
## 28           5.2         3.5          1.5         0.2
## 29           5.2         3.4          1.4         0.2
## 30           4.7         3.2          1.6         0.2
## 31           4.8         3.1          1.6         0.2
## 32           5.4         3.4          1.5         0.4
## 33           5.2         4.1          1.5         0.1
## 34           5.5         4.2          1.4         0.2
## 35           4.9         3.1          1.5         0.2
## 36           5.0         3.2          1.2         0.2
## 37           5.5         3.5          1.3         0.2
## 38           4.9         3.6          1.4         0.1
## 39           4.4         3.0          1.3         0.2
## 40           5.1         3.4          1.5         0.2
## 41           5.0         3.5          1.3         0.3
## 42           4.5         2.3          1.3         0.3
## 43           4.4         3.2          1.3         0.2
## 44           5.0         3.5          1.6         0.6
## 45           5.1         3.8          1.9         0.4
## 46           4.8         3.0          1.4         0.3
## 47           5.1         3.8          1.6         0.2
## 48           4.6         3.2          1.4         0.2
## 49           5.3         3.7          1.5         0.2
## 50           5.0         3.3          1.4         0.2
## 51           7.0         3.2          4.7         1.4
## 52           6.4         3.2          4.5         1.5
## 53           6.9         3.1          4.9         1.5
## 54           5.5         2.3          4.0         1.3
## 55           6.5         2.8          4.6         1.5
## 56           5.7         2.8          4.5         1.3
## 57           6.3         3.3          4.7         1.6
## 58           4.9         2.4          3.3         1.0
## 59           6.6         2.9          4.6         1.3
## 60           5.2         2.7          3.9         1.4
## 61           5.0         2.0          3.5         1.0
## 62           5.9         3.0          4.2         1.5
## 63           6.0         2.2          4.0         1.0
## 64           6.1         2.9          4.7         1.4
## 65           5.6         2.9          3.6         1.3
## 66           6.7         3.1          4.4         1.4
## 67           5.6         3.0          4.5         1.5
## 68           5.8         2.7          4.1         1.0
## 69           6.2         2.2          4.5         1.5
## 70           5.6         2.5          3.9         1.1
## 71           5.9         3.2          4.8         1.8
## 72           6.1         2.8          4.0         1.3
## 73           6.3         2.5          4.9         1.5
## 74           6.1         2.8          4.7         1.2
## 75           6.4         2.9          4.3         1.3
## 76           6.6         3.0          4.4         1.4
## 77           6.8         2.8          4.8         1.4
## 78           6.7         3.0          5.0         1.7
## 79           6.0         2.9          4.5         1.5
## 80           5.7         2.6          3.5         1.0
## 81           5.5         2.4          3.8         1.1
## 82           5.5         2.4          3.7         1.0
## 83           5.8         2.7          3.9         1.2
## 84           6.0         2.7          5.1         1.6
## 85           5.4         3.0          4.5         1.5
## 86           6.0         3.4          4.5         1.6
## 87           6.7         3.1          4.7         1.5
## 88           6.3         2.3          4.4         1.3
## 89           5.6         3.0          4.1         1.3
## 90           5.5         2.5          4.0         1.3
## 91           5.5         2.6          4.4         1.2
## 92           6.1         3.0          4.6         1.4
## 93           5.8         2.6          4.0         1.2
## 94           5.0         2.3          3.3         1.0
## 95           5.6         2.7          4.2         1.3
## 96           5.7         3.0          4.2         1.2
## 97           5.7         2.9          4.2         1.3
## 98           6.2         2.9          4.3         1.3
## 99           5.1         2.5          3.0         1.1
## 100          5.7         2.8          4.1         1.3
## 101          6.3         3.3          6.0         2.5
## 102          5.8         2.7          5.1         1.9
## 103          7.1         3.0          5.9         2.1
## 104          6.3         2.9          5.6         1.8
## 105          6.5         3.0          5.8         2.2
## 106          7.6         3.0          6.6         2.1
## 107          4.9         2.5          4.5         1.7
## 108          7.3         2.9          6.3         1.8
## 109          6.7         2.5          5.8         1.8
## 110          7.2         3.6          6.1         2.5
## 111          6.5         3.2          5.1         2.0
## 112          6.4         2.7          5.3         1.9
## 113          6.8         3.0          5.5         2.1
## 114          5.7         2.5          5.0         2.0
## 115          5.8         2.8          5.1         2.4
## 116          6.4         3.2          5.3         2.3
## 117          6.5         3.0          5.5         1.8
## 118          7.7         3.8          6.7         2.2
## 119          7.7         2.6          6.9         2.3
## 120          6.0         2.2          5.0         1.5
## 121          6.9         3.2          5.7         2.3
## 122          5.6         2.8          4.9         2.0
## 123          7.7         2.8          6.7         2.0
## 124          6.3         2.7          4.9         1.8
## 125          6.7         3.3          5.7         2.1
## 126          7.2         3.2          6.0         1.8
## 127          6.2         2.8          4.8         1.8
## 128          6.1         3.0          4.9         1.8
## 129          6.4         2.8          5.6         2.1
## 130          7.2         3.0          5.8         1.6
## 131          7.4         2.8          6.1         1.9
## 132          7.9         3.8          6.4         2.0
## 133          6.4         2.8          5.6         2.2
## 134          6.3         2.8          5.1         1.5
## 135          6.1         2.6          5.6         1.4
## 136          7.7         3.0          6.1         2.3
## 137          6.3         3.4          5.6         2.4
## 138          6.4         3.1          5.5         1.8
## 139          6.0         3.0          4.8         1.8
## 140          6.9         3.1          5.4         2.1
## 141          6.7         3.1          5.6         2.4
## 142          6.9         3.1          5.1         2.3
## 143          5.8         2.7          5.1         1.9
## 144          6.8         3.2          5.9         2.3
## 145          6.7         3.3          5.7         2.5
## 146          6.7         3.0          5.2         2.3
## 147          6.3         2.5          5.0         1.9
## 148          6.5         3.0          5.2         2.0
## 149          6.2         3.4          5.4         2.3
## 150          5.9         3.0          5.1         1.8
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Imagine que você tem um diretório cheio de arquivos &lt;code&gt;.csv&lt;/code&gt; que correspondem a um único banco de dados. Você tem os caminhos de todos eles num vetor com a forma &lt;code&gt;c(arquivo_1.csv, ..., arquivo_n.csv)&lt;/code&gt;. Como você importaria esses arquivos? Tente fazer duas soluções diferentes.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Vamos usar um diretório temporário que vamos preencher com vários tibbles
pasta &amp;lt;- tempdir()

# Criamos 100 tibbles e guardamos em 100 arquivos csv.
x &amp;lt;- rep(10, 100)

arqs &amp;lt;- sprintf(&amp;quot;arquivo%s.csv&amp;quot;, 1:100)

map(x, ~tibble(var1 = rnorm(.x), var2 = rnorm(.x))) %&amp;gt;% 
  map2(arqs, ~write_csv(.x, file.path(pasta, .y))) %&amp;gt;% 
  str()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Nossos arquivos estão salvos no diretório temporário:
dir(pasta)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;arquivo1.csv&amp;quot;    &amp;quot;arquivo10.csv&amp;quot;   &amp;quot;arquivo100.csv&amp;quot;  &amp;quot;arquivo11.csv&amp;quot;  
##   [5] &amp;quot;arquivo12.csv&amp;quot;   &amp;quot;arquivo13.csv&amp;quot;   &amp;quot;arquivo14.csv&amp;quot;   &amp;quot;arquivo15.csv&amp;quot;  
##   [9] &amp;quot;arquivo16.csv&amp;quot;   &amp;quot;arquivo17.csv&amp;quot;   &amp;quot;arquivo18.csv&amp;quot;   &amp;quot;arquivo19.csv&amp;quot;  
##  [13] &amp;quot;arquivo2.csv&amp;quot;    &amp;quot;arquivo20.csv&amp;quot;   &amp;quot;arquivo21.csv&amp;quot;   &amp;quot;arquivo22.csv&amp;quot;  
##  [17] &amp;quot;arquivo23.csv&amp;quot;   &amp;quot;arquivo24.csv&amp;quot;   &amp;quot;arquivo25.csv&amp;quot;   &amp;quot;arquivo26.csv&amp;quot;  
##  [21] &amp;quot;arquivo27.csv&amp;quot;   &amp;quot;arquivo28.csv&amp;quot;   &amp;quot;arquivo29.csv&amp;quot;   &amp;quot;arquivo3.csv&amp;quot;   
##  [25] &amp;quot;arquivo30.csv&amp;quot;   &amp;quot;arquivo31.csv&amp;quot;   &amp;quot;arquivo32.csv&amp;quot;   &amp;quot;arquivo33.csv&amp;quot;  
##  [29] &amp;quot;arquivo34.csv&amp;quot;   &amp;quot;arquivo35.csv&amp;quot;   &amp;quot;arquivo36.csv&amp;quot;   &amp;quot;arquivo37.csv&amp;quot;  
##  [33] &amp;quot;arquivo38.csv&amp;quot;   &amp;quot;arquivo39.csv&amp;quot;   &amp;quot;arquivo4.csv&amp;quot;    &amp;quot;arquivo40.csv&amp;quot;  
##  [37] &amp;quot;arquivo41.csv&amp;quot;   &amp;quot;arquivo42.csv&amp;quot;   &amp;quot;arquivo43.csv&amp;quot;   &amp;quot;arquivo44.csv&amp;quot;  
##  [41] &amp;quot;arquivo45.csv&amp;quot;   &amp;quot;arquivo46.csv&amp;quot;   &amp;quot;arquivo47.csv&amp;quot;   &amp;quot;arquivo48.csv&amp;quot;  
##  [45] &amp;quot;arquivo49.csv&amp;quot;   &amp;quot;arquivo5.csv&amp;quot;    &amp;quot;arquivo50.csv&amp;quot;   &amp;quot;arquivo51.csv&amp;quot;  
##  [49] &amp;quot;arquivo52.csv&amp;quot;   &amp;quot;arquivo53.csv&amp;quot;   &amp;quot;arquivo54.csv&amp;quot;   &amp;quot;arquivo55.csv&amp;quot;  
##  [53] &amp;quot;arquivo56.csv&amp;quot;   &amp;quot;arquivo57.csv&amp;quot;   &amp;quot;arquivo58.csv&amp;quot;   &amp;quot;arquivo59.csv&amp;quot;  
##  [57] &amp;quot;arquivo6.csv&amp;quot;    &amp;quot;arquivo60.csv&amp;quot;   &amp;quot;arquivo61.csv&amp;quot;   &amp;quot;arquivo62.csv&amp;quot;  
##  [61] &amp;quot;arquivo63.csv&amp;quot;   &amp;quot;arquivo64.csv&amp;quot;   &amp;quot;arquivo65.csv&amp;quot;   &amp;quot;arquivo66.csv&amp;quot;  
##  [65] &amp;quot;arquivo67.csv&amp;quot;   &amp;quot;arquivo68.csv&amp;quot;   &amp;quot;arquivo69.csv&amp;quot;   &amp;quot;arquivo7.csv&amp;quot;   
##  [69] &amp;quot;arquivo70.csv&amp;quot;   &amp;quot;arquivo71.csv&amp;quot;   &amp;quot;arquivo72.csv&amp;quot;   &amp;quot;arquivo73.csv&amp;quot;  
##  [73] &amp;quot;arquivo74.csv&amp;quot;   &amp;quot;arquivo75.csv&amp;quot;   &amp;quot;arquivo76.csv&amp;quot;   &amp;quot;arquivo77.csv&amp;quot;  
##  [77] &amp;quot;arquivo78.csv&amp;quot;   &amp;quot;arquivo79.csv&amp;quot;   &amp;quot;arquivo8.csv&amp;quot;    &amp;quot;arquivo80.csv&amp;quot;  
##  [81] &amp;quot;arquivo81.csv&amp;quot;   &amp;quot;arquivo82.csv&amp;quot;   &amp;quot;arquivo83.csv&amp;quot;   &amp;quot;arquivo84.csv&amp;quot;  
##  [85] &amp;quot;arquivo85.csv&amp;quot;   &amp;quot;arquivo86.csv&amp;quot;   &amp;quot;arquivo87.csv&amp;quot;   &amp;quot;arquivo88.csv&amp;quot;  
##  [89] &amp;quot;arquivo89.csv&amp;quot;   &amp;quot;arquivo9.csv&amp;quot;    &amp;quot;arquivo90.csv&amp;quot;   &amp;quot;arquivo91.csv&amp;quot;  
##  [93] &amp;quot;arquivo92.csv&amp;quot;   &amp;quot;arquivo93.csv&amp;quot;   &amp;quot;arquivo94.csv&amp;quot;   &amp;quot;arquivo95.csv&amp;quot;  
##  [97] &amp;quot;arquivo96.csv&amp;quot;   &amp;quot;arquivo97.csv&amp;quot;   &amp;quot;arquivo98.csv&amp;quot;   &amp;quot;arquivo99.csv&amp;quot;  
## [101] &amp;quot;filecf810bd36a5&amp;quot; &amp;quot;filecf81149221d&amp;quot; &amp;quot;filecf81164e23&amp;quot;  &amp;quot;filecf8161f65f7&amp;quot;
## [105] &amp;quot;filecf8171030fd&amp;quot; &amp;quot;filecf819e43f49&amp;quot; &amp;quot;filecf81ad26a9f&amp;quot; &amp;quot;filecf81bed9f1&amp;quot; 
## [109] &amp;quot;filecf81e7a7e68&amp;quot; &amp;quot;filecf81ef03542&amp;quot; &amp;quot;filecf81fa64a3e&amp;quot; &amp;quot;filecf8239d75ab&amp;quot;
## [113] &amp;quot;filecf8261936&amp;quot;   &amp;quot;filecf826d55378&amp;quot; &amp;quot;filecf8291061a0&amp;quot; &amp;quot;filecf82b985019&amp;quot;
## [117] &amp;quot;filecf82c00737b&amp;quot; &amp;quot;filecf8339f5&amp;quot;    &amp;quot;filecf8341e67d6&amp;quot; &amp;quot;filecf8344158ac&amp;quot;
## [121] &amp;quot;filecf837a47cc7&amp;quot; &amp;quot;filecf837f15510&amp;quot; &amp;quot;filecf8387a3d29&amp;quot; &amp;quot;filecf83a71232b&amp;quot;
## [125] &amp;quot;filecf83ac3253a&amp;quot; &amp;quot;filecf83af94598&amp;quot; &amp;quot;filecf83f794f64&amp;quot; &amp;quot;filecf8402156c1&amp;quot;
## [129] &amp;quot;filecf840c15566&amp;quot; &amp;quot;filecf84163761c&amp;quot; &amp;quot;filecf841d3b53&amp;quot;  &amp;quot;filecf844d5642&amp;quot; 
## [133] &amp;quot;filecf845e73bac&amp;quot; &amp;quot;filecf8462819d6&amp;quot; &amp;quot;filecf84b8b3144&amp;quot; &amp;quot;filecf84ddc73a0&amp;quot;
## [137] &amp;quot;filecf84fe515d4&amp;quot; &amp;quot;filecf8500a5a10&amp;quot; &amp;quot;filecf8512766ea&amp;quot; &amp;quot;filecf852fe119b&amp;quot;
## [141] &amp;quot;filecf8550a39d&amp;quot;  &amp;quot;filecf85b14fec&amp;quot;  &amp;quot;filecf85e053c83&amp;quot; &amp;quot;filecf85e6a12f4&amp;quot;
## [145] &amp;quot;filecf8639c6053&amp;quot; &amp;quot;filecf863dc5f3b&amp;quot; &amp;quot;filecf8646e477f&amp;quot; &amp;quot;filecf865645c5d&amp;quot;
## [149] &amp;quot;filecf868634c0d&amp;quot; &amp;quot;filecf869137c8a&amp;quot; &amp;quot;filecf86a7852d4&amp;quot; &amp;quot;filecf86b5b250&amp;quot; 
## [153] &amp;quot;filecf86b9e3bb7&amp;quot; &amp;quot;filecf86d216ac&amp;quot;  &amp;quot;filecf86e894a16&amp;quot; &amp;quot;filecf86ea916d3&amp;quot;
## [157] &amp;quot;filecf86f22266&amp;quot;  &amp;quot;filecf86f975377&amp;quot; &amp;quot;filecf8757a72be&amp;quot; &amp;quot;filecf876956e82&amp;quot;
## [161] &amp;quot;filecf876967b1&amp;quot;  &amp;quot;filecf8787a1370&amp;quot; &amp;quot;filecf879037c39&amp;quot; &amp;quot;filecf87964711&amp;quot; 
## [165] &amp;quot;filecf87afe7046&amp;quot; &amp;quot;filecf88456ae0&amp;quot;  &amp;quot;filecf898344ab&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Agora vamos ler todos de volta para uma tibble só.
arqs &amp;lt;- dir(pasta, pattern = &amp;quot;.csv&amp;quot;, full.names = T)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Juntando linhas
df &amp;lt;- map_dfr(arqs, read_csv)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 2
##      var1   var2
##     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1  0.837 -0.554
##  2 -1.12   1.08 
##  3 -0.821  1.21 
##  4  0.384  0.465
##  5  0.885  0.477
##  6 -0.194  0.517
##  7  0.710  0.128
##  8 -1.04  -0.947
##  9  0.782  1.58 
## 10  0.571  0.990
## # ... with 990 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Juntando colunas
df &amp;lt;- map_dfc(arqs, read_csv)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 200
##    var1...1 var2...2 var1...3 var2...4 var1...5 var2...6 var1...7 var2...8
##       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1    0.837   -0.554 -1.35       0.522  1.49      0.648    -0.567   -0.868
##  2   -1.12     1.08   0.876      2.11   0.0449    0.0737   -0.808    0.177
##  3   -0.821    1.21   1.77      -1.31   1.51      1.35      0.559   -0.119
##  4    0.384    0.465 -0.496      1.10   1.13     -0.331     0.427    0.131
##  5    0.885    0.477 -0.514     -0.573 -0.0704    0.581     0.751    0.629
##  6   -0.194    0.517  0.362     -1.62  -0.725    -2.37      0.710   -0.293
##  7    0.710    0.128  1.11       0.144  0.00462   1.66      1.32    -0.414
##  8   -1.04    -0.947  0.00775   -1.27   0.0365    0.0813   -1.10     0.757
##  9    0.782    1.58   0.695     -0.375 -0.342     0.341    -0.325    0.834
## 10    0.571    0.990 -0.475     -0.356 -1.17     -0.827    -0.148   -1.29 
## # ... with 192 more variables: var1...9 &amp;lt;dbl&amp;gt;, var2...10 &amp;lt;dbl&amp;gt;,
## #   var1...11 &amp;lt;dbl&amp;gt;, var2...12 &amp;lt;dbl&amp;gt;, var1...13 &amp;lt;dbl&amp;gt;, var2...14 &amp;lt;dbl&amp;gt;,
## #   var1...15 &amp;lt;dbl&amp;gt;, var2...16 &amp;lt;dbl&amp;gt;, var1...17 &amp;lt;dbl&amp;gt;, var2...18 &amp;lt;dbl&amp;gt;,
## #   var1...19 &amp;lt;dbl&amp;gt;, var2...20 &amp;lt;dbl&amp;gt;, var1...21 &amp;lt;dbl&amp;gt;, var2...22 &amp;lt;dbl&amp;gt;,
## #   var1...23 &amp;lt;dbl&amp;gt;, var2...24 &amp;lt;dbl&amp;gt;, var1...25 &amp;lt;dbl&amp;gt;, var2...26 &amp;lt;dbl&amp;gt;,
## #   var1...27 &amp;lt;dbl&amp;gt;, var2...28 &amp;lt;dbl&amp;gt;, var1...29 &amp;lt;dbl&amp;gt;, var2...30 &amp;lt;dbl&amp;gt;,
## #   var1...31 &amp;lt;dbl&amp;gt;, var2...32 &amp;lt;dbl&amp;gt;, var1...33 &amp;lt;dbl&amp;gt;, var2...34 &amp;lt;dbl&amp;gt;,
## #   var1...35 &amp;lt;dbl&amp;gt;, var2...36 &amp;lt;dbl&amp;gt;, var1...37 &amp;lt;dbl&amp;gt;, var2...38 &amp;lt;dbl&amp;gt;,
## #   var1...39 &amp;lt;dbl&amp;gt;, var2...40 &amp;lt;dbl&amp;gt;, var1...41 &amp;lt;dbl&amp;gt;, var2...42 &amp;lt;dbl&amp;gt;,
## #   var1...43 &amp;lt;dbl&amp;gt;, var2...44 &amp;lt;dbl&amp;gt;, var1...45 &amp;lt;dbl&amp;gt;, var2...46 &amp;lt;dbl&amp;gt;,
## #   var1...47 &amp;lt;dbl&amp;gt;, var2...48 &amp;lt;dbl&amp;gt;, var1...49 &amp;lt;dbl&amp;gt;, var2...50 &amp;lt;dbl&amp;gt;,
## #   var1...51 &amp;lt;dbl&amp;gt;, var2...52 &amp;lt;dbl&amp;gt;, var1...53 &amp;lt;dbl&amp;gt;, var2...54 &amp;lt;dbl&amp;gt;,
## #   var1...55 &amp;lt;dbl&amp;gt;, var2...56 &amp;lt;dbl&amp;gt;, var1...57 &amp;lt;dbl&amp;gt;, var2...58 &amp;lt;dbl&amp;gt;,
## #   var1...59 &amp;lt;dbl&amp;gt;, var2...60 &amp;lt;dbl&amp;gt;, var1...61 &amp;lt;dbl&amp;gt;, var2...62 &amp;lt;dbl&amp;gt;,
## #   var1...63 &amp;lt;dbl&amp;gt;, var2...64 &amp;lt;dbl&amp;gt;, var1...65 &amp;lt;dbl&amp;gt;, var2...66 &amp;lt;dbl&amp;gt;,
## #   var1...67 &amp;lt;dbl&amp;gt;, var2...68 &amp;lt;dbl&amp;gt;, var1...69 &amp;lt;dbl&amp;gt;, var2...70 &amp;lt;dbl&amp;gt;,
## #   var1...71 &amp;lt;dbl&amp;gt;, var2...72 &amp;lt;dbl&amp;gt;, var1...73 &amp;lt;dbl&amp;gt;, var2...74 &amp;lt;dbl&amp;gt;,
## #   var1...75 &amp;lt;dbl&amp;gt;, var2...76 &amp;lt;dbl&amp;gt;, var1...77 &amp;lt;dbl&amp;gt;, var2...78 &amp;lt;dbl&amp;gt;,
## #   var1...79 &amp;lt;dbl&amp;gt;, var2...80 &amp;lt;dbl&amp;gt;, var1...81 &amp;lt;dbl&amp;gt;, var2...82 &amp;lt;dbl&amp;gt;,
## #   var1...83 &amp;lt;dbl&amp;gt;, var2...84 &amp;lt;dbl&amp;gt;, var1...85 &amp;lt;dbl&amp;gt;, var2...86 &amp;lt;dbl&amp;gt;,
## #   var1...87 &amp;lt;dbl&amp;gt;, var2...88 &amp;lt;dbl&amp;gt;, var1...89 &amp;lt;dbl&amp;gt;, var2...90 &amp;lt;dbl&amp;gt;,
## #   var1...91 &amp;lt;dbl&amp;gt;, var2...92 &amp;lt;dbl&amp;gt;, var1...93 &amp;lt;dbl&amp;gt;, var2...94 &amp;lt;dbl&amp;gt;,
## #   var1...95 &amp;lt;dbl&amp;gt;, var2...96 &amp;lt;dbl&amp;gt;, var1...97 &amp;lt;dbl&amp;gt;, var2...98 &amp;lt;dbl&amp;gt;,
## #   var1...99 &amp;lt;dbl&amp;gt;, var2...100 &amp;lt;dbl&amp;gt;, var1...101 &amp;lt;dbl&amp;gt;, var2...102 &amp;lt;dbl&amp;gt;,
## #   var1...103 &amp;lt;dbl&amp;gt;, var2...104 &amp;lt;dbl&amp;gt;, var1...105 &amp;lt;dbl&amp;gt;, var2...106 &amp;lt;dbl&amp;gt;,
## #   var1...107 &amp;lt;dbl&amp;gt;, var2...108 &amp;lt;dbl&amp;gt;, ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Usando reduce
# linhas
df &amp;lt;- map(arqs, read_csv) %&amp;gt;% reduce(bind_rows)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 2
##      var1   var2
##     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1  0.837 -0.554
##  2 -1.12   1.08 
##  3 -0.821  1.21 
##  4  0.384  0.465
##  5  0.885  0.477
##  6 -0.194  0.517
##  7  0.710  0.128
##  8 -1.04  -0.947
##  9  0.782  1.58 
## 10  0.571  0.990
## # ... with 990 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# colunas
df &amp;lt;- map(arqs, read_csv) %&amp;gt;% reduce(bind_cols)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 200
##    var1...1 var2...2 var1...3 var2...4 var1...5 var2...6 var1...7 var2...8
##       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1    0.837   -0.554 -1.35       0.522  1.49      0.648    -0.567   -0.868
##  2   -1.12     1.08   0.876      2.11   0.0449    0.0737   -0.808    0.177
##  3   -0.821    1.21   1.77      -1.31   1.51      1.35      0.559   -0.119
##  4    0.384    0.465 -0.496      1.10   1.13     -0.331     0.427    0.131
##  5    0.885    0.477 -0.514     -0.573 -0.0704    0.581     0.751    0.629
##  6   -0.194    0.517  0.362     -1.62  -0.725    -2.37      0.710   -0.293
##  7    0.710    0.128  1.11       0.144  0.00462   1.66      1.32    -0.414
##  8   -1.04    -0.947  0.00775   -1.27   0.0365    0.0813   -1.10     0.757
##  9    0.782    1.58   0.695     -0.375 -0.342     0.341    -0.325    0.834
## 10    0.571    0.990 -0.475     -0.356 -1.17     -0.827    -0.148   -1.29 
## # ... with 192 more variables: var1...9 &amp;lt;dbl&amp;gt;, var2...10 &amp;lt;dbl&amp;gt;,
## #   var1...11 &amp;lt;dbl&amp;gt;, var2...12 &amp;lt;dbl&amp;gt;, var1...13 &amp;lt;dbl&amp;gt;, var2...14 &amp;lt;dbl&amp;gt;,
## #   var1...15 &amp;lt;dbl&amp;gt;, var2...16 &amp;lt;dbl&amp;gt;, var1...17 &amp;lt;dbl&amp;gt;, var2...18 &amp;lt;dbl&amp;gt;,
## #   var1...19 &amp;lt;dbl&amp;gt;, var2...20 &amp;lt;dbl&amp;gt;, var1...21 &amp;lt;dbl&amp;gt;, var2...22 &amp;lt;dbl&amp;gt;,
## #   var1...23 &amp;lt;dbl&amp;gt;, var2...24 &amp;lt;dbl&amp;gt;, var1...25 &amp;lt;dbl&amp;gt;, var2...26 &amp;lt;dbl&amp;gt;,
## #   var1...27 &amp;lt;dbl&amp;gt;, var2...28 &amp;lt;dbl&amp;gt;, var1...29 &amp;lt;dbl&amp;gt;, var2...30 &amp;lt;dbl&amp;gt;,
## #   var1...31 &amp;lt;dbl&amp;gt;, var2...32 &amp;lt;dbl&amp;gt;, var1...33 &amp;lt;dbl&amp;gt;, var2...34 &amp;lt;dbl&amp;gt;,
## #   var1...35 &amp;lt;dbl&amp;gt;, var2...36 &amp;lt;dbl&amp;gt;, var1...37 &amp;lt;dbl&amp;gt;, var2...38 &amp;lt;dbl&amp;gt;,
## #   var1...39 &amp;lt;dbl&amp;gt;, var2...40 &amp;lt;dbl&amp;gt;, var1...41 &amp;lt;dbl&amp;gt;, var2...42 &amp;lt;dbl&amp;gt;,
## #   var1...43 &amp;lt;dbl&amp;gt;, var2...44 &amp;lt;dbl&amp;gt;, var1...45 &amp;lt;dbl&amp;gt;, var2...46 &amp;lt;dbl&amp;gt;,
## #   var1...47 &amp;lt;dbl&amp;gt;, var2...48 &amp;lt;dbl&amp;gt;, var1...49 &amp;lt;dbl&amp;gt;, var2...50 &amp;lt;dbl&amp;gt;,
## #   var1...51 &amp;lt;dbl&amp;gt;, var2...52 &amp;lt;dbl&amp;gt;, var1...53 &amp;lt;dbl&amp;gt;, var2...54 &amp;lt;dbl&amp;gt;,
## #   var1...55 &amp;lt;dbl&amp;gt;, var2...56 &amp;lt;dbl&amp;gt;, var1...57 &amp;lt;dbl&amp;gt;, var2...58 &amp;lt;dbl&amp;gt;,
## #   var1...59 &amp;lt;dbl&amp;gt;, var2...60 &amp;lt;dbl&amp;gt;, var1...61 &amp;lt;dbl&amp;gt;, var2...62 &amp;lt;dbl&amp;gt;,
## #   var1...63 &amp;lt;dbl&amp;gt;, var2...64 &amp;lt;dbl&amp;gt;, var1...65 &amp;lt;dbl&amp;gt;, var2...66 &amp;lt;dbl&amp;gt;,
## #   var1...67 &amp;lt;dbl&amp;gt;, var2...68 &amp;lt;dbl&amp;gt;, var1...69 &amp;lt;dbl&amp;gt;, var2...70 &amp;lt;dbl&amp;gt;,
## #   var1...71 &amp;lt;dbl&amp;gt;, var2...72 &amp;lt;dbl&amp;gt;, var1...73 &amp;lt;dbl&amp;gt;, var2...74 &amp;lt;dbl&amp;gt;,
## #   var1...75 &amp;lt;dbl&amp;gt;, var2...76 &amp;lt;dbl&amp;gt;, var1...77 &amp;lt;dbl&amp;gt;, var2...78 &amp;lt;dbl&amp;gt;,
## #   var1...79 &amp;lt;dbl&amp;gt;, var2...80 &amp;lt;dbl&amp;gt;, var1...81 &amp;lt;dbl&amp;gt;, var2...82 &amp;lt;dbl&amp;gt;,
## #   var1...83 &amp;lt;dbl&amp;gt;, var2...84 &amp;lt;dbl&amp;gt;, var1...85 &amp;lt;dbl&amp;gt;, var2...86 &amp;lt;dbl&amp;gt;,
## #   var1...87 &amp;lt;dbl&amp;gt;, var2...88 &amp;lt;dbl&amp;gt;, var1...89 &amp;lt;dbl&amp;gt;, var2...90 &amp;lt;dbl&amp;gt;,
## #   var1...91 &amp;lt;dbl&amp;gt;, var2...92 &amp;lt;dbl&amp;gt;, var1...93 &amp;lt;dbl&amp;gt;, var2...94 &amp;lt;dbl&amp;gt;,
## #   var1...95 &amp;lt;dbl&amp;gt;, var2...96 &amp;lt;dbl&amp;gt;, var1...97 &amp;lt;dbl&amp;gt;, var2...98 &amp;lt;dbl&amp;gt;,
## #   var1...99 &amp;lt;dbl&amp;gt;, var2...100 &amp;lt;dbl&amp;gt;, var1...101 &amp;lt;dbl&amp;gt;, var2...102 &amp;lt;dbl&amp;gt;,
## #   var1...103 &amp;lt;dbl&amp;gt;, var2...104 &amp;lt;dbl&amp;gt;, var1...105 &amp;lt;dbl&amp;gt;, var2...106 &amp;lt;dbl&amp;gt;,
## #   var1...107 &amp;lt;dbl&amp;gt;, var2...108 &amp;lt;dbl&amp;gt;, ...
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Escreva um código sucinto que implemente vários modelos lineares especificados por você. Salve os resultados numa &lt;code&gt;tibble&lt;/code&gt; com colunas-lista. Depois, extraia os resultados com &lt;code&gt;unnest()&lt;/code&gt;. Use o exemplo como guia.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modelos &amp;lt;- c(&amp;quot;mpg ~ wt&amp;quot;,
             &amp;quot;mpg ~ wt + cyl&amp;quot;,
             &amp;quot;mpg ~ wt + cyl + drat&amp;quot;,
             &amp;quot;mpg ~ wt + cyl + drat + am&amp;quot;)

# Estou usando funções do pacote broom, mas você não era obrigado a apresentar
# os resultados bonitinho. O objetivo era treinar esse tipo de workflow.
modelos_saida &amp;lt;- tibble(
  especificacao = modelos,
  ajuste = map(especificacao, lm, data = mtcars),
  coefs = map(ajuste, broom::tidy),
  stats = map(ajuste, broom::glance),
  aums = map(ajuste, broom::augment)
)

modelos_saida %&amp;gt;% 
  select(especificacao, coefs) %&amp;gt;% 
  unnest(coefs) %&amp;gt;% 
  filter(term != &amp;quot;(Intercept)&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 6
##    especificacao              term  estimate std.error statistic  p.value
##    &amp;lt;chr&amp;gt;                      &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 mpg ~ wt                   wt     -5.34       0.559   -9.56   1.29e-10
##  2 mpg ~ wt + cyl             wt     -3.19       0.757   -4.22   2.22e- 4
##  3 mpg ~ wt + cyl             cyl    -1.51       0.415   -3.64   1.06e- 3
##  4 mpg ~ wt + cyl + drat      wt     -3.19       0.829   -3.85   6.24e- 4
##  5 mpg ~ wt + cyl + drat      cyl    -1.51       0.446   -3.38   2.14e- 3
##  6 mpg ~ wt + cyl + drat      drat   -0.0162     1.32    -0.0122 9.90e- 1
##  7 mpg ~ wt + cyl + drat + am wt     -3.13       0.932   -3.36   2.32e- 3
##  8 mpg ~ wt + cyl + drat + am cyl    -1.53       0.465   -3.28   2.88e- 3
##  9 mpg ~ wt + cyl + drat + am drat   -0.130      1.53    -0.0851 9.33e- 1
## 10 mpg ~ wt + cyl + drat + am am      0.237      1.51     0.157  8.76e- 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modelos_saida %&amp;gt;% 
  select(especificacao, stats) %&amp;gt;% 
  unnest(stats)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 13
##   especificacao    r.squared adj.r.squared sigma statistic  p.value    df logLik
##   &amp;lt;chr&amp;gt;                &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 mpg ~ wt             0.753         0.745  3.05      91.4 1.29e-10     1  -80.0
## 2 mpg ~ wt + cyl       0.830         0.819  2.57      70.9 6.81e-12     2  -74.0
## 3 mpg ~ wt + cyl ~     0.830         0.812  2.61      45.6 6.57e-11     3  -74.0
## 4 mpg ~ wt + cyl ~     0.830         0.805  2.66      33.0 4.84e-10     4  -74.0
## # ... with 5 more variables: AIC &amp;lt;dbl&amp;gt;, BIC &amp;lt;dbl&amp;gt;, deviance &amp;lt;dbl&amp;gt;,
## #   df.residual &amp;lt;int&amp;gt;, nobs &amp;lt;int&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modelos_saida %&amp;gt;% 
  select(especificacao, aums) %&amp;gt;% 
  filter(especificacao == &amp;quot;mpg ~ wt + cyl + drat + am&amp;quot;) %&amp;gt;% 
  unnest(aums)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 13
##    especificacao   .rownames   mpg    wt   cyl  drat    am .fitted .resid   .hat
##    &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 mpg ~ wt + cyl~ Mazda RX4  21    2.62     6  3.9      1    22.3 -1.35  0.0899
##  2 mpg ~ wt + cyl~ Mazda RX~  21    2.88     6  3.9      1    21.6 -0.550 0.0924
##  3 mpg ~ wt + cyl~ Datsun 7~  22.8  2.32     4  3.85     1    26.3 -3.55  0.137 
##  4 mpg ~ wt + cyl~ Hornet 4~  21.4  3.22     6  3.08     0    20.4  1.05  0.113 
##  5 mpg ~ wt + cyl~ Hornet S~  18.7  3.44     8  3.15     0    16.6  2.11  0.122 
##  6 mpg ~ wt + cyl~ Valiant    18.1  3.46     6  2.76     0    19.6 -1.53  0.207 
##  7 mpg ~ wt + cyl~ Duster 3~  14.3  3.57     8  3.21     0    16.2 -1.87  0.103 
##  8 mpg ~ wt + cyl~ Merc 240D  24.4  3.19     4  3.69     0    23.4  0.996 0.189 
##  9 mpg ~ wt + cyl~ Merc 230   22.8  3.15     4  3.92     0    23.5 -0.700 0.207 
## 10 mpg ~ wt + cyl~ Merc 280   19.2  3.44     6  3.92     0    19.5 -0.340 0.149 
## # ... with 22 more rows, and 3 more variables: .sigma &amp;lt;dbl&amp;gt;, .cooksd &amp;lt;dbl&amp;gt;,
## #   .std.resid &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>An example preprint / working paper</title>
      <link>https://laddem.github.io/publication/preprint/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/publication/preprint/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Create your slides in Markdown - click the &lt;em&gt;Slides&lt;/em&gt; button to check out the example.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code, math, and images&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://laddem.github.io/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-wowchemy&#34;&gt;Create slides in Markdown with Wowchemy&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy&lt;/a&gt; | &lt;a href=&#34;https://owchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
One 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
&lt;strong&gt;Two&lt;/strong&gt; 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
Three 
&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/media/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/media/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/discussions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example journal article</title>
      <link>https://laddem.github.io/publication/journal-article/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/publication/journal-article/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Create your slides in Markdown - click the &lt;em&gt;Slides&lt;/em&gt; button to check out the example.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code, math, and images&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example conference paper</title>
      <link>https://laddem.github.io/publication/conference-paper/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/publication/conference-paper/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Create your slides in Markdown - click the &lt;em&gt;Slides&lt;/em&gt; button to check out the example.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code, math, and images&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://laddem.github.io/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/admin/config.yml</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
