<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ğŸ“Š Aprenda o bÃ¡sico da linguagem R | LADDEM</title>
    <link>https://laddem.github.io/courses/rbase/</link>
      <atom:link href="https://laddem.github.io/courses/rbase/index.xml" rel="self" type="application/rss+xml" />
    <description>ğŸ“Š Aprenda o bÃ¡sico da linguagem R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>pt</language><copyright>Â© 2021 LADDEM</copyright><lastBuildDate>Mon, 14 Jun 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://laddem.github.io/courses/rbase/featured.png</url>
      <title>ğŸ“Š Aprenda o bÃ¡sico da linguagem R</title>
      <link>https://laddem.github.io/courses/rbase/</link>
    </image>
    
    <item>
      <title>A base da linguagem R</title>
      <link>https://laddem.github.io/courses/rbase/dia1/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/courses/rbase/dia1/</guid>
      <description>&lt;h2 id=&#34;fundamentos&#34;&gt;Fundamentos&lt;/h2&gt;
&lt;h3 id=&#34;a-interface-do-r-e-do-rstudio&#34;&gt;A interface do R e do RStudio&lt;/h3&gt;
&lt;p&gt;O RStudio oferece uma maneira de falar com seu computador. O R te fornece um idioma para falar. 
Para comeÃ§ar, abra o RStudio da mesma forma que vocÃª abriria qualquer outro aplicativo em seu computador.&lt;/p&gt;
&lt;p&gt;VocÃª digita o cÃ³digo R na linha superior do painel do console RStudio e, em seguida, clica em Enter para executÃ¡-lo. O cÃ³digo que vocÃª digita Ã© chamado de comando, porque ele comandarÃ¡ seu computador para fazer algo por vocÃª. A linha em que vocÃª digita Ã© chamada de linha de comando.&lt;/p&gt;
&lt;p&gt;A interface do RStudio Ã© simples. Para  criar um script novo Ã© necessÃ¡rio ir em &lt;code&gt;File &amp;gt; New File &amp;gt; R &amp;gt; script&lt;/code&gt; no menu no canto esquerdo. Ã‰ recomendado fortemente que vocÃª escreva e edite todo o seu cÃ³digo R em um script antes de executÃ¡-lo no console. Por quÃª? Esse hÃ¡bito cria um registro reproduzÃ­vel de seu trabalho. Ao terminar o dia, vocÃª pode salvar seu script e usÃ¡-lo para executar novamente toda a sua anÃ¡lise no dia seguinte, alÃ©m disso os scripts sÃ£o muito Ãºteis para editar e revisar seu cÃ³digo e sÃ£o uma Ã³tima cÃ³pia de seu trabalho para compartilhar com outras pessoas. Para salvar Ã© sÃ³ clicar no disquete no painel do script e depois ir em &lt;code&gt;File &amp;gt; Save&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Quando vocÃª digita um comando no script e pressiona Ctrl + Enter ou Run, o computador executa o comando e mostra os resultados no console logo abaixo. Por exemplo, se vocÃª digitar 1 + 1 e pressionar Ctrl + Enter, o RStudio exibirÃ¡:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;objetos&#34;&gt;Objetos&lt;/h3&gt;
&lt;p&gt;Agora que vocÃª jÃ¡ sabe como o R funciona, vamos ver alguns operadores e objetos que podem ser criados. Se vocÃª quer que o R crie um vetor, use o operador &lt;code&gt;:&lt;/code&gt;, esse operador vai retornar um conjunto unidimensional de nÃºmeros:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1:6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas quando vocÃª roda assim dessa forma, o R gera o vetor que vocÃª poderÃ¡ ver o resultado no console, porÃ©m esse vetor nÃ£o vai ficar salvo em lugar nenhum, Ã© basicamente uma pegada de seis nÃºmeros que existiram naquela execuÃ§Ã£o pontual. Se vocÃª quiser usar novamente essa sequÃªncia de nÃºmero, vocÃª precisa pedir para o R guardar ele em algum lugar. VocÃª pode fazer isso criando um &lt;code&gt;objeto&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O R permite salvar dados armazenando-os dentro de um objeto R. O que Ã© um objeto? Apenas um nome que vocÃª pode usar para acessar os dados armazenados. Por exemplo, vocÃª pode salvar dados em um objeto como &lt;code&gt;a&lt;/code&gt; ou &lt;code&gt;b&lt;/code&gt; ou qualquer nome que faÃ§a sentido para o que vocÃª estÃ¡ fazendo. Sempre que o R encontrar o objeto, ele irÃ¡ substituÃ­-lo pelos dados salvos nele, da seguinte forma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a &amp;lt;- 1

a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a + 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou seja, para vocÃª criar um objeto no R, vocÃª escolhe um nome e depois usa o sÃ­mbolo &lt;code&gt;&amp;lt;-&lt;/code&gt; para salvar o dado naquele objeto no qual vocÃª deu um nome. No caso do exemplo acima, o R criou um objeto, deu a ele seu nome e armazenou nele tudo o que vier apÃ³s a seta. Portanto, &lt;code&gt;a &amp;lt;- 1&lt;/code&gt; armazena 1 em um objeto denominado a.&lt;/p&gt;
&lt;p&gt;VocÃª tambÃ©m pode usar seu objeto em novos comandos R. JÃ¡ que armazenou anteriormente o valor de 1, agora vocÃª estÃ¡ adicionando 1 ao a armazenando no objeto &lt;code&gt;a + 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;EntÃ£o, como vocÃª faria para armazenar esse vetor de seis nÃºmeros &lt;code&gt;1:6&lt;/code&gt;, que a gente criou anteriormente, em um objeto?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor &amp;lt;- 1:6

vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quando vocÃª cria um objeto no R, esse objeto vai aparecer armazenado na seÃ§Ã£o &lt;code&gt;Environment&lt;/code&gt; no lado direito, do lado da seÃ§Ã£o script (essa que vocÃª digita os comandos para usÃ¡-los depois).&lt;/p&gt;
&lt;p&gt;VocÃª pode nomear um objeto no R de praticamente qualquer nome, sÃ³ tem algumas regras: nÃ£o pode comeÃ§ar com nÃºmero, e tambÃ©m nÃ£o pode ter alguns sÃ­mbolos, como por exemplo:  &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;AlÃ©m disso, o R Ã© &lt;em&gt;case-sensitive&lt;/em&gt;, portanto se eu colocar um nome de objeto como &lt;code&gt;Name&lt;/code&gt; e outro como &lt;code&gt;name&lt;/code&gt; eles vÃ£o se referir a objetos diferentes, ou seja, ele considera se a letra Ã© maÃ­uscula ou minÃºscula.&lt;/p&gt;
&lt;p&gt;E se vocÃª criar um objeto, salvar uma informaÃ§Ã£o neste objeto e logo em seguida salvar outra, ele subscreve o que estava anteriormente, entÃ£o tome cuidado para nÃ£o perder informaÃ§Ãµes. O exemplo abaixo mostra exatamente isso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;meu_numero &amp;lt;- 1

meu_numero
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;meu_numero &amp;lt;- 999
meu_numero
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 999
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com a funÃ§Ã£o &lt;code&gt;ls()&lt;/code&gt; vocÃª consegue listar no console todos os objetos criados.&lt;/p&gt;
&lt;p&gt;O que Ã© possÃ­vel fazer com esses objetos no R que vocÃª criou? Muita coisa! Por exemplo: Ã© possÃ­vel usar o objeto vetor e fazer uma operaÃ§Ã£o de divisÃ£o&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor/2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.5 1.0 1.5 2.0 2.5 3.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor - 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0 1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R dividiu por 2 todos os nÃºmeros dentro daquele vetor. Se vocÃª subtrair 1 desse objeto, o R vai subtrair 1 de cada elemento dentro deste objeto.&lt;/p&gt;
&lt;p&gt;Quando vocÃª usa dois ou mais vetores em uma operaÃ§Ã£o, o R alinharÃ¡ os vetores e executarÃ¡ uma sequÃªncia de operaÃ§Ãµes individuais. Por exemplo, quando vocÃª executa vetor * vetor, o R alinha os dois vetores de dados e, em seguida, multiplica o primeiro elemento do vetor 1 pelo primeiro elemento do vetor 2, entÃ£o multiplica o segundo elemento do vetor 1 pelo segundo elemento do vetor 2, e assim por diante, atÃ© que cada elemento tenha sido multiplicado. O resultado serÃ¡ um novo vetor com o mesmo comprimento dos dois primeiros:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor * vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  9 16 25 36
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se vocÃª der ao R uma operaÃ§Ã£o com dois vetores de comprimentos diferentes, o R repetirÃ¡ o vetor mais curto atÃ© que seja do mesmo tamanho do vetor maior e, em seguida, farÃ¡ as contas. Esta nÃ£o Ã© uma mudanÃ§a permanente - o vetor mais curto terÃ¡ seu tamanho original depois que o R fizer as contas. Se o comprimento do vetor curto nÃ£o se dividir igualmente no comprimento do vetor longo, o R retornarÃ¡ uma mensagem de aviso. Esse comportamento Ã© conhecido como &lt;strong&gt;reciclagem&lt;/strong&gt; de vetor e ajuda o R a fazer operaÃ§Ãµes em elementos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor * 1:4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in vetor * 1:4: comprimento do objeto maior nÃ£o Ã© mÃºltiplo do
## comprimento do objeto menor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  9 16  5 12
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor * 1:2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  3  8  5 12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PorÃ©m, Ã© preciso cuidado pois se vocÃª nÃ£o estava querendo &lt;strong&gt;reciclar&lt;/strong&gt;, Ã© possÃ­vel cometer erros. No exemplo abaixo, eu crio um segundo vetor com os valores para multiplicaÃ§Ã£o, mas ele tem tamanho menor que o primeiro. Por isso, Ã© bom ficar atento aos &lt;code&gt;Warning message:&lt;/code&gt;s:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor2 &amp;lt;- c(1, 2, 3, 4, 5)

vetor * vetor2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in vetor * vetor2: comprimento do objeto maior nÃ£o Ã© mÃºltiplo do
## comprimento do objeto menor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  9 16 25  6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;funÃ§Ãµes&#34;&gt;FunÃ§Ãµes&lt;/h3&gt;
&lt;p&gt;O R vem com muitas funÃ§Ãµes instaladas. Praticamente tudo que vocÃª vÃª que nÃ£o sÃ£o &lt;code&gt;objetos&lt;/code&gt; que vocÃª criou sÃ£o funÃ§Ãµes e seus componentes. Por isso, dizemos que, no seu nÃºcleo, o R Ã© uma linguagem &amp;ldquo;funcional&amp;rdquo;. Vejamos alguns exemplos de funÃ§Ãµes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;round(3.1415)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;factorial(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercÃ­cio&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;SÃ³ de olhar para as funÃ§Ãµes e seus resultados, vocÃª conseguÃ­ria dizer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O que cada funÃ§Ã£o faz?&lt;/li&gt;
&lt;li&gt;Quais entradas (inputs) ela pede?&lt;/li&gt;
&lt;li&gt;Qual saÃ­da ela produz (output)?&lt;/li&gt;
&lt;li&gt;Que opÃ§Ãµes alternativas (argumentos) elas poderiam conter?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;argumentos&#34;&gt;Argumentos&lt;/h3&gt;
&lt;p&gt;As informaÃ§Ãµes que sÃ£o colocadas dentro dos &lt;code&gt;()&lt;/code&gt; depois do nome de uma funÃ§Ã£o sÃ£o chamados de &lt;strong&gt;argumentos&lt;/strong&gt;. Em geral, uma funÃ§Ã£o tem alguns argumentos obrigatÃ³rios (o valor a ser arrendodado, o nÃºmero para calcular o fatorial) e argumentos opcionais (arredondar para cima ou para baixo? descartar valores nulos?).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(1:6)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor_com_nulo &amp;lt;- c(1, 2, 3, 4, 5, 6, NA)

mean(vetor_com_nulo)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(vetor_com_nulo, na.rm = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Argumentos obrigatÃ³rios e opcionais tornam as nossas funÃ§Ãµes mais flexÃ­veis. Essa flexibilidade Ã© crucial para muitas operaÃ§Ãµes, pois podemos passar funÃ§Ãµes como argumentos de outras funÃ§Ãµes. Por exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;round(mean(vetor))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quando vocÃª reÃºne as funÃ§Ãµes dessa forma, o R vai avaliar a funÃ§Ã£o de dentro para fora, como uma boneca matrioshka:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resultado &amp;lt;- vetor
resultado
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resultado &amp;lt;- mean(resultado)
resultado
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resultado &amp;lt;- round(resultado)
resultado
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Outro exemplo de argumentos opcionais Ã© a funÃ§Ã£o &lt;code&gt;sample&lt;/code&gt;, que produz amostras aleatÃ³rias:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com os argumentos opcionais, podemos mudar detalhes do processo de amostragem&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1, prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E ao mudar as probabilidades de como cada amostra vai ser selecionada, eu criei um dado viciado!&lt;/p&gt;
&lt;p&gt;VocÃª pode verificar os argumentos de uma funÃ§Ã£o com:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;args(sample)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (x, size, replace = FALSE, prob = NULL) 
## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercÃ­cio-1&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Repita a operaÃ§Ã£o de &lt;code&gt;sample&lt;/code&gt; acima com o dado &amp;ldquo;viciado&amp;rdquo; e com o dado &amp;ldquo;limpo&amp;rdquo; e verifique se vocÃª consegue perceber empiricamente que meu dado estÃ¡ &amp;ldquo;viciado&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Que outros argumentos existem na funÃ§Ã£o &lt;code&gt;sample&lt;/code&gt;? Qual o papel do argumento &lt;code&gt;replace&lt;/code&gt;?&lt;/p&gt;
&lt;h3 id=&#34;sua-primeira-funÃ§Ã£o&#34;&gt;Sua primeira funÃ§Ã£o&lt;/h3&gt;
&lt;p&gt;Ok, mas suponha que vocÃª esteja cansado de repetir as coisas no seu programa. Existe uma operaÃ§Ã£o que vocÃª realiza de novo e novo, e ela Ã© relativamente simples, mas Ã© um tÃ©dio ficar copiando e colando a mesma coisa. Por exemplo, se vocÃª tem o vetor que criamos com seis nÃºmeros, e precisa sortear dois valores e somar seu resultado, como se estivesse jogando dois dados de 6 faces e somando os resultados?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- sample(vetor, size = 1)
y &amp;lt;- sample(vetor, size = 1)
x + y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seu cÃ³digo funciona bem, mas vocÃª quer simplificar isso para uma funÃ§Ã£o que faÃ§a tudo de uma vez, podemos chamar ela de &lt;code&gt;role&lt;/code&gt;, como se fosse &amp;ldquo;role dois dados&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A funÃ§Ã£o &lt;code&gt;role&lt;/code&gt; nÃ£o existe no R base, mas vocÃª mesmo pode construÃ­-la:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role &amp;lt;- function() {
  x &amp;lt;- sample(vetor, size = 1)
  y &amp;lt;- sample(vetor, size = 1)
  x + y
}

role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pause para contemplar os diferentes elementos do construtor de funÃ§Ãµes do R:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;role&lt;/code&gt; Ã© o nome da funÃ§Ã£o, e ele deve ser atribuÃ­do &lt;code&gt;&amp;lt;-&lt;/code&gt; para que vocÃª possa chamar sua funÃ§Ã£o&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt; Ã© uma funÃ§Ã£o que constrÃ³i funÃ§Ãµes, e os argumentos dela que vÃ£o nos parenteses sÃ£o aqueles que o usuÃ¡rio deverÃ¡ digitar. Nesse caso, nenhum argumento Ã© necessÃ¡rio.&lt;/li&gt;
&lt;li&gt;Os &lt;code&gt;{}&lt;/code&gt; indicam o inÃ­cio e o fim do &lt;code&gt;corpo&lt;/code&gt; da funÃ§Ã£o, onde a magia acontece.&lt;/li&gt;
&lt;li&gt;Ao rodar o construtor da funÃ§Ã£o, nada acontece. A funÃ§Ã£o sÃ³ entra em funcionamento na hora que o usuÃ¡rio a utiliza posteriormente &lt;code&gt;role()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;exercÃ­cio-2&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Escreva uma funÃ§Ã£o que role 2 dados de 10 faces e some seus resultados.&lt;/p&gt;
&lt;h3 id=&#34;programas-scripts&#34;&gt;Programas (scripts)&lt;/h3&gt;
&lt;!-- 

N: Eu coloquei o script direto lÃ¡ em cima, pra mim nÃ£o faz muito sentido passar pelo console primeiro, mas nÃ£o sei, o que vocÃª acha?

V: Olha, pra mim depende muito do aluno. Acho que as vezes gente que comeÃ§a a estudar o R nunca para pra pensar na distinÃ§Ã£o entre as duas coisas. Pessoalmente acho Ãºtil porque eu uso o console o tempo todo para testar coisas que eu nÃ£o quero que poluam o script, mas muita gente faz isso no script e depois apaga. Meu ponto aqui Ã© outra coisa, Ã© sÃ³ introduzir pra eles o conceito de programa/script. O que Ã©, o que tem num programa, talvez um ou outro exemplo de um programa. Tipo um programa de importaÃ§Ã£o e tratamento de dados. Um programa que produz uma visualizaÃ§Ã£o. Um programa que gera um modelo estatÃ­stico. Um programa que faz uma tabela, etc.

--&gt;
&lt;p&gt;Na maioria das situaÃ§Ãµes, esses conceitos soltos que introduzimos nÃ£o sÃ£o muito Ãºteis isoladamente. Afinal de contas, objetos, funÃ§Ãµes e nÃºmeros individuais nÃ£o servem para muita coisa. Esses conceitos ganham corpo quando os utilizamos juntos para produzir nossos programas. O que sÃ£o programas? A metÃ¡fora mais comumemente utilizada Ã© a culinÃ¡ria. Um programa Ã© uma sequÃªncia de instruÃ§Ãµes, uma receita para produzir alguma coisa. A diferenÃ§a Ã© que ao invÃ©s de produtos culinÃ¡rios, os ingredientes sÃ£o informaÃ§Ãµes na memÃ³ria de um computador, e ao invÃ©s de um prato, estamos tentando produzir resultados que podem ser analisados: estatÃ­sticas descritivas, representaÃ§Ãµes grÃ¡ficas, modelos matemÃ¡ticos, tabelas, etc.&lt;/p&gt;
&lt;p&gt;Falaremos mais sobre programas e estratÃ©gias de construÃ§Ã£o de programas (se der tempo), em outra aula. Por aqui, seria interessante que vocÃªs levassem adiante a noÃ§Ã£o de que o programa Ã© o conjunto da obra. Ã‰ comum desenvolvermos ou encontrarmos programas para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;importar e corrigir quaisquer problemas nos meus dados&lt;/li&gt;
&lt;li&gt;produzir estatÃ­sticas descritivas a partir de meus dados&lt;/li&gt;
&lt;li&gt;produzir diversos grÃ¡ficos que descrevem meus dados&lt;/li&gt;
&lt;li&gt;produzir tabulaÃ§Ãµes e exportÃ¡-las para outros softwares&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como vÃ¡rios aspectos do R, a flexibilidade aqui Ã© imensa, e vocÃªs sÃ£o livres para definir o &lt;strong&gt;escopo&lt;/strong&gt; dos seus programas. VocÃª vai preferir colocar tudo num programa sÃ³, ou talvez dividÃ­-lo em diversos programas e tarefas menores? Cada abordagem carrega consigo vantagens e desvantagens que vocÃªs terÃ£o que decidir se valem ou nÃ£o a pena.&lt;/p&gt;
&lt;h3 id=&#34;pacotes&#34;&gt;Pacotes&lt;/h3&gt;
&lt;p&gt;VocÃª nÃ£o Ã© a Ãºnica pessoa que escreve suas prÃ³prias funÃ§Ãµes com R. Muitos professores, programadores e estatÃ­sticos usam R para projetar ferramentas que podem ajudar as pessoas a analisar dados. Eles entÃ£o tornam essas ferramentas gratuitas para qualquer pessoa usar. Para usar essas ferramentas, basta baixÃ¡-las. Eles reÃºnem coleÃ§Ãµes prÃ©-montadas de funÃ§Ãµes e objetos chamados pacotes. Veremos o bÃ¡sico aqui.&lt;/p&gt;
&lt;!-- Acho melhor evitar qplot. Vamos usar as funÃ§Ãµes do graphics mesmo para fazer uns grÃ¡ficos simples. Pode deixar o exemplo de baixar o ggplot2, sem problema, mas Ã© melhor a gente produzir os grÃ¡ficos no base mesmo para o pessoal ter uma ideia quando eles encontrarem base graphics por aÃ­. --&gt;
&lt;p&gt;Vamos usar a funÃ§Ã£o qplot para fazer alguns grÃ¡ficos rÃ¡pidos. qplot vem no pacote ggplot2, o pacote popular para fazer grÃ¡ficos. Antes de usar o qplot, ou qualquer outra coisa no pacote ggplot2, vocÃª precisa fazer o download e instalÃ¡-lo.&lt;/p&gt;
&lt;p&gt;Os pacotes do R em geral estÃ£o hospedados em &lt;a href=&#34;http://cran.r-project.org&#34;&gt;http://cran.r-project.org&lt;/a&gt;, o mesmo site de onde vocÃª baixou sua versÃ£o do R. No entanto, vocÃª nÃ£o precisa visitar o site para baixar um pacote R; vocÃª pode baixar pacotes direto da linha de comando do R.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;ggplot2&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ã‰ isso. O R farÃ¡ com que seu computador visite o site, baixe ggplot2 e instale o pacote em seu disco rÃ­gido exatamente onde o R deseja encontrÃ¡-lo. Agora vocÃª tem o pacote ggplot2. Se vocÃª gostaria de instalar outro pacote, substitua ggplot2 pelo nome do seu pacote no cÃ³digo.&lt;/p&gt;
&lt;h3 id=&#34;ajuda&#34;&gt;Ajuda&lt;/h3&gt;
&lt;h4 id=&#34;no-r&#34;&gt;No R&lt;/h4&gt;
&lt;p&gt;Existem mais de 1.000 funÃ§Ãµes no nÃºcleo do R e novas funÃ§Ãµes sÃ£o criadas o tempo todo. Isso pode ser muito material para memorizar e aprender! Felizmente, cada funÃ§Ã£o R vem com sua prÃ³pria pÃ¡gina de ajuda, que vocÃª pode acessar digitando o nome da funÃ§Ã£o apÃ³s um ponto de interrogaÃ§Ã£o. Por exemplo, cada um desses comandos abrirÃ¡ uma pÃ¡gina de ajuda. Procure as pÃ¡ginas que aparecem na guia Ajuda do painel inferior direito do RStudio:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?sqrt
?log10
?sample
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As pÃ¡ginas de ajuda contem informaÃ§Ãµes Ãºteis sobre o que cada funÃ§Ã£o faz. Essas pÃ¡ginas de ajuda tambÃ©m servem como documentaÃ§Ã£o de cÃ³digo, portanto, pode ser algo um pouco chato. Muitas vezes parecem ter sido escritas para pessoas que jÃ¡ entendem a funÃ§Ã£o e nÃ£o precisam de ajuda. NÃ£o deixe que isso te faÃ§a desistir de entender uma funÃ§Ã£o que vocÃª queira usar - vocÃª pode ganhar muito com uma pÃ¡gina de ajuda examinando-a em busca de informaÃ§Ãµes que faÃ§am sentido e ignorando o resto. Essa tÃ©cnica inevitavelmente o levarÃ¡ Ã  parte mais Ãºtil de cada pÃ¡gina de ajuda: a parte inferior. Aqui, quase todas as pÃ¡ginas de ajuda incluem algum cÃ³digo de exemplo que coloca a funÃ§Ã£o em aÃ§Ã£o. Executar esse cÃ³digo Ã© uma Ã³tima maneira de aprender com o exemplo dado.&lt;/p&gt;
&lt;p&gt;Se vocÃª gostaria de consultar a pÃ¡gina de ajuda de uma funÃ§Ã£o, mas esqueceu o nome da funÃ§Ã£o, vocÃª pode pesquisar por palavra-chave. Para fazer isso, digite dois pontos de interrogaÃ§Ã£o seguidos por uma palavra-chave na linha de comando de R, o R exibirÃ¡ uma lista de links para pÃ¡ginas de ajuda relacionadas Ã  palavra-chave. VocÃª pode pensar nisso como a pÃ¡gina de ajuda para a pÃ¡gina de ajuda:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;??log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Muitos pacotes tambÃ©m incluem &lt;strong&gt;vinhetas&lt;/strong&gt;, que sÃ£o pequenas aulinhas que resumem as principais funÃ§Ãµes de um pacote atravÃ©s de explicaÃ§Ãµes de uso detalhados. VocÃª pode ver as vinhetas disponÃ­veis num pacote instalado assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vignette(package = &amp;quot;ggplot2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E a vinheta em si Ã© acessada assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vignette(&amp;quot;ggplot2-specs&amp;quot;, package = &amp;quot;ggplot2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Que deve abrir a vinheta na sua seÃ§Ã£o &amp;ldquo;Help&amp;rdquo; do RStudio. A maioria dessas vinhetas tambÃ©m estÃ¡ disponÃ­vel online numa consulta rÃ¡pida ao Google.&lt;/p&gt;
&lt;h4 id=&#34;online&#34;&gt;Online&lt;/h4&gt;
&lt;p&gt;Em geral, apÃ³s uma consulta a pÃ¡gina de ajuda, pode ser que vocÃª nÃ£o esteja satisfeito. VocÃª pode complementar sua pÃ¡gina de ajuda com diversos recursos online. Vamos deixar alguns links abaixo que utilizamos cotidianamente.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google&lt;/a&gt;: em geral, uma pesquisa com &amp;ldquo;r &amp;lt;funÃ§Ã£o&amp;gt;&amp;rdquo; ou &amp;ldquo;r &amp;lt;pacote&amp;gt;&amp;rdquo; te leva para onde vocÃª quer ir.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stack Overflow&lt;/a&gt;: similar, mas no stackoverflow se usam &lt;code&gt;[tags]&lt;/code&gt;, entÃ£o seria algo como &lt;code&gt;[r][pacote] sua pergunta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.rstudio.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Community&lt;/a&gt;: mais pra perguntas relacionadas ao RStudio&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-br.2285057.n4.nabble.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lista R-Br&lt;/a&gt;: lista ativa e em portuguÃªs, em geral, o pessoal Ã© prestativo.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/rstudiotips&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Tips - Twitter&lt;/a&gt;: dicas no twitter para ir melhorando no cotidiano.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;exercÃ­cio-3&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Consulte a ajuda das funÃ§Ãµes &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt;. Porque todas elas tem o argumento &lt;code&gt;na.rm&lt;/code&gt;? O que argumento o &lt;code&gt;trim&lt;/code&gt; em &lt;code&gt;mean&lt;/code&gt; faz? Qual a melhor maneira de rapidamente entender o que uma funÃ§Ã£o faz atravÃ©s da pÃ¡gina de ajuda?&lt;/p&gt;
&lt;h2 id=&#34;objetos-em-r&#34;&gt;Objetos em R&lt;/h2&gt;
&lt;h3 id=&#34;vetores&#34;&gt;Vetores&lt;/h3&gt;
&lt;p&gt;JÃ¡ trabalhamos com alguns vetores lÃ¡ em cima, Ã© inevitÃ¡vel. Pensou em salvar um objeto na memÃ³ria do computador no R, pensou em vetor. Pra ser preciso, estamos usando &lt;strong&gt;vetores atÃ´micos&lt;/strong&gt;. Os vetores atÃ´micos sÃ£o em geral o objeto mais frequentemente usado em R. Para construir um, vocÃª utiliza a funÃ§Ã£o &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor &amp;lt;- c(1, 2, 3, 4, 5, 6)
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E vocÃª pode verificar se ele Ã© um vetor mesmo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.vector(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;is.vector&lt;/code&gt; testa se o objeto Ã© um vetor, e retorna &lt;code&gt;TRUE&lt;/code&gt; se sim, e &lt;code&gt;FALSE&lt;/code&gt; se nÃ£o.&lt;/p&gt;
&lt;h4 id=&#34;exercÃ­cio-4&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Teste se &lt;code&gt;vetor2&lt;/code&gt;, criado anteriormente Ã© um vetor. Crie um vetor com os nomes de cinco pessoas da sala.&lt;/p&gt;
&lt;h4 id=&#34;tamanho&#34;&gt;Tamanho&lt;/h4&gt;
&lt;p&gt;Ao contrÃ¡rio de outras linguagens, o R nÃ£o diferencia entre escalares e vetores. Se vocÃª salvar sÃ³ 1 valor, ele salva num vetor atÃ´mico de tamanho 1.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- 1
is.vector(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vetores atÃ´micos guardam suas informaÃ§Ãµes em uma Ãºnica dimensÃ£o (como se fosse uma caixinha de pÃ­lulas semanal), cada compartimento guarda um valor. E todos os valores tem que ser do mesmo tipo! NÃºmeros com nÃºmeros, caracteres com caracteres. NÃ£o pode misturar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiro &amp;lt;- 1L
double &amp;lt;- 1
texto &amp;lt;- &amp;quot;um&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou com mais de um valor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros &amp;lt;- c(1L, 2L)
doubles &amp;lt;- c(1, 2)
textos &amp;lt;- c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esses tipos de vetores sÃ£o importantes pois eles interagem com as funÃ§Ãµes de maneira lÃ³gica:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(doubles)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(textos)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in sum(textos): &#39;type&#39; invÃ¡lido (character) do argumento
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja a mensagem de erro ao tentar somar os textos.&lt;/p&gt;
&lt;h4 id=&#34;exercÃ­cio-5&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Considerando os dois vetores abaixo, calcule as suas mÃ©dias. Porque nÃ£o Ã© possÃ­vel calcular a mÃ©dia do segundo vetor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;idade1 &amp;lt;- c(20, 25, 30, 35, 40, 45, 50)
idade2 &amp;lt;- c(&amp;quot;20&amp;quot;, &amp;quot;25&amp;quot;, &amp;quot;30&amp;quot;, &amp;quot;35&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;45&amp;quot;, &amp;quot;50&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;tipos&#34;&gt;Tipos&lt;/h4&gt;
&lt;p&gt;Vetores atÃ´micos podem ser de 6 tipos, dois sÃ£o mais utilizados.&lt;/p&gt;
&lt;h4 id=&#34;nÃºmeros-reais&#34;&gt;NÃºmeros reais&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A funÃ§Ã£o &lt;code&gt;typeof&lt;/code&gt; me diz qual o tipo de um vetor atÃ´mico.&lt;/p&gt;
&lt;h4 id=&#34;nÃºmeros-inteiros&#34;&gt;NÃºmeros inteiros&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O padrÃ£o do R Ã© aceitar nÃºmeros reais, se vocÃª nÃ£o especificar. Para forÃ§ar nÃºmeros inteiros, Ã© precisar utilizar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros &amp;lt;- c(1, 2)

typeof(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros &amp;lt;- c(1L, 2L)

typeof(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essas diferenÃ§as em geral sÃ£o inconsequentes, mas existem alguns casos, como resultados de divisÃ£o e raÃ­z quadrada, em que podemos encontrar resultados curiosos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sqrt(2)^2 - 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.440892e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em teoria, a operaÃ§Ã£o acima deveria ser 0, mas como o computador tem uma quantidade limitada de memÃ³ria para armazenar as casas decimais, ele acaba gerando uma &amp;ldquo;sobrinha&amp;rdquo; infinitesimal da raÃ­z quadrada de dois.&lt;/p&gt;
&lt;h5 id=&#34;caracteres&#34;&gt;Caracteres&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;texto &amp;lt;- c(&amp;quot;Bem&amp;quot;, &amp;quot;Vindos&amp;quot;)

texto
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Bem&amp;quot;    &amp;quot;Vindos&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(texto)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;exercÃ­cio-6&#34;&gt;ExercÃ­cio&lt;/h6&gt;
&lt;p&gt;Qual a diferenÃ§a entre: 1, &amp;ldquo;1&amp;rdquo;, &amp;ldquo;one&amp;rdquo; no R? Quais sÃ£o nÃºmeros e quais sÃ£o caracteres?&lt;/p&gt;
&lt;h5 id=&#34;lÃ³gicos&#34;&gt;LÃ³gicos&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3 &amp;lt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3 &amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;logico &amp;lt;- c(TRUE, FALSE)

logico
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(logico)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;logical&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vetores lÃ³gicos sÃ£o a base de vÃ¡rias operaÃ§Ãµes Ãºteis no R e vamos voltar a eles em diversos momentos.&lt;/p&gt;
&lt;p&gt;Complexos e crus:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;comp &amp;lt;- c(1 + 1i, 1 + 2i, 1 + 3i)
comp
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1+1i 1+2i 1+3i
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(comp)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;complex&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;raw(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 00 00 00
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(raw(3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;raw&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vetores complexos servem para armazenar nÃºmero complexos, enquanto vetores crus servem para armazenar os valores em bits de uma informaÃ§Ã£o. Ambos sÃ£o menos utilizados na anÃ¡lise de dados e eu os introduzo apenas para vocÃªs saberem que eles existem.&lt;/p&gt;
&lt;h3 id=&#34;atributos&#34;&gt;Atributos&lt;/h3&gt;
&lt;p&gt;Atributos sÃ£o informaÃ§Ãµes adicionais que podemos colocar em um objeto para cumprir uma sÃ©rie de tarefas auxiliares. Pense, por exemplo, em dar nomes para os meses do ano, ou classificar um objeto de acordo com seu tipo. Atributos sÃ£o &lt;strong&gt;metadados&lt;/strong&gt; ou dados sobre os dados, e eles nos interessam porque o R pode aproveitar os atributos de um objeto para realizar tarefas especÃ­ficas.&lt;/p&gt;
&lt;p&gt;VocÃª pode ver os atributos de um objeto assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O nosso vetor nÃ£o tem nenhum atributo ainda, por isso &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O atributo mais comum que os objetos podem ter em R sÃ£o nomes. Podemos ver o atributo nomes assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Novamente, &lt;code&gt;NULL&lt;/code&gt; indica que o vetor nÃ£o tem nomes.&lt;/p&gt;
&lt;p&gt;A maioria das funÃ§Ãµes que trabalham com atributos vai ter esses &amp;ldquo;dois empregos&amp;rdquo;. De um lado, vocÃª pode utilizÃ¡-las para obter (get) os atributos, de outro, vocÃª pode utilizÃ¡-las para modificar (set) os atributos, veja:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor) &amp;lt;- c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;, &amp;quot;five&amp;quot;, &amp;quot;six&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora, veja como ficaram os resultados das duas funÃ§Ãµes anteriores.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $names
## [1] &amp;quot;one&amp;quot;   &amp;quot;two&amp;quot;   &amp;quot;three&amp;quot; &amp;quot;four&amp;quot;  &amp;quot;five&amp;quot;  &amp;quot;six&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;one&amp;quot;   &amp;quot;two&amp;quot;   &amp;quot;three&amp;quot; &amp;quot;four&amp;quot;  &amp;quot;five&amp;quot;  &amp;quot;six&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R tambÃ©m vai mostrar o atributo nomes quando vocÃª chamar o vetor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   one   two three  four  five   six 
##     1     2     3     4     5     6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Da mesma forma que vocÃª modificou os atributos antes, vocÃª pode modificÃ¡-los ou removÃª-los:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor) &amp;lt;- c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;trÃªs&amp;quot;, &amp;quot;quatro&amp;quot;, &amp;quot;cinco&amp;quot;, &amp;quot;seis&amp;quot;)
names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;um&amp;quot;     &amp;quot;dois&amp;quot;   &amp;quot;trÃªs&amp;quot;   &amp;quot;quatro&amp;quot; &amp;quot;cinco&amp;quot;  &amp;quot;seis&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor) &amp;lt;- NULL
names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O outro atributo importante para muitas tarefas sÃ£o as dimensÃµes de um objeto. Lembre que os nossos vetores atÃ´micos sÃ£o limitados pela exigÃªncia de sÃ³ ter uma dimensÃ£o, mas e se quisermos organizar nossos dados em vÃ¡rias dimensÃµes? Um jeito possÃ­vel Ã© alterar as dimensÃµes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# 2 linhas e 3 colunas
dim(vetor) &amp;lt;- c(2, 3)

vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    3    5
## [2,]    2    4    6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# 3 linhas e 2 colunas

dim(vetor) &amp;lt;- c(3, 2)

vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    4
## [2,]    2    5
## [3,]    3    6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E nÃ£o precisa se limitar a objetos bidimensionais. VocÃª pode passar n dimensÃµes para o objeto e o R distribuirÃ¡ os valores do seu vetor no nÃºmero de dimensÃµes necessÃ¡rios. O Ãºnico detalhe importante Ã© vocÃª reparar que o R tem uma certa preferÃªncia de ir preenchendo os valores da coluna antes dos valores da linha e se vocÃª quiser fazer isso de forma diferente, Ã© melhor utilizar as funÃ§Ãµes &lt;code&gt;matrix&lt;/code&gt; ou &lt;code&gt;array&lt;/code&gt;, que veremos adiante.&lt;/p&gt;
&lt;h4 id=&#34;exercÃ­cio-7&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Usando seus conhecimentos sobre atributos, construa uma pequena matriz com o nome de 5 pessoas da turma e seu sexo.&lt;/p&gt;
&lt;h3 id=&#34;matrizes&#34;&gt;Matrizes&lt;/h3&gt;
&lt;p&gt;Matrizes sÃ£o muito parecidas com o que acabamos de construir: elas guardam informaÃ§Ãµes em um &lt;code&gt;array&lt;/code&gt; de duas dimensÃµes. A grande diferenÃ§a Ã© que as matrizes sÃ£o programadas para executar as operaÃ§Ãµes matemÃ¡ticas com matrizes de acordo com os princÃ­pios e convenÃ§Ãµes da Ã¡lgebra linear. Portanto, o R vem com funÃ§Ãµes para transpor, inverter, solucionar, etc. matrizes. VocÃª pode construir matrizes no R com:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- matrix(vetor, nrow = 2)
m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    3    5
## [2,]    2    4    6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou, se vocÃª quiser mudar a ordem de preenchimento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m2 &amp;lt;- matrix(vetor, nrow = 2, byrow = TRUE)
m2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para mais informaÃ§Ãµes, consulte &lt;code&gt;?matrix&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;exercÃ­cio-8&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Reconstrua a sua matriz original usando a funÃ§Ã£o &lt;code&gt;matrix&lt;/code&gt; ao invÃ©s de alterar os atributos. E os nomes das colunas?&lt;/p&gt;
&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;
&lt;p&gt;O array Ã© uma extensÃ£o da ideia de matriz para quantas dimensÃµes vocÃª quiser, ou n-dimensÃµes. 3, 4, 5, 10 dimensÃµes, isso Ã© com vocÃª. Na prÃ¡tica os arrays nÃ£o sÃ£o muito frequentes na anÃ¡lise de dados, mas eles existem se vocÃª precisar deles um dia:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a &amp;lt;- array(c(11:14, 21:24, 31:34), dim = c(2, 2, 3))
a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## , , 1
## 
##      [,1] [,2]
## [1,]   11   13
## [2,]   12   14
## 
## , , 2
## 
##      [,1] [,2]
## [1,]   21   23
## [2,]   22   24
## 
## , , 3
## 
##      [,1] [,2]
## [1,]   31   33
## [2,]   32   34
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O display de um array multidimensional Ã© meio confuso, porque o R vai te mostrar as &amp;ldquo;fatias&amp;rdquo; do array. Quanto mais dimensÃµes, mais fatias. Boa sorte se vocÃª precisar deles um dia!&lt;/p&gt;
&lt;h3 id=&#34;classe&#34;&gt;Classe&lt;/h3&gt;
&lt;p&gt;A classe de um objeto Ã© um atributo importante para seu funcionamento no R, porque diferentes classes estÃ£o associadas a diferentes mÃ©todos! Pense, por exemplo, que vocÃª deseja organizar uma sequÃªncia de valores em um vetor. Se esses valores sÃ£o nÃºmeros, a ordem crescente ou decrescente Ã© bastante intuitiva. Se sÃ£o textos, podemos usar a ordem alfabÃ©tica. Mas e se forem meses do ano? Grupos etÃ¡rios? Categorias educacionais?&lt;/p&gt;
&lt;p&gt;Problemas dessa natureza sÃ£o resolvidos no R atravÃ©s da atribuiÃ§Ã£o de classes aos objetos. TransposiÃ§Ã£o e soluÃ§Ã£o de matrizes utilizarÃ£o o atributo classe para saber se aquele objeto Ã© uma matriz, para citar apenas um exemplo. Podemos descobrir a classe de um objeto assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;matrix&amp;quot; &amp;quot;array&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas esse Ã© o nosso vetor modificado. Vejamos o que acontece se retiramos o atributo &lt;code&gt;dim&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(vetor) &amp;lt;- NULL
class(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que nÃ£o mudamos o tipo do vetor, ele continua sendo &amp;ldquo;double&amp;rdquo;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas sua classe mudou. Podemos mudar a classe de um objeto de maneira arbitrÃ¡ria, mas em geral a gente evita fazer isso, porque esse atributo estÃ¡ muito relacionado com as propriedades desse objeto. Veja dois exemplos do que ocorre ao alterar manualmente a classe de um objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;agora &amp;lt;- Sys.time()
agora
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2021-06-14 12:51:59 -03&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(agora)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(agora)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;POSIXct&amp;quot; &amp;quot;POSIXt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nesse primeiro exemplo, usando &lt;code&gt;Sys.time&lt;/code&gt; para obter o horÃ¡rio local. O tipo dessa informaÃ§Ã£o Ã© &amp;ldquo;double&amp;rdquo;, pois o R armazena variÃ¡veis tempo como o nÃºmero de segundos passados entre uma data de inÃ­cio arbitrÃ¡ria e o momento que o seu tempo representa. Mas a classe desse objeto Ã© POSIXct e POSIXt, que sÃ£o as classes do R para lidar com objetos que registram data e tempo.&lt;/p&gt;
&lt;p&gt;Veja o que acontece se eu temporariamente remover a classe desse objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unclass(agora)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1623685919
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R transformou meu objeto data/tempo em um nÃºmero. O que ocorre Ã© que quando meu objeto tem as classes adequadas, isso alerta o R para que ele trate esse objeto de forma diferente. As funÃ§Ãµes do R utilizarÃ£o mÃ©todos de &lt;code&gt;print&lt;/code&gt; para facilitar a visualizaÃ§Ã£o de objetos data/tempo, mas, por debaixo do capÃ´, preservarÃ£o suas caracterÃ­sticas computacionais numÃ©ricas. VocÃª pode, por exemplo, somar 24h ao seu objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;agora + (24 * 60 * 60)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2021-06-15 12:51:59 -03&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;VocÃª tambÃ©m pode, se assim desejar, transformar um valor numÃ©rico arbitrÃ¡rio numa data (sÃ³ demonstraÃ§Ã£o, nÃ£o vale a pena fazer isso) atribuindo uma classe para ele:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;objeto &amp;lt;- 1000000000
class(objeto) &amp;lt;- c(&amp;quot;POSIXct&amp;quot;, &amp;quot;POSIXt&amp;quot;)

objeto
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2001-09-08 22:46:40 -03&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercÃ­cio-9&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Experimente brincar com o valor de objeto e ver&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qual Ã© a data de referÃªncia do R para calcular tempos?&lt;/li&gt;
&lt;li&gt;O que acontece se o valor for negativo?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O segundo exemplo relevante sÃ£o os fatores. Fatores sÃ£o a classe utilizada pelo R para trabalhar com variÃ¡veis categÃ³ricas, ou informaÃ§Ã£o qualitativa. Um fator sÃ³ pode ter alguns valores prÃ©-definidos pelo usuÃ¡rio. Pense, por exemplo, nas categorias de sexo ou raÃ§a que o IBGE utiliza em suas pesquisas amostrais. HÃ¡ um pequeno nÃºmero prÃ©-definido de categorias. Para construir um fator, vocÃª pode fazer o seguinte:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;genero &amp;lt;- factor(c(&amp;quot;homem&amp;quot;, &amp;quot;mulher&amp;quot;, &amp;quot;mulher&amp;quot;, &amp;quot;homem&amp;quot;))

typeof(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $levels
## [1] &amp;quot;homem&amp;quot;  &amp;quot;mulher&amp;quot;
## 
## $class
## [1] &amp;quot;factor&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fatores seguem aquela linha que descrevemos para datas. R guarda os valores do seu fator utilizando nÃºmeros simples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unclass(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 2 1
## attr(,&amp;quot;levels&amp;quot;)
## [1] &amp;quot;homem&amp;quot;  &amp;quot;mulher&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas na hora que vocÃª utiliza esse fator, o software apresenta para vocÃª os rÃ³tulos das categorias.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;genero
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] homem  mulher mulher homem 
## Levels: homem mulher
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AtravÃ©s do atributo &lt;code&gt;levels&lt;/code&gt;, o R estÃ¡ associando cada valor numÃ©rico com um rÃ³tulo, e no momento em que vocÃª procurar construir uma tabela ou trabalhar com esses fatores de qualquer maneira, o software utilizarÃ¡ o atributo classe para dar-lhe o tratamento adequado. Por exemplo, se eu tentar transformar os vetores a seguir em caractere, o R saberÃ¡ distinguir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;as.character(c(1, 2, 2, 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;as.character(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;homem&amp;quot;  &amp;quot;mulher&amp;quot; &amp;quot;mulher&amp;quot; &amp;quot;homem&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O uso da funÃ§Ã£o &lt;code&gt;as.character&lt;/code&gt; Ã© um gancho perfeito para o prÃ³ximo assunto. Mas antes:&lt;/p&gt;
&lt;h4 id=&#34;exercÃ­cio-10&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Construa um fator a partir do vetor a seguir que registre os meses do ano. Dica: utilize o argumento &lt;code&gt;levels&lt;/code&gt; da funÃ§Ã£o &lt;code&gt;factor&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;f &amp;lt;- c(1, 3, 9, 4, 11, 2, 6, 6, 3, 2, 9, 11, 12, 12, 1, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;coerÃ§Ã£o&#34;&gt;CoerÃ§Ã£o&lt;/h3&gt;
&lt;p&gt;CoerÃ§Ã£o Ã© o comportamento da linguagem R ao encontrar situaÃ§Ãµes em que diferentes tipos de dados estÃ£o misturados em um mesmo vetor atÃ´mico. Lembrem que cada vetor atÃ´mico sÃ³ pode armazenar 1 tipo de informaÃ§Ã£o, portanto, ao tentar inserir uma informaÃ§Ã£o de outro tipo, R devolverÃ¡:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;um erro, indicando que a operaÃ§Ã£o Ã© impossÃ­vel, OU&lt;/li&gt;
&lt;li&gt;a operaÃ§Ã£o serÃ¡ realizada, porÃ©m, o tipo da informaÃ§Ã£o serÃ¡ modificado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No segundo caso, o R aplica uma coerÃ§Ã£o na tentativa de preservar ao mÃ¡ximo as informaÃ§Ãµes. Veja exemplos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 0, 1, TRUE, FALSE)
v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1 1 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 2, 3, &amp;quot;4&amp;quot;)
v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(TRUE, FALSE, &amp;quot;TRUE&amp;quot;)
v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;TRUE&amp;quot;  &amp;quot;FALSE&amp;quot; &amp;quot;TRUE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R vai tentar transformar o tipo de dados mais especÃ­fico num tipo de dado mais geral, assim, evitando que a informaÃ§Ã£o seja perdida.&lt;/p&gt;
&lt;p&gt;Em outros casos, o processo de coerÃ§Ã£o pode ser iniciado pelo prÃ³prio usuÃ¡rio, porque este deseja transformar um tipo de dado em outro:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 0, 1, TRUE, FALSE)
as.logical(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE  TRUE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 2, 3, &amp;quot;4&amp;quot;)
as.numeric(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(TRUE, FALSE, &amp;quot;TRUE&amp;quot;)
as.logical(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existem funÃ§Ãµes &lt;code&gt;as.____&lt;/code&gt; para todos os tipos de dados e classes mais comuns do R, e Ã© praxe que autores de novos pacotes que trazem classes tambÃ©m incluam seus prÃ³prios mÃ©todos de coerÃ§Ã£o para suas novas classes.&lt;/p&gt;
&lt;h4 id=&#34;exercÃ­cio-11&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Porque o R prefere coagir vetores lÃ³gicos mistos para nÃºmeros e vetores numÃ©ricos e lÃ³gicos para caractere?&lt;/p&gt;
&lt;h3 id=&#34;listas&#34;&gt;Listas&lt;/h3&gt;
&lt;p&gt;AtÃ© esse momento, trabalhamos com variaÃ§Ãµes no vetor atÃ´mico. O vetor atÃ´mico tem uma limitaÃ§Ã£o repetidamente discutida: ele sÃ³ armazena um tipo de dado. Bancos de dados reais certamente armazenarÃ£o informaÃ§Ãµes de vÃ¡rios tipos distintos, entÃ£o precisamos de uma estrutura de dado que tenha a capacidade de guardar estas informaÃ§Ãµes dÃ­spares. Ã‰ aÃ­ que entram as listas.&lt;/p&gt;
&lt;p&gt;Listas sÃ£o como vetores atÃ´micos, mas elas nÃ£o guardam valores! Listas guardam OBJETOS R. Qualquer um. Vetores atÃ´micos? Sim. FunÃ§Ãµes? Sim. Outras listas? Pode tambÃ©m. Para criar listas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;list1 &amp;lt;- list(100:130, &amp;quot;R&amp;quot;, list(TRUE, FALSE))
list1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
##  [1] 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118
## [20] 119 120 121 122 123 124 125 126 127 128 129 130
## 
## [[2]]
## [1] &amp;quot;R&amp;quot;
## 
## [[3]]
## [[3]][[1]]
## [1] TRUE
## 
## [[3]][[2]]
## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note como cada elemento da lista Ã© um objeto R diferente. A lista nÃ£o julga, ela apenas armazena seus objetos. Um detalhe interessante e que serÃ¡ importante mais tarde: note como a saÃ­da do R diferencia [1] de [[1]] no Ã­ndice dos elementos da lista. Isso Ã© necessÃ¡rio porque a lista pode guardar muitas coisas dentro de si, e o usuÃ¡rio precisa ter a capacidade de recuperar essas informaÃ§Ãµes que estÃ£o lÃ¡ nas profundezas da lista. Falaremos um pouco mais sobre isso na aula de amanhÃ£, quando discutirmos indexaÃ§Ã£o.&lt;/p&gt;
&lt;h4 id=&#34;exercÃ­cio-12&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Crie uma lista de compras em que cada elemento da lista seja um vetor atÃ´mico de itens que vocÃª vai comprar de cada seÃ§Ã£o do supermercado. Para simplificar, utilize as seÃ§Ãµes: &amp;ldquo;limpeza&amp;rdquo;, &amp;ldquo;mercearia&amp;rdquo; e &amp;ldquo;hortifruti&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;data-frames&#34;&gt;Data Frames&lt;/h3&gt;
&lt;p&gt;Data frames sÃ£o o formato de dados mais popular em anÃ¡lise de dados, e por um bom motivo: eles combinam a flexibilidade necessÃ¡ria para armazenar diversos tipos de informaÃ§Ãµes diferentes com a consistÃªncia das matrizes e dos vetores. Por trÃ¡s da cortina, eles sÃ£o listas com restriÃ§Ãµes: todos os elementos da lista devem ter o mesmo comprimento, isso garante a retangularidade da nossa informaÃ§Ã£o.&lt;/p&gt;
&lt;p&gt;Essa retangularidade Ã© importante do ponto de vista analÃ­tico: o data frame deve conter uma observaÃ§Ã£o para cada unidade de anÃ¡lise e uma coluna para cada informaÃ§Ã£o ou variÃ¡vel que foi coletada sobre essa unidade de anÃ¡lise. Se, de alguma forma esta informaÃ§Ã£o nÃ£o estÃ¡ disponÃ­vel, isso deverÃ¡ ficar &lt;strong&gt;explÃ­cito&lt;/strong&gt; por uma cÃ©lula com valor desconhecido.&lt;/p&gt;
&lt;p&gt;No R, embora isso nÃ£o seja tÃ£o comum, vocÃª pode construir data frames manualmente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(x = c(1, 2, 3, 4, 5),
                 y = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;),
                 z = c(TRUE, FALSE, TRUE, TRUE, FALSE))
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   x y     z
## 1 1 a  TRUE
## 2 2 b FALSE
## 3 3 c  TRUE
## 4 4 d  TRUE
## 5 5 e FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Logo de cara, vemos que o &lt;code&gt;data.frame&lt;/code&gt; do R tem aquela cara de tabela com a qual estamos acostumados. Podemos ver como o &lt;code&gt;data.frame&lt;/code&gt; Ã© construÃ­do observado alguns de seus atributos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $names
## [1] &amp;quot;x&amp;quot; &amp;quot;y&amp;quot; &amp;quot;z&amp;quot;
## 
## $class
## [1] &amp;quot;data.frame&amp;quot;
## 
## $row.names
## [1] 1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Secretamente, o data.frame Ã© uma lista, com nomes, um atributo menos importante, chamado &lt;code&gt;row.names&lt;/code&gt;, e algumas caracterÃ­sticas como aquelas que mencionamos acima. O &lt;code&gt;data.frame&lt;/code&gt; e o &lt;code&gt;vetor&lt;/code&gt; sÃ£o as principais ferramentas no cotidiano do analista e, portanto, sÃ£o as que mais vamos utilizar daqui pra frente. Outra funÃ§Ã£o Ãºtil Ã© a e&lt;code&gt;str&lt;/code&gt;utura de uma lista ou data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:	5 obs. of  3 variables:
##  $ x: num  1 2 3 4 5
##  $ y: chr  &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot; &amp;quot;d&amp;quot; ...
##  $ z: logi  TRUE FALSE TRUE TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ela oferece uma visÃ£o geral do data.frame, e Ã© especialmente Ãºtil quando seu data.frame Ã© grande e contÃ©m muitas variÃ¡veis.&lt;/p&gt;
&lt;p&gt;Em geral, a digitaÃ§Ã£o de data sets no R nÃ£o Ã© recomendada. A interface do programa nÃ£o te ajuda a produzir dados no formato necessÃ¡rio. Ã‰ provÃ¡vel que vocÃª cometa muitos erros no caminho e nÃ£o hÃ¡ uma ferramenta muito completa dentro do software que facilite esse processo. Isso ocorre porque o R nÃ£o Ã© um software de produÃ§Ã£o ou tabulaÃ§Ã£o de dados, como o Microsoft Excel, o OpenOffice Calc ou o IBM SPSS, mas sim um software de anÃ¡lise de dados. O mais comum Ã© vocÃª importar um banco de dados pronto e previamente tabulado utilizando uma das funÃ§Ãµes do R, como no exemplo abaixo, em que importamos uma pequena amostra da PNAD ContÃ­nua do primeiro trimestre diretamente um link na internet.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;url &amp;lt;- &amp;quot;https://raw.githubusercontent.com/laddem/site/master/amostra_pnad.csv&amp;quot;
df &amp;lt;- read.csv(url)
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre               UF  V1022  V2007 V2009  V2010 VD2003
## 1 2021         1            CearÃ¡ Urbana  Homem    80 Branca      2
## 2 2021         1 Distrito Federal Urbana Mulher    19  Parda      4
## 3 2021         1       Pernambuco Urbana Mulher    36  Preta      2
## 4 2021         1   Santa Catarina Urbana  Homem    50  Parda      2
## 5 2021         1        SÃ£o Paulo Urbana Mulher    43  Parda      3
## 6 2021         1            GoiÃ¡s Urbana  Homem    35  Parda      3
##                      VD3005 VD4016
## 1 16 anos ou mais de estudo     NA
## 2         11 anos de estudo     NA
## 3         12 anos de estudo   1045
## 4          5 anos de estudo   1500
## 5          9 anos de estudo   1600
## 6         14 anos de estudo   3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veremos mais sobre importaÃ§Ã£o na aula de amanhÃ£!&lt;/p&gt;
&lt;h4 id=&#34;exercÃ­cio-13&#34;&gt;ExercÃ­cio&lt;/h4&gt;
&lt;p&gt;Crie um data frame contendo informaÃ§Ãµes de cinco colegas de turma: registre o nome, a idade presumida, o sexo, a profissÃ£o e a renda presumida. NÃ£o precisa perguntar, basta chutar um valor que vocÃª ache.&lt;/p&gt;
&lt;h3 id=&#34;fÃ³rmulas&#34;&gt;FÃ³rmulas&lt;/h3&gt;
&lt;p&gt;FÃ³rmulas sÃ£o a maneira que os desenvolvedores do R encontraram para representar equaÃ§Ãµes matemÃ¡ticas. PorÃ©m, como tudo no software livre, elas foram apropriadas por desenvolvedores para muitas tarefas criativas e vocÃªs irÃ£o encontrÃ¡-las por aÃ­ cumprindo diversos papÃ©is. Vejamos alguns exemplos.&lt;/p&gt;
&lt;p&gt;FÃ³rmulas sÃ£o usadas para especificar as equaÃ§Ãµes de modelos matemÃ¡ticos no R:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modelo_linear &amp;lt;- lm(VD4016 ~ VD3005, data = df)
summary(modelo_linear)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = VD4016 ~ VD3005, data = df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3786.1  -744.7  -345.1   382.7 15013.9 
## 
## Coefficients:
##                                                Estimate Std. Error t value
## (Intercept)                                       682.5      946.1   0.721
## VD300510 anos de estudo                           467.5     1221.4   0.383
## VD300511 anos de estudo                           434.8     1064.8   0.408
## VD300512 anos de estudo                           905.3      960.2   0.943
## VD300513 anos de estudo                          1584.8     1104.8   1.434
## VD300514 anos de estudo                          1497.5     1119.4   1.338
## VD300515 anos de estudo                          1525.8     1092.5   1.397
## VD300516 anos ou mais de estudo                  3303.6      970.1   3.406
## VD30052 anos de estudo                            217.5     1445.2   0.150
## VD30053 anos de estudo                            261.5     1269.3   0.206
## VD30054 anos de estudo                            727.8     1119.4   0.650
## VD30055 anos de estudo                            649.5     1019.0   0.637
## VD30056 anos de estudo                            610.5     1064.8   0.573
## VD30057 anos de estudo                           -163.7     1158.7  -0.141
## VD30058 anos de estudo                            990.8     1064.8   0.931
## VD30059 anos de estudo                            762.6     1007.2   0.757
## VD3005Sem instruÃ§Ã£o e menos de 1 ano de estudo    131.8     1186.0   0.111
##                                                Pr(&amp;gt;|t|)    
## (Intercept)                                    0.471128    
## VD300510 anos de estudo                        0.702120    
## VD300511 anos de estudo                        0.683236    
## VD300512 anos de estudo                        0.346404    
## VD300513 anos de estudo                        0.152291    
## VD300514 anos de estudo                        0.181807    
## VD300515 anos de estudo                        0.163341    
## VD300516 anos ou mais de estudo                0.000733 ***
## VD30052 anos de estudo                         0.880452    
## VD30053 anos de estudo                         0.836892    
## VD30054 anos de estudo                         0.515999    
## VD30055 anos de estudo                         0.524230    
## VD30056 anos de estudo                         0.566756    
## VD30057 anos de estudo                         0.887695    
## VD30058 anos de estudo                         0.352699    
## VD30059 anos de estudo                         0.449441    
## VD3005Sem instruÃ§Ã£o e menos de 1 ano de estudo 0.911583    
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1892 on 370 degrees of freedom
##   (613 observations deleted due to missingness)
## Multiple R-squared:  0.2427,	Adjusted R-squared:  0.2099 
## F-statistic: 7.409 on 16 and 370 DF,  p-value: 4.467e-15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TambÃ©m sÃ£o usadas para algumas funÃ§Ãµes que produzem tabulaÃ§Ãµes cruzadas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xtabs(~ VD3005 + V2007, data = df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                           V2007
## VD3005                                     Homem Mulher
##   1 ano de estudo                             12     17
##   10 anos de estudo                            8     16
##   11 anos de estudo                           10     14
##   12 anos de estudo                          105    111
##   13 anos de estudo                           12      7
##   14 anos de estudo                            6     13
##   15 anos de estudo                            9      8
##   16 anos ou mais de estudo                   51     61
##   2 anos de estudo                            14     13
##   3 anos de estudo                            16     15
##   4 anos de estudo                            19     27
##   5 anos de estudo                            44     46
##   6 anos de estudo                            25     23
##   7 anos de estudo                            13     20
##   8 anos de estudo                            25     19
##   9 anos de estudo                            44     27
##   Sem instruÃ§Ã£o e menos de 1 ano de estudo    47     45
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algumas funÃ§Ãµes que produzem grÃ¡ficos tambÃ©m utilizam fÃ³rmulas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(VD4016 ~ V2010, data = df)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/rbase/dia1_files/figure-html/unnamed-chunk-70-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Falaremos mais de fÃ³rmulas no futuro, a medida que elas forem aparecendo. Nos exemplos acima, Ã© possÃ­vel ver que a fÃ³rmula nÃ£o tem apenas um significado. Dependendo do contexto da funÃ§Ã£o, ela pode fazer coisas muito diferentes, usando seus lados esquerdo e direito para tarefas distintas. O que Ã© importante vocÃªs levarem com vocÃªs Ã© o formato das fÃ³rmulas, e uma intuiÃ§Ã£o de que quando uma fÃ³rmula aparece, algo estÃ¡ sendo feito com uma lÃ³gica do tipo: &amp;ldquo;Para cada x, corresponde um y&amp;rdquo;, ou algo similar.&lt;/p&gt;
&lt;h4 id=&#34;exerÃ­cio&#34;&gt;ExerÃ­cio&lt;/h4&gt;
&lt;p&gt;Consulte o &lt;code&gt;?xtabs&lt;/code&gt;, qual o significado da fÃ³rmula e para que servem os lados esquerdo e direito?&lt;/p&gt;
&lt;h2 id=&#34;revisÃ£o&#34;&gt;RevisÃ£o&lt;/h2&gt;
&lt;p&gt;Cobrimos bastante coisa na aula de hoje, e nÃ£o Ã© nosso interesse que vocÃªs saiam dessa aula decorando tudo. Vamos destacar alguns pontos mais importantes, que sÃ£o a chave para vocÃªs trabalharem no R.&lt;/p&gt;
&lt;p&gt;Objetos sÃ£o formas de armazenar coisas na memÃ³ria do computador, eles podem ser de uma variedade de tipos e classes, e ter vÃ¡rios formatos mais ou menos adequados as nossas necessidades. Os objetos mais comuns no nosso arsenal sÃ£o as funÃ§Ãµes, os vetores e os data frames.&lt;/p&gt;
&lt;p&gt;As funÃ§Ãµes sÃ£o os verbos de uma linguagem de programaÃ§Ã£o, elas fazem coisas aos nossos objetos. VocÃª provavelmente vai passar a maior parte do tempo usando funÃ§Ãµes prÃ©-programadas, mas tambÃ©m pode escrever suas prÃ³prias.&lt;/p&gt;
&lt;p&gt;Os vetores sÃ£o a forma mais simples de organizar dados, em geral, trabalharemos com vetores atÃ´micos, que guardam sequÃªncias de informaÃ§Ãµes do mesmo tipo e uma Ãºnica dimensÃ£o. Vetores de 2 dimensÃµes, ou matrizes, podem ser ocasionalmente importantes para vocÃªs em algum momento.&lt;/p&gt;
&lt;p&gt;Os data frames sÃ£o o feijÃ£o com arroz da anÃ¡lise de dados, eles sÃ£o flexÃ­veis para acomodar tipos de dados distintos e respeitam as convenÃ§Ãµes que sÃ£o importantes para nÃ³s: consistÃªncia de operaÃ§Ãµes, uma observaÃ§Ã£o por linha, uma variÃ¡vel por coluna.&lt;/p&gt;
&lt;p&gt;Os objetos podem ter diversos atributos. Muito deles sÃ£o apenas estÃ©ticos para facilitar a comunicaÃ§Ã£o com o usuÃ¡rio, outros sÃ£o mais substanciais, e alteram a forma como o R processa os dados guardados ali. Citamos exemplos de fatores e data/tempo como exemplos. Um dos atributos mais importantes de um objeto Ã© sua classe, que discutimos um pouco.&lt;/p&gt;
&lt;p&gt;Por fim, falamos de dois comportamentos importantes do software: coerÃ§Ã£o e reciclagem. Eles podem facilitar ou complicar a nossa vida se nÃ£o tomamos cuidado com esse comportamento. A coerÃ§Ã£o transforma o tipo dos vetores para um tipo mais genÃ©rico com o intuito de preservar informaÃ§Ãµes. A reciclagem aumenta o tamanho de objetos menores para bater com o tamanho de objetos maiores numa mesma operaÃ§Ã£o.&lt;/p&gt;
&lt;h3 id=&#34;exercÃ­cios&#34;&gt;ExercÃ­cios&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Como vocÃª poderia identificar o tipo de um objeto? Como vocÃª poderia identificar a classe dele? Qual a diferenÃ§a entre essas duas coisas? Porque isso Ã© relevante?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Digamos que vocÃª quer armazenar algumas informaÃ§Ãµes na memÃ³ria do computador. Que tipo de objeto vocÃª utilizaria para armanzenar:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Os nomes dos colegas da sua turma&lt;/li&gt;
&lt;li&gt;Seus nÃºmeros de telefone&lt;/li&gt;
&lt;li&gt;Uma variÃ¡vel que indica se esta pessoa nasceu antes de 1989&lt;/li&gt;
&lt;li&gt;A idade de um grupo de pessoas&lt;/li&gt;
&lt;li&gt;InformaÃ§Ãµes de cadastro de uma pessoa: nome completo, afiliaÃ§Ãµes, telefones para contato, endereÃ§os, etc.&lt;/li&gt;
&lt;li&gt;Uma coleÃ§Ã£o de funÃ§Ãµes que vocÃª utiliza frequentemente&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Porque no resumo eu disse que as funÃ§Ãµes sÃ£o verbos? Que tipo de aÃ§Ãµes as funÃ§Ãµes que vimos na aula fazem nos nossos objetos? Se as funÃ§Ãµes sÃ£o verbos, que classe de palavras a gente poderia dizer que sÃ£o os nossos objetos? E nÃ³s, que usamos o software, o que somos?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Digamos que eu quero armazenar as informaÃ§Ãµes de cadastro dos membros da turma. Que estrutura de dados eu deveria utilizar? Como vocÃª implementaria esta estrutura no R? Desenvolva um pequeno exemplo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quais sÃ£o os atributos de um data frame? Como vocÃª poderia descobrÃ­-los e alterÃ¡-los? Em que situaÃ§Ãµes isso seria proveitoso?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Suponha que vocÃª tÃªm o vetor atÃ´mico abaixo:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 1, TRUE, FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que acontecerÃ¡ com as informaÃ§Ãµes desse vetor ao ser armazenado no R? Como vocÃª poderia alterar esse resultado? Porque o R se comporta dessa maneira?&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Considere a operaÃ§Ã£o matemÃ¡tica abaixo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v1 &amp;lt;- c(1, 2, 3)
v2 &amp;lt;- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)

v1 * v2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que vocÃª espera encontrar na saÃ­da do R ao rodar essa seÃ§Ã£o? Rode o cÃ³digo e responda: vocÃª se surpreendeu? O que aconteceu e porquÃª? Qual o significado da mensagem de aviso?&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Considere o banco de dados abaixo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sala &amp;lt;- data.frame(
  id = c(1, 2, 3),
  idade = c(20, 25, 30, 35, 40, 45),
  nome = c(&amp;quot;Fulano&amp;quot;, &amp;quot;Cicrano&amp;quot;, &amp;quot;Beltrano&amp;quot;, &amp;quot;Herculano&amp;quot;, &amp;quot;Mariano&amp;quot;, &amp;quot;Carrano&amp;quot;),
  sexo = &amp;quot;Masculino&amp;quot;,
  origem = c(&amp;quot;Campinas&amp;quot;, &amp;quot;Barueri&amp;quot;, &amp;quot;Monte Verde&amp;quot;, &amp;quot;Rio de Janeiro&amp;quot;, &amp;quot;Natal&amp;quot;, &amp;quot;Belo Horizonte&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Verifique as variÃ¡veis &lt;code&gt;id&lt;/code&gt; e &lt;code&gt;sexo&lt;/code&gt;. Os valores dessas variÃ¡veis fazem sentido? Elas nÃ£o impedem a construÃ§Ã£o do data frame, por quÃª? Que caracterÃ­stica do R estÃ¡ operando nessas variÃ¡veis?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
