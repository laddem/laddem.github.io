<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>📊 Aprenda o básico da linguagem R | LADDEM</title>
    <link>https://laddem.github.io/courses/rbase/</link>
      <atom:link href="https://laddem.github.io/courses/rbase/index.xml" rel="self" type="application/rss+xml" />
    <description>📊 Aprenda o básico da linguagem R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>pt</language><copyright>© 2021 LADDEM</copyright><lastBuildDate>Mon, 14 Jun 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://laddem.github.io/courses/rbase/featured.png</url>
      <title>📊 Aprenda o básico da linguagem R</title>
      <link>https://laddem.github.io/courses/rbase/</link>
    </image>
    
    <item>
      <title>A base da linguagem R</title>
      <link>https://laddem.github.io/courses/rbase/dia1/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/courses/rbase/dia1/</guid>
      <description>&lt;h2 id=&#34;fundamentos&#34;&gt;Fundamentos&lt;/h2&gt;
&lt;h3 id=&#34;a-interface-do-r-e-do-rstudio&#34;&gt;A interface do R e do RStudio&lt;/h3&gt;
&lt;p&gt;O RStudio oferece uma maneira de falar com seu computador. O R te fornece um idioma para falar. 
Para começar, abra o RStudio da mesma forma que você abriria qualquer outro aplicativo em seu computador.&lt;/p&gt;
&lt;p&gt;Você digita o código R na linha superior do painel do console RStudio e, em seguida, clica em Enter para executá-lo. O código que você digita é chamado de comando, porque ele comandará seu computador para fazer algo por você. A linha em que você digita é chamada de linha de comando.&lt;/p&gt;
&lt;p&gt;A interface do RStudio é simples. Para  criar um script novo é necessário ir em &lt;code&gt;File &amp;gt; New File &amp;gt; R &amp;gt; script&lt;/code&gt; no menu no canto esquerdo. É recomendado fortemente que você escreva e edite todo o seu código R em um script antes de executá-lo no console. Por quê? Esse hábito cria um registro reproduzível de seu trabalho. Ao terminar o dia, você pode salvar seu script e usá-lo para executar novamente toda a sua análise no dia seguinte, além disso os scripts são muito úteis para editar e revisar seu código e são uma ótima cópia de seu trabalho para compartilhar com outras pessoas. Para salvar é só clicar no disquete no painel do script e depois ir em &lt;code&gt;File &amp;gt; Save&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Quando você digita um comando no script e pressiona Ctrl + Enter ou Run, o computador executa o comando e mostra os resultados no console logo abaixo. Por exemplo, se você digitar 1 + 1 e pressionar Ctrl + Enter, o RStudio exibirá:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;objetos&#34;&gt;Objetos&lt;/h3&gt;
&lt;p&gt;Agora que você já sabe como o R funciona, vamos ver alguns operadores e objetos que podem ser criados. Se você quer que o R crie um vetor, use o operador &lt;code&gt;:&lt;/code&gt;, esse operador vai retornar um conjunto unidimensional de números:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1:6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas quando você roda assim dessa forma, o R gera o vetor que você poderá ver o resultado no console, porém esse vetor não vai ficar salvo em lugar nenhum, é basicamente uma pegada de seis números que existiram naquela execução pontual. Se você quiser usar novamente essa sequência de número, você precisa pedir para o R guardar ele em algum lugar. Você pode fazer isso criando um &lt;code&gt;objeto&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O R permite salvar dados armazenando-os dentro de um objeto R. O que é um objeto? Apenas um nome que você pode usar para acessar os dados armazenados. Por exemplo, você pode salvar dados em um objeto como &lt;code&gt;a&lt;/code&gt; ou &lt;code&gt;b&lt;/code&gt; ou qualquer nome que faça sentido para o que você está fazendo. Sempre que o R encontrar o objeto, ele irá substituí-lo pelos dados salvos nele, da seguinte forma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a &amp;lt;- 1

a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a + 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou seja, para você criar um objeto no R, você escolhe um nome e depois usa o símbolo &lt;code&gt;&amp;lt;-&lt;/code&gt; para salvar o dado naquele objeto no qual você deu um nome. No caso do exemplo acima, o R criou um objeto, deu a ele seu nome e armazenou nele tudo o que vier após a seta. Portanto, &lt;code&gt;a &amp;lt;- 1&lt;/code&gt; armazena 1 em um objeto denominado a.&lt;/p&gt;
&lt;p&gt;Você também pode usar seu objeto em novos comandos R. Já que armazenou anteriormente o valor de 1, agora você está adicionando 1 ao a armazenando no objeto &lt;code&gt;a + 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Então, como você faria para armazenar esse vetor de seis números &lt;code&gt;1:6&lt;/code&gt;, que a gente criou anteriormente, em um objeto?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor &amp;lt;- 1:6

vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quando você cria um objeto no R, esse objeto vai aparecer armazenado na seção &lt;code&gt;Environment&lt;/code&gt; no lado direito, do lado da seção script (essa que você digita os comandos para usá-los depois).&lt;/p&gt;
&lt;p&gt;Você pode nomear um objeto no R de praticamente qualquer nome, só tem algumas regras: não pode começar com número, e também não pode ter alguns símbolos, como por exemplo:  &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Além disso, o R é &lt;em&gt;case-sensitive&lt;/em&gt;, portanto se eu colocar um nome de objeto como &lt;code&gt;Name&lt;/code&gt; e outro como &lt;code&gt;name&lt;/code&gt; eles vão se referir a objetos diferentes, ou seja, ele considera se a letra é maíuscula ou minúscula.&lt;/p&gt;
&lt;p&gt;E se você criar um objeto, salvar uma informação neste objeto e logo em seguida salvar outra, ele subscreve o que estava anteriormente, então tome cuidado para não perder informações. O exemplo abaixo mostra exatamente isso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;meu_numero &amp;lt;- 1

meu_numero
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;meu_numero &amp;lt;- 999
meu_numero
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 999
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com a função &lt;code&gt;ls()&lt;/code&gt; você consegue listar no console todos os objetos criados.&lt;/p&gt;
&lt;p&gt;O que é possível fazer com esses objetos no R que você criou? Muita coisa! Por exemplo: é possível usar o objeto vetor e fazer uma operação de divisão&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor/2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.5 1.0 1.5 2.0 2.5 3.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor - 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0 1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R dividiu por 2 todos os números dentro daquele vetor. Se você subtrair 1 desse objeto, o R vai subtrair 1 de cada elemento dentro deste objeto.&lt;/p&gt;
&lt;p&gt;Quando você usa dois ou mais vetores em uma operação, o R alinhará os vetores e executará uma sequência de operações individuais. Por exemplo, quando você executa vetor * vetor, o R alinha os dois vetores de dados e, em seguida, multiplica o primeiro elemento do vetor 1 pelo primeiro elemento do vetor 2, então multiplica o segundo elemento do vetor 1 pelo segundo elemento do vetor 2, e assim por diante, até que cada elemento tenha sido multiplicado. O resultado será um novo vetor com o mesmo comprimento dos dois primeiros:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor * vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  9 16 25 36
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se você der ao R uma operação com dois vetores de comprimentos diferentes, o R repetirá o vetor mais curto até que seja do mesmo tamanho do vetor maior e, em seguida, fará as contas. Esta não é uma mudança permanente - o vetor mais curto terá seu tamanho original depois que o R fizer as contas. Se o comprimento do vetor curto não se dividir igualmente no comprimento do vetor longo, o R retornará uma mensagem de aviso. Esse comportamento é conhecido como &lt;strong&gt;reciclagem&lt;/strong&gt; de vetor e ajuda o R a fazer operações em elementos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor * 1:4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in vetor * 1:4: comprimento do objeto maior não é múltiplo do
## comprimento do objeto menor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  9 16  5 12
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor * 1:2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  3  8  5 12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Porém, é preciso cuidado pois se você não estava querendo &lt;strong&gt;reciclar&lt;/strong&gt;, é possível cometer erros. No exemplo abaixo, eu crio um segundo vetor com os valores para multiplicação, mas ele tem tamanho menor que o primeiro. Por isso, é bom ficar atento aos &lt;code&gt;Warning message:&lt;/code&gt;s:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor2 &amp;lt;- c(1, 2, 3, 4, 5)

vetor * vetor2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in vetor * vetor2: comprimento do objeto maior não é múltiplo do
## comprimento do objeto menor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  9 16 25  6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;funções&#34;&gt;Funções&lt;/h3&gt;
&lt;p&gt;O R vem com muitas funções instaladas. Praticamente tudo que você vê que não são &lt;code&gt;objetos&lt;/code&gt; que você criou são funções e seus componentes. Por isso, dizemos que, no seu núcleo, o R é uma linguagem &amp;ldquo;funcional&amp;rdquo;. Vejamos alguns exemplos de funções:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;round(3.1415)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;factorial(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercício&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Só de olhar para as funções e seus resultados, você conseguíria dizer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O que cada função faz?&lt;/li&gt;
&lt;li&gt;Quais entradas (inputs) ela pede?&lt;/li&gt;
&lt;li&gt;Qual saída ela produz (output)?&lt;/li&gt;
&lt;li&gt;Que opções alternativas (argumentos) elas poderiam conter?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;argumentos&#34;&gt;Argumentos&lt;/h3&gt;
&lt;p&gt;As informações que são colocadas dentro dos &lt;code&gt;()&lt;/code&gt; depois do nome de uma função são chamados de &lt;strong&gt;argumentos&lt;/strong&gt;. Em geral, uma função tem alguns argumentos obrigatórios (o valor a ser arrendodado, o número para calcular o fatorial) e argumentos opcionais (arredondar para cima ou para baixo? descartar valores nulos?).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(1:6)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor_com_nulo &amp;lt;- c(1, 2, 3, 4, 5, 6, NA)

mean(vetor_com_nulo)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(vetor_com_nulo, na.rm = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Argumentos obrigatórios e opcionais tornam as nossas funções mais flexíveis. Essa flexibilidade é crucial para muitas operações, pois podemos passar funções como argumentos de outras funções. Por exemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;round(mean(vetor))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quando você reúne as funções dessa forma, o R vai avaliar a função de dentro para fora, como uma boneca matrioshka:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resultado &amp;lt;- vetor
resultado
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resultado &amp;lt;- mean(resultado)
resultado
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resultado &amp;lt;- round(resultado)
resultado
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Outro exemplo de argumentos opcionais é a função &lt;code&gt;sample&lt;/code&gt;, que produz amostras aleatórias:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Com os argumentos opcionais, podemos mudar detalhes do processo de amostragem&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample(x = vetor, size = 1, prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E ao mudar as probabilidades de como cada amostra vai ser selecionada, eu criei um dado viciado!&lt;/p&gt;
&lt;p&gt;Você pode verificar os argumentos de uma função com:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;args(sample)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (x, size, replace = FALSE, prob = NULL) 
## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercício-1&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Repita a operação de &lt;code&gt;sample&lt;/code&gt; acima com o dado &amp;ldquo;viciado&amp;rdquo; e com o dado &amp;ldquo;limpo&amp;rdquo; e verifique se você consegue perceber empiricamente que meu dado está &amp;ldquo;viciado&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Que outros argumentos existem na função &lt;code&gt;sample&lt;/code&gt;? Qual o papel do argumento &lt;code&gt;replace&lt;/code&gt;?&lt;/p&gt;
&lt;h3 id=&#34;sua-primeira-função&#34;&gt;Sua primeira função&lt;/h3&gt;
&lt;p&gt;Ok, mas suponha que você esteja cansado de repetir as coisas no seu programa. Existe uma operação que você realiza de novo e novo, e ela é relativamente simples, mas é um tédio ficar copiando e colando a mesma coisa. Por exemplo, se você tem o vetor que criamos com seis números, e precisa sortear dois valores e somar seu resultado, como se estivesse jogando dois dados de 6 faces e somando os resultados?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- sample(vetor, size = 1)
y &amp;lt;- sample(vetor, size = 1)
x + y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seu código funciona bem, mas você quer simplificar isso para uma função que faça tudo de uma vez, podemos chamar ela de &lt;code&gt;role&lt;/code&gt;, como se fosse &amp;ldquo;role dois dados&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A função &lt;code&gt;role&lt;/code&gt; não existe no R base, mas você mesmo pode construí-la:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;role &amp;lt;- function() {
  x &amp;lt;- sample(vetor, size = 1)
  y &amp;lt;- sample(vetor, size = 1)
  x + y
}

role()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pause para contemplar os diferentes elementos do construtor de funções do R:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;role&lt;/code&gt; é o nome da função, e ele deve ser atribuído &lt;code&gt;&amp;lt;-&lt;/code&gt; para que você possa chamar sua função&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt; é uma função que constrói funções, e os argumentos dela que vão nos parenteses são aqueles que o usuário deverá digitar. Nesse caso, nenhum argumento é necessário.&lt;/li&gt;
&lt;li&gt;Os &lt;code&gt;{}&lt;/code&gt; indicam o início e o fim do &lt;code&gt;corpo&lt;/code&gt; da função, onde a magia acontece.&lt;/li&gt;
&lt;li&gt;Ao rodar o construtor da função, nada acontece. A função só entra em funcionamento na hora que o usuário a utiliza posteriormente &lt;code&gt;role()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;exercício-2&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Escreva uma função que role 2 dados de 10 faces e some seus resultados.&lt;/p&gt;
&lt;h3 id=&#34;programas-scripts&#34;&gt;Programas (scripts)&lt;/h3&gt;
&lt;!-- 

N: Eu coloquei o script direto lá em cima, pra mim não faz muito sentido passar pelo console primeiro, mas não sei, o que você acha?

V: Olha, pra mim depende muito do aluno. Acho que as vezes gente que começa a estudar o R nunca para pra pensar na distinção entre as duas coisas. Pessoalmente acho útil porque eu uso o console o tempo todo para testar coisas que eu não quero que poluam o script, mas muita gente faz isso no script e depois apaga. Meu ponto aqui é outra coisa, é só introduzir pra eles o conceito de programa/script. O que é, o que tem num programa, talvez um ou outro exemplo de um programa. Tipo um programa de importação e tratamento de dados. Um programa que produz uma visualização. Um programa que gera um modelo estatístico. Um programa que faz uma tabela, etc.

--&gt;
&lt;p&gt;Na maioria das situações, esses conceitos soltos que introduzimos não são muito úteis isoladamente. Afinal de contas, objetos, funções e números individuais não servem para muita coisa. Esses conceitos ganham corpo quando os utilizamos juntos para produzir nossos programas. O que são programas? A metáfora mais comumemente utilizada é a culinária. Um programa é uma sequência de instruções, uma receita para produzir alguma coisa. A diferença é que ao invés de produtos culinários, os ingredientes são informações na memória de um computador, e ao invés de um prato, estamos tentando produzir resultados que podem ser analisados: estatísticas descritivas, representações gráficas, modelos matemáticos, tabelas, etc.&lt;/p&gt;
&lt;p&gt;Falaremos mais sobre programas e estratégias de construção de programas (se der tempo), em outra aula. Por aqui, seria interessante que vocês levassem adiante a noção de que o programa é o conjunto da obra. É comum desenvolvermos ou encontrarmos programas para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;importar e corrigir quaisquer problemas nos meus dados&lt;/li&gt;
&lt;li&gt;produzir estatísticas descritivas a partir de meus dados&lt;/li&gt;
&lt;li&gt;produzir diversos gráficos que descrevem meus dados&lt;/li&gt;
&lt;li&gt;produzir tabulações e exportá-las para outros softwares&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como vários aspectos do R, a flexibilidade aqui é imensa, e vocês são livres para definir o &lt;strong&gt;escopo&lt;/strong&gt; dos seus programas. Você vai preferir colocar tudo num programa só, ou talvez dividí-lo em diversos programas e tarefas menores? Cada abordagem carrega consigo vantagens e desvantagens que vocês terão que decidir se valem ou não a pena.&lt;/p&gt;
&lt;h3 id=&#34;pacotes&#34;&gt;Pacotes&lt;/h3&gt;
&lt;p&gt;Você não é a única pessoa que escreve suas próprias funções com R. Muitos professores, programadores e estatísticos usam R para projetar ferramentas que podem ajudar as pessoas a analisar dados. Eles então tornam essas ferramentas gratuitas para qualquer pessoa usar. Para usar essas ferramentas, basta baixá-las. Eles reúnem coleções pré-montadas de funções e objetos chamados pacotes. Veremos o básico aqui.&lt;/p&gt;
&lt;!-- Acho melhor evitar qplot. Vamos usar as funções do graphics mesmo para fazer uns gráficos simples. Pode deixar o exemplo de baixar o ggplot2, sem problema, mas é melhor a gente produzir os gráficos no base mesmo para o pessoal ter uma ideia quando eles encontrarem base graphics por aí. --&gt;
&lt;p&gt;Vamos usar a função qplot para fazer alguns gráficos rápidos. qplot vem no pacote ggplot2, o pacote popular para fazer gráficos. Antes de usar o qplot, ou qualquer outra coisa no pacote ggplot2, você precisa fazer o download e instalá-lo.&lt;/p&gt;
&lt;p&gt;Os pacotes do R em geral estão hospedados em &lt;a href=&#34;http://cran.r-project.org&#34;&gt;http://cran.r-project.org&lt;/a&gt;, o mesmo site de onde você baixou sua versão do R. No entanto, você não precisa visitar o site para baixar um pacote R; você pode baixar pacotes direto da linha de comando do R.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;ggplot2&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É isso. O R fará com que seu computador visite o site, baixe ggplot2 e instale o pacote em seu disco rígido exatamente onde o R deseja encontrá-lo. Agora você tem o pacote ggplot2. Se você gostaria de instalar outro pacote, substitua ggplot2 pelo nome do seu pacote no código.&lt;/p&gt;
&lt;h3 id=&#34;ajuda&#34;&gt;Ajuda&lt;/h3&gt;
&lt;h4 id=&#34;no-r&#34;&gt;No R&lt;/h4&gt;
&lt;p&gt;Existem mais de 1.000 funções no núcleo do R e novas funções são criadas o tempo todo. Isso pode ser muito material para memorizar e aprender! Felizmente, cada função R vem com sua própria página de ajuda, que você pode acessar digitando o nome da função após um ponto de interrogação. Por exemplo, cada um desses comandos abrirá uma página de ajuda. Procure as páginas que aparecem na guia Ajuda do painel inferior direito do RStudio:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;?sqrt
?log10
?sample
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As páginas de ajuda contem informações úteis sobre o que cada função faz. Essas páginas de ajuda também servem como documentação de código, portanto, pode ser algo um pouco chato. Muitas vezes parecem ter sido escritas para pessoas que já entendem a função e não precisam de ajuda. Não deixe que isso te faça desistir de entender uma função que você queira usar - você pode ganhar muito com uma página de ajuda examinando-a em busca de informações que façam sentido e ignorando o resto. Essa técnica inevitavelmente o levará à parte mais útil de cada página de ajuda: a parte inferior. Aqui, quase todas as páginas de ajuda incluem algum código de exemplo que coloca a função em ação. Executar esse código é uma ótima maneira de aprender com o exemplo dado.&lt;/p&gt;
&lt;p&gt;Se você gostaria de consultar a página de ajuda de uma função, mas esqueceu o nome da função, você pode pesquisar por palavra-chave. Para fazer isso, digite dois pontos de interrogação seguidos por uma palavra-chave na linha de comando de R, o R exibirá uma lista de links para páginas de ajuda relacionadas à palavra-chave. Você pode pensar nisso como a página de ajuda para a página de ajuda:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;??log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Muitos pacotes também incluem &lt;strong&gt;vinhetas&lt;/strong&gt;, que são pequenas aulinhas que resumem as principais funções de um pacote através de explicações de uso detalhados. Você pode ver as vinhetas disponíveis num pacote instalado assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vignette(package = &amp;quot;ggplot2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E a vinheta em si é acessada assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vignette(&amp;quot;ggplot2-specs&amp;quot;, package = &amp;quot;ggplot2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Que deve abrir a vinheta na sua seção &amp;ldquo;Help&amp;rdquo; do RStudio. A maioria dessas vinhetas também está disponível online numa consulta rápida ao Google.&lt;/p&gt;
&lt;h4 id=&#34;online&#34;&gt;Online&lt;/h4&gt;
&lt;p&gt;Em geral, após uma consulta a página de ajuda, pode ser que você não esteja satisfeito. Você pode complementar sua página de ajuda com diversos recursos online. Vamos deixar alguns links abaixo que utilizamos cotidianamente.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google&lt;/a&gt;: em geral, uma pesquisa com &amp;ldquo;r &amp;lt;função&amp;gt;&amp;rdquo; ou &amp;ldquo;r &amp;lt;pacote&amp;gt;&amp;rdquo; te leva para onde você quer ir.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stack Overflow&lt;/a&gt;: similar, mas no stackoverflow se usam &lt;code&gt;[tags]&lt;/code&gt;, então seria algo como &lt;code&gt;[r][pacote] sua pergunta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.rstudio.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Community&lt;/a&gt;: mais pra perguntas relacionadas ao RStudio&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-br.2285057.n4.nabble.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lista R-Br&lt;/a&gt;: lista ativa e em português, em geral, o pessoal é prestativo.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/rstudiotips&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Tips - Twitter&lt;/a&gt;: dicas no twitter para ir melhorando no cotidiano.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;exercício-3&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Consulte a ajuda das funções &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt;. Porque todas elas tem o argumento &lt;code&gt;na.rm&lt;/code&gt;? O que argumento o &lt;code&gt;trim&lt;/code&gt; em &lt;code&gt;mean&lt;/code&gt; faz? Qual a melhor maneira de rapidamente entender o que uma função faz através da página de ajuda?&lt;/p&gt;
&lt;h2 id=&#34;objetos-em-r&#34;&gt;Objetos em R&lt;/h2&gt;
&lt;h3 id=&#34;vetores&#34;&gt;Vetores&lt;/h3&gt;
&lt;p&gt;Já trabalhamos com alguns vetores lá em cima, é inevitável. Pensou em salvar um objeto na memória do computador no R, pensou em vetor. Pra ser preciso, estamos usando &lt;strong&gt;vetores atômicos&lt;/strong&gt;. Os vetores atômicos são em geral o objeto mais frequentemente usado em R. Para construir um, você utiliza a função &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor &amp;lt;- c(1, 2, 3, 4, 5, 6)
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E você pode verificar se ele é um vetor mesmo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.vector(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;is.vector&lt;/code&gt; testa se o objeto é um vetor, e retorna &lt;code&gt;TRUE&lt;/code&gt; se sim, e &lt;code&gt;FALSE&lt;/code&gt; se não.&lt;/p&gt;
&lt;h4 id=&#34;exercício-4&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Teste se &lt;code&gt;vetor2&lt;/code&gt;, criado anteriormente é um vetor. Crie um vetor com os nomes de cinco pessoas da sala.&lt;/p&gt;
&lt;h4 id=&#34;tamanho&#34;&gt;Tamanho&lt;/h4&gt;
&lt;p&gt;Ao contrário de outras linguagens, o R não diferencia entre escalares e vetores. Se você salvar só 1 valor, ele salva num vetor atômico de tamanho 1.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- 1
is.vector(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;length(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vetores atômicos guardam suas informações em uma única dimensão (como se fosse uma caixinha de pílulas semanal), cada compartimento guarda um valor. E todos os valores tem que ser do mesmo tipo! Números com números, caracteres com caracteres. Não pode misturar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiro &amp;lt;- 1L
double &amp;lt;- 1
texto &amp;lt;- &amp;quot;um&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou com mais de um valor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros &amp;lt;- c(1L, 2L)
doubles &amp;lt;- c(1, 2)
textos &amp;lt;- c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esses tipos de vetores são importantes pois eles interagem com as funções de maneira lógica:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(doubles)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(textos)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in sum(textos): &#39;type&#39; inválido (character) do argumento
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja a mensagem de erro ao tentar somar os textos.&lt;/p&gt;
&lt;h4 id=&#34;exercício-5&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Considerando os dois vetores abaixo, calcule as suas médias. Porque não é possível calcular a média do segundo vetor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;idade1 &amp;lt;- c(20, 25, 30, 35, 40, 45, 50)
idade2 &amp;lt;- c(&amp;quot;20&amp;quot;, &amp;quot;25&amp;quot;, &amp;quot;30&amp;quot;, &amp;quot;35&amp;quot;, &amp;quot;40&amp;quot;, &amp;quot;45&amp;quot;, &amp;quot;50&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;tipos&#34;&gt;Tipos&lt;/h4&gt;
&lt;p&gt;Vetores atômicos podem ser de 6 tipos, dois são mais utilizados.&lt;/p&gt;
&lt;h4 id=&#34;números-reais&#34;&gt;Números reais&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A função &lt;code&gt;typeof&lt;/code&gt; me diz qual o tipo de um vetor atômico.&lt;/p&gt;
&lt;h4 id=&#34;números-inteiros&#34;&gt;Números inteiros&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O padrão do R é aceitar números reais, se você não especificar. Para forçar números inteiros, é precisar utilizar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros &amp;lt;- c(1, 2)

typeof(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inteiros &amp;lt;- c(1L, 2L)

typeof(inteiros)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essas diferenças em geral são inconsequentes, mas existem alguns casos, como resultados de divisão e raíz quadrada, em que podemos encontrar resultados curiosos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sqrt(2)^2 - 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.440892e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em teoria, a operação acima deveria ser 0, mas como o computador tem uma quantidade limitada de memória para armazenar as casas decimais, ele acaba gerando uma &amp;ldquo;sobrinha&amp;rdquo; infinitesimal da raíz quadrada de dois.&lt;/p&gt;
&lt;h5 id=&#34;caracteres&#34;&gt;Caracteres&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;texto &amp;lt;- c(&amp;quot;Bem&amp;quot;, &amp;quot;Vindos&amp;quot;)

texto
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Bem&amp;quot;    &amp;quot;Vindos&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(texto)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;exercício-6&#34;&gt;Exercício&lt;/h6&gt;
&lt;p&gt;Qual a diferença entre: 1, &amp;ldquo;1&amp;rdquo;, &amp;ldquo;one&amp;rdquo; no R? Quais são números e quais são caracteres?&lt;/p&gt;
&lt;h5 id=&#34;lógicos&#34;&gt;Lógicos&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3 &amp;lt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;3 &amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;logico &amp;lt;- c(TRUE, FALSE)

logico
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(logico)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;logical&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vetores lógicos são a base de várias operações úteis no R e vamos voltar a eles em diversos momentos.&lt;/p&gt;
&lt;p&gt;Complexos e crus:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;comp &amp;lt;- c(1 + 1i, 1 + 2i, 1 + 3i)
comp
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1+1i 1+2i 1+3i
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(comp)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;complex&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;raw(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 00 00 00
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(raw(3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;raw&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vetores complexos servem para armazenar número complexos, enquanto vetores crus servem para armazenar os valores em bits de uma informação. Ambos são menos utilizados na análise de dados e eu os introduzo apenas para vocês saberem que eles existem.&lt;/p&gt;
&lt;h3 id=&#34;atributos&#34;&gt;Atributos&lt;/h3&gt;
&lt;p&gt;Atributos são informações adicionais que podemos colocar em um objeto para cumprir uma série de tarefas auxiliares. Pense, por exemplo, em dar nomes para os meses do ano, ou classificar um objeto de acordo com seu tipo. Atributos são &lt;strong&gt;metadados&lt;/strong&gt; ou dados sobre os dados, e eles nos interessam porque o R pode aproveitar os atributos de um objeto para realizar tarefas específicas.&lt;/p&gt;
&lt;p&gt;Você pode ver os atributos de um objeto assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O nosso vetor não tem nenhum atributo ainda, por isso &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O atributo mais comum que os objetos podem ter em R são nomes. Podemos ver o atributo nomes assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Novamente, &lt;code&gt;NULL&lt;/code&gt; indica que o vetor não tem nomes.&lt;/p&gt;
&lt;p&gt;A maioria das funções que trabalham com atributos vai ter esses &amp;ldquo;dois empregos&amp;rdquo;. De um lado, você pode utilizá-las para obter (get) os atributos, de outro, você pode utilizá-las para modificar (set) os atributos, veja:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor) &amp;lt;- c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;, &amp;quot;five&amp;quot;, &amp;quot;six&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Agora, veja como ficaram os resultados das duas funções anteriores.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $names
## [1] &amp;quot;one&amp;quot;   &amp;quot;two&amp;quot;   &amp;quot;three&amp;quot; &amp;quot;four&amp;quot;  &amp;quot;five&amp;quot;  &amp;quot;six&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;one&amp;quot;   &amp;quot;two&amp;quot;   &amp;quot;three&amp;quot; &amp;quot;four&amp;quot;  &amp;quot;five&amp;quot;  &amp;quot;six&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R também vai mostrar o atributo nomes quando você chamar o vetor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   one   two three  four  five   six 
##     1     2     3     4     5     6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Da mesma forma que você modificou os atributos antes, você pode modificá-los ou removê-los:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor) &amp;lt;- c(&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;três&amp;quot;, &amp;quot;quatro&amp;quot;, &amp;quot;cinco&amp;quot;, &amp;quot;seis&amp;quot;)
names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;um&amp;quot;     &amp;quot;dois&amp;quot;   &amp;quot;três&amp;quot;   &amp;quot;quatro&amp;quot; &amp;quot;cinco&amp;quot;  &amp;quot;seis&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(vetor) &amp;lt;- NULL
names(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O outro atributo importante para muitas tarefas são as dimensões de um objeto. Lembre que os nossos vetores atômicos são limitados pela exigência de só ter uma dimensão, mas e se quisermos organizar nossos dados em várias dimensões? Um jeito possível é alterar as dimensões:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## NULL
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# 2 linhas e 3 colunas
dim(vetor) &amp;lt;- c(2, 3)

vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    3    5
## [2,]    2    4    6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# 3 linhas e 2 colunas

dim(vetor) &amp;lt;- c(3, 2)

vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    4
## [2,]    2    5
## [3,]    3    6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E não precisa se limitar a objetos bidimensionais. Você pode passar n dimensões para o objeto e o R distribuirá os valores do seu vetor no número de dimensões necessários. O único detalhe importante é você reparar que o R tem uma certa preferência de ir preenchendo os valores da coluna antes dos valores da linha e se você quiser fazer isso de forma diferente, é melhor utilizar as funções &lt;code&gt;matrix&lt;/code&gt; ou &lt;code&gt;array&lt;/code&gt;, que veremos adiante.&lt;/p&gt;
&lt;h4 id=&#34;exercício-7&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Usando seus conhecimentos sobre atributos, construa uma pequena matriz com o nome de 5 pessoas da turma e seu sexo.&lt;/p&gt;
&lt;h3 id=&#34;matrizes&#34;&gt;Matrizes&lt;/h3&gt;
&lt;p&gt;Matrizes são muito parecidas com o que acabamos de construir: elas guardam informações em um &lt;code&gt;array&lt;/code&gt; de duas dimensões. A grande diferença é que as matrizes são programadas para executar as operações matemáticas com matrizes de acordo com os princípios e convenções da álgebra linear. Portanto, o R vem com funções para transpor, inverter, solucionar, etc. matrizes. Você pode construir matrizes no R com:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- matrix(vetor, nrow = 2)
m
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    3    5
## [2,]    2    4    6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou, se você quiser mudar a ordem de preenchimento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m2 &amp;lt;- matrix(vetor, nrow = 2, byrow = TRUE)
m2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    2    3
## [2,]    4    5    6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para mais informações, consulte &lt;code&gt;?matrix&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;exercício-8&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Reconstrua a sua matriz original usando a função &lt;code&gt;matrix&lt;/code&gt; ao invés de alterar os atributos. E os nomes das colunas?&lt;/p&gt;
&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;
&lt;p&gt;O array é uma extensão da ideia de matriz para quantas dimensões você quiser, ou n-dimensões. 3, 4, 5, 10 dimensões, isso é com você. Na prática os arrays não são muito frequentes na análise de dados, mas eles existem se você precisar deles um dia:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a &amp;lt;- array(c(11:14, 21:24, 31:34), dim = c(2, 2, 3))
a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## , , 1
## 
##      [,1] [,2]
## [1,]   11   13
## [2,]   12   14
## 
## , , 2
## 
##      [,1] [,2]
## [1,]   21   23
## [2,]   22   24
## 
## , , 3
## 
##      [,1] [,2]
## [1,]   31   33
## [2,]   32   34
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O display de um array multidimensional é meio confuso, porque o R vai te mostrar as &amp;ldquo;fatias&amp;rdquo; do array. Quanto mais dimensões, mais fatias. Boa sorte se você precisar deles um dia!&lt;/p&gt;
&lt;h3 id=&#34;classe&#34;&gt;Classe&lt;/h3&gt;
&lt;p&gt;A classe de um objeto é um atributo importante para seu funcionamento no R, porque diferentes classes estão associadas a diferentes métodos! Pense, por exemplo, que você deseja organizar uma sequência de valores em um vetor. Se esses valores são números, a ordem crescente ou decrescente é bastante intuitiva. Se são textos, podemos usar a ordem alfabética. Mas e se forem meses do ano? Grupos etários? Categorias educacionais?&lt;/p&gt;
&lt;p&gt;Problemas dessa natureza são resolvidos no R através da atribuição de classes aos objetos. Transposição e solução de matrizes utilizarão o atributo classe para saber se aquele objeto é uma matriz, para citar apenas um exemplo. Podemos descobrir a classe de um objeto assim:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;matrix&amp;quot; &amp;quot;array&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas esse é o nosso vetor modificado. Vejamos o que acontece se retiramos o atributo &lt;code&gt;dim&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(vetor) &amp;lt;- NULL
class(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que não mudamos o tipo do vetor, ele continua sendo &amp;ldquo;double&amp;rdquo;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(vetor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas sua classe mudou. Podemos mudar a classe de um objeto de maneira arbitrária, mas em geral a gente evita fazer isso, porque esse atributo está muito relacionado com as propriedades desse objeto. Veja dois exemplos do que ocorre ao alterar manualmente a classe de um objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;agora &amp;lt;- Sys.time()
agora
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2021-06-14 12:51:59 -03&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(agora)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(agora)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;POSIXct&amp;quot; &amp;quot;POSIXt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nesse primeiro exemplo, usando &lt;code&gt;Sys.time&lt;/code&gt; para obter o horário local. O tipo dessa informação é &amp;ldquo;double&amp;rdquo;, pois o R armazena variáveis tempo como o número de segundos passados entre uma data de início arbitrária e o momento que o seu tempo representa. Mas a classe desse objeto é POSIXct e POSIXt, que são as classes do R para lidar com objetos que registram data e tempo.&lt;/p&gt;
&lt;p&gt;Veja o que acontece se eu temporariamente remover a classe desse objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unclass(agora)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1623685919
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R transformou meu objeto data/tempo em um número. O que ocorre é que quando meu objeto tem as classes adequadas, isso alerta o R para que ele trate esse objeto de forma diferente. As funções do R utilizarão métodos de &lt;code&gt;print&lt;/code&gt; para facilitar a visualização de objetos data/tempo, mas, por debaixo do capô, preservarão suas características computacionais numéricas. Você pode, por exemplo, somar 24h ao seu objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;agora + (24 * 60 * 60)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2021-06-15 12:51:59 -03&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você também pode, se assim desejar, transformar um valor numérico arbitrário numa data (só demonstração, não vale a pena fazer isso) atribuindo uma classe para ele:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;objeto &amp;lt;- 1000000000
class(objeto) &amp;lt;- c(&amp;quot;POSIXct&amp;quot;, &amp;quot;POSIXt&amp;quot;)

objeto
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2001-09-08 22:46:40 -03&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercício-9&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Experimente brincar com o valor de objeto e ver&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qual é a data de referência do R para calcular tempos?&lt;/li&gt;
&lt;li&gt;O que acontece se o valor for negativo?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O segundo exemplo relevante são os fatores. Fatores são a classe utilizada pelo R para trabalhar com variáveis categóricas, ou informação qualitativa. Um fator só pode ter alguns valores pré-definidos pelo usuário. Pense, por exemplo, nas categorias de sexo ou raça que o IBGE utiliza em suas pesquisas amostrais. Há um pequeno número pré-definido de categorias. Para construir um fator, você pode fazer o seguinte:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;genero &amp;lt;- factor(c(&amp;quot;homem&amp;quot;, &amp;quot;mulher&amp;quot;, &amp;quot;mulher&amp;quot;, &amp;quot;homem&amp;quot;))

typeof(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $levels
## [1] &amp;quot;homem&amp;quot;  &amp;quot;mulher&amp;quot;
## 
## $class
## [1] &amp;quot;factor&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fatores seguem aquela linha que descrevemos para datas. R guarda os valores do seu fator utilizando números simples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unclass(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 2 1
## attr(,&amp;quot;levels&amp;quot;)
## [1] &amp;quot;homem&amp;quot;  &amp;quot;mulher&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mas na hora que você utiliza esse fator, o software apresenta para você os rótulos das categorias.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;genero
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] homem  mulher mulher homem 
## Levels: homem mulher
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Através do atributo &lt;code&gt;levels&lt;/code&gt;, o R está associando cada valor numérico com um rótulo, e no momento em que você procurar construir uma tabela ou trabalhar com esses fatores de qualquer maneira, o software utilizará o atributo classe para dar-lhe o tratamento adequado. Por exemplo, se eu tentar transformar os vetores a seguir em caractere, o R saberá distinguir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;as.character(c(1, 2, 2, 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;2&amp;quot; &amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;as.character(genero)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;homem&amp;quot;  &amp;quot;mulher&amp;quot; &amp;quot;mulher&amp;quot; &amp;quot;homem&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O uso da função &lt;code&gt;as.character&lt;/code&gt; é um gancho perfeito para o próximo assunto. Mas antes:&lt;/p&gt;
&lt;h4 id=&#34;exercício-10&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Construa um fator a partir do vetor a seguir que registre os meses do ano. Dica: utilize o argumento &lt;code&gt;levels&lt;/code&gt; da função &lt;code&gt;factor&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;f &amp;lt;- c(1, 3, 9, 4, 11, 2, 6, 6, 3, 2, 9, 11, 12, 12, 1, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;coerção&#34;&gt;Coerção&lt;/h3&gt;
&lt;p&gt;Coerção é o comportamento da linguagem R ao encontrar situações em que diferentes tipos de dados estão misturados em um mesmo vetor atômico. Lembrem que cada vetor atômico só pode armazenar 1 tipo de informação, portanto, ao tentar inserir uma informação de outro tipo, R devolverá:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;um erro, indicando que a operação é impossível, OU&lt;/li&gt;
&lt;li&gt;a operação será realizada, porém, o tipo da informação será modificado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No segundo caso, o R aplica uma coerção na tentativa de preservar ao máximo as informações. Veja exemplos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 0, 1, TRUE, FALSE)
v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 0 1 1 0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 2, 3, &amp;quot;4&amp;quot;)
v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(TRUE, FALSE, &amp;quot;TRUE&amp;quot;)
v
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;TRUE&amp;quot;  &amp;quot;FALSE&amp;quot; &amp;quot;TRUE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R vai tentar transformar o tipo de dados mais específico num tipo de dado mais geral, assim, evitando que a informação seja perdida.&lt;/p&gt;
&lt;p&gt;Em outros casos, o processo de coerção pode ser iniciado pelo próprio usuário, porque este deseja transformar um tipo de dado em outro:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 0, 1, TRUE, FALSE)
as.logical(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE  TRUE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 2, 3, &amp;quot;4&amp;quot;)
as.numeric(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(TRUE, FALSE, &amp;quot;TRUE&amp;quot;)
as.logical(v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Existem funções &lt;code&gt;as.____&lt;/code&gt; para todos os tipos de dados e classes mais comuns do R, e é praxe que autores de novos pacotes que trazem classes também incluam seus próprios métodos de coerção para suas novas classes.&lt;/p&gt;
&lt;h4 id=&#34;exercício-11&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Porque o R prefere coagir vetores lógicos mistos para números e vetores numéricos e lógicos para caractere?&lt;/p&gt;
&lt;h3 id=&#34;listas&#34;&gt;Listas&lt;/h3&gt;
&lt;p&gt;Até esse momento, trabalhamos com variações no vetor atômico. O vetor atômico tem uma limitação repetidamente discutida: ele só armazena um tipo de dado. Bancos de dados reais certamente armazenarão informações de vários tipos distintos, então precisamos de uma estrutura de dado que tenha a capacidade de guardar estas informações díspares. É aí que entram as listas.&lt;/p&gt;
&lt;p&gt;Listas são como vetores atômicos, mas elas não guardam valores! Listas guardam OBJETOS R. Qualquer um. Vetores atômicos? Sim. Funções? Sim. Outras listas? Pode também. Para criar listas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;list1 &amp;lt;- list(100:130, &amp;quot;R&amp;quot;, list(TRUE, FALSE))
list1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
##  [1] 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118
## [20] 119 120 121 122 123 124 125 126 127 128 129 130
## 
## [[2]]
## [1] &amp;quot;R&amp;quot;
## 
## [[3]]
## [[3]][[1]]
## [1] TRUE
## 
## [[3]][[2]]
## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note como cada elemento da lista é um objeto R diferente. A lista não julga, ela apenas armazena seus objetos. Um detalhe interessante e que será importante mais tarde: note como a saída do R diferencia [1] de [[1]] no índice dos elementos da lista. Isso é necessário porque a lista pode guardar muitas coisas dentro de si, e o usuário precisa ter a capacidade de recuperar essas informações que estão lá nas profundezas da lista. Falaremos um pouco mais sobre isso na aula de amanhã, quando discutirmos indexação.&lt;/p&gt;
&lt;h4 id=&#34;exercício-12&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Crie uma lista de compras em que cada elemento da lista seja um vetor atômico de itens que você vai comprar de cada seção do supermercado. Para simplificar, utilize as seções: &amp;ldquo;limpeza&amp;rdquo;, &amp;ldquo;mercearia&amp;rdquo; e &amp;ldquo;hortifruti&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;data-frames&#34;&gt;Data Frames&lt;/h3&gt;
&lt;p&gt;Data frames são o formato de dados mais popular em análise de dados, e por um bom motivo: eles combinam a flexibilidade necessária para armazenar diversos tipos de informações diferentes com a consistência das matrizes e dos vetores. Por trás da cortina, eles são listas com restrições: todos os elementos da lista devem ter o mesmo comprimento, isso garante a retangularidade da nossa informação.&lt;/p&gt;
&lt;p&gt;Essa retangularidade é importante do ponto de vista analítico: o data frame deve conter uma observação para cada unidade de análise e uma coluna para cada informação ou variável que foi coletada sobre essa unidade de análise. Se, de alguma forma esta informação não está disponível, isso deverá ficar &lt;strong&gt;explícito&lt;/strong&gt; por uma célula com valor desconhecido.&lt;/p&gt;
&lt;p&gt;No R, embora isso não seja tão comum, você pode construir data frames manualmente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(x = c(1, 2, 3, 4, 5),
                 y = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;),
                 z = c(TRUE, FALSE, TRUE, TRUE, FALSE))
df
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   x y     z
## 1 1 a  TRUE
## 2 2 b FALSE
## 3 3 c  TRUE
## 4 4 d  TRUE
## 5 5 e FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Logo de cara, vemos que o &lt;code&gt;data.frame&lt;/code&gt; do R tem aquela cara de tabela com a qual estamos acostumados. Podemos ver como o &lt;code&gt;data.frame&lt;/code&gt; é construído observado alguns de seus atributos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;typeof(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;class(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attributes(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $names
## [1] &amp;quot;x&amp;quot; &amp;quot;y&amp;quot; &amp;quot;z&amp;quot;
## 
## $class
## [1] &amp;quot;data.frame&amp;quot;
## 
## $row.names
## [1] 1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Secretamente, o data.frame é uma lista, com nomes, um atributo menos importante, chamado &lt;code&gt;row.names&lt;/code&gt;, e algumas características como aquelas que mencionamos acima. O &lt;code&gt;data.frame&lt;/code&gt; e o &lt;code&gt;vetor&lt;/code&gt; são as principais ferramentas no cotidiano do analista e, portanto, são as que mais vamos utilizar daqui pra frente. Outra função útil é a e&lt;code&gt;str&lt;/code&gt;utura de uma lista ou data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &#39;data.frame&#39;:	5 obs. of  3 variables:
##  $ x: num  1 2 3 4 5
##  $ y: chr  &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot; &amp;quot;d&amp;quot; ...
##  $ z: logi  TRUE FALSE TRUE TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ela oferece uma visão geral do data.frame, e é especialmente útil quando seu data.frame é grande e contém muitas variáveis.&lt;/p&gt;
&lt;p&gt;Em geral, a digitação de data sets no R não é recomendada. A interface do programa não te ajuda a produzir dados no formato necessário. É provável que você cometa muitos erros no caminho e não há uma ferramenta muito completa dentro do software que facilite esse processo. Isso ocorre porque o R não é um software de produção ou tabulação de dados, como o Microsoft Excel, o OpenOffice Calc ou o IBM SPSS, mas sim um software de análise de dados. O mais comum é você importar um banco de dados pronto e previamente tabulado utilizando uma das funções do R, como no exemplo abaixo, em que importamos uma pequena amostra da PNAD Contínua do primeiro trimestre diretamente um link na internet.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;url &amp;lt;- &amp;quot;https://raw.githubusercontent.com/laddem/site/master/amostra_pnad.csv&amp;quot;
df &amp;lt;- read.csv(url)
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre               UF  V1022  V2007 V2009  V2010 VD2003
## 1 2021         1            Ceará Urbana  Homem    80 Branca      2
## 2 2021         1 Distrito Federal Urbana Mulher    19  Parda      4
## 3 2021         1       Pernambuco Urbana Mulher    36  Preta      2
## 4 2021         1   Santa Catarina Urbana  Homem    50  Parda      2
## 5 2021         1        São Paulo Urbana Mulher    43  Parda      3
## 6 2021         1            Goiás Urbana  Homem    35  Parda      3
##                      VD3005 VD4016
## 1 16 anos ou mais de estudo     NA
## 2         11 anos de estudo     NA
## 3         12 anos de estudo   1045
## 4          5 anos de estudo   1500
## 5          9 anos de estudo   1600
## 6         14 anos de estudo   3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veremos mais sobre importação na aula de amanhã!&lt;/p&gt;
&lt;h4 id=&#34;exercício-13&#34;&gt;Exercício&lt;/h4&gt;
&lt;p&gt;Crie um data frame contendo informações de cinco colegas de turma: registre o nome, a idade presumida, o sexo, a profissão e a renda presumida. Não precisa perguntar, basta chutar um valor que você ache.&lt;/p&gt;
&lt;h3 id=&#34;fórmulas&#34;&gt;Fórmulas&lt;/h3&gt;
&lt;p&gt;Fórmulas são a maneira que os desenvolvedores do R encontraram para representar equações matemáticas. Porém, como tudo no software livre, elas foram apropriadas por desenvolvedores para muitas tarefas criativas e vocês irão encontrá-las por aí cumprindo diversos papéis. Vejamos alguns exemplos.&lt;/p&gt;
&lt;p&gt;Fórmulas são usadas para especificar as equações de modelos matemáticos no R:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modelo_linear &amp;lt;- lm(VD4016 ~ VD3005, data = df)
summary(modelo_linear)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = VD4016 ~ VD3005, data = df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3786.1  -744.7  -345.1   382.7 15013.9 
## 
## Coefficients:
##                                                Estimate Std. Error t value
## (Intercept)                                       682.5      946.1   0.721
## VD300510 anos de estudo                           467.5     1221.4   0.383
## VD300511 anos de estudo                           434.8     1064.8   0.408
## VD300512 anos de estudo                           905.3      960.2   0.943
## VD300513 anos de estudo                          1584.8     1104.8   1.434
## VD300514 anos de estudo                          1497.5     1119.4   1.338
## VD300515 anos de estudo                          1525.8     1092.5   1.397
## VD300516 anos ou mais de estudo                  3303.6      970.1   3.406
## VD30052 anos de estudo                            217.5     1445.2   0.150
## VD30053 anos de estudo                            261.5     1269.3   0.206
## VD30054 anos de estudo                            727.8     1119.4   0.650
## VD30055 anos de estudo                            649.5     1019.0   0.637
## VD30056 anos de estudo                            610.5     1064.8   0.573
## VD30057 anos de estudo                           -163.7     1158.7  -0.141
## VD30058 anos de estudo                            990.8     1064.8   0.931
## VD30059 anos de estudo                            762.6     1007.2   0.757
## VD3005Sem instrução e menos de 1 ano de estudo    131.8     1186.0   0.111
##                                                Pr(&amp;gt;|t|)    
## (Intercept)                                    0.471128    
## VD300510 anos de estudo                        0.702120    
## VD300511 anos de estudo                        0.683236    
## VD300512 anos de estudo                        0.346404    
## VD300513 anos de estudo                        0.152291    
## VD300514 anos de estudo                        0.181807    
## VD300515 anos de estudo                        0.163341    
## VD300516 anos ou mais de estudo                0.000733 ***
## VD30052 anos de estudo                         0.880452    
## VD30053 anos de estudo                         0.836892    
## VD30054 anos de estudo                         0.515999    
## VD30055 anos de estudo                         0.524230    
## VD30056 anos de estudo                         0.566756    
## VD30057 anos de estudo                         0.887695    
## VD30058 anos de estudo                         0.352699    
## VD30059 anos de estudo                         0.449441    
## VD3005Sem instrução e menos de 1 ano de estudo 0.911583    
## ---
## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1
## 
## Residual standard error: 1892 on 370 degrees of freedom
##   (613 observations deleted due to missingness)
## Multiple R-squared:  0.2427,	Adjusted R-squared:  0.2099 
## F-statistic: 7.409 on 16 and 370 DF,  p-value: 4.467e-15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Também são usadas para algumas funções que produzem tabulações cruzadas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;xtabs(~ VD3005 + V2007, data = df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                           V2007
## VD3005                                     Homem Mulher
##   1 ano de estudo                             12     17
##   10 anos de estudo                            8     16
##   11 anos de estudo                           10     14
##   12 anos de estudo                          105    111
##   13 anos de estudo                           12      7
##   14 anos de estudo                            6     13
##   15 anos de estudo                            9      8
##   16 anos ou mais de estudo                   51     61
##   2 anos de estudo                            14     13
##   3 anos de estudo                            16     15
##   4 anos de estudo                            19     27
##   5 anos de estudo                            44     46
##   6 anos de estudo                            25     23
##   7 anos de estudo                            13     20
##   8 anos de estudo                            25     19
##   9 anos de estudo                            44     27
##   Sem instrução e menos de 1 ano de estudo    47     45
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algumas funções que produzem gráficos também utilizam fórmulas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxplot(VD4016 ~ V2010, data = df)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/rbase/dia1_files/figure-html/unnamed-chunk-70-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Falaremos mais de fórmulas no futuro, a medida que elas forem aparecendo. Nos exemplos acima, é possível ver que a fórmula não tem apenas um significado. Dependendo do contexto da função, ela pode fazer coisas muito diferentes, usando seus lados esquerdo e direito para tarefas distintas. O que é importante vocês levarem com vocês é o formato das fórmulas, e uma intuição de que quando uma fórmula aparece, algo está sendo feito com uma lógica do tipo: &amp;ldquo;Para cada x, corresponde um y&amp;rdquo;, ou algo similar.&lt;/p&gt;
&lt;h4 id=&#34;exerício&#34;&gt;Exerício&lt;/h4&gt;
&lt;p&gt;Consulte o &lt;code&gt;?xtabs&lt;/code&gt;, qual o significado da fórmula e para que servem os lados esquerdo e direito?&lt;/p&gt;
&lt;h2 id=&#34;revisão&#34;&gt;Revisão&lt;/h2&gt;
&lt;p&gt;Cobrimos bastante coisa na aula de hoje, e não é nosso interesse que vocês saiam dessa aula decorando tudo. Vamos destacar alguns pontos mais importantes, que são a chave para vocês trabalharem no R.&lt;/p&gt;
&lt;p&gt;Objetos são formas de armazenar coisas na memória do computador, eles podem ser de uma variedade de tipos e classes, e ter vários formatos mais ou menos adequados as nossas necessidades. Os objetos mais comuns no nosso arsenal são as funções, os vetores e os data frames.&lt;/p&gt;
&lt;p&gt;As funções são os verbos de uma linguagem de programação, elas fazem coisas aos nossos objetos. Você provavelmente vai passar a maior parte do tempo usando funções pré-programadas, mas também pode escrever suas próprias.&lt;/p&gt;
&lt;p&gt;Os vetores são a forma mais simples de organizar dados, em geral, trabalharemos com vetores atômicos, que guardam sequências de informações do mesmo tipo e uma única dimensão. Vetores de 2 dimensões, ou matrizes, podem ser ocasionalmente importantes para vocês em algum momento.&lt;/p&gt;
&lt;p&gt;Os data frames são o feijão com arroz da análise de dados, eles são flexíveis para acomodar tipos de dados distintos e respeitam as convenções que são importantes para nós: consistência de operações, uma observação por linha, uma variável por coluna.&lt;/p&gt;
&lt;p&gt;Os objetos podem ter diversos atributos. Muito deles são apenas estéticos para facilitar a comunicação com o usuário, outros são mais substanciais, e alteram a forma como o R processa os dados guardados ali. Citamos exemplos de fatores e data/tempo como exemplos. Um dos atributos mais importantes de um objeto é sua classe, que discutimos um pouco.&lt;/p&gt;
&lt;p&gt;Por fim, falamos de dois comportamentos importantes do software: coerção e reciclagem. Eles podem facilitar ou complicar a nossa vida se não tomamos cuidado com esse comportamento. A coerção transforma o tipo dos vetores para um tipo mais genérico com o intuito de preservar informações. A reciclagem aumenta o tamanho de objetos menores para bater com o tamanho de objetos maiores numa mesma operação.&lt;/p&gt;
&lt;h3 id=&#34;exercícios&#34;&gt;Exercícios&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Como você poderia identificar o tipo de um objeto? Como você poderia identificar a classe dele? Qual a diferença entre essas duas coisas? Porque isso é relevante?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Digamos que você quer armazenar algumas informações na memória do computador. Que tipo de objeto você utilizaria para armanzenar:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Os nomes dos colegas da sua turma&lt;/li&gt;
&lt;li&gt;Seus números de telefone&lt;/li&gt;
&lt;li&gt;Uma variável que indica se esta pessoa nasceu antes de 1989&lt;/li&gt;
&lt;li&gt;A idade de um grupo de pessoas&lt;/li&gt;
&lt;li&gt;Informações de cadastro de uma pessoa: nome completo, afiliações, telefones para contato, endereços, etc.&lt;/li&gt;
&lt;li&gt;Uma coleção de funções que você utiliza frequentemente&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Porque no resumo eu disse que as funções são verbos? Que tipo de ações as funções que vimos na aula fazem nos nossos objetos? Se as funções são verbos, que classe de palavras a gente poderia dizer que são os nossos objetos? E nós, que usamos o software, o que somos?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Digamos que eu quero armazenar as informações de cadastro dos membros da turma. Que estrutura de dados eu deveria utilizar? Como você implementaria esta estrutura no R? Desenvolva um pequeno exemplo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quais são os atributos de um data frame? Como você poderia descobrí-los e alterá-los? Em que situações isso seria proveitoso?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Suponha que você têm o vetor atômico abaixo:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v &amp;lt;- c(1, 1, TRUE, FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que acontecerá com as informações desse vetor ao ser armazenado no R? Como você poderia alterar esse resultado? Porque o R se comporta dessa maneira?&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Considere a operação matemática abaixo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;v1 &amp;lt;- c(1, 2, 3)
v2 &amp;lt;- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)

v1 * v2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que você espera encontrar na saída do R ao rodar essa seção? Rode o código e responda: você se surpreendeu? O que aconteceu e porquê? Qual o significado da mensagem de aviso?&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Considere o banco de dados abaixo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sala &amp;lt;- data.frame(
  id = c(1, 2, 3),
  idade = c(20, 25, 30, 35, 40, 45),
  nome = c(&amp;quot;Fulano&amp;quot;, &amp;quot;Cicrano&amp;quot;, &amp;quot;Beltrano&amp;quot;, &amp;quot;Herculano&amp;quot;, &amp;quot;Mariano&amp;quot;, &amp;quot;Carrano&amp;quot;),
  sexo = &amp;quot;Masculino&amp;quot;,
  origem = c(&amp;quot;Campinas&amp;quot;, &amp;quot;Barueri&amp;quot;, &amp;quot;Monte Verde&amp;quot;, &amp;quot;Rio de Janeiro&amp;quot;, &amp;quot;Natal&amp;quot;, &amp;quot;Belo Horizonte&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Verifique as variáveis &lt;code&gt;id&lt;/code&gt; e &lt;code&gt;sexo&lt;/code&gt;. Os valores dessas variáveis fazem sentido? Elas não impedem a construção do data frame, por quê? Que característica do R está operando nessas variáveis?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manipulação de objetos em R</title>
      <link>https://laddem.github.io/courses/rbase/dia2/</link>
      <pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://laddem.github.io/courses/rbase/dia2/</guid>
      <description>&lt;h2 id=&#34;manipulação-de-objetos&#34;&gt;Manipulação de objetos&lt;/h2&gt;
&lt;h3 id=&#34;leituraimportação&#34;&gt;Leitura/Importação&lt;/h3&gt;
&lt;p&gt;Você pode importar um data.frame para o R de duas formas. A primeira delas, é carregando através do &lt;code&gt;Environment&lt;/code&gt; no canto direito superior do RStudio. Clique em Import Dataset e selecione &amp;lsquo;From Text File&amp;rsquo;&lt;/p&gt;
&lt;p&gt;O RStudio solicitará que você selecione o arquivo que deseja importar e, em seguida, abrirá um assistente para ajudá-lo a importar os dados. Use o assistente para informar ao RStudio qual nome dar ao conjunto de dados. Você também pode usar o assistente para informar ao RStudio qual caractere o conjunto de dados usa como separador, qual caractere ele usa para representar decimais (geralmente um ponto nos Estados Unidos e uma vírgula na Europa/Brasil) e se o conjunto de dados vem ou não com uma linha de nomes de coluna (conhecida como cabeçalho). Para ajudá-lo, o assistente mostra a aparência do arquivo bruto, bem como a aparência dos dados carregados com base nas configurações de entrada.&lt;/p&gt;
&lt;p&gt;Você também pode desmarcar a caixa “Strings como fatores” no assistente. Eu recomendo fazer isso. Se você fizer isso, o R carregará todas as suas cadeias de caracteres como cadeias de caracteres. Caso contrário, R os converterá em fatores.&lt;/p&gt;
&lt;p&gt;A outra forma de importar um arquivo no R, é usando direto no script a função &amp;lsquo;read.csv&amp;rsquo;. Vamos trabalhar com os dados da pnad, no arquivo amostra_pnad.csv. Ele é um arquivo de valores separados por vírgula ou CSV para abreviar. CSVs são arquivos de texto simples, o que significa que você pode abri-los em um editor de texto (assim como em muitos outros programas). Se você abrir amostra_pnad.csv, verá que ele contém uma tabela de dados semelhante à seguinte. Cada linha da tabela é salva em sua própria linha e uma vírgula é usada para separar as células dentro de cada linha. Cada arquivo CSV compartilha este formato básico:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Ano&amp;rdquo;,&amp;ldquo;Trimestre&amp;rdquo;,&amp;ldquo;UF&amp;rdquo;,&amp;ldquo;V1022&amp;rdquo;,&amp;ldquo;V2007&amp;rdquo;,&amp;ldquo;V2009&amp;rdquo;,&amp;ldquo;V2010&amp;rdquo;,&amp;ldquo;VD2003&amp;rdquo;,&amp;ldquo;VD3005&amp;rdquo;,&amp;ldquo;VD4016&amp;rdquo;
&amp;ldquo;2021&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;Ceará&amp;rdquo;,&amp;ldquo;Urbana&amp;rdquo;,&amp;ldquo;Homem&amp;rdquo;,80,&amp;ldquo;Branca&amp;rdquo;,2,&amp;ldquo;16 anos ou mais de estudo&amp;rdquo;,NA
&amp;ldquo;2021&amp;rdquo;,&amp;ldquo;1&amp;rdquo;,&amp;ldquo;Distrito Federal&amp;rdquo;,&amp;ldquo;Urbana&amp;rdquo;,&amp;ldquo;Mulher&amp;rdquo;,19,&amp;ldquo;Parda&amp;rdquo;,4,&amp;ldquo;11 anos de estudo&amp;rdquo;,NA
&amp;hellip;e assim por diante&lt;/p&gt;
&lt;p&gt;Vamos carregar novamente os dados da pnad que foram mostrados na aula passada:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;url &amp;lt;- &amp;quot;https://raw.githubusercontent.com/laddem/site/master/amostra_pnad.csv&amp;quot;
df &amp;lt;- read.csv(url)
head(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre               UF  V1022  V2007 V2009  V2010 VD2003
## 1 2021         1            Ceará Urbana  Homem    80 Branca      2
## 2 2021         1 Distrito Federal Urbana Mulher    19  Parda      4
## 3 2021         1       Pernambuco Urbana Mulher    36  Preta      2
## 4 2021         1   Santa Catarina Urbana  Homem    50  Parda      2
## 5 2021         1        São Paulo Urbana Mulher    43  Parda      3
## 6 2021         1            Goiás Urbana  Homem    35  Parda      3
##                      VD3005 VD4016
## 1 16 anos ou mais de estudo     NA
## 2         11 anos de estudo     NA
## 3         12 anos de estudo   1045
## 4          5 anos de estudo   1500
## 5          9 anos de estudo   1600
## 6         14 anos de estudo   3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se a importação ocorrer corretamente, o data.frame irá aparecer no ambiente &lt;code&gt;Environment&lt;/code&gt; mostrando o número de observações e o número de variáveis (colunas).&lt;/p&gt;
&lt;p&gt;Quando você importa um conjunto de dados, o RStudio salva os dados em um data frame e, em seguida, exibe o data frame em uma guia Exibir. Você pode abrir qualquer data frame em uma guia Exibir a qualquer momento com a função View().&lt;/p&gt;
&lt;h4 id=&#34;exercícios&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Visualize os dados que você acabou de importar em formato de planilha através do Environment e usando a função View().
É possível também visualizar as 6 primeiras linhas do data.frame ou as 6 últimas linhas. Para isso, use as funções head() e tail().&lt;/p&gt;
&lt;p&gt;Obs: se você quiser ver mais que 6 linhas, coloque o segundo argumento na função head(df, 10). Quantas linhas vão ser mostradas neste caso?&lt;/p&gt;
&lt;h3 id=&#34;escritasalvar&#34;&gt;Escrita/Salvar&lt;/h3&gt;
&lt;p&gt;Você pode salvar e exportar um novo arquivo .csv para o seu computador. Assim, você pode enviá-lo por e-mail a um colega, armazená-lo em um pen drive ou abri-lo em um programa diferente. Você pode salvar quaisquer dados executados e alterados no R em um arquivo .csv com o comando write.csv.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;write.csv(df, file = &amp;quot;df_pnad.csv&amp;quot;, row.names = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R transformará seu data frame em um arquivo de texto simples com o formato de valores separados por vírgula e salvará o arquivo em seu diretório de trabalho. Para ver onde está seu diretório de trabalho, execute &lt;code&gt;getwd()&lt;/code&gt;. Para alterar a localização do seu diretório de trabalho, visite &lt;em&gt;Sessão &amp;gt; Definir Diretório de Trabalho &amp;gt; Escolher Diretório&lt;/em&gt; na barra de menus do RStudio.&lt;/p&gt;
&lt;p&gt;Você pode personalizar o processo de salvamento com o grande conjunto de argumentos opcionais de write.csv (consulte &lt;code&gt;?write.csv&lt;/code&gt; para obter detalhes). No entanto, existem três argumentos que você deve usar sempre que executar &lt;code&gt;write.csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Primeiro, você deve fornecer a função &lt;code&gt;write.csv&lt;/code&gt; o nome do data frame que deseja salvar. Em seguida, você deve fornecer um nome de arquivo para dar ao seu arquivo. R entenderá esse nome literalmente, portanto, certifique-se de fornecer uma extensão.&lt;/p&gt;
&lt;p&gt;Finalmente, você deve adicionar o argumento &lt;code&gt;row.names = FALSE&lt;/code&gt;. Isso impedirá R de adicionar uma coluna de números no início do seu data frame. Esses números identificarão suas linhas de 1 a 1000, mas é improvável que qualquer programa em que você abrir &lt;code&gt;df_pnad.csv&lt;/code&gt; compreenderá o sistema de nomes de linhas. Muito provavelmente, o programa assumirá que os nomes das linhas são a primeira coluna de dados em seu data frame. Na verdade, isso é exatamente o que R assumirá se você reabrir &lt;code&gt;df_pnad.csv&lt;/code&gt;. Se você salvar e abrir &lt;code&gt;df_pnad.csv&lt;/code&gt; várias vezes em R, notará colunas duplicadas de números de linha se formando no início de seu data frame. Não posso explicar por que R faz isso, mas posso explicar como evitá-lo: use &lt;code&gt;row.names = FALSE&lt;/code&gt; sempre que salvar dados com &lt;code&gt;write.csv&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;notação&#34;&gt;Notação&lt;/h2&gt;
&lt;p&gt;Para que você consiga trabalhar com valores individuais dentro do seu data frame, tarefa necessária em análise de dados, você pode selecionar valores dentro de um objeto R através do seu sistema de notação.&lt;/p&gt;
&lt;h3 id=&#34;selecionando-valores&#34;&gt;Selecionando valores&lt;/h3&gt;
&lt;p&gt;O R tem um sistema de notação que permite extrair valores de objetos R. Para extrair um valor ou conjunto de valores de um data frame, escreva o nome do data frame seguido por um par de colchetes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[ , ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Ano Trimestre                  UF  V1022  V2007 V2009    V2010 VD2003
## 1    2021         1               Ceará Urbana  Homem    80   Branca      2
## 2    2021         1    Distrito Federal Urbana Mulher    19    Parda      4
## 3    2021         1          Pernambuco Urbana Mulher    36    Preta      2
## 4    2021         1      Santa Catarina Urbana  Homem    50    Parda      2
## 5    2021         1           São Paulo Urbana Mulher    43    Parda      3
## 6    2021         1               Goiás Urbana  Homem    35    Parda      3
## 7    2021         1               Amapá Urbana  Homem    72    Parda      3
## 8    2021         1           São Paulo Urbana Mulher    23  Amarela      8
## 9    2021         1    Distrito Federal Urbana  Homem    23    Parda      5
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Entre os colchetes estarão dois índices separados por uma vírgula. Os índices dizem ao R quais valores retornar. O R usará o primeiro índice para o subconjunto das linhas do dataframe e o segundo índice para o subconjunto das colunas. Ou seja, df[linhas, colunas].&lt;/p&gt;
&lt;p&gt;Você pode pensar em um índice como um CEP ou o endereço de um valor ou um conjunto de valores, e a indexação como o processo que você utilizaria para encontrar um desses valores numa lista telefônica, no Google ou no Maps.&lt;/p&gt;
&lt;p&gt;Você tem uma escolha quando se trata de escrever índices. Existem seis maneiras diferentes de escrever um índice para o R e cada uma faz algo ligeiramente diferente. Eles são todos muito simples e muito úteis, então vamos dar uma olhada em cada um deles. Você pode criar índices com:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inteiros positivos&lt;/li&gt;
&lt;li&gt;Inteiros negativos&lt;/li&gt;
&lt;li&gt;Zero&lt;/li&gt;
&lt;li&gt;Espaços em branco&lt;/li&gt;
&lt;li&gt;Valores lógicos&lt;/li&gt;
&lt;li&gt;Nomes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O mais simples de usar são os inteiros positivos.&lt;/p&gt;
&lt;p&gt;Por exemplo, caso você queira extrair um valor que está na primeira linha e na quarta coluna do seu data frame, no caso, estamos usando o df, que é uma pequena amostra da pnad, lembra? Como podemos fazer isso?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[1, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Urbana&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para extrair mais de um valor, use um vetor com inteiros positivos. Por exemplo, se você quer retornar a primeira linha de &lt;em&gt;df&lt;/em&gt; com df[1, c(1,2,3)] ou df[1, 1:3]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[1,1:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre    UF
## 1 2021         1 Ceará
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[1, c(1,2,3)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre    UF
## 1 2021         1 Ceará
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essa notação não é limitada somente a objetos do tipo data frame. Você pode usar a mesma sintaxe para selecionar valores em qualquer objeto R, desde que você forneça um índice para cada dimensão do objeto. Então, por exemplo, você pode definir um subconjunto de um vetor (que tem uma dimensão) com um único índice:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vec &amp;lt;- c(10, 15, 31, 60, 10, 2)
vec[1:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10 15 31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bom, isso é a notação usando usando inteiros positivos. Como seria com inteiros negativos? Quais as diferenças?&lt;/p&gt;
&lt;p&gt;Vamos lá!&lt;/p&gt;
&lt;p&gt;Os inteiros negativos fazem exatamente o oposto dos inteiros positivos durante a indexação. O R retornará todos os elementos, exceto os elementos em um índice negativo. Por exemplo, df[-1, 1:10] retornará tudo, exceto a primeira linha do data frame. df[-(2:999), 1:10] retornará a primeira linha e a última linha (e excluirá todo o resto):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[-(2:999), 1:10]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Ano Trimestre             UF  V1022 V2007 V2009  V2010 VD2003
## 1    2021         1          Ceará Urbana Homem    80 Branca      2
## 1000 2021         1 Santa Catarina  Rural Homem    66 Branca      2
##                         VD3005 VD4016
## 1    16 anos ou mais de estudo     NA
## 1000          5 anos de estudo   1000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[-1, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;11 anos de estudo&amp;quot;                       
##   [2] &amp;quot;12 anos de estudo&amp;quot;                       
##   [3] &amp;quot;5 anos de estudo&amp;quot;                        
##   [4] &amp;quot;9 anos de estudo&amp;quot;                        
##   [5] &amp;quot;14 anos de estudo&amp;quot;                       
##   [6] &amp;quot;16 anos ou mais de estudo&amp;quot;               
##   [7] &amp;quot;12 anos de estudo&amp;quot;                       
##   [8] &amp;quot;14 anos de estudo&amp;quot;                       
##   [9] &amp;quot;5 anos de estudo&amp;quot;                        
##  [10] &amp;quot;9 anos de estudo&amp;quot;                        
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A vantagem de usar inteiros negativos ao invés de inteiros positivos na indexação, é que os inteiros negativos são uma maneira mais eficiente de criar um subconjunto do que os inteiros positivos, se você quiser incluir a maioria das linhas ou colunas de um data frame.&lt;/p&gt;
&lt;p&gt;Na notação &lt;code&gt;df[-2,2]&lt;/code&gt; o que irá ser mostrado pelo R?&lt;/p&gt;
&lt;p&gt;O que acontecerá se você usar o zero como um índice? Zero não é um inteiro positivo nem um inteiro negativo, mas ele ainda usará para fazer um tipo de subconjunto. O R, neste caso, não retornará nada de uma dimensão quando você usa zero como um índice:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[0, 0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## data frame with 0 columns and 0 rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pra ser sincera, indexar com 0 não ajuda em muita coisa.&lt;/p&gt;
&lt;p&gt;Além dos inteiros positivos, inteiros negativos, e zero, você pode também usar espaços em branco na indexação. O espaço em branco no R vai extrair todos os valores em uma dimensão. Isso permite subdividir um objeto em uma dimensão, mas não nas outras, o que é útil para extrair linhas ou colunas inteiras de um data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[1, ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre    UF  V1022 V2007 V2009  V2010 VD2003
## 1 2021         1 Ceará Urbana Homem    80 Branca      2
##                      VD3005 VD4016
## 1 16 anos ou mais de estudo     NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[, 5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1] &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot;
##    [9] &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot;
##   [17] &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot;
##   [25] &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot; 
##   [33] &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot;
##   [41] &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot; 
##   [49] &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot;
##   [57] &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot;
##   [65] &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot;
##   [73] &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot; &amp;quot;Homem&amp;quot;  &amp;quot;Homem&amp;quot;  &amp;quot;Mulher&amp;quot; &amp;quot;Mulher&amp;quot;
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estamos quase chegando no final dos tipos de indexação que são possíveis de serem feitas no R.
No caso de valores lógicos, se você fornecer um vetor de &lt;code&gt;TRUEs&lt;/code&gt; e &lt;code&gt;FALSEs&lt;/code&gt; como seu índice, o R combinará cada &lt;code&gt;TRUE&lt;/code&gt; e &lt;code&gt;FALSE&lt;/code&gt; com uma linha do data frame (ou uma coluna, dependendo de onde você colocar o índice). O R então retornará cada linha que corresponde a um &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pode ser útil imaginar R lendo o data frame e perguntando: &amp;ldquo;Devo retornar a enésima linha da estrutura de dados?&amp;rdquo; e depois consultar o enésimo valor do índice para obter sua resposta. Para que este sistema funcione, seu vetor deve ser tão longo quanto a dimensão que você está tentando subdividir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[1, c(TRUE, TRUE, FALSE)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre  V1022 V2007  V2010 VD2003 VD4016
## 1 2021         1 Urbana Homem Branca      2     NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rows &amp;lt;- c(F, TRUE, TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, 
  F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, 
  F, F, F, F, F, F, F, F, F, F, F, F, F, F)

df[rows, ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Ano Trimestre                 UF  V1022  V2007 V2009   V2010 VD2003
## 2   2021         1   Distrito Federal Urbana Mulher    19   Parda      4
## 3   2021         1         Pernambuco Urbana Mulher    36   Preta      2
## 54  2021         1           Rondônia Urbana  Homem    44  Branca      2
## 55  2021         1     Espírito Santo Urbana Mulher    45  Branca      4
## 106 2021         1       Minas Gerais  Rural  Homem    31   Parda      3
## 107 2021         1          São Paulo Urbana  Homem    14  Branca      4
## 158 2021         1            Alagoas Urbana  Homem    38   Parda      1
## 159 2021         1              Amapá Urbana Mulher    20   Parda      3
## 210 2021         1            Roraima Urbana  Homem    55   Parda      6
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esse sistema será de grande ajuda na parte de modificação de valores que veremos daqui a pouco.&lt;/p&gt;
&lt;p&gt;Finalmente, você pode pedir os elementos que deseja pelo nome - se o seu objeto tiver nomes (consulte Nomes). Essa é uma maneira comum de extrair as colunas de um data frame, já que as colunas quase sempre têm um nome:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Ano&amp;quot;       &amp;quot;Trimestre&amp;quot; &amp;quot;UF&amp;quot;        &amp;quot;V1022&amp;quot;     &amp;quot;V2007&amp;quot;     &amp;quot;V2009&amp;quot;    
##  [7] &amp;quot;V2010&amp;quot;     &amp;quot;VD2003&amp;quot;    &amp;quot;VD3005&amp;quot;    &amp;quot;VD4016&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[3, c(&amp;quot;UF&amp;quot;, &amp;quot;V2007&amp;quot;, &amp;quot;V2010&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           UF  V2007 V2010
## 3 Pernambuco Mulher Preta
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[ , &amp;quot;VD3005&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1] &amp;quot;16 anos ou mais de estudo&amp;quot;               
##    [2] &amp;quot;11 anos de estudo&amp;quot;                       
##    [3] &amp;quot;12 anos de estudo&amp;quot;                       
##    [4] &amp;quot;5 anos de estudo&amp;quot;                        
##    [5] &amp;quot;9 anos de estudo&amp;quot;                        
##    [6] &amp;quot;14 anos de estudo&amp;quot;                       
##    [7] &amp;quot;16 anos ou mais de estudo&amp;quot;               
##    [8] &amp;quot;12 anos de estudo&amp;quot;                       
##    [9] &amp;quot;14 anos de estudo&amp;quot;                       
##   [10] &amp;quot;5 anos de estudo&amp;quot;                        
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercícios-1&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Retorne a informação da observação 800, e as colunas Ano, VD3005, V2009, V2010 do nosso data frame da amostra da pnad. O que o R retornará? Faça a mesma indexação usando inteiros positivos ou inteiros negativos.&lt;/p&gt;
&lt;h3 id=&#34;diferentes-seleções--e-&#34;&gt;Diferentes seleções: &lt;code&gt;[[&lt;/code&gt; e &lt;code&gt;$&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Dois tipos de objeto em R obedecem a um segundo sistema opcional de notação. Você pode extrair valores de data frames e listas com a sintaxe &lt;code&gt;$&lt;/code&gt;. Você encontrará a sintaxe $ repetidamente no R, então vamos examinar como ela funciona.&lt;/p&gt;
&lt;p&gt;Para selecionar uma coluna de um data frame, escreva o nome do data frame, no caso df, e o nome da coluna separados por $. Observe que nenhuma aspa deve estar no nome da coluna:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df$V2009
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1]  80  19  36  50  43  35  72  23  23  47  71  16  48  13  25   3  27  83
##   [19]  55  79  14  80  20  21  22  69  57  27  63  35  28  41  39  71   7  45
##   [37]  11   9  48  14  48  47   5  36  25  55   8  64   7  58  30   1  18  44
##   [55]  45  17   9  24  11  11  71  75  49  20  55  31  60   2   7  81  68  15
##   [73]  31   2  44  40  49  55   9  40  55   0  35  32   7  63  62  54  48   5
##   [91]  46  49  20  90  16   0  41  15  67  26  22  18  58  63   0  31  14  39
##  [109]  34  44  61  48  47  29  43  65  10  36  20   7  28  18  23  75  37  49
##  [127]  45   3  61  54  38  50  41  47  39  44  32  27  66  55  70  69  41  31
##  [145]  38  91  62  30  21  59   4  29   5  24  83   6  15  38  20  89  85  44
##  [163]  73   7  49  22  33   5  18   4  27  22   0  21  74  26  58  52  77  36
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R retornará todos os valores da coluna como um vetor. Esta notação &lt;code&gt;$&lt;/code&gt; é muito útil e muito usada porque você freqüentemente armazenará as variáveis de seus conjuntos de dados como colunas em um data frame. De vez em quando, você desejará executar uma função como &lt;code&gt;mean()&lt;/code&gt; ou &lt;code&gt;median()&lt;/code&gt; nos valores de uma variável. Em R, essas funções esperam um vetor de valores como entrada, e o &lt;code&gt;df$V2009&lt;/code&gt; entrega seus dados no formato certo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(df$V2009)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 36.939
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode usar a mesma notação com &lt;code&gt;$&lt;/code&gt; com os elementos de uma lista, se eles tiverem nomes. Essa notação também tem uma vantagem com listas. Se você criar um subconjunto de uma lista da maneira usual, o R retornará uma nova lista que contém os elementos solicitados, mesmo se você solicitar apenas um único elemento.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lista &amp;lt;- list(numbers = c(1, 2), logical = TRUE, strings = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;))

lista
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $numbers
## [1] 1 2
## 
## $logical
## [1] TRUE
## 
## $strings
## [1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lista[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $numbers
## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O resultado é uma lista menor com um elemento. Esse elemento é o vetor c(1, 2). Isso pode ser irritante porque muitas funções R não funcionam com listas. Por exemplo, sum(lst[1]) retornará um erro. Para você conseguir fazer uma operação com lista, você precisará usar &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(lista$numbers)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se os elementos em sua lista não tiverem nomes (ou você não quiser usar os nomes), você pode usar dois colchetes &lt;code&gt;[[ ]]&lt;/code&gt;, em vez de um, para criar um subconjunto da lista. Essa notação fará a mesma coisa que a notação &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lista[[1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em outras palavras, se você subdividir uma lista com a notação de colchete único, o R retornará uma lista menor. Se você subdividir uma lista com a notação de colchetes duplos, o R retornará apenas os valores que estavam dentro de um elemento da lista. Você pode combinar esse recurso com qualquer um dos métodos de indexação de R:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lista[&amp;quot;numbers&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $numbers
## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lista[[&amp;quot;numbers&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essa diferença é sutil, mas importante. Na comunidade R, há uma maneira popular e útil de pensar sobre isso. Imagine que cada lista é um trem e cada elemento é um vagão. Quando você usa colchetes simples, o R seleciona vagões de trem individuais e os retorna como um novo trem. Cada vagão mantém seu conteúdo, mas esse conteúdo ainda está dentro de um vagão de trem (ou seja, uma lista). Quando você usa colchetes duplos, o R realmente descarrega o carro e lhe devolve o conteúdo. Resumindo:&lt;/p&gt;
&lt;p&gt;Use colchetes simples para selecionar vagões de trem e colchetes duplos para selecionar o conteúdo dentro de um vagão.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://laddem.github.io/courses/rbase/dia2_files/hopr_train.png&#34; alt=&#34;A metáfora do trem&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;exercícios-2&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Assim como na lista, é possível usar os colchetes &lt;code&gt;[[ ]]&lt;/code&gt; em data frame. Tente usá-los no data frame da pnad. Quais são as diferenças encontradas?&lt;/p&gt;
&lt;h2 id=&#34;modificando-valores&#34;&gt;Modificando valores&lt;/h2&gt;
&lt;p&gt;Para manipular os valores dentro do seu data frame, faça primeiro uma cópia que você pode manipular. Isso garantirá que você sempre tenha uma cópia original do data frame para usar (caso as coisas dêem errado):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2 &amp;lt;- df
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;modificando-os-valores-diretamente&#34;&gt;Modificando os valores diretamente&lt;/h3&gt;
&lt;p&gt;Você pode usar o sistema de notação de R para modificar valores dentro de um objeto. Primeiro, descreva o valor (ou valores) que você deseja modificar. Em seguida, use o operador de atribuição &lt;code&gt;&amp;lt;-&lt;/code&gt; para sobrescrever esses valores. O R irá atualizar os valores selecionados no objeto original. Em um exemplo real:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor &amp;lt;- c(0, 0, 0, 0, 0, 0)
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode selecionar um valor dentro desse vetor· Neste caso selecionamos o primeiro:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E aqui, podemos modificar o valor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor[1] &amp;lt;- 35
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35  0  0  0  0  0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode substituir vários valores de uma vez, desde que o número de novos valores seja igual ao número de valores selecionados:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor[c(3, 4, 5)] &amp;lt;- c(1, 1, 1)
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35  0  1  1  1  0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor[4:6] &amp;lt;- vetor[4:6] + 1
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35  0  1  2  2  1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você também pode criar valores que ainda não existem em seu objeto. O R irá expandir o objeto para acomodar os novos valores:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor[7] &amp;lt;- 20
vetor
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 35  0  1  2  2  1 20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isto é uma ótima maneira de adicionar novas variáveis ao data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2$nova_coluna &amp;lt;- 1:1000

head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre               UF  V1022  V2007 V2009  V2010 VD2003
## 1 2021         1            Ceará Urbana  Homem    80 Branca      2
## 2 2021         1 Distrito Federal Urbana Mulher    19  Parda      4
## 3 2021         1       Pernambuco Urbana Mulher    36  Preta      2
## 4 2021         1   Santa Catarina Urbana  Homem    50  Parda      2
## 5 2021         1        São Paulo Urbana Mulher    43  Parda      3
## 6 2021         1            Goiás Urbana  Homem    35  Parda      3
##                      VD3005 VD4016 nova_coluna
## 1 16 anos ou mais de estudo     NA           1
## 2         11 anos de estudo     NA           2
## 3         12 anos de estudo   1045           3
## 4          5 anos de estudo   1500           4
## 5          9 anos de estudo   1600           5
## 6         14 anos de estudo   3000           6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Da mesma forma que você criou uma nova coluna, é possível removê-la atribuindo o valor &lt;code&gt;NULL&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2$nova_coluna &amp;lt;- NULL

head(df2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Ano Trimestre               UF  V1022  V2007 V2009  V2010 VD2003
## 1 2021         1            Ceará Urbana  Homem    80 Branca      2
## 2 2021         1 Distrito Federal Urbana Mulher    19  Parda      4
## 3 2021         1       Pernambuco Urbana Mulher    36  Preta      2
## 4 2021         1   Santa Catarina Urbana  Homem    50  Parda      2
## 5 2021         1        São Paulo Urbana Mulher    43  Parda      3
## 6 2021         1            Goiás Urbana  Homem    35  Parda      3
##                      VD3005 VD4016
## 1 16 anos ou mais de estudo     NA
## 2         11 anos de estudo     NA
## 3         12 anos de estudo   1045
## 4          5 anos de estudo   1500
## 5          9 anos de estudo   1600
## 6         14 anos de estudo   3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode selecionar um conjunto de linhas dentro de um data frame usando uma combinação dos sistemas de notação do R. Você pode destacar apenas os valores que você quer, definindo a dimensão das colunas do df2 com &lt;code&gt;[&lt;/code&gt;. Ou, você pode definir um subconjunto da coluna &lt;code&gt;df2$UF&lt;/code&gt;, misturando o &lt;code&gt;$&lt;/code&gt; com o &lt;code&gt;[&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2[c(5, 8, 39,44), ]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Ano Trimestre        UF  V1022  V2007 V2009   V2010 VD2003
## 5  2021         1 São Paulo Urbana Mulher    43   Parda      3
## 8  2021         1 São Paulo Urbana Mulher    23 Amarela      8
## 39 2021         1 São Paulo Urbana Mulher    48  Branca      3
## 44 2021         1 São Paulo Urbana  Homem    36  Branca      2
##                       VD3005 VD4016
## 5           9 anos de estudo   1600
## 8          12 anos de estudo   1200
## 39         12 anos de estudo   1200
## 44 16 anos ou mais de estudo     NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## selecionando linhas especificas e a coluna V2010
df2[c(5, 8, 39,44), 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 43 23 48 36
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## podemos fazer o mesmo dessa forma
df2$V2009[c(5, 8, 39,44)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 43 23 48 36
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suponha que você sabe que os valores dessas linhas na coluna V2009 estão errados e você precisa arrumá-los atribuindo novos valores. O conjunto de novos valores terá que ser do mesmo tamanho que o conjunto de valores que você está substituindo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2$V2009[c(5, 8, 39,44)] &amp;lt;- c(23, 23, 23, 23)

# ou

df2$V2009[c(5, 8, 39,44)]&amp;lt;- 23

head(df2, 44)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Ano Trimestre                UF  V1022  V2007 V2009   V2010 VD2003
## 1  2021         1             Ceará Urbana  Homem    80  Branca      2
## 2  2021         1  Distrito Federal Urbana Mulher    19   Parda      4
## 3  2021         1        Pernambuco Urbana Mulher    36   Preta      2
## 4  2021         1    Santa Catarina Urbana  Homem    50   Parda      2
## 5  2021         1         São Paulo Urbana Mulher    23   Parda      3
## 6  2021         1             Goiás Urbana  Homem    35   Parda      3
## 7  2021         1             Amapá Urbana  Homem    72   Parda      3
## 8  2021         1         São Paulo Urbana Mulher    23 Amarela      8
## 9  2021         1  Distrito Federal Urbana  Homem    23   Parda      5
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe que você está mudando os valores dos objetos salvos em df2, nos livros em inglês, isso é chamado de &lt;em&gt;modify in place&lt;/em&gt;. Você não acaba com uma cópia modificada do df2; os novos valores aparecerão dentro do df2. É preciso fazer isso de forma consciente e segura, para não sobrescrever informações, por isso, recomendamos trabalhar com cópias do objeto original (df2 ao invés de df).&lt;/p&gt;
&lt;p&gt;A mesma técnica funcionará se você armazenar seus dados em um vetor, matriz, array, lista ou data frame. Basta descrever os valores que você deseja alterar com o sistema de notação de R e, em seguida, atribuir esses valores com o operador de atribuição de R &lt;code&gt;&amp;lt;-&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;exercícios-3&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Considere o vetor abaixo. Atribua um novo valor na posição 3 deste vetor. É possível atribuir uma string no lugar de um número?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vetor_x&amp;lt;- c(10,30,50,10)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;modificando-com-testes-lógicos&#34;&gt;Modificando com testes lógicos&lt;/h3&gt;
&lt;p&gt;E se você precisa saber um valor específico e precise que o R te retorne a linha em que este valor está? Por que no caso anterior você sabia as linhas que você queria mudar, mas e quando o seu objeto é grande e você não sabe exatamente onde a informação se encontra? Como fazer?&lt;/p&gt;
&lt;p&gt;Lembra do sistema de notação do R que permitia valores lógicos? Você pode deixar um teste lógico criar um vetor de TRUEs e FALSEs para você.&lt;/p&gt;
&lt;p&gt;Um teste lógico é uma comparação como “um é menor que dois?”, &lt;code&gt;1 &amp;lt; 2&lt;/code&gt; ou “três é maior que quatro?”, &lt;code&gt;3 &amp;gt; 4&lt;/code&gt;. O R fornece sete operadores lógicos que você pode usar para fazer comparações, e eles podem ser vistos na tabela abaixo.&lt;/p&gt;
&lt;p&gt;Cada operador retorna TRUE ou FALSE. Se você usar um operador para comparar vetores, o R fará comparações entre elementos - assim como faz com os operadores aritméticos:&lt;/p&gt;
&lt;p&gt;Table: Table 1: Operadores lógicos&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operador&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sintaxe&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Teste&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a &amp;gt; b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é maior que b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a &amp;gt;= b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é maior ou igual a b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a &amp;lt; b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é menor que b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a &amp;lt;= b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é menor ou igual a b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;==&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a == b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é igual a b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;!=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a != b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a é diferente de b?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%in%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a %in% c(a, b, c)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a está contido em algum dos elementos de b?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 &amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 &amp;gt; c(0, 1, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(1, 2, 3) == c(3, 2, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O operador &lt;code&gt;%in%&lt;/code&gt; é o único que não executa normalmente o elemento inteiro. &lt;code&gt;%in%&lt;/code&gt; testa se os valores do lado esquerdo estão no vetor do lado direito. Se você fornecer um vetor no lado esquerdo, este operador não irá emparelhar os valores à esquerda com os valores à direita e, em seguida, fará testes de elementos. Em vez disso, ele testará independentemente se cada valor à esquerda está em algum lugar do vetor à direita:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 %in% c(3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(1, 2) %in% c(3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(1, 2, 3) %in% c(3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(1, 2, 3, 4) %in% c(3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE  TRUE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe que você testa a igualdade com um sinal de igual duplo, &lt;code&gt;==&lt;/code&gt;, e não um único sinal de igual, &lt;code&gt;=&lt;/code&gt;, que é outra maneira de escrever &lt;code&gt;&amp;lt;-&lt;/code&gt;. É fácil esquecer e usar &lt;code&gt;a = b&lt;/code&gt; para testar se a é igual a b. Infelizmente, você terá uma surpresa desagradável. O R não retornará &lt;code&gt;TRUE&lt;/code&gt; ou &lt;code&gt;FALSE&lt;/code&gt;, porque não terá que: a será igual a b, porque você acabou de executar o equivalente a &lt;code&gt;a &amp;lt;- b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Você pode comparar quaisquer dois objetos no R com um operador lógico; no entanto, os operadores lógicos fazem mais sentido se você comparar dois objetos do mesmo tipo de dados. Se você comparar objetos de diferentes tipos de dados, o R usará suas regras de coerção para forçar os objetos ao mesmo tipo antes de fazer a comparação.&lt;/p&gt;
&lt;h4 id=&#34;exercícios-4&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Extraia a coluna &lt;code&gt;V2010&lt;/code&gt; do &lt;code&gt;df2&lt;/code&gt; e teste os valores igual a &amp;lsquo;Branca&amp;rsquo;. Além disso conte quantas linhas são iguais a &amp;lsquo;Branca&amp;rsquo;. Dica: use a função sum() para fazer a contagem.&lt;/p&gt;
&lt;p&gt;Para resumir, você pode usar um teste lógico para selecionar valores dentro de um objeto.&lt;/p&gt;
&lt;p&gt;O subconjunto lógico é uma técnica poderosa porque permite identificar, extrair e modificar rapidamente valores individuais em seu conjunto de dados. Ao trabalhar com subconjuntos lógicos, você não precisa saber onde existe um valor em seu conjunto de dados. Você só precisa saber como descrever o valor com um teste lógico.&lt;/p&gt;
&lt;p&gt;Além dos operadores lógicos, também temos os operadores booleanos, os operadores booleanos são como &lt;code&gt;&amp;amp;&lt;/code&gt; ou &lt;code&gt;|&lt;/code&gt;. Eles reduzem os resultados de vários testes lógicos em um único &lt;code&gt;TRUE&lt;/code&gt; ou &lt;code&gt;FALSE&lt;/code&gt;. Os operadores e seus testes podem ser vistos na tabela abaixo.&lt;/p&gt;
&lt;p&gt;Table: Table 2: Operadores booleanos&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operador&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sintaxe&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Teste&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cond1 &amp;amp; cond2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cond1 e cond2 são simultâneamente verdadeiros?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;|&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cond1 | cond2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cond1 ou cond2 é verdadeiro?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;xor&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;xor(cond1, cond2)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Apenas cond1 ou apenas cond2 é verdadeiro?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;!&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;!cond1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Inverta o resultado de cond1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;any&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;any(cond1, cond2, cond3, &amp;hellip;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Algum resultado em c(cond1, cond2, cond3, &amp;hellip;) é verdadeiro?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;all&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;all(cond1, cond2, cond3, &amp;hellip;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Todos os resultados em c(cond1, cond2, cond3, &amp;hellip;) são verdadeiros?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Para usar um operador booleano, coloque-o entre dois testes lógicos completos. O R irá executar cada teste lógico e, em seguida, usar o operador booleano para combinar os resultados em um único &lt;code&gt;TRUE&lt;/code&gt; ou &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Quando usados com vetores, os operadores booleanos seguirão a mesma execução elementar que os operadores aritméticos e lógicos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a &amp;lt;- c(1, 2, 3)
b &amp;lt;- c(1, 2, 3)
c &amp;lt;- c(1, 2, 4)

a == b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE TRUE TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b == c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a == b &amp;amp; b == c
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  TRUE  TRUE FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Você pode usar um operador booleano para localizar as pessoas de 23 anos e de escolaridade 9 anos de estudo no df2.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2$V2009 == 40 &amp;amp; df2$VD3005 == &amp;quot;8 anos de estudo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##   [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;valores-desconhecidos&#34;&gt;Valores desconhecidos&lt;/h3&gt;
&lt;p&gt;Problemas com informações desconhecidas acontecem com frequência na análise de dados. Normalmente, eles são mais simples: você não sabe um valor porque a medição foi perdida, corrompida ou nunca feita para começar. O R tem uma maneira de ajudá-lo a gerenciar esses valores ausentes.&lt;/p&gt;
&lt;p&gt;O caractere &lt;code&gt;NA&lt;/code&gt; é um símbolo especial em R. Ele significa “não disponível” e pode ser usado como um espaço reservado para informações ausentes. O R tratará &lt;code&gt;NA&lt;/code&gt; exatamente como você deseja que as informações ausentes sejam tratadas. Por exemplo, qual resultado você esperaria se adicionar 1 a uma informação ausente?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1 + NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R retornará uma segunda informação faltante. Não seria correto dizer que 1 + NA = 1 porque há uma boa chance de que o valor ausente não seja zero. Você não tem informações suficientes para determinar o resultado.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;NA == 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Valores ausentes podem ajudá-lo a contornar lacunas em seus conjuntos de dados, mas também podem criar alguns problemas frustrantes. Suponha, por exemplo, que você coletou 1.000 observações e deseja tirar sua média com a função mean(). Se um dos valores for NA, seu resultado será NA:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(NA, 1:50)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] NA  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
## [26] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
## [51] 50
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(c(NA, 1:50))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A maioria das funções R vem com o argumento opcional, &lt;code&gt;na.rm&lt;/code&gt;, que significa &lt;code&gt;NA remove&lt;/code&gt;. o R irá ignorar NAs quando avaliar uma função se você adicionar o argumento &lt;code&gt;na.rm = TRUE&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(c(NA, 1:50), na.rm = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 25.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ocasionalmente, você pode querer identificar os NAs em seu conjunto de dados com um teste lógico, mas isso também cria um problema. Como você faria isso? Se algo for um valor ausente, qualquer teste lógico que o use retornará um valor ausente, até mesmo este teste:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;NA == NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que significa que testes como este não ajudarão você a encontrar valores ausentes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(1, 2, 3, NA) == NA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA NA NA NA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O R fornece uma função especial que pode testar se um valor é um NA. A função é &lt;code&gt;is.na&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;is.na(NA)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vet &amp;lt;- c(1, 2, 3, NA)

is.na(vet)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE FALSE FALSE  TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;exercícios-5&#34;&gt;Exercícios&lt;/h4&gt;
&lt;p&gt;Conte o número de NAs na coluna &lt;code&gt;VD4016&lt;/code&gt; do data frame &lt;code&gt;df2&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;revisão&#34;&gt;Revisão&lt;/h2&gt;
&lt;p&gt;Na aula de hoje falamos sobre como importar dados, exportar dados, manipulação e diferentes notações para identificação de informações e modificação.&lt;/p&gt;
&lt;p&gt;Para selecionar os valores em um data frame, ou em outro objeto R, aprendemos a usar a notação &lt;code&gt;data.frame[ , ]&lt;/code&gt; e a partir dessa notação, selecionar diferentes linhas e colunas, usando números inteiros, números negativos, espaços em branco, valores lógicos e nomes.&lt;/p&gt;
&lt;p&gt;Aprendemos com listas e dataframes a seleção pela notação de colchetes duplos &lt;code&gt;[[&lt;/code&gt; e &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Em relação a modificação de valores, aprendemos a modificar os valores no local dentro de um objeto R ao combinar a sintaxe da notação de R com o operador de atribuição, &lt;code&gt;&amp;lt;-&lt;/code&gt;. Isso permite que você atualize seus dados e limpe seus conjuntos de dados.&lt;/p&gt;
&lt;p&gt;Aprendemos diferentes operadores lógicos: &lt;code&gt;&amp;gt;&lt;/code&gt;; &lt;code&gt;&amp;gt;=&lt;/code&gt;; &lt;code&gt;&amp;lt;&lt;/code&gt;; &lt;code&gt;&amp;lt;=&lt;/code&gt;; &lt;code&gt;==&lt;/code&gt;; &lt;code&gt;!=&lt;/code&gt;; &lt;code&gt;%in%&lt;/code&gt; e operadores booleanos: &lt;code&gt;&amp;amp;&lt;/code&gt;; &lt;code&gt;|&lt;/code&gt;; &lt;code&gt;xor&lt;/code&gt;; &lt;code&gt;!&lt;/code&gt;; &lt;code&gt;any&lt;/code&gt;; &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Quando você trabalha com grandes conjuntos de dados, modificar e recuperar valores cria um problema logístico próprio. Como você pode pesquisar os dados para encontrar os valores que deseja modificar ou recuperar? Como um usuário R, você pode fazer isso com subconjuntos lógicos. Crie um teste lógico com operadores lógicos e booleanos e, em seguida, use o teste como um índice na notação de colchetes de R. O R retornará os valores que você está procurando, mesmo se você não souber onde eles estão.&lt;/p&gt;
&lt;h3 id=&#34;exercícios-6&#34;&gt;Exercícios&lt;/h3&gt;
&lt;p&gt;Para os próximos exercícios considere o data frame da pnad que estamos usando nas aulas.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Como você selecionaria o mesmo valor abaixo, mas usando inteiros negativos na seleção?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2[1,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Homem&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qual a diferença em usar em selecionar determinada informação em um data frame usando colchetes duplos &lt;code&gt;[[]]&lt;/code&gt; e usando colchetes simples? Observe o exemplo abaixo para responder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df2[[&#39;Ano&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    [1] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [15] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [29] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [43] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [57] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [71] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [85] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##   [99] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##  [113] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
##  [127] 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021 2021
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df[&#39;Ano&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Ano
## 1    2021
## 2    2021
## 3    2021
## 4    2021
## 5    2021
## 6    2021
## 7    2021
## 8    2021
## 9    2021
....
Saída truncada para visualização
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Considere o data frame abaixo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sala &amp;lt;- data.frame(
  id = c(1, 2, 3, 4, 5, 6),
  idade = c(20, 25, 30, 35, 40, 45),
  nome = c(&amp;quot;Fulano&amp;quot;, &amp;quot;Cicrano&amp;quot;, &amp;quot;Beltrano&amp;quot;, &amp;quot;Herculano&amp;quot;, &amp;quot;Mariano&amp;quot;, &amp;quot;Carrano&amp;quot;),
  sexo = &amp;quot;Masculino&amp;quot;,
  origem = c(&amp;quot;Campinas&amp;quot;, &amp;quot;Barueri&amp;quot;, &amp;quot;Monte Verde&amp;quot;, &amp;quot;Rio de Janeiro&amp;quot;, &amp;quot;Natal&amp;quot;, &amp;quot;Belo Horizonte&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Modifique o nome de &amp;lsquo;Mariano&amp;rsquo; por &amp;lsquo;Mariana&amp;rsquo;. E altere a variável sexo para que seja um vetor que altere o valor para &amp;lsquo;Feminino&amp;rsquo; na posição em que o nome foi trocado para Mariana.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Considere o mesmo data frame sala construído no exercício anterior. Usando testes lógicos e operadores Booleanos. Verifique:&lt;/p&gt;
&lt;p&gt;a. se existe algum aluno que seja do sexo Masculino e seja de São Paulo.&lt;br&gt;
b. se existe algum aluno que tem idade maior ou iguam a 20 anos ou que seja de Campinas.&lt;br&gt;
c. se existe alguém com o nome Beltrano.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agora considere o seguinte data frame e, usando as funções apropriadas ensinadas na aula de hoje, responda:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cadastro &amp;lt;- data.frame(
  id = c(10, 105, 299, 645, 7907, 8660, 4992, 630),
  idade = c(20, 25, 30, 35, 40, 45, 60, 53),
  nome = c(&amp;quot;Thais&amp;quot;, NA, &amp;quot;Guilherme&amp;quot;, &amp;quot;Betânia&amp;quot;, &amp;quot;Ana Lucia&amp;quot;, NA, NA, &amp;quot;Pâmela&amp;quot;),
  sexo = c(&amp;quot;Feminino&amp;quot;, &amp;quot;Masculino&amp;quot;,&amp;quot;Masculino&amp;quot;, NA ,NA, &amp;quot;Feminino&amp;quot;, &amp;quot;Masculino&amp;quot;, &amp;quot;Feminino&amp;quot;),
  origem = c(&amp;quot;Campinas&amp;quot;, NA, &amp;quot;Monte Verde&amp;quot;, &amp;quot;Rio de Janeiro&amp;quot;, NA, &amp;quot;Belo Horizonte&amp;quot;,&amp;quot;São Paulo&amp;quot;,
             &amp;quot;Rio de Janeiro&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Quantos NAs existe na coluna nome?&lt;/li&gt;
&lt;li&gt;Quantos NAs existe na coluna sexo?&lt;/li&gt;
&lt;li&gt;Quantos NAs existe na coluna origem?&lt;/li&gt;
&lt;li&gt;Substitua os NAs na coluna sexo pelo valor &amp;lsquo;Feminino&amp;rsquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Salve o data frame &amp;lsquo;cadastro&amp;rsquo; do exercicio anterior em um arquivo &lt;code&gt;.csv&lt;/code&gt;. Como você faria isso? Quais os argumentos que devem ser usados?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
